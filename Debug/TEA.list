
TEA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007530  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007640  08007640  00017640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007960  08007960  000209c0  2**0
                  CONTENTS
  4 .ARM          00000008  08007960  08007960  00017960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007968  08007968  000209c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007970  08007970  00017970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c0  20000000  08007974  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200009c0  08008334  000209c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b70  08008334  00020b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa43  00000000  00000000  000209e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002277  00000000  00000000  0003042c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a0  00000000  00000000  000326a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  00033748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015e18  00000000  00000000  000346f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b71f  00000000  00000000  0004a508  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076987  00000000  00000000  00055c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc5ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005894  00000000  00000000  000cc62c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009c0 	.word	0x200009c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007628 	.word	0x08007628

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009c4 	.word	0x200009c4
 800014c:	08007628 	.word	0x08007628

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b974 	b.w	8001244 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	468c      	mov	ip, r1
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	9e08      	ldr	r6, [sp, #32]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d14b      	bne.n	800101a <__udivmoddi4+0xa6>
 8000f82:	428a      	cmp	r2, r1
 8000f84:	4615      	mov	r5, r2
 8000f86:	d967      	bls.n	8001058 <__udivmoddi4+0xe4>
 8000f88:	fab2 f282 	clz	r2, r2
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0720 	rsb	r7, r2, #32
 8000f92:	fa01 f302 	lsl.w	r3, r1, r2
 8000f96:	fa20 f707 	lsr.w	r7, r0, r7
 8000f9a:	4095      	lsls	r5, r2
 8000f9c:	ea47 0c03 	orr.w	ip, r7, r3
 8000fa0:	4094      	lsls	r4, r2
 8000fa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fa6:	fbbc f7fe 	udiv	r7, ip, lr
 8000faa:	fa1f f885 	uxth.w	r8, r5
 8000fae:	fb0e c317 	mls	r3, lr, r7, ip
 8000fb2:	fb07 f908 	mul.w	r9, r7, r8
 8000fb6:	0c21      	lsrs	r1, r4, #16
 8000fb8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000fbc:	4599      	cmp	r9, r3
 8000fbe:	d909      	bls.n	8000fd4 <__udivmoddi4+0x60>
 8000fc0:	18eb      	adds	r3, r5, r3
 8000fc2:	f107 31ff 	add.w	r1, r7, #4294967295
 8000fc6:	f080 811c 	bcs.w	8001202 <__udivmoddi4+0x28e>
 8000fca:	4599      	cmp	r9, r3
 8000fcc:	f240 8119 	bls.w	8001202 <__udivmoddi4+0x28e>
 8000fd0:	3f02      	subs	r7, #2
 8000fd2:	442b      	add	r3, r5
 8000fd4:	eba3 0309 	sub.w	r3, r3, r9
 8000fd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fe0:	fb00 f108 	mul.w	r1, r0, r8
 8000fe4:	b2a4      	uxth	r4, r4
 8000fe6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fea:	42a1      	cmp	r1, r4
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0x8e>
 8000fee:	192c      	adds	r4, r5, r4
 8000ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ff4:	f080 8107 	bcs.w	8001206 <__udivmoddi4+0x292>
 8000ff8:	42a1      	cmp	r1, r4
 8000ffa:	f240 8104 	bls.w	8001206 <__udivmoddi4+0x292>
 8000ffe:	3802      	subs	r0, #2
 8001000:	442c      	add	r4, r5
 8001002:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001006:	2700      	movs	r7, #0
 8001008:	1a64      	subs	r4, r4, r1
 800100a:	b11e      	cbz	r6, 8001014 <__udivmoddi4+0xa0>
 800100c:	2300      	movs	r3, #0
 800100e:	40d4      	lsrs	r4, r2
 8001010:	e9c6 4300 	strd	r4, r3, [r6]
 8001014:	4639      	mov	r1, r7
 8001016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101a:	428b      	cmp	r3, r1
 800101c:	d909      	bls.n	8001032 <__udivmoddi4+0xbe>
 800101e:	2e00      	cmp	r6, #0
 8001020:	f000 80ec 	beq.w	80011fc <__udivmoddi4+0x288>
 8001024:	2700      	movs	r7, #0
 8001026:	e9c6 0100 	strd	r0, r1, [r6]
 800102a:	4638      	mov	r0, r7
 800102c:	4639      	mov	r1, r7
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	fab3 f783 	clz	r7, r3
 8001036:	2f00      	cmp	r7, #0
 8001038:	d148      	bne.n	80010cc <__udivmoddi4+0x158>
 800103a:	428b      	cmp	r3, r1
 800103c:	d302      	bcc.n	8001044 <__udivmoddi4+0xd0>
 800103e:	4282      	cmp	r2, r0
 8001040:	f200 80fb 	bhi.w	800123a <__udivmoddi4+0x2c6>
 8001044:	1a84      	subs	r4, r0, r2
 8001046:	eb61 0303 	sbc.w	r3, r1, r3
 800104a:	2001      	movs	r0, #1
 800104c:	469c      	mov	ip, r3
 800104e:	2e00      	cmp	r6, #0
 8001050:	d0e0      	beq.n	8001014 <__udivmoddi4+0xa0>
 8001052:	e9c6 4c00 	strd	r4, ip, [r6]
 8001056:	e7dd      	b.n	8001014 <__udivmoddi4+0xa0>
 8001058:	b902      	cbnz	r2, 800105c <__udivmoddi4+0xe8>
 800105a:	deff      	udf	#255	; 0xff
 800105c:	fab2 f282 	clz	r2, r2
 8001060:	2a00      	cmp	r2, #0
 8001062:	f040 808f 	bne.w	8001184 <__udivmoddi4+0x210>
 8001066:	2701      	movs	r7, #1
 8001068:	1b49      	subs	r1, r1, r5
 800106a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800106e:	fa1f f985 	uxth.w	r9, r5
 8001072:	fbb1 fef8 	udiv	lr, r1, r8
 8001076:	fb08 111e 	mls	r1, r8, lr, r1
 800107a:	fb09 f00e 	mul.w	r0, r9, lr
 800107e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001082:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001086:	4298      	cmp	r0, r3
 8001088:	d907      	bls.n	800109a <__udivmoddi4+0x126>
 800108a:	18eb      	adds	r3, r5, r3
 800108c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8001090:	d202      	bcs.n	8001098 <__udivmoddi4+0x124>
 8001092:	4298      	cmp	r0, r3
 8001094:	f200 80cd 	bhi.w	8001232 <__udivmoddi4+0x2be>
 8001098:	468e      	mov	lr, r1
 800109a:	1a1b      	subs	r3, r3, r0
 800109c:	fbb3 f0f8 	udiv	r0, r3, r8
 80010a0:	fb08 3310 	mls	r3, r8, r0, r3
 80010a4:	fb09 f900 	mul.w	r9, r9, r0
 80010a8:	b2a4      	uxth	r4, r4
 80010aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010ae:	45a1      	cmp	r9, r4
 80010b0:	d907      	bls.n	80010c2 <__udivmoddi4+0x14e>
 80010b2:	192c      	adds	r4, r5, r4
 80010b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80010b8:	d202      	bcs.n	80010c0 <__udivmoddi4+0x14c>
 80010ba:	45a1      	cmp	r9, r4
 80010bc:	f200 80b6 	bhi.w	800122c <__udivmoddi4+0x2b8>
 80010c0:	4618      	mov	r0, r3
 80010c2:	eba4 0409 	sub.w	r4, r4, r9
 80010c6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80010ca:	e79e      	b.n	800100a <__udivmoddi4+0x96>
 80010cc:	f1c7 0520 	rsb	r5, r7, #32
 80010d0:	40bb      	lsls	r3, r7
 80010d2:	fa22 fc05 	lsr.w	ip, r2, r5
 80010d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010da:	fa21 f405 	lsr.w	r4, r1, r5
 80010de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010e2:	fbb4 f9fe 	udiv	r9, r4, lr
 80010e6:	fa1f f88c 	uxth.w	r8, ip
 80010ea:	fb0e 4419 	mls	r4, lr, r9, r4
 80010ee:	fa20 f305 	lsr.w	r3, r0, r5
 80010f2:	40b9      	lsls	r1, r7
 80010f4:	fb09 fa08 	mul.w	sl, r9, r8
 80010f8:	4319      	orrs	r1, r3
 80010fa:	0c0b      	lsrs	r3, r1, #16
 80010fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001100:	45a2      	cmp	sl, r4
 8001102:	fa02 f207 	lsl.w	r2, r2, r7
 8001106:	fa00 f307 	lsl.w	r3, r0, r7
 800110a:	d90b      	bls.n	8001124 <__udivmoddi4+0x1b0>
 800110c:	eb1c 0404 	adds.w	r4, ip, r4
 8001110:	f109 30ff 	add.w	r0, r9, #4294967295
 8001114:	f080 8088 	bcs.w	8001228 <__udivmoddi4+0x2b4>
 8001118:	45a2      	cmp	sl, r4
 800111a:	f240 8085 	bls.w	8001228 <__udivmoddi4+0x2b4>
 800111e:	f1a9 0902 	sub.w	r9, r9, #2
 8001122:	4464      	add	r4, ip
 8001124:	eba4 040a 	sub.w	r4, r4, sl
 8001128:	fbb4 f0fe 	udiv	r0, r4, lr
 800112c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001130:	fb00 fa08 	mul.w	sl, r0, r8
 8001134:	b289      	uxth	r1, r1
 8001136:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800113a:	45a2      	cmp	sl, r4
 800113c:	d908      	bls.n	8001150 <__udivmoddi4+0x1dc>
 800113e:	eb1c 0404 	adds.w	r4, ip, r4
 8001142:	f100 31ff 	add.w	r1, r0, #4294967295
 8001146:	d26b      	bcs.n	8001220 <__udivmoddi4+0x2ac>
 8001148:	45a2      	cmp	sl, r4
 800114a:	d969      	bls.n	8001220 <__udivmoddi4+0x2ac>
 800114c:	3802      	subs	r0, #2
 800114e:	4464      	add	r4, ip
 8001150:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001154:	fba0 8902 	umull	r8, r9, r0, r2
 8001158:	eba4 040a 	sub.w	r4, r4, sl
 800115c:	454c      	cmp	r4, r9
 800115e:	4641      	mov	r1, r8
 8001160:	46ce      	mov	lr, r9
 8001162:	d354      	bcc.n	800120e <__udivmoddi4+0x29a>
 8001164:	d051      	beq.n	800120a <__udivmoddi4+0x296>
 8001166:	2e00      	cmp	r6, #0
 8001168:	d069      	beq.n	800123e <__udivmoddi4+0x2ca>
 800116a:	1a5a      	subs	r2, r3, r1
 800116c:	eb64 040e 	sbc.w	r4, r4, lr
 8001170:	fa04 f505 	lsl.w	r5, r4, r5
 8001174:	fa22 f307 	lsr.w	r3, r2, r7
 8001178:	40fc      	lsrs	r4, r7
 800117a:	431d      	orrs	r5, r3
 800117c:	e9c6 5400 	strd	r5, r4, [r6]
 8001180:	2700      	movs	r7, #0
 8001182:	e747      	b.n	8001014 <__udivmoddi4+0xa0>
 8001184:	4095      	lsls	r5, r2
 8001186:	f1c2 0320 	rsb	r3, r2, #32
 800118a:	fa21 f003 	lsr.w	r0, r1, r3
 800118e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001192:	fbb0 f7f8 	udiv	r7, r0, r8
 8001196:	fa1f f985 	uxth.w	r9, r5
 800119a:	fb08 0017 	mls	r0, r8, r7, r0
 800119e:	fa24 f303 	lsr.w	r3, r4, r3
 80011a2:	4091      	lsls	r1, r2
 80011a4:	fb07 fc09 	mul.w	ip, r7, r9
 80011a8:	430b      	orrs	r3, r1
 80011aa:	0c19      	lsrs	r1, r3, #16
 80011ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011b0:	458c      	cmp	ip, r1
 80011b2:	fa04 f402 	lsl.w	r4, r4, r2
 80011b6:	d907      	bls.n	80011c8 <__udivmoddi4+0x254>
 80011b8:	1869      	adds	r1, r5, r1
 80011ba:	f107 30ff 	add.w	r0, r7, #4294967295
 80011be:	d231      	bcs.n	8001224 <__udivmoddi4+0x2b0>
 80011c0:	458c      	cmp	ip, r1
 80011c2:	d92f      	bls.n	8001224 <__udivmoddi4+0x2b0>
 80011c4:	3f02      	subs	r7, #2
 80011c6:	4429      	add	r1, r5
 80011c8:	eba1 010c 	sub.w	r1, r1, ip
 80011cc:	fbb1 f0f8 	udiv	r0, r1, r8
 80011d0:	fb08 1c10 	mls	ip, r8, r0, r1
 80011d4:	fb00 fe09 	mul.w	lr, r0, r9
 80011d8:	b299      	uxth	r1, r3
 80011da:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80011de:	458e      	cmp	lr, r1
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x27e>
 80011e2:	1869      	adds	r1, r5, r1
 80011e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80011e8:	d218      	bcs.n	800121c <__udivmoddi4+0x2a8>
 80011ea:	458e      	cmp	lr, r1
 80011ec:	d916      	bls.n	800121c <__udivmoddi4+0x2a8>
 80011ee:	3802      	subs	r0, #2
 80011f0:	4429      	add	r1, r5
 80011f2:	eba1 010e 	sub.w	r1, r1, lr
 80011f6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011fa:	e73a      	b.n	8001072 <__udivmoddi4+0xfe>
 80011fc:	4637      	mov	r7, r6
 80011fe:	4630      	mov	r0, r6
 8001200:	e708      	b.n	8001014 <__udivmoddi4+0xa0>
 8001202:	460f      	mov	r7, r1
 8001204:	e6e6      	b.n	8000fd4 <__udivmoddi4+0x60>
 8001206:	4618      	mov	r0, r3
 8001208:	e6fb      	b.n	8001002 <__udivmoddi4+0x8e>
 800120a:	4543      	cmp	r3, r8
 800120c:	d2ab      	bcs.n	8001166 <__udivmoddi4+0x1f2>
 800120e:	ebb8 0102 	subs.w	r1, r8, r2
 8001212:	eb69 020c 	sbc.w	r2, r9, ip
 8001216:	3801      	subs	r0, #1
 8001218:	4696      	mov	lr, r2
 800121a:	e7a4      	b.n	8001166 <__udivmoddi4+0x1f2>
 800121c:	4618      	mov	r0, r3
 800121e:	e7e8      	b.n	80011f2 <__udivmoddi4+0x27e>
 8001220:	4608      	mov	r0, r1
 8001222:	e795      	b.n	8001150 <__udivmoddi4+0x1dc>
 8001224:	4607      	mov	r7, r0
 8001226:	e7cf      	b.n	80011c8 <__udivmoddi4+0x254>
 8001228:	4681      	mov	r9, r0
 800122a:	e77b      	b.n	8001124 <__udivmoddi4+0x1b0>
 800122c:	3802      	subs	r0, #2
 800122e:	442c      	add	r4, r5
 8001230:	e747      	b.n	80010c2 <__udivmoddi4+0x14e>
 8001232:	f1ae 0e02 	sub.w	lr, lr, #2
 8001236:	442b      	add	r3, r5
 8001238:	e72f      	b.n	800109a <__udivmoddi4+0x126>
 800123a:	4638      	mov	r0, r7
 800123c:	e707      	b.n	800104e <__udivmoddi4+0xda>
 800123e:	4637      	mov	r7, r6
 8001240:	e6e8      	b.n	8001014 <__udivmoddi4+0xa0>
 8001242:	bf00      	nop

08001244 <__aeabi_idiv0>:
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <DWT_Delay_Init+0x58>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <DWT_Delay_Init+0x58>)
 8001252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001256:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <DWT_Delay_Init+0x58>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <DWT_Delay_Init+0x58>)
 800125e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001262:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <DWT_Delay_Init+0x5c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <DWT_Delay_Init+0x5c>)
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <DWT_Delay_Init+0x5c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <DWT_Delay_Init+0x5c>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <DWT_Delay_Init+0x5c>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001282:	bf00      	nop
     __ASM volatile ("NOP");
 8001284:	bf00      	nop
  __ASM volatile ("NOP");
 8001286:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <DWT_Delay_Init+0x5c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001290:	2300      	movs	r3, #0
 8001292:	e000      	b.n	8001296 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001294:	2301      	movs	r3, #1
  }
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000edf0 	.word	0xe000edf0
 80012a4:	e0001000 	.word	0xe0001000

080012a8 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <DWT_Delay_us+0x3c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80012b6:	f001 fd25 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <DWT_Delay_us+0x40>)
 80012be:	fba3 2302 	umull	r2, r3, r3, r2
 80012c2:	0c9b      	lsrs	r3, r3, #18
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80012cc:	bf00      	nop
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <DWT_Delay_us+0x3c>)
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad2      	subs	r2, r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d3f8      	bcc.n	80012ce <DWT_Delay_us+0x26>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	e0001000 	.word	0xe0001000
 80012e8:	431bde83 	.word	0x431bde83

080012ec <gpio_set_input>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
GPIO_InitTypeDef GPIO_InitStruct;

void gpio_set_input (void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <gpio_set_input+0x24>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <gpio_set_input+0x24>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <gpio_set_input+0x24>)
 80012fe:	2201      	movs	r2, #1
 8001300:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	4903      	ldr	r1, [pc, #12]	; (8001310 <gpio_set_input+0x24>)
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <gpio_set_input+0x28>)
 8001306:	f000 fe67 	bl	8001fd8 <HAL_GPIO_Init>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000ab4 	.word	0x20000ab4
 8001314:	40010800 	.word	0x40010800

08001318 <gpio_set_output>:


void gpio_set_output (void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <gpio_set_output+0x28>)
 800131e:	2202      	movs	r2, #2
 8001320:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <gpio_set_output+0x28>)
 8001324:	2201      	movs	r2, #1
 8001326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <gpio_set_output+0x28>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <gpio_set_output+0x28>)
 8001330:	2202      	movs	r2, #2
 8001332:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	4902      	ldr	r1, [pc, #8]	; (8001340 <gpio_set_output+0x28>)
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <gpio_set_output+0x2c>)
 8001338:	f000 fe4e 	bl	8001fd8 <HAL_GPIO_Init>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000ab4 	.word	0x20000ab4
 8001344:	40010800 	.word	0x40010800

08001348 <ds18b20_init>:
uint16_t temp;
float temperature;


uint8_t ds18b20_init (void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	gpio_set_output ();   // set the pin as output
 800134c:	f7ff ffe4 	bl	8001318 <gpio_set_output>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin low
 8001350:	2200      	movs	r2, #0
 8001352:	2102      	movs	r1, #2
 8001354:	480f      	ldr	r0, [pc, #60]	; (8001394 <ds18b20_init+0x4c>)
 8001356:	f000 ffb0 	bl	80022ba <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 800135a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800135e:	f7ff ffa3 	bl	80012a8 <DWT_Delay_us>

	gpio_set_input ();    // set the pin as input
 8001362:	f7ff ffc3 	bl	80012ec <gpio_set_input>
	DWT_Delay_us (80);    // delay according to datasheet
 8001366:	2050      	movs	r0, #80	; 0x50
 8001368:	f7ff ff9e 	bl	80012a8 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))    // if the pin is low i.e the presence pulse is there
 800136c:	2102      	movs	r1, #2
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <ds18b20_init+0x4c>)
 8001370:	f000 ff8c 	bl	800228c <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <ds18b20_init+0x3e>
	{
		DWT_Delay_us (400);  // wait for 400 us
 800137a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800137e:	f7ff ff93 	bl	80012a8 <DWT_Delay_us>
		return 0;
 8001382:	2300      	movs	r3, #0
 8001384:	e004      	b.n	8001390 <ds18b20_init+0x48>
	}

	else
	{
		DWT_Delay_us (400);
 8001386:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800138a:	f7ff ff8d 	bl	80012a8 <DWT_Delay_us>
		return 1;
 800138e:	2301      	movs	r3, #1
	}
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010800 	.word	0x40010800

08001398 <write>:

void write (uint8_t data)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	gpio_set_output ();   // set as output
 80013a2:	f7ff ffb9 	bl	8001318 <gpio_set_output>

	for (int i=0; i<8; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e026      	b.n	80013fa <write+0x62>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	fa42 f303 	asr.w	r3, r2, r3
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00f      	beq.n	80013dc <write+0x44>
		{
			// write 1

			gpio_set_output ();  // set as output
 80013bc:	f7ff ffac 	bl	8001318 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin LOW
 80013c0:	2200      	movs	r2, #0
 80013c2:	2102      	movs	r1, #2
 80013c4:	4810      	ldr	r0, [pc, #64]	; (8001408 <write+0x70>)
 80013c6:	f000 ff78 	bl	80022ba <HAL_GPIO_WritePin>
			DWT_Delay_us (1);  // wait for  us
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff ff6c 	bl	80012a8 <DWT_Delay_us>

			gpio_set_input ();  // set as input
 80013d0:	f7ff ff8c 	bl	80012ec <gpio_set_input>
			DWT_Delay_us (60);  // wait for 60 us
 80013d4:	203c      	movs	r0, #60	; 0x3c
 80013d6:	f7ff ff67 	bl	80012a8 <DWT_Delay_us>
 80013da:	e00b      	b.n	80013f4 <write+0x5c>

		else  // if the bit is low
		{
			// write 0

			gpio_set_output ();
 80013dc:	f7ff ff9c 	bl	8001318 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin LOW
 80013e0:	2200      	movs	r2, #0
 80013e2:	2102      	movs	r1, #2
 80013e4:	4808      	ldr	r0, [pc, #32]	; (8001408 <write+0x70>)
 80013e6:	f000 ff68 	bl	80022ba <HAL_GPIO_WritePin>
			DWT_Delay_us (60);  // wait for 60 us
 80013ea:	203c      	movs	r0, #60	; 0x3c
 80013ec:	f7ff ff5c 	bl	80012a8 <DWT_Delay_us>

			gpio_set_input ();
 80013f0:	f7ff ff7c 	bl	80012ec <gpio_set_input>
	for (int i=0; i<8; i++)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2b07      	cmp	r3, #7
 80013fe:	ddd5      	ble.n	80013ac <write+0x14>
		}
	}
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40010800 	.word	0x40010800

0800140c <read>:


uint8_t read (void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001412:	2300      	movs	r3, #0
 8001414:	71fb      	strb	r3, [r7, #7]
	gpio_set_input ();
 8001416:	f7ff ff69 	bl	80012ec <gpio_set_input>

	for (int i=0;i<8;i++)
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	e022      	b.n	8001466 <read+0x5a>
	{
		gpio_set_output ();   // set as output
 8001420:	f7ff ff7a 	bl	8001318 <gpio_set_output>

		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the data pin LOW
 8001424:	2200      	movs	r2, #0
 8001426:	2102      	movs	r1, #2
 8001428:	4813      	ldr	r0, [pc, #76]	; (8001478 <read+0x6c>)
 800142a:	f000 ff46 	bl	80022ba <HAL_GPIO_WritePin>
		DWT_Delay_us (2);  // wait for 2 us
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff ff3a 	bl	80012a8 <DWT_Delay_us>

		gpio_set_input ();  // set as input
 8001434:	f7ff ff5a 	bl	80012ec <gpio_set_input>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))  // if the pin is HIGH
 8001438:	2102      	movs	r1, #2
 800143a:	480f      	ldr	r0, [pc, #60]	; (8001478 <read+0x6c>)
 800143c:	f000 ff26 	bl	800228c <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <read+0x4e>
		{
			value |= 1<<i;  // read = 1
 8001446:	2201      	movs	r2, #1
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b25a      	sxtb	r2, r3
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4313      	orrs	r3, r2
 8001456:	b25b      	sxtb	r3, r3
 8001458:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (60);  // wait for 60 us
 800145a:	203c      	movs	r0, #60	; 0x3c
 800145c:	f7ff ff24 	bl	80012a8 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b07      	cmp	r3, #7
 800146a:	ddd9      	ble.n	8001420 <read+0x14>
	}
	return value;
 800146c:	79fb      	ldrb	r3, [r7, #7]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40010800 	.word	0x40010800

0800147c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800147c:	b598      	push	{r3, r4, r7, lr}
 800147e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001480:	f000 fc76 	bl	8001d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001484:	f000 f872 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001488:	f000 f944 	bl	8001714 <MX_GPIO_Init>
  MX_I2C1_Init();
 800148c:	f000 f8b4 	bl	80015f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001490:	f000 f8e0 	bl	8001654 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001494:	f000 f914 	bl	80016c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8001498:	482b      	ldr	r0, [pc, #172]	; (8001548 <main+0xcc>)
 800149a:	f002 fb91 	bl	8003bc0 <printf>
  printf("** Test finished successfully. ** \n\r");
 800149e:	482b      	ldr	r0, [pc, #172]	; (800154c <main+0xd0>)
 80014a0:	f002 fb8e 	bl	8003bc0 <printf>
  DWT_Delay_Init();
 80014a4:	f7ff fed0 	bl	8001248 <DWT_Delay_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	check = ds18b20_init ();
 80014a8:	f7ff ff4e 	bl	8001348 <ds18b20_init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <main+0xd4>)
 80014b2:	701a      	strb	r2, [r3, #0]
	write (0xCC);  // skip ROM
 80014b4:	20cc      	movs	r0, #204	; 0xcc
 80014b6:	f7ff ff6f 	bl	8001398 <write>
	write (0x44);  // convert t
 80014ba:	2044      	movs	r0, #68	; 0x44
 80014bc:	f7ff ff6c 	bl	8001398 <write>

	HAL_Delay (100);
 80014c0:	2064      	movs	r0, #100	; 0x64
 80014c2:	f000 fc87 	bl	8001dd4 <HAL_Delay>

	ds18b20_init ();
 80014c6:	f7ff ff3f 	bl	8001348 <ds18b20_init>
	write (0xCC);  // skip ROM
 80014ca:	20cc      	movs	r0, #204	; 0xcc
 80014cc:	f7ff ff64 	bl	8001398 <write>
	write (0xBE);  // Read Scratchpad
 80014d0:	20be      	movs	r0, #190	; 0xbe
 80014d2:	f7ff ff61 	bl	8001398 <write>

	temp_l = read();
 80014d6:	f7ff ff99 	bl	800140c <read>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <main+0xd8>)
 80014e0:	701a      	strb	r2, [r3, #0]
	temp_h = read();
 80014e2:	f7ff ff93 	bl	800140c <read>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <main+0xdc>)
 80014ec:	701a      	strb	r2, [r3, #0]
	temp = (temp_h<<8)|temp_l;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <main+0xdc>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <main+0xd8>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b21b      	sxth	r3, r3
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <main+0xe0>)
 8001504:	801a      	strh	r2, [r3, #0]
	temperature = (float)temp/16;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <main+0xe0>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fb72 	bl	8000bf4 <__aeabi_ui2f>
 8001510:	4603      	mov	r3, r0
 8001512:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fc78 	bl	8000e0c <__aeabi_fdiv>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <main+0xe4>)
 8001522:	601a      	str	r2, [r3, #0]

	printf("%f \n\r", temperature);
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <main+0xe4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ff7d 	bl	8000428 <__aeabi_f2d>
 800152e:	4603      	mov	r3, r0
 8001530:	460c      	mov	r4, r1
 8001532:	461a      	mov	r2, r3
 8001534:	4623      	mov	r3, r4
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <main+0xe8>)
 8001538:	f002 fb42 	bl	8003bc0 <printf>
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800153c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <main+0xec>)
 8001542:	f000 fed2 	bl	80022ea <HAL_GPIO_TogglePin>
	check = ds18b20_init ();
 8001546:	e7af      	b.n	80014a8 <main+0x2c>
 8001548:	08007640 	.word	0x08007640
 800154c:	08007690 	.word	0x08007690
 8001550:	20000000 	.word	0x20000000
 8001554:	20000a68 	.word	0x20000a68
 8001558:	20000a70 	.word	0x20000a70
 800155c:	20000a6a 	.word	0x20000a6a
 8001560:	20000a6c 	.word	0x20000a6c
 8001564:	080076b8 	.word	0x080076b8
 8001568:	40011000 	.word	0x40011000

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b090      	sub	sp, #64	; 0x40
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	2228      	movs	r2, #40	; 0x28
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fb0c 	bl	8003b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159c:	2301      	movs	r3, #1
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 ffd9 	bl	800256c <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015c0:	f000 f94e 	bl	8001860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c8:	2302      	movs	r3, #2
 80015ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2102      	movs	r1, #2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fa43 	bl	8002a6c <HAL_RCC_ClockConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015ec:	f000 f938 	bl	8001860 <Error_Handler>
  }
}
 80015f0:	bf00      	nop
 80015f2:	3740      	adds	r7, #64	; 0x40
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_I2C1_Init+0x50>)
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <MX_I2C1_Init+0x54>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_I2C1_Init+0x50>)
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <MX_I2C1_Init+0x58>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_I2C1_Init+0x50>)
 8001616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_I2C1_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_I2C1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_I2C1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_I2C1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_I2C1_Init+0x50>)
 8001636:	f000 fe71 	bl	800231c <HAL_I2C_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001640:	f000 f90e 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000a14 	.word	0x20000a14
 800164c:	40005400 	.word	0x40005400
 8001650:	000186a0 	.word	0x000186a0

08001654 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_SPI1_Init+0x64>)
 800165a:	4a18      	ldr	r2, [pc, #96]	; (80016bc <MX_SPI1_Init+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001660:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001680:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001684:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_SPI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_SPI1_Init+0x64>)
 80016a0:	220a      	movs	r2, #10
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_SPI1_Init+0x64>)
 80016a6:	f001 fbad 	bl	8002e04 <HAL_SPI_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016b0:	f000 f8d6 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000ac4 	.word	0x20000ac4
 80016bc:	40013000 	.word	0x40013000

080016c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_USART1_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016f8:	f001 fddc 	bl	80032b4 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f8ad 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000a74 	.word	0x20000a74
 8001710:	40013800 	.word	0x40013800

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	4b37      	ldr	r3, [pc, #220]	; (8001808 <MX_GPIO_Init+0xf4>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a36      	ldr	r2, [pc, #216]	; (8001808 <MX_GPIO_Init+0xf4>)
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <MX_GPIO_Init+0xf4>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <MX_GPIO_Init+0xf4>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a30      	ldr	r2, [pc, #192]	; (8001808 <MX_GPIO_Init+0xf4>)
 8001746:	f043 0320 	orr.w	r3, r3, #32
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <MX_GPIO_Init+0xf4>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <MX_GPIO_Init+0xf4>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <MX_GPIO_Init+0xf4>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_GPIO_Init+0xf4>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <MX_GPIO_Init+0xf4>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a24      	ldr	r2, [pc, #144]	; (8001808 <MX_GPIO_Init+0xf4>)
 8001776:	f043 0308 	orr.w	r3, r3, #8
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <MX_GPIO_Init+0xf4>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178e:	481f      	ldr	r0, [pc, #124]	; (800180c <MX_GPIO_Init+0xf8>)
 8001790:	f000 fd93 	bl	80022ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	2102      	movs	r1, #2
 8001798:	481d      	ldr	r0, [pc, #116]	; (8001810 <MX_GPIO_Init+0xfc>)
 800179a:	f000 fd8e 	bl	80022ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	210b      	movs	r1, #11
 80017a2:	481c      	ldr	r0, [pc, #112]	; (8001814 <MX_GPIO_Init+0x100>)
 80017a4:	f000 fd89 	bl	80022ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	4619      	mov	r1, r3
 80017c0:	4812      	ldr	r0, [pc, #72]	; (800180c <MX_GPIO_Init+0xf8>)
 80017c2:	f000 fc09 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017c6:	2302      	movs	r3, #2
 80017c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2302      	movs	r3, #2
 80017d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	4619      	mov	r1, r3
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <MX_GPIO_Init+0xfc>)
 80017de:	f000 fbfb 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80017e2:	230b      	movs	r3, #11
 80017e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	4806      	ldr	r0, [pc, #24]	; (8001814 <MX_GPIO_Init+0x100>)
 80017fa:	f000 fbed 	bl	8001fd8 <HAL_GPIO_Init>

}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	40011000 	.word	0x40011000
 8001810:	40010800 	.word	0x40010800
 8001814:	40010c00 	.word	0x40010c00

08001818 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001820:	1d39      	adds	r1, r7, #4
 8001822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001826:	2201      	movs	r2, #1
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <__io_putchar+0x20>)
 800182a:	f001 fd90 	bl	800334e <HAL_UART_Transmit>
  return ch;
 800182e:	687b      	ldr	r3, [r7, #4]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000a74 	.word	0x20000a74

0800183c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800184e:	f000 faa5 	bl	8001d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40012c00 	.word	0x40012c00

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_MspInit+0x5c>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_MspInit+0x5c>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6193      	str	r3, [r2, #24]
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_MspInit+0x5c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_MspInit+0x5c>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_MspInit+0x5c>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_MspInit+0x5c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_MspInit+0x60>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_MspInit+0x60>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000

080018d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a15      	ldr	r2, [pc, #84]	; (8001940 <HAL_I2C_MspInit+0x70>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d123      	bne.n	8001938 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_I2C_MspInit+0x74>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a13      	ldr	r2, [pc, #76]	; (8001944 <HAL_I2C_MspInit+0x74>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_I2C_MspInit+0x74>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001908:	23c0      	movs	r3, #192	; 0xc0
 800190a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190c:	2312      	movs	r3, #18
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	4619      	mov	r1, r3
 800191a:	480b      	ldr	r0, [pc, #44]	; (8001948 <HAL_I2C_MspInit+0x78>)
 800191c:	f000 fb5c 	bl	8001fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_I2C_MspInit+0x74>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_I2C_MspInit+0x74>)
 8001926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800192a:	61d3      	str	r3, [r2, #28]
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_I2C_MspInit+0x74>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40005400 	.word	0x40005400
 8001944:	40021000 	.word	0x40021000
 8001948:	40010c00 	.word	0x40010c00

0800194c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <HAL_SPI_MspInit+0x88>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d12f      	bne.n	80019cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_SPI_MspInit+0x8c>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_SPI_MspInit+0x8c>)
 8001972:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_SPI_MspInit+0x8c>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_SPI_MspInit+0x8c>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <HAL_SPI_MspInit+0x8c>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_SPI_MspInit+0x8c>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800199c:	23b0      	movs	r3, #176	; 0xb0
 800199e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	480b      	ldr	r0, [pc, #44]	; (80019dc <HAL_SPI_MspInit+0x90>)
 80019b0:	f000 fb12 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019b4:	2340      	movs	r3, #64	; 0x40
 80019b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_SPI_MspInit+0x90>)
 80019c8:	f000 fb06 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40013000 	.word	0x40013000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010800 	.word	0x40010800

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_UART_MspInit+0x8c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d131      	bne.n	8001a64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_UART_MspInit+0x90>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	4619      	mov	r1, r3
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <HAL_UART_MspInit+0x94>)
 8001a46:	f000 fac7 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <HAL_UART_MspInit+0x94>)
 8001a60:	f000 faba 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010800 	.word	0x40010800

08001a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	2019      	movs	r0, #25
 8001a8e:	f000 fa78 	bl	8001f82 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001a92:	2019      	movs	r0, #25
 8001a94:	f000 fa91 	bl	8001fba <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_InitTick+0xa0>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_InitTick+0xa0>)
 8001a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_InitTick+0xa0>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ab0:	f107 0210 	add.w	r2, r7, #16
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f001 f954 	bl	8002d68 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ac0:	f001 f93e 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <HAL_InitTick+0xa4>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0c9b      	lsrs	r3, r3, #18
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_InitTick+0xa8>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <HAL_InitTick+0xac>)
 8001adc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_InitTick+0xa8>)
 8001ae0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_InitTick+0xa8>)
 8001ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_InitTick+0xa8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_InitTick+0xa8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001af8:	4809      	ldr	r0, [pc, #36]	; (8001b20 <HAL_InitTick+0xa8>)
 8001afa:	f001 f9e4 	bl	8002ec6 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d104      	bne.n	8001b0e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b04:	4806      	ldr	r0, [pc, #24]	; (8001b20 <HAL_InitTick+0xa8>)
 8001b06:	f001 fa12 	bl	8002f2e <HAL_TIM_Base_Start_IT>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3730      	adds	r7, #48	; 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	431bde83 	.word	0x431bde83
 8001b20:	20000b1c 	.word	0x20000b1c
 8001b24:	40012c00 	.word	0x40012c00

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <HardFault_Handler+0x4>

08001b3a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <MemManage_Handler+0x4>

08001b40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <BusFault_Handler+0x4>

08001b46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <UsageFault_Handler+0x4>

08001b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <TIM1_UP_IRQHandler+0x10>)
 8001b82:	f001 f9f7 	bl	8002f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000b1c 	.word	0x20000b1c

08001b90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e00a      	b.n	8001bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ba2:	f3af 8000 	nop.w
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	b2ca      	uxtb	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf0      	blt.n	8001ba2 <_read+0x12>
	}

return len;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e009      	b.n	8001bf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	60ba      	str	r2, [r7, #8]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fe17 	bl	8001818 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dbf1      	blt.n	8001bdc <_write+0x12>
	}
	return len;
 8001bf8:	687b      	ldr	r3, [r7, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_close>:

int _close(int file)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	return -1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c28:	605a      	str	r2, [r3, #4]
	return 0;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <_isatty>:

int _isatty(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
	return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
	...

08001c64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <_sbrk+0x50>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x16>
		heap_end = &end;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <_sbrk+0x50>)
 8001c76:	4a10      	ldr	r2, [pc, #64]	; (8001cb8 <_sbrk+0x54>)
 8001c78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <_sbrk+0x50>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <_sbrk+0x50>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	466a      	mov	r2, sp
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d907      	bls.n	8001c9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c8e:	f001 fd1b 	bl	80036c8 <__errno>
 8001c92:	4602      	mov	r2, r0
 8001c94:	230c      	movs	r3, #12
 8001c96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	e006      	b.n	8001cac <_sbrk+0x48>
	}

	heap_end += incr;
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <_sbrk+0x50>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a03      	ldr	r2, [pc, #12]	; (8001cb4 <_sbrk+0x50>)
 8001ca8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200009dc 	.word	0x200009dc
 8001cb8:	20000b70 	.word	0x20000b70

08001cbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <SystemInit+0x5c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <SystemInit+0x5c>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <SystemInit+0x5c>)
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4911      	ldr	r1, [pc, #68]	; (8001d18 <SystemInit+0x5c>)
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <SystemInit+0x60>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <SystemInit+0x5c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <SystemInit+0x5c>)
 8001cde:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <SystemInit+0x5c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SystemInit+0x5c>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <SystemInit+0x5c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <SystemInit+0x5c>)
 8001cfa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001cfe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SystemInit+0x5c>)
 8001d02:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d06:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SystemInit+0x64>)
 8001d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	f8ff0000 	.word	0xf8ff0000
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d26:	e003      	b.n	8001d30 <LoopCopyDataInit>

08001d28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d2e:	3104      	adds	r1, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d30:	480a      	ldr	r0, [pc, #40]	; (8001d5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d38:	d3f6      	bcc.n	8001d28 <CopyDataInit>
  ldr r2, =_sbss
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d3c:	e002      	b.n	8001d44 <LoopFillZerobss>

08001d3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d40:	f842 3b04 	str.w	r3, [r2], #4

08001d44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d48:	d3f9      	bcc.n	8001d3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d4a:	f7ff ffb7 	bl	8001cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f001 fcc1 	bl	80036d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d52:	f7ff fb93 	bl	800147c <main>
  bx lr
 8001d56:	4770      	bx	lr
  ldr r3, =_sidata
 8001d58:	08007974 	.word	0x08007974
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d60:	200009c0 	.word	0x200009c0
  ldr r2, =_sbss
 8001d64:	200009c0 	.word	0x200009c0
  ldr r3, = _ebss
 8001d68:	20000b70 	.word	0x20000b70

08001d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC1_2_IRQHandler>
	...

08001d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_Init+0x28>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_Init+0x28>)
 8001d7a:	f043 0310 	orr.w	r3, r3, #16
 8001d7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 f8f3 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff fe76 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8c:	f7ff fd6e 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40022000 	.word	0x40022000

08001d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_IncTick+0x1c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_IncTick+0x20>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <HAL_IncTick+0x20>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	20000b5c 	.word	0x20000b5c

08001dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_GetTick+0x10>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000b5c 	.word	0x20000b5c

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff fff0 	bl	8001dc0 <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_Delay+0x40>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffe0 	bl	8001dc0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000000c 	.word	0x2000000c

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4906      	ldr	r1, [pc, #24]	; (8001eb0 <__NVIC_EnableIRQ+0x34>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	490c      	ldr	r1, [pc, #48]	; (8001f00 <__NVIC_SetPriority+0x4c>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4908      	ldr	r1, [pc, #32]	; (8001f04 <__NVIC_SetPriority+0x50>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3b04      	subs	r3, #4
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	761a      	strb	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e100 	.word	0xe000e100
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f1c3 0307 	rsb	r3, r3, #7
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf28      	it	cs
 8001f26:	2304      	movcs	r3, #4
 8001f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d902      	bls.n	8001f38 <NVIC_EncodePriority+0x30>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3b03      	subs	r3, #3
 8001f36:	e000      	b.n	8001f3a <NVIC_EncodePriority+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	4313      	orrs	r3, r2
         );
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff4f 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff64 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ffb2 	bl	8001f08 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff81 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff57 	bl	8001e7c <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b08b      	sub	sp, #44	; 0x2c
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	e127      	b.n	800223c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fec:	2201      	movs	r2, #1
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	429a      	cmp	r2, r3
 8002006:	f040 8116 	bne.w	8002236 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b12      	cmp	r3, #18
 8002010:	d034      	beq.n	800207c <HAL_GPIO_Init+0xa4>
 8002012:	2b12      	cmp	r3, #18
 8002014:	d80d      	bhi.n	8002032 <HAL_GPIO_Init+0x5a>
 8002016:	2b02      	cmp	r3, #2
 8002018:	d02b      	beq.n	8002072 <HAL_GPIO_Init+0x9a>
 800201a:	2b02      	cmp	r3, #2
 800201c:	d804      	bhi.n	8002028 <HAL_GPIO_Init+0x50>
 800201e:	2b00      	cmp	r3, #0
 8002020:	d031      	beq.n	8002086 <HAL_GPIO_Init+0xae>
 8002022:	2b01      	cmp	r3, #1
 8002024:	d01c      	beq.n	8002060 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002026:	e048      	b.n	80020ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002028:	2b03      	cmp	r3, #3
 800202a:	d043      	beq.n	80020b4 <HAL_GPIO_Init+0xdc>
 800202c:	2b11      	cmp	r3, #17
 800202e:	d01b      	beq.n	8002068 <HAL_GPIO_Init+0x90>
          break;
 8002030:	e043      	b.n	80020ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002032:	4a89      	ldr	r2, [pc, #548]	; (8002258 <HAL_GPIO_Init+0x280>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d026      	beq.n	8002086 <HAL_GPIO_Init+0xae>
 8002038:	4a87      	ldr	r2, [pc, #540]	; (8002258 <HAL_GPIO_Init+0x280>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d806      	bhi.n	800204c <HAL_GPIO_Init+0x74>
 800203e:	4a87      	ldr	r2, [pc, #540]	; (800225c <HAL_GPIO_Init+0x284>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d020      	beq.n	8002086 <HAL_GPIO_Init+0xae>
 8002044:	4a86      	ldr	r2, [pc, #536]	; (8002260 <HAL_GPIO_Init+0x288>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01d      	beq.n	8002086 <HAL_GPIO_Init+0xae>
          break;
 800204a:	e036      	b.n	80020ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800204c:	4a85      	ldr	r2, [pc, #532]	; (8002264 <HAL_GPIO_Init+0x28c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0xae>
 8002052:	4a85      	ldr	r2, [pc, #532]	; (8002268 <HAL_GPIO_Init+0x290>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d016      	beq.n	8002086 <HAL_GPIO_Init+0xae>
 8002058:	4a84      	ldr	r2, [pc, #528]	; (800226c <HAL_GPIO_Init+0x294>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0xae>
          break;
 800205e:	e02c      	b.n	80020ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	623b      	str	r3, [r7, #32]
          break;
 8002066:	e028      	b.n	80020ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	3304      	adds	r3, #4
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e023      	b.n	80020ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	3308      	adds	r3, #8
 8002078:	623b      	str	r3, [r7, #32]
          break;
 800207a:	e01e      	b.n	80020ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	330c      	adds	r3, #12
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	e019      	b.n	80020ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800208e:	2304      	movs	r3, #4
 8002090:	623b      	str	r3, [r7, #32]
          break;
 8002092:	e012      	b.n	80020ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	611a      	str	r2, [r3, #16]
          break;
 80020a6:	e008      	b.n	80020ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a8:	2308      	movs	r3, #8
 80020aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	615a      	str	r2, [r3, #20]
          break;
 80020b2:	e002      	b.n	80020ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
          break;
 80020b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2bff      	cmp	r3, #255	; 0xff
 80020be:	d801      	bhi.n	80020c4 <HAL_GPIO_Init+0xec>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	e001      	b.n	80020c8 <HAL_GPIO_Init+0xf0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3304      	adds	r3, #4
 80020c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2bff      	cmp	r3, #255	; 0xff
 80020ce:	d802      	bhi.n	80020d6 <HAL_GPIO_Init+0xfe>
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x104>
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	3b08      	subs	r3, #8
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	210f      	movs	r1, #15
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	401a      	ands	r2, r3
 80020ee:	6a39      	ldr	r1, [r7, #32]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	431a      	orrs	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8096 	beq.w	8002236 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800210a:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_GPIO_Init+0x298>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_GPIO_Init+0x298>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6193      	str	r3, [r2, #24]
 8002116:	4b56      	ldr	r3, [pc, #344]	; (8002270 <HAL_GPIO_Init+0x298>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002122:	4a54      	ldr	r2, [pc, #336]	; (8002274 <HAL_GPIO_Init+0x29c>)
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_GPIO_Init+0x2a0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_GPIO_Init+0x19e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4a      	ldr	r2, [pc, #296]	; (800227c <HAL_GPIO_Init+0x2a4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00d      	beq.n	8002172 <HAL_GPIO_Init+0x19a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a49      	ldr	r2, [pc, #292]	; (8002280 <HAL_GPIO_Init+0x2a8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <HAL_GPIO_Init+0x196>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a48      	ldr	r2, [pc, #288]	; (8002284 <HAL_GPIO_Init+0x2ac>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_GPIO_Init+0x192>
 8002166:	2303      	movs	r3, #3
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x1a0>
 800216a:	2304      	movs	r3, #4
 800216c:	e004      	b.n	8002178 <HAL_GPIO_Init+0x1a0>
 800216e:	2302      	movs	r3, #2
 8002170:	e002      	b.n	8002178 <HAL_GPIO_Init+0x1a0>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_GPIO_Init+0x1a0>
 8002176:	2300      	movs	r3, #0
 8002178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217a:	f002 0203 	and.w	r2, r2, #3
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	4093      	lsls	r3, r2
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002188:	493a      	ldr	r1, [pc, #232]	; (8002274 <HAL_GPIO_Init+0x29c>)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4938      	ldr	r1, [pc, #224]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
 80021ae:	e006      	b.n	80021be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021b0:	4b35      	ldr	r3, [pc, #212]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4933      	ldr	r1, [pc, #204]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021ca:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	492e      	ldr	r1, [pc, #184]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
 80021d6:	e006      	b.n	80021e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021d8:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	43db      	mvns	r3, r3
 80021e0:	4929      	ldr	r1, [pc, #164]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021f2:	4b25      	ldr	r3, [pc, #148]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	4924      	ldr	r1, [pc, #144]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
 80021fe:	e006      	b.n	800220e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002200:	4b21      	ldr	r3, [pc, #132]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	43db      	mvns	r3, r3
 8002208:	491f      	ldr	r1, [pc, #124]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 800220a:	4013      	ands	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	491a      	ldr	r1, [pc, #104]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	60cb      	str	r3, [r1, #12]
 8002226:	e006      	b.n	8002236 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	43db      	mvns	r3, r3
 8002230:	4915      	ldr	r1, [pc, #84]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 8002232:	4013      	ands	r3, r2
 8002234:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	3301      	adds	r3, #1
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	f47f aed0 	bne.w	8001fec <HAL_GPIO_Init+0x14>
  }
}
 800224c:	bf00      	nop
 800224e:	372c      	adds	r7, #44	; 0x2c
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	10210000 	.word	0x10210000
 800225c:	10110000 	.word	0x10110000
 8002260:	10120000 	.word	0x10120000
 8002264:	10310000 	.word	0x10310000
 8002268:	10320000 	.word	0x10320000
 800226c:	10220000 	.word	0x10220000
 8002270:	40021000 	.word	0x40021000
 8002274:	40010000 	.word	0x40010000
 8002278:	40010800 	.word	0x40010800
 800227c:	40010c00 	.word	0x40010c00
 8002280:	40011000 	.word	0x40011000
 8002284:	40011400 	.word	0x40011400
 8002288:	40010400 	.word	0x40010400

0800228c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	887b      	ldrh	r3, [r7, #2]
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e001      	b.n	80022ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	807b      	strh	r3, [r7, #2]
 80022c6:	4613      	mov	r3, r2
 80022c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ca:	787b      	ldrb	r3, [r7, #1]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022d6:	e003      	b.n	80022e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	041a      	lsls	r2, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	611a      	str	r2, [r3, #16]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002308:	e002      	b.n	8002310 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	611a      	str	r2, [r3, #16]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
	...

0800231c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e10f      	b.n	800254e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fac4 	bl	80018d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002360:	f000 fcda 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8002364:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4a7b      	ldr	r2, [pc, #492]	; (8002558 <HAL_I2C_Init+0x23c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d807      	bhi.n	8002380 <HAL_I2C_Init+0x64>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a7a      	ldr	r2, [pc, #488]	; (800255c <HAL_I2C_Init+0x240>)
 8002374:	4293      	cmp	r3, r2
 8002376:	bf94      	ite	ls
 8002378:	2301      	movls	r3, #1
 800237a:	2300      	movhi	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e006      	b.n	800238e <HAL_I2C_Init+0x72>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a77      	ldr	r2, [pc, #476]	; (8002560 <HAL_I2C_Init+0x244>)
 8002384:	4293      	cmp	r3, r2
 8002386:	bf94      	ite	ls
 8002388:	2301      	movls	r3, #1
 800238a:	2300      	movhi	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0db      	b.n	800254e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a72      	ldr	r2, [pc, #456]	; (8002564 <HAL_I2C_Init+0x248>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9b      	lsrs	r3, r3, #18
 80023a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a64      	ldr	r2, [pc, #400]	; (8002558 <HAL_I2C_Init+0x23c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d802      	bhi.n	80023d0 <HAL_I2C_Init+0xb4>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3301      	adds	r3, #1
 80023ce:	e009      	b.n	80023e4 <HAL_I2C_Init+0xc8>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	4a63      	ldr	r2, [pc, #396]	; (8002568 <HAL_I2C_Init+0x24c>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	3301      	adds	r3, #1
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	430b      	orrs	r3, r1
 80023ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4956      	ldr	r1, [pc, #344]	; (8002558 <HAL_I2C_Init+0x23c>)
 8002400:	428b      	cmp	r3, r1
 8002402:	d80d      	bhi.n	8002420 <HAL_I2C_Init+0x104>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1e59      	subs	r1, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	2b04      	cmp	r3, #4
 800241a:	bf38      	it	cc
 800241c:	2304      	movcc	r3, #4
 800241e:	e04f      	b.n	80024c0 <HAL_I2C_Init+0x1a4>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d111      	bne.n	800244c <HAL_I2C_Init+0x130>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	440b      	add	r3, r1
 8002436:	fbb0 f3f3 	udiv	r3, r0, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e012      	b.n	8002472 <HAL_I2C_Init+0x156>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1e58      	subs	r0, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	0099      	lsls	r1, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Init+0x15e>
 8002476:	2301      	movs	r3, #1
 8002478:	e022      	b.n	80024c0 <HAL_I2C_Init+0x1a4>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10e      	bne.n	80024a0 <HAL_I2C_Init+0x184>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1e58      	subs	r0, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	440b      	add	r3, r1
 8002490:	fbb0 f3f3 	udiv	r3, r0, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249e:	e00f      	b.n	80024c0 <HAL_I2C_Init+0x1a4>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e58      	subs	r0, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	0099      	lsls	r1, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	6809      	ldr	r1, [r1, #0]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6911      	ldr	r1, [r2, #16]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68d2      	ldr	r2, [r2, #12]
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	430b      	orrs	r3, r1
 8002502:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	000186a0 	.word	0x000186a0
 800255c:	001e847f 	.word	0x001e847f
 8002560:	003d08ff 	.word	0x003d08ff
 8002564:	431bde83 	.word	0x431bde83
 8002568:	10624dd3 	.word	0x10624dd3

0800256c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e26c      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8087 	beq.w	800269a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800258c:	4b92      	ldr	r3, [pc, #584]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b04      	cmp	r3, #4
 8002596:	d00c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002598:	4b8f      	ldr	r3, [pc, #572]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 030c 	and.w	r3, r3, #12
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d112      	bne.n	80025ca <HAL_RCC_OscConfig+0x5e>
 80025a4:	4b8c      	ldr	r3, [pc, #560]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d10b      	bne.n	80025ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b2:	4b89      	ldr	r3, [pc, #548]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d06c      	beq.n	8002698 <HAL_RCC_OscConfig+0x12c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d168      	bne.n	8002698 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e246      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x76>
 80025d4:	4b80      	ldr	r3, [pc, #512]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a7f      	ldr	r2, [pc, #508]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80025da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	e02e      	b.n	8002640 <HAL_RCC_OscConfig+0xd4>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0x98>
 80025ea:	4b7b      	ldr	r3, [pc, #492]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a7a      	ldr	r2, [pc, #488]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b78      	ldr	r3, [pc, #480]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a77      	ldr	r2, [pc, #476]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e01d      	b.n	8002640 <HAL_RCC_OscConfig+0xd4>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0xbc>
 800260e:	4b72      	ldr	r3, [pc, #456]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a71      	ldr	r2, [pc, #452]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 8002614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b6f      	ldr	r3, [pc, #444]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6e      	ldr	r2, [pc, #440]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0xd4>
 8002628:	4b6b      	ldr	r3, [pc, #428]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6a      	ldr	r2, [pc, #424]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b68      	ldr	r3, [pc, #416]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a67      	ldr	r2, [pc, #412]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff fbba 	bl	8001dc0 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff fbb6 	bl	8001dc0 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1fa      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0xe4>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff fba6 	bl	8001dc0 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff fba2 	bl	8001dc0 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1e6      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x10c>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d063      	beq.n	800276e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a6:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026b2:	4b49      	ldr	r3, [pc, #292]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x18c>
 80026be:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x176>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1ba      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4939      	ldr	r1, [pc, #228]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b36      	ldr	r3, [pc, #216]	; (80027dc <HAL_RCC_OscConfig+0x270>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7ff fb5b 	bl	8001dc0 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270e:	f7ff fb57 	bl	8001dc0 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e19b      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4927      	ldr	r1, [pc, #156]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b26      	ldr	r3, [pc, #152]	; (80027dc <HAL_RCC_OscConfig+0x270>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7ff fb3a 	bl	8001dc0 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002750:	f7ff fb36 	bl	8001dc0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e17a      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d03a      	beq.n	80027f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d019      	beq.n	80027b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002788:	f7ff fb1a 	bl	8001dc0 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002790:	f7ff fb16 	bl	8001dc0 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e15a      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f000 fb0a 	bl	8002dc8 <RCC_Delay>
 80027b4:	e01c      	b.n	80027f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_RCC_OscConfig+0x274>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7ff fb00 	bl	8001dc0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c2:	e00f      	b.n	80027e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c4:	f7ff fafc 	bl	8001dc0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d908      	bls.n	80027e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e140      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	42420000 	.word	0x42420000
 80027e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	4b9e      	ldr	r3, [pc, #632]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e9      	bne.n	80027c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80a6 	beq.w	800294a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	4b97      	ldr	r3, [pc, #604]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10d      	bne.n	800282a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4b94      	ldr	r3, [pc, #592]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4a93      	ldr	r2, [pc, #588]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	61d3      	str	r3, [r2, #28]
 800281a:	4b91      	ldr	r3, [pc, #580]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002826:	2301      	movs	r3, #1
 8002828:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282a:	4b8e      	ldr	r3, [pc, #568]	; (8002a64 <HAL_RCC_OscConfig+0x4f8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d118      	bne.n	8002868 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002836:	4b8b      	ldr	r3, [pc, #556]	; (8002a64 <HAL_RCC_OscConfig+0x4f8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a8a      	ldr	r2, [pc, #552]	; (8002a64 <HAL_RCC_OscConfig+0x4f8>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002842:	f7ff fabd 	bl	8001dc0 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284a:	f7ff fab9 	bl	8001dc0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b64      	cmp	r3, #100	; 0x64
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e0fd      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	4b81      	ldr	r3, [pc, #516]	; (8002a64 <HAL_RCC_OscConfig+0x4f8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x312>
 8002870:	4b7b      	ldr	r3, [pc, #492]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4a7a      	ldr	r2, [pc, #488]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6213      	str	r3, [r2, #32]
 800287c:	e02d      	b.n	80028da <HAL_RCC_OscConfig+0x36e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x334>
 8002886:	4b76      	ldr	r3, [pc, #472]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4a75      	ldr	r2, [pc, #468]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	6213      	str	r3, [r2, #32]
 8002892:	4b73      	ldr	r3, [pc, #460]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	4a72      	ldr	r2, [pc, #456]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	f023 0304 	bic.w	r3, r3, #4
 800289c:	6213      	str	r3, [r2, #32]
 800289e:	e01c      	b.n	80028da <HAL_RCC_OscConfig+0x36e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d10c      	bne.n	80028c2 <HAL_RCC_OscConfig+0x356>
 80028a8:	4b6d      	ldr	r3, [pc, #436]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4a6c      	ldr	r2, [pc, #432]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	6213      	str	r3, [r2, #32]
 80028b4:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4a69      	ldr	r2, [pc, #420]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6213      	str	r3, [r2, #32]
 80028c0:	e00b      	b.n	80028da <HAL_RCC_OscConfig+0x36e>
 80028c2:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a66      	ldr	r2, [pc, #408]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	4b64      	ldr	r3, [pc, #400]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d015      	beq.n	800290e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7ff fa6d 	bl	8001dc0 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7ff fa69 	bl	8001dc0 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e0ab      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002900:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ee      	beq.n	80028ea <HAL_RCC_OscConfig+0x37e>
 800290c:	e014      	b.n	8002938 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290e:	f7ff fa57 	bl	8001dc0 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002914:	e00a      	b.n	800292c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7ff fa53 	bl	8001dc0 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e095      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292c:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ee      	bne.n	8002916 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002938:	7dfb      	ldrb	r3, [r7, #23]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d105      	bne.n	800294a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293e:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	4a47      	ldr	r2, [pc, #284]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002948:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8081 	beq.w	8002a56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002954:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d061      	beq.n	8002a24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d146      	bne.n	80029f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002968:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <HAL_RCC_OscConfig+0x4fc>)
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff fa27 	bl	8001dc0 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002976:	f7ff fa23 	bl	8001dc0 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e067      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002988:	4b35      	ldr	r3, [pc, #212]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d108      	bne.n	80029b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800299e:	4b30      	ldr	r3, [pc, #192]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	492d      	ldr	r1, [pc, #180]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b0:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a19      	ldr	r1, [r3, #32]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	430b      	orrs	r3, r1
 80029c2:	4927      	ldr	r1, [pc, #156]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x4fc>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7ff f9f7 	bl	8001dc0 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d6:	f7ff f9f3 	bl	8001dc0 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e037      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x46a>
 80029f4:	e02f      	b.n	8002a56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <HAL_RCC_OscConfig+0x4fc>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7ff f9e0 	bl	8001dc0 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a04:	f7ff f9dc 	bl	8001dc0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e020      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x498>
 8002a22:	e018      	b.n	8002a56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e013      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42420060 	.word	0x42420060

08002a6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0d0      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a80:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d910      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b67      	ldr	r3, [pc, #412]	; (8002c2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 0207 	bic.w	r2, r3, #7
 8002a96:	4965      	ldr	r1, [pc, #404]	; (8002c2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <HAL_RCC_ClockConfig+0x1c0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0b8      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac8:	4b59      	ldr	r3, [pc, #356]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a58      	ldr	r2, [pc, #352]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ad2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae0:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a52      	ldr	r2, [pc, #328]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002aea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b50      	ldr	r3, [pc, #320]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	494d      	ldr	r1, [pc, #308]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d040      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d115      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e07f      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e073      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e06b      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4a:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f023 0203 	bic.w	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4936      	ldr	r1, [pc, #216]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7ff f930 	bl	8001dc0 <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b64:	f7ff f92c 	bl	8001dc0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e053      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 020c 	and.w	r2, r3, #12
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d1eb      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d210      	bcs.n	8002bbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 0207 	bic.w	r2, r3, #7
 8002ba2:	4922      	ldr	r1, [pc, #136]	; (8002c2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e032      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4916      	ldr	r1, [pc, #88]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	490e      	ldr	r1, [pc, #56]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bfa:	f000 f821 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002bfe:	4601      	mov	r1, r0
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002c0c:	5cd3      	ldrb	r3, [r2, r3]
 8002c0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c12:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <HAL_RCC_ClockConfig+0x1cc>)
 8002c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCC_ClockConfig+0x1d0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff2c 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40022000 	.word	0x40022000
 8002c30:	40021000 	.word	0x40021000
 8002c34:	080076d4 	.word	0x080076d4
 8002c38:	20000004 	.word	0x20000004
 8002c3c:	20000008 	.word	0x20000008

08002c40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	b490      	push	{r4, r7}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c46:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c48:	1d3c      	adds	r4, r7, #4
 8002c4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c50:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d002      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x40>
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x46>
 8002c7e:	e02d      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c80:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c82:	623b      	str	r3, [r7, #32]
      break;
 8002c84:	e02d      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	0c9b      	lsrs	r3, r3, #18
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c92:	4413      	add	r3, r2
 8002c94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	0c5b      	lsrs	r3, r3, #17
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cbe:	fb02 f203 	mul.w	r2, r2, r3
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cca:	e004      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	623b      	str	r3, [r7, #32]
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cde:	623b      	str	r3, [r7, #32]
      break;
 8002ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3728      	adds	r7, #40	; 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc90      	pop	{r4, r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	080076c0 	.word	0x080076c0
 8002cf4:	080076d0 	.word	0x080076d0
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	007a1200 	.word	0x007a1200
 8002d00:	003d0900 	.word	0x003d0900

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b02      	ldr	r3, [pc, #8]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	20000004 	.word	0x20000004

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d1c:	f7ff fff2 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d20:	4601      	mov	r1, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	080076e4 	.word	0x080076e4

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d48:	4601      	mov	r1, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	0adb      	lsrs	r3, r3, #11
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4a03      	ldr	r2, [pc, #12]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d56:	5cd3      	ldrb	r3, [r2, r3]
 8002d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000
 8002d64:	080076e4 	.word	0x080076e4

08002d68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	220f      	movs	r2, #15
 8002d76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_RCC_GetClockConfig+0x58>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_RCC_GetClockConfig+0x58>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_GetClockConfig+0x58>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_RCC_GetClockConfig+0x58>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0207 	and.w	r2, r3, #7
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40022000 	.word	0x40022000

08002dc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <RCC_Delay+0x34>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <RCC_Delay+0x38>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0a5b      	lsrs	r3, r3, #9
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002de4:	bf00      	nop
  }
  while (Delay --);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1e5a      	subs	r2, r3, #1
 8002dea:	60fa      	str	r2, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f9      	bne.n	8002de4 <RCC_Delay+0x1c>
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000004 	.word	0x20000004
 8002e00:	10624dd3 	.word	0x10624dd3

08002e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e053      	b.n	8002ebe <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fe fd8b 	bl	800194c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	ea42 0103 	orr.w	r1, r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	0c1a      	lsrs	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f002 0204 	and.w	r2, r2, #4
 8002e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e01d      	b.n	8002f14 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f815 	bl	8002f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f000 f961 	bl	80031cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d007      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d122      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0202 	mvn.w	r2, #2
 8002fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f8ed 	bl	8003196 <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f8e0 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f8ef 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0204 	mvn.w	r2, #4
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8c3 	bl	8003196 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8b6 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f8c5 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b08      	cmp	r3, #8
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b08      	cmp	r3, #8
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0208 	mvn.w	r2, #8
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2204      	movs	r2, #4
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f899 	bl	8003196 <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f88c 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f89b 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b10      	cmp	r3, #16
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b10      	cmp	r3, #16
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0210 	mvn.w	r2, #16
 800309c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2208      	movs	r2, #8
 80030a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f86f 	bl	8003196 <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f862 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f871 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d10e      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d107      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0201 	mvn.w	r2, #1
 80030f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe fba2 	bl	800183c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b80      	cmp	r3, #128	; 0x80
 8003104:	d10e      	bne.n	8003124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d107      	bne.n	8003124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800311c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8bf 	bl	80032a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d10e      	bne.n	8003150 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d107      	bne.n	8003150 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f835 	bl	80031ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b20      	cmp	r3, #32
 800315c:	d10e      	bne.n	800317c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b20      	cmp	r3, #32
 800316a:	d107      	bne.n	800317c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0220 	mvn.w	r2, #32
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f88a 	bl	8003290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a29      	ldr	r2, [pc, #164]	; (8003284 <TIM_Base_SetConfig+0xb8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00b      	beq.n	80031fc <TIM_Base_SetConfig+0x30>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ea:	d007      	beq.n	80031fc <TIM_Base_SetConfig+0x30>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a26      	ldr	r2, [pc, #152]	; (8003288 <TIM_Base_SetConfig+0xbc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_Base_SetConfig+0x30>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a25      	ldr	r2, [pc, #148]	; (800328c <TIM_Base_SetConfig+0xc0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d108      	bne.n	800320e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <TIM_Base_SetConfig+0xb8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <TIM_Base_SetConfig+0x62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d007      	beq.n	800322e <TIM_Base_SetConfig+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <TIM_Base_SetConfig+0xbc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_Base_SetConfig+0x62>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <TIM_Base_SetConfig+0xc0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d108      	bne.n	8003240 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <TIM_Base_SetConfig+0xb8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d103      	bne.n	8003274 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	615a      	str	r2, [r3, #20]
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800

08003290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e03f      	b.n	8003346 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe fb80 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f90b 	bl	8003514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800330c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800331c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800332c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b088      	sub	sp, #32
 8003352:	af02      	add	r7, sp, #8
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	4613      	mov	r3, r2
 800335c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b20      	cmp	r3, #32
 800336c:	f040 8083 	bne.w	8003476 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_UART_Transmit+0x2e>
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e07b      	b.n	8003478 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_UART_Transmit+0x40>
 800338a:	2302      	movs	r3, #2
 800338c:	e074      	b.n	8003478 <HAL_UART_Transmit+0x12a>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2221      	movs	r2, #33	; 0x21
 80033a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033a4:	f7fe fd0c 	bl	8001dc0 <HAL_GetTick>
 80033a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	88fa      	ldrh	r2, [r7, #6]
 80033ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	88fa      	ldrh	r2, [r7, #6]
 80033b4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033b6:	e042      	b.n	800343e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ce:	d122      	bne.n	8003416 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2200      	movs	r2, #0
 80033d8:	2180      	movs	r1, #128	; 0x80
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f850 	bl	8003480 <UART_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e046      	b.n	8003478 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3302      	adds	r3, #2
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	e017      	b.n	800343e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3301      	adds	r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	e013      	b.n	800343e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	; 0x80
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f82d 	bl	8003480 <UART_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e023      	b.n	8003478 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	60ba      	str	r2, [r7, #8]
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1b7      	bne.n	80033b8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2200      	movs	r2, #0
 8003450:	2140      	movs	r1, #64	; 0x40
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f814 	bl	8003480 <UART_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e00a      	b.n	8003478 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003476:	2302      	movs	r3, #2
  }
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003490:	e02c      	b.n	80034ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d028      	beq.n	80034ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80034a0:	f7fe fc8e 	bl	8001dc0 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d21d      	bcs.n	80034ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e00f      	b.n	800350c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	429a      	cmp	r2, r3
 8003508:	d0c3      	beq.n	8003492 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800354e:	f023 030c 	bic.w	r3, r3, #12
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	68f9      	ldr	r1, [r7, #12]
 8003558:	430b      	orrs	r3, r1
 800355a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a52      	ldr	r2, [pc, #328]	; (80036c0 <UART_SetConfig+0x1ac>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d14e      	bne.n	800361a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800357c:	f7ff fbe0 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8003580:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009a      	lsls	r2, r3, #2
 800358c:	441a      	add	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	4a4a      	ldr	r2, [pc, #296]	; (80036c4 <UART_SetConfig+0x1b0>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	0119      	lsls	r1, r3, #4
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009a      	lsls	r2, r3, #2
 80035ac:	441a      	add	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b8:	4b42      	ldr	r3, [pc, #264]	; (80036c4 <UART_SetConfig+0x1b0>)
 80035ba:	fba3 0302 	umull	r0, r3, r3, r2
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2064      	movs	r0, #100	; 0x64
 80035c2:	fb00 f303 	mul.w	r3, r0, r3
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	3332      	adds	r3, #50	; 0x32
 80035cc:	4a3d      	ldr	r2, [pc, #244]	; (80036c4 <UART_SetConfig+0x1b0>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d8:	4419      	add	r1, r3
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009a      	lsls	r2, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f0:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <UART_SetConfig+0x1b0>)
 80035f2:	fba3 0302 	umull	r0, r3, r3, r2
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2064      	movs	r0, #100	; 0x64
 80035fa:	fb00 f303 	mul.w	r3, r0, r3
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	3332      	adds	r3, #50	; 0x32
 8003604:	4a2f      	ldr	r2, [pc, #188]	; (80036c4 <UART_SetConfig+0x1b0>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	f003 020f 	and.w	r2, r3, #15
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	440a      	add	r2, r1
 8003616:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003618:	e04d      	b.n	80036b6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800361a:	f7ff fb7d 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 800361e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009a      	lsls	r2, r3, #2
 800362a:	441a      	add	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	fbb2 f3f3 	udiv	r3, r2, r3
 8003636:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <UART_SetConfig+0x1b0>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	0119      	lsls	r1, r3, #4
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009a      	lsls	r2, r3, #2
 800364a:	441a      	add	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	fbb2 f2f3 	udiv	r2, r2, r3
 8003656:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <UART_SetConfig+0x1b0>)
 8003658:	fba3 0302 	umull	r0, r3, r3, r2
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	2064      	movs	r0, #100	; 0x64
 8003660:	fb00 f303 	mul.w	r3, r0, r3
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	3332      	adds	r3, #50	; 0x32
 800366a:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <UART_SetConfig+0x1b0>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003676:	4419      	add	r1, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	009a      	lsls	r2, r3, #2
 8003682:	441a      	add	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	fbb2 f2f3 	udiv	r2, r2, r3
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <UART_SetConfig+0x1b0>)
 8003690:	fba3 0302 	umull	r0, r3, r3, r2
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	2064      	movs	r0, #100	; 0x64
 8003698:	fb00 f303 	mul.w	r3, r0, r3
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	3332      	adds	r3, #50	; 0x32
 80036a2:	4a08      	ldr	r2, [pc, #32]	; (80036c4 <UART_SetConfig+0x1b0>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	f003 020f 	and.w	r2, r3, #15
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	440a      	add	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40013800 	.word	0x40013800
 80036c4:	51eb851f 	.word	0x51eb851f

080036c8 <__errno>:
 80036c8:	4b01      	ldr	r3, [pc, #4]	; (80036d0 <__errno+0x8>)
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000010 	.word	0x20000010

080036d4 <__libc_init_array>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	2500      	movs	r5, #0
 80036d8:	4e0c      	ldr	r6, [pc, #48]	; (800370c <__libc_init_array+0x38>)
 80036da:	4c0d      	ldr	r4, [pc, #52]	; (8003710 <__libc_init_array+0x3c>)
 80036dc:	1ba4      	subs	r4, r4, r6
 80036de:	10a4      	asrs	r4, r4, #2
 80036e0:	42a5      	cmp	r5, r4
 80036e2:	d109      	bne.n	80036f8 <__libc_init_array+0x24>
 80036e4:	f003 ffa0 	bl	8007628 <_init>
 80036e8:	2500      	movs	r5, #0
 80036ea:	4e0a      	ldr	r6, [pc, #40]	; (8003714 <__libc_init_array+0x40>)
 80036ec:	4c0a      	ldr	r4, [pc, #40]	; (8003718 <__libc_init_array+0x44>)
 80036ee:	1ba4      	subs	r4, r4, r6
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	42a5      	cmp	r5, r4
 80036f4:	d105      	bne.n	8003702 <__libc_init_array+0x2e>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036fc:	4798      	blx	r3
 80036fe:	3501      	adds	r5, #1
 8003700:	e7ee      	b.n	80036e0 <__libc_init_array+0xc>
 8003702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003706:	4798      	blx	r3
 8003708:	3501      	adds	r5, #1
 800370a:	e7f2      	b.n	80036f2 <__libc_init_array+0x1e>
 800370c:	08007968 	.word	0x08007968
 8003710:	08007968 	.word	0x08007968
 8003714:	08007968 	.word	0x08007968
 8003718:	08007970 	.word	0x08007970

0800371c <malloc>:
 800371c:	4b02      	ldr	r3, [pc, #8]	; (8003728 <malloc+0xc>)
 800371e:	4601      	mov	r1, r0
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	f000 b803 	b.w	800372c <_malloc_r>
 8003726:	bf00      	nop
 8003728:	20000010 	.word	0x20000010

0800372c <_malloc_r>:
 800372c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003730:	f101 050b 	add.w	r5, r1, #11
 8003734:	2d16      	cmp	r5, #22
 8003736:	4606      	mov	r6, r0
 8003738:	d906      	bls.n	8003748 <_malloc_r+0x1c>
 800373a:	f035 0507 	bics.w	r5, r5, #7
 800373e:	d504      	bpl.n	800374a <_malloc_r+0x1e>
 8003740:	230c      	movs	r3, #12
 8003742:	6033      	str	r3, [r6, #0]
 8003744:	2400      	movs	r4, #0
 8003746:	e1a8      	b.n	8003a9a <_malloc_r+0x36e>
 8003748:	2510      	movs	r5, #16
 800374a:	428d      	cmp	r5, r1
 800374c:	d3f8      	bcc.n	8003740 <_malloc_r+0x14>
 800374e:	4630      	mov	r0, r6
 8003750:	f000 fa2a 	bl	8003ba8 <__malloc_lock>
 8003754:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8003758:	4fc0      	ldr	r7, [pc, #768]	; (8003a5c <_malloc_r+0x330>)
 800375a:	d238      	bcs.n	80037ce <_malloc_r+0xa2>
 800375c:	f105 0208 	add.w	r2, r5, #8
 8003760:	443a      	add	r2, r7
 8003762:	6854      	ldr	r4, [r2, #4]
 8003764:	f1a2 0108 	sub.w	r1, r2, #8
 8003768:	428c      	cmp	r4, r1
 800376a:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800376e:	d102      	bne.n	8003776 <_malloc_r+0x4a>
 8003770:	68d4      	ldr	r4, [r2, #12]
 8003772:	42a2      	cmp	r2, r4
 8003774:	d010      	beq.n	8003798 <_malloc_r+0x6c>
 8003776:	6863      	ldr	r3, [r4, #4]
 8003778:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800377c:	f023 0303 	bic.w	r3, r3, #3
 8003780:	60ca      	str	r2, [r1, #12]
 8003782:	4423      	add	r3, r4
 8003784:	6091      	str	r1, [r2, #8]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	4630      	mov	r0, r6
 8003790:	f000 fa10 	bl	8003bb4 <__malloc_unlock>
 8003794:	3408      	adds	r4, #8
 8003796:	e180      	b.n	8003a9a <_malloc_r+0x36e>
 8003798:	3302      	adds	r3, #2
 800379a:	4ab1      	ldr	r2, [pc, #708]	; (8003a60 <_malloc_r+0x334>)
 800379c:	693c      	ldr	r4, [r7, #16]
 800379e:	4611      	mov	r1, r2
 80037a0:	4294      	cmp	r4, r2
 80037a2:	d075      	beq.n	8003890 <_malloc_r+0x164>
 80037a4:	6860      	ldr	r0, [r4, #4]
 80037a6:	f020 0c03 	bic.w	ip, r0, #3
 80037aa:	ebac 0005 	sub.w	r0, ip, r5
 80037ae:	280f      	cmp	r0, #15
 80037b0:	dd48      	ble.n	8003844 <_malloc_r+0x118>
 80037b2:	1963      	adds	r3, r4, r5
 80037b4:	f045 0501 	orr.w	r5, r5, #1
 80037b8:	6065      	str	r5, [r4, #4]
 80037ba:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80037be:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80037c2:	f040 0201 	orr.w	r2, r0, #1
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	f844 000c 	str.w	r0, [r4, ip]
 80037cc:	e7df      	b.n	800378e <_malloc_r+0x62>
 80037ce:	0a6b      	lsrs	r3, r5, #9
 80037d0:	d02a      	beq.n	8003828 <_malloc_r+0xfc>
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d812      	bhi.n	80037fc <_malloc_r+0xd0>
 80037d6:	09ab      	lsrs	r3, r5, #6
 80037d8:	3338      	adds	r3, #56	; 0x38
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80037e0:	6854      	ldr	r4, [r2, #4]
 80037e2:	f1a2 0c08 	sub.w	ip, r2, #8
 80037e6:	4564      	cmp	r4, ip
 80037e8:	d006      	beq.n	80037f8 <_malloc_r+0xcc>
 80037ea:	6862      	ldr	r2, [r4, #4]
 80037ec:	f022 0203 	bic.w	r2, r2, #3
 80037f0:	1b50      	subs	r0, r2, r5
 80037f2:	280f      	cmp	r0, #15
 80037f4:	dd1c      	ble.n	8003830 <_malloc_r+0x104>
 80037f6:	3b01      	subs	r3, #1
 80037f8:	3301      	adds	r3, #1
 80037fa:	e7ce      	b.n	800379a <_malloc_r+0x6e>
 80037fc:	2b14      	cmp	r3, #20
 80037fe:	d801      	bhi.n	8003804 <_malloc_r+0xd8>
 8003800:	335b      	adds	r3, #91	; 0x5b
 8003802:	e7ea      	b.n	80037da <_malloc_r+0xae>
 8003804:	2b54      	cmp	r3, #84	; 0x54
 8003806:	d802      	bhi.n	800380e <_malloc_r+0xe2>
 8003808:	0b2b      	lsrs	r3, r5, #12
 800380a:	336e      	adds	r3, #110	; 0x6e
 800380c:	e7e5      	b.n	80037da <_malloc_r+0xae>
 800380e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003812:	d802      	bhi.n	800381a <_malloc_r+0xee>
 8003814:	0beb      	lsrs	r3, r5, #15
 8003816:	3377      	adds	r3, #119	; 0x77
 8003818:	e7df      	b.n	80037da <_malloc_r+0xae>
 800381a:	f240 5254 	movw	r2, #1364	; 0x554
 800381e:	4293      	cmp	r3, r2
 8003820:	d804      	bhi.n	800382c <_malloc_r+0x100>
 8003822:	0cab      	lsrs	r3, r5, #18
 8003824:	337c      	adds	r3, #124	; 0x7c
 8003826:	e7d8      	b.n	80037da <_malloc_r+0xae>
 8003828:	233f      	movs	r3, #63	; 0x3f
 800382a:	e7d6      	b.n	80037da <_malloc_r+0xae>
 800382c:	237e      	movs	r3, #126	; 0x7e
 800382e:	e7d4      	b.n	80037da <_malloc_r+0xae>
 8003830:	2800      	cmp	r0, #0
 8003832:	68e1      	ldr	r1, [r4, #12]
 8003834:	db04      	blt.n	8003840 <_malloc_r+0x114>
 8003836:	68a3      	ldr	r3, [r4, #8]
 8003838:	60d9      	str	r1, [r3, #12]
 800383a:	608b      	str	r3, [r1, #8]
 800383c:	18a3      	adds	r3, r4, r2
 800383e:	e7a2      	b.n	8003786 <_malloc_r+0x5a>
 8003840:	460c      	mov	r4, r1
 8003842:	e7d0      	b.n	80037e6 <_malloc_r+0xba>
 8003844:	2800      	cmp	r0, #0
 8003846:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800384a:	db07      	blt.n	800385c <_malloc_r+0x130>
 800384c:	44a4      	add	ip, r4
 800384e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	f8cc 3004 	str.w	r3, [ip, #4]
 800385a:	e798      	b.n	800378e <_malloc_r+0x62>
 800385c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f080 8099 	bcs.w	8003998 <_malloc_r+0x26c>
 8003866:	2201      	movs	r2, #1
 8003868:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800386c:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8003870:	fa02 f20e 	lsl.w	r2, r2, lr
 8003874:	4310      	orrs	r0, r2
 8003876:	f10c 0c01 	add.w	ip, ip, #1
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8003880:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8003884:	3a08      	subs	r2, #8
 8003886:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800388a:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800388e:	60c4      	str	r4, [r0, #12]
 8003890:	2001      	movs	r0, #1
 8003892:	109a      	asrs	r2, r3, #2
 8003894:	fa00 f202 	lsl.w	r2, r0, r2
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4290      	cmp	r0, r2
 800389c:	d326      	bcc.n	80038ec <_malloc_r+0x1c0>
 800389e:	4210      	tst	r0, r2
 80038a0:	d106      	bne.n	80038b0 <_malloc_r+0x184>
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	0052      	lsls	r2, r2, #1
 80038a8:	4210      	tst	r0, r2
 80038aa:	f103 0304 	add.w	r3, r3, #4
 80038ae:	d0fa      	beq.n	80038a6 <_malloc_r+0x17a>
 80038b0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 80038b4:	46e1      	mov	r9, ip
 80038b6:	4698      	mov	r8, r3
 80038b8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80038bc:	454c      	cmp	r4, r9
 80038be:	f040 80af 	bne.w	8003a20 <_malloc_r+0x2f4>
 80038c2:	f108 0801 	add.w	r8, r8, #1
 80038c6:	f018 0f03 	tst.w	r8, #3
 80038ca:	f109 0908 	add.w	r9, r9, #8
 80038ce:	d1f3      	bne.n	80038b8 <_malloc_r+0x18c>
 80038d0:	0798      	lsls	r0, r3, #30
 80038d2:	f040 80e8 	bne.w	8003aa6 <_malloc_r+0x37a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	ea23 0302 	bic.w	r3, r3, r2
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	0052      	lsls	r2, r2, #1
 80038e2:	4290      	cmp	r0, r2
 80038e4:	d302      	bcc.n	80038ec <_malloc_r+0x1c0>
 80038e6:	2a00      	cmp	r2, #0
 80038e8:	f040 80eb 	bne.w	8003ac2 <_malloc_r+0x396>
 80038ec:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80038f0:	f8da 4004 	ldr.w	r4, [sl, #4]
 80038f4:	f024 0203 	bic.w	r2, r4, #3
 80038f8:	42aa      	cmp	r2, r5
 80038fa:	d303      	bcc.n	8003904 <_malloc_r+0x1d8>
 80038fc:	1b53      	subs	r3, r2, r5
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	f300 813f 	bgt.w	8003b82 <_malloc_r+0x456>
 8003904:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <_malloc_r+0x338>)
 8003906:	2008      	movs	r0, #8
 8003908:	681c      	ldr	r4, [r3, #0]
 800390a:	9200      	str	r2, [sp, #0]
 800390c:	f000 f97a 	bl	8003c04 <sysconf>
 8003910:	4b55      	ldr	r3, [pc, #340]	; (8003a68 <_malloc_r+0x33c>)
 8003912:	3410      	adds	r4, #16
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	442c      	add	r4, r5
 8003918:	3101      	adds	r1, #1
 800391a:	bf1f      	itttt	ne
 800391c:	f104 34ff 	addne.w	r4, r4, #4294967295
 8003920:	1824      	addne	r4, r4, r0
 8003922:	4241      	negne	r1, r0
 8003924:	400c      	andne	r4, r1
 8003926:	9a00      	ldr	r2, [sp, #0]
 8003928:	4680      	mov	r8, r0
 800392a:	4621      	mov	r1, r4
 800392c:	4630      	mov	r0, r6
 800392e:	e9cd 2300 	strd	r2, r3, [sp]
 8003932:	f000 f957 	bl	8003be4 <_sbrk_r>
 8003936:	f1b0 3fff 	cmp.w	r0, #4294967295
 800393a:	4683      	mov	fp, r0
 800393c:	f000 80fa 	beq.w	8003b34 <_malloc_r+0x408>
 8003940:	9a00      	ldr	r2, [sp, #0]
 8003942:	9b01      	ldr	r3, [sp, #4]
 8003944:	eb0a 0102 	add.w	r1, sl, r2
 8003948:	4281      	cmp	r1, r0
 800394a:	d902      	bls.n	8003952 <_malloc_r+0x226>
 800394c:	45ba      	cmp	sl, r7
 800394e:	f040 80f1 	bne.w	8003b34 <_malloc_r+0x408>
 8003952:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8003a74 <_malloc_r+0x348>
 8003956:	4559      	cmp	r1, fp
 8003958:	f8d9 0000 	ldr.w	r0, [r9]
 800395c:	f108 3cff 	add.w	ip, r8, #4294967295
 8003960:	eb00 0e04 	add.w	lr, r0, r4
 8003964:	f8c9 e000 	str.w	lr, [r9]
 8003968:	f040 80ad 	bne.w	8003ac6 <_malloc_r+0x39a>
 800396c:	ea11 0f0c 	tst.w	r1, ip
 8003970:	f040 80a9 	bne.w	8003ac6 <_malloc_r+0x39a>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4414      	add	r4, r2
 8003978:	f044 0401 	orr.w	r4, r4, #1
 800397c:	605c      	str	r4, [r3, #4]
 800397e:	4a3b      	ldr	r2, [pc, #236]	; (8003a6c <_malloc_r+0x340>)
 8003980:	f8d9 3000 	ldr.w	r3, [r9]
 8003984:	6811      	ldr	r1, [r2, #0]
 8003986:	428b      	cmp	r3, r1
 8003988:	bf88      	it	hi
 800398a:	6013      	strhi	r3, [r2, #0]
 800398c:	4a38      	ldr	r2, [pc, #224]	; (8003a70 <_malloc_r+0x344>)
 800398e:	6811      	ldr	r1, [r2, #0]
 8003990:	428b      	cmp	r3, r1
 8003992:	bf88      	it	hi
 8003994:	6013      	strhi	r3, [r2, #0]
 8003996:	e0cd      	b.n	8003b34 <_malloc_r+0x408>
 8003998:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800399c:	2a04      	cmp	r2, #4
 800399e:	d818      	bhi.n	80039d2 <_malloc_r+0x2a6>
 80039a0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80039a4:	3238      	adds	r2, #56	; 0x38
 80039a6:	f102 0e01 	add.w	lr, r2, #1
 80039aa:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 80039ae:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 80039b2:	45f0      	cmp	r8, lr
 80039b4:	d12b      	bne.n	8003a0e <_malloc_r+0x2e2>
 80039b6:	f04f 0c01 	mov.w	ip, #1
 80039ba:	1092      	asrs	r2, r2, #2
 80039bc:	fa0c f202 	lsl.w	r2, ip, r2
 80039c0:	4310      	orrs	r0, r2
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80039c8:	f8c8 4008 	str.w	r4, [r8, #8]
 80039cc:	f8ce 400c 	str.w	r4, [lr, #12]
 80039d0:	e75e      	b.n	8003890 <_malloc_r+0x164>
 80039d2:	2a14      	cmp	r2, #20
 80039d4:	d801      	bhi.n	80039da <_malloc_r+0x2ae>
 80039d6:	325b      	adds	r2, #91	; 0x5b
 80039d8:	e7e5      	b.n	80039a6 <_malloc_r+0x27a>
 80039da:	2a54      	cmp	r2, #84	; 0x54
 80039dc:	d803      	bhi.n	80039e6 <_malloc_r+0x2ba>
 80039de:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80039e2:	326e      	adds	r2, #110	; 0x6e
 80039e4:	e7df      	b.n	80039a6 <_malloc_r+0x27a>
 80039e6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80039ea:	d803      	bhi.n	80039f4 <_malloc_r+0x2c8>
 80039ec:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80039f0:	3277      	adds	r2, #119	; 0x77
 80039f2:	e7d8      	b.n	80039a6 <_malloc_r+0x27a>
 80039f4:	f240 5e54 	movw	lr, #1364	; 0x554
 80039f8:	4572      	cmp	r2, lr
 80039fa:	bf9a      	itte	ls
 80039fc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8003a00:	327c      	addls	r2, #124	; 0x7c
 8003a02:	227e      	movhi	r2, #126	; 0x7e
 8003a04:	e7cf      	b.n	80039a6 <_malloc_r+0x27a>
 8003a06:	f8de e008 	ldr.w	lr, [lr, #8]
 8003a0a:	45f0      	cmp	r8, lr
 8003a0c:	d005      	beq.n	8003a1a <_malloc_r+0x2ee>
 8003a0e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8003a12:	f022 0203 	bic.w	r2, r2, #3
 8003a16:	4562      	cmp	r2, ip
 8003a18:	d8f5      	bhi.n	8003a06 <_malloc_r+0x2da>
 8003a1a:	f8de 800c 	ldr.w	r8, [lr, #12]
 8003a1e:	e7d1      	b.n	80039c4 <_malloc_r+0x298>
 8003a20:	6860      	ldr	r0, [r4, #4]
 8003a22:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8003a26:	f020 0003 	bic.w	r0, r0, #3
 8003a2a:	eba0 0a05 	sub.w	sl, r0, r5
 8003a2e:	f1ba 0f0f 	cmp.w	sl, #15
 8003a32:	dd21      	ble.n	8003a78 <_malloc_r+0x34c>
 8003a34:	68a2      	ldr	r2, [r4, #8]
 8003a36:	1963      	adds	r3, r4, r5
 8003a38:	f045 0501 	orr.w	r5, r5, #1
 8003a3c:	6065      	str	r5, [r4, #4]
 8003a3e:	f8c2 e00c 	str.w	lr, [r2, #12]
 8003a42:	f8ce 2008 	str.w	r2, [lr, #8]
 8003a46:	f04a 0201 	orr.w	r2, sl, #1
 8003a4a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8003a4e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	f844 a000 	str.w	sl, [r4, r0]
 8003a58:	e699      	b.n	800378e <_malloc_r+0x62>
 8003a5a:	bf00      	nop
 8003a5c:	20000440 	.word	0x20000440
 8003a60:	20000448 	.word	0x20000448
 8003a64:	20000a10 	.word	0x20000a10
 8003a68:	20000848 	.word	0x20000848
 8003a6c:	20000a08 	.word	0x20000a08
 8003a70:	20000a0c 	.word	0x20000a0c
 8003a74:	200009e0 	.word	0x200009e0
 8003a78:	f1ba 0f00 	cmp.w	sl, #0
 8003a7c:	db11      	blt.n	8003aa2 <_malloc_r+0x376>
 8003a7e:	4420      	add	r0, r4
 8003a80:	6843      	ldr	r3, [r0, #4]
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6043      	str	r3, [r0, #4]
 8003a88:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8003a92:	f8ce 3008 	str.w	r3, [lr, #8]
 8003a96:	f000 f88d 	bl	8003bb4 <__malloc_unlock>
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	b003      	add	sp, #12
 8003a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa2:	4674      	mov	r4, lr
 8003aa4:	e70a      	b.n	80038bc <_malloc_r+0x190>
 8003aa6:	f1ac 0008 	sub.w	r0, ip, #8
 8003aaa:	f8dc c000 	ldr.w	ip, [ip]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4584      	cmp	ip, r0
 8003ab2:	f43f af0d 	beq.w	80038d0 <_malloc_r+0x1a4>
 8003ab6:	e712      	b.n	80038de <_malloc_r+0x1b2>
 8003ab8:	3304      	adds	r3, #4
 8003aba:	0052      	lsls	r2, r2, #1
 8003abc:	4210      	tst	r0, r2
 8003abe:	d0fb      	beq.n	8003ab8 <_malloc_r+0x38c>
 8003ac0:	e6f6      	b.n	80038b0 <_malloc_r+0x184>
 8003ac2:	4643      	mov	r3, r8
 8003ac4:	e7fa      	b.n	8003abc <_malloc_r+0x390>
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	9200      	str	r2, [sp, #0]
 8003aca:	3001      	adds	r0, #1
 8003acc:	bf1b      	ittet	ne
 8003ace:	ebab 0101 	subne.w	r1, fp, r1
 8003ad2:	4471      	addne	r1, lr
 8003ad4:	f8c3 b000 	streq.w	fp, [r3]
 8003ad8:	f8c9 1000 	strne.w	r1, [r9]
 8003adc:	f01b 0307 	ands.w	r3, fp, #7
 8003ae0:	bf1c      	itt	ne
 8003ae2:	f1c3 0308 	rsbne	r3, r3, #8
 8003ae6:	449b      	addne	fp, r3
 8003ae8:	445c      	add	r4, fp
 8003aea:	4498      	add	r8, r3
 8003aec:	ea04 030c 	and.w	r3, r4, ip
 8003af0:	eba8 0803 	sub.w	r8, r8, r3
 8003af4:	4641      	mov	r1, r8
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 f874 	bl	8003be4 <_sbrk_r>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	bf04      	itt	eq
 8003b00:	4658      	moveq	r0, fp
 8003b02:	f04f 0800 	moveq.w	r8, #0
 8003b06:	f8d9 3000 	ldr.w	r3, [r9]
 8003b0a:	eba0 000b 	sub.w	r0, r0, fp
 8003b0e:	4440      	add	r0, r8
 8003b10:	4443      	add	r3, r8
 8003b12:	f040 0001 	orr.w	r0, r0, #1
 8003b16:	45ba      	cmp	sl, r7
 8003b18:	f8c7 b008 	str.w	fp, [r7, #8]
 8003b1c:	9a00      	ldr	r2, [sp, #0]
 8003b1e:	f8c9 3000 	str.w	r3, [r9]
 8003b22:	f8cb 0004 	str.w	r0, [fp, #4]
 8003b26:	f43f af2a 	beq.w	800397e <_malloc_r+0x252>
 8003b2a:	2a0f      	cmp	r2, #15
 8003b2c:	d810      	bhi.n	8003b50 <_malloc_r+0x424>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f8cb 3004 	str.w	r3, [fp, #4]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	f022 0203 	bic.w	r2, r2, #3
 8003b3c:	42aa      	cmp	r2, r5
 8003b3e:	eba2 0305 	sub.w	r3, r2, r5
 8003b42:	d301      	bcc.n	8003b48 <_malloc_r+0x41c>
 8003b44:	2b0f      	cmp	r3, #15
 8003b46:	dc1c      	bgt.n	8003b82 <_malloc_r+0x456>
 8003b48:	4630      	mov	r0, r6
 8003b4a:	f000 f833 	bl	8003bb4 <__malloc_unlock>
 8003b4e:	e5f9      	b.n	8003744 <_malloc_r+0x18>
 8003b50:	f1a2 040c 	sub.w	r4, r2, #12
 8003b54:	2205      	movs	r2, #5
 8003b56:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003b5a:	f024 0407 	bic.w	r4, r4, #7
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	4323      	orrs	r3, r4
 8003b64:	f8ca 3004 	str.w	r3, [sl, #4]
 8003b68:	2c0f      	cmp	r4, #15
 8003b6a:	eb0a 0304 	add.w	r3, sl, r4
 8003b6e:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8003b72:	f67f af04 	bls.w	800397e <_malloc_r+0x252>
 8003b76:	f10a 0108 	add.w	r1, sl, #8
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	f002 fb18 	bl	80061b0 <_free_r>
 8003b80:	e6fd      	b.n	800397e <_malloc_r+0x252>
 8003b82:	68bc      	ldr	r4, [r7, #8]
 8003b84:	f045 0201 	orr.w	r2, r5, #1
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	4425      	add	r5, r4
 8003b8e:	6062      	str	r2, [r4, #4]
 8003b90:	60bd      	str	r5, [r7, #8]
 8003b92:	606b      	str	r3, [r5, #4]
 8003b94:	e5fb      	b.n	800378e <_malloc_r+0x62>
 8003b96:	bf00      	nop

08003b98 <memset>:
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4402      	add	r2, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <__malloc_lock>:
 8003ba8:	4801      	ldr	r0, [pc, #4]	; (8003bb0 <__malloc_lock+0x8>)
 8003baa:	f002 bbeb 	b.w	8006384 <__retarget_lock_acquire_recursive>
 8003bae:	bf00      	nop
 8003bb0:	20000b64 	.word	0x20000b64

08003bb4 <__malloc_unlock>:
 8003bb4:	4801      	ldr	r0, [pc, #4]	; (8003bbc <__malloc_unlock+0x8>)
 8003bb6:	f002 bbe6 	b.w	8006386 <__retarget_lock_release_recursive>
 8003bba:	bf00      	nop
 8003bbc:	20000b64 	.word	0x20000b64

08003bc0 <printf>:
 8003bc0:	b40f      	push	{r0, r1, r2, r3}
 8003bc2:	b507      	push	{r0, r1, r2, lr}
 8003bc4:	4906      	ldr	r1, [pc, #24]	; (8003be0 <printf+0x20>)
 8003bc6:	ab04      	add	r3, sp, #16
 8003bc8:	6808      	ldr	r0, [r1, #0]
 8003bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bce:	6881      	ldr	r1, [r0, #8]
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	f000 f825 	bl	8003c20 <_vfprintf_r>
 8003bd6:	b003      	add	sp, #12
 8003bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bdc:	b004      	add	sp, #16
 8003bde:	4770      	bx	lr
 8003be0:	20000010 	.word	0x20000010

08003be4 <_sbrk_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	2300      	movs	r3, #0
 8003be8:	4c05      	ldr	r4, [pc, #20]	; (8003c00 <_sbrk_r+0x1c>)
 8003bea:	4605      	mov	r5, r0
 8003bec:	4608      	mov	r0, r1
 8003bee:	6023      	str	r3, [r4, #0]
 8003bf0:	f7fe f838 	bl	8001c64 <_sbrk>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d102      	bne.n	8003bfe <_sbrk_r+0x1a>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	b103      	cbz	r3, 8003bfe <_sbrk_r+0x1a>
 8003bfc:	602b      	str	r3, [r5, #0]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	20000b6c 	.word	0x20000b6c

08003c04 <sysconf>:
 8003c04:	2808      	cmp	r0, #8
 8003c06:	b508      	push	{r3, lr}
 8003c08:	d006      	beq.n	8003c18 <sysconf+0x14>
 8003c0a:	f7ff fd5d 	bl	80036c8 <__errno>
 8003c0e:	2316      	movs	r3, #22
 8003c10:	6003      	str	r3, [r0, #0]
 8003c12:	f04f 30ff 	mov.w	r0, #4294967295
 8003c16:	bd08      	pop	{r3, pc}
 8003c18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003c1c:	e7fb      	b.n	8003c16 <sysconf+0x12>
	...

08003c20 <_vfprintf_r>:
 8003c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c24:	b0d5      	sub	sp, #340	; 0x154
 8003c26:	4689      	mov	r9, r1
 8003c28:	9207      	str	r2, [sp, #28]
 8003c2a:	461c      	mov	r4, r3
 8003c2c:	461e      	mov	r6, r3
 8003c2e:	4683      	mov	fp, r0
 8003c30:	f002 fb98 	bl	8006364 <_localeconv_r>
 8003c34:	6803      	ldr	r3, [r0, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	931a      	str	r3, [sp, #104]	; 0x68
 8003c3a:	f7fc fa89 	bl	8000150 <strlen>
 8003c3e:	900f      	str	r0, [sp, #60]	; 0x3c
 8003c40:	f1bb 0f00 	cmp.w	fp, #0
 8003c44:	d005      	beq.n	8003c52 <_vfprintf_r+0x32>
 8003c46:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8003c4a:	b913      	cbnz	r3, 8003c52 <_vfprintf_r+0x32>
 8003c4c:	4658      	mov	r0, fp
 8003c4e:	f002 fa1f 	bl	8006090 <__sinit>
 8003c52:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8003c56:	07d8      	lsls	r0, r3, #31
 8003c58:	d407      	bmi.n	8003c6a <_vfprintf_r+0x4a>
 8003c5a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003c5e:	0599      	lsls	r1, r3, #22
 8003c60:	d403      	bmi.n	8003c6a <_vfprintf_r+0x4a>
 8003c62:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8003c66:	f002 fb8d 	bl	8006384 <__retarget_lock_acquire_recursive>
 8003c6a:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8003c6e:	049a      	lsls	r2, r3, #18
 8003c70:	d409      	bmi.n	8003c86 <_vfprintf_r+0x66>
 8003c72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c76:	f8a9 300c 	strh.w	r3, [r9, #12]
 8003c7a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8003c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c82:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8003c86:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003c8a:	071f      	lsls	r7, r3, #28
 8003c8c:	d502      	bpl.n	8003c94 <_vfprintf_r+0x74>
 8003c8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003c92:	b9a3      	cbnz	r3, 8003cbe <_vfprintf_r+0x9e>
 8003c94:	4649      	mov	r1, r9
 8003c96:	4658      	mov	r0, fp
 8003c98:	f001 fa66 	bl	8005168 <__swsetup_r>
 8003c9c:	b178      	cbz	r0, 8003cbe <_vfprintf_r+0x9e>
 8003c9e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8003ca2:	07dd      	lsls	r5, r3, #31
 8003ca4:	d407      	bmi.n	8003cb6 <_vfprintf_r+0x96>
 8003ca6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003caa:	059c      	lsls	r4, r3, #22
 8003cac:	d403      	bmi.n	8003cb6 <_vfprintf_r+0x96>
 8003cae:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8003cb2:	f002 fb68 	bl	8006386 <__retarget_lock_release_recursive>
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	9310      	str	r3, [sp, #64]	; 0x40
 8003cbc:	e01a      	b.n	8003cf4 <_vfprintf_r+0xd4>
 8003cbe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003cc2:	f003 021a 	and.w	r2, r3, #26
 8003cc6:	2a0a      	cmp	r2, #10
 8003cc8:	d118      	bne.n	8003cfc <_vfprintf_r+0xdc>
 8003cca:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8003cce:	2a00      	cmp	r2, #0
 8003cd0:	db14      	blt.n	8003cfc <_vfprintf_r+0xdc>
 8003cd2:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8003cd6:	07d0      	lsls	r0, r2, #31
 8003cd8:	d405      	bmi.n	8003ce6 <_vfprintf_r+0xc6>
 8003cda:	0599      	lsls	r1, r3, #22
 8003cdc:	d403      	bmi.n	8003ce6 <_vfprintf_r+0xc6>
 8003cde:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8003ce2:	f002 fb50 	bl	8006386 <__retarget_lock_release_recursive>
 8003ce6:	4623      	mov	r3, r4
 8003ce8:	9a07      	ldr	r2, [sp, #28]
 8003cea:	4649      	mov	r1, r9
 8003cec:	4658      	mov	r0, fp
 8003cee:	f001 f9fb 	bl	80050e8 <__sbprintf>
 8003cf2:	9010      	str	r0, [sp, #64]	; 0x40
 8003cf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003cf6:	b055      	add	sp, #340	; 0x154
 8003cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8003d02:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8003d06:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 8003d0a:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8003d0e:	ac2b      	add	r4, sp, #172	; 0xac
 8003d10:	9428      	str	r4, [sp, #160]	; 0xa0
 8003d12:	9308      	str	r3, [sp, #32]
 8003d14:	930c      	str	r3, [sp, #48]	; 0x30
 8003d16:	9316      	str	r3, [sp, #88]	; 0x58
 8003d18:	931d      	str	r3, [sp, #116]	; 0x74
 8003d1a:	9310      	str	r3, [sp, #64]	; 0x40
 8003d1c:	9d07      	ldr	r5, [sp, #28]
 8003d1e:	462b      	mov	r3, r5
 8003d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d24:	b112      	cbz	r2, 8003d2c <_vfprintf_r+0x10c>
 8003d26:	2a25      	cmp	r2, #37	; 0x25
 8003d28:	f040 80e4 	bne.w	8003ef4 <_vfprintf_r+0x2d4>
 8003d2c:	9b07      	ldr	r3, [sp, #28]
 8003d2e:	1aef      	subs	r7, r5, r3
 8003d30:	d00e      	beq.n	8003d50 <_vfprintf_r+0x130>
 8003d32:	e9c4 3700 	strd	r3, r7, [r4]
 8003d36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003d38:	443b      	add	r3, r7
 8003d3a:	932a      	str	r3, [sp, #168]	; 0xa8
 8003d3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003d3e:	3301      	adds	r3, #1
 8003d40:	2b07      	cmp	r3, #7
 8003d42:	9329      	str	r3, [sp, #164]	; 0xa4
 8003d44:	f300 80d8 	bgt.w	8003ef8 <_vfprintf_r+0x2d8>
 8003d48:	3408      	adds	r4, #8
 8003d4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d4c:	443b      	add	r3, r7
 8003d4e:	9310      	str	r3, [sp, #64]	; 0x40
 8003d50:	782b      	ldrb	r3, [r5, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f001 81b5 	beq.w	80050c2 <_vfprintf_r+0x14a2>
 8003d58:	1c6b      	adds	r3, r5, #1
 8003d5a:	930e      	str	r3, [sp, #56]	; 0x38
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f04f 35ff 	mov.w	r5, #4294967295
 8003d62:	469a      	mov	sl, r3
 8003d64:	270a      	movs	r7, #10
 8003d66:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8003d6a:	9311      	str	r3, [sp, #68]	; 0x44
 8003d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	930a      	str	r3, [sp, #40]	; 0x28
 8003d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d74:	3301      	adds	r3, #1
 8003d76:	930e      	str	r3, [sp, #56]	; 0x38
 8003d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d7a:	3b20      	subs	r3, #32
 8003d7c:	2b5a      	cmp	r3, #90	; 0x5a
 8003d7e:	f200 8627 	bhi.w	80049d0 <_vfprintf_r+0xdb0>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <_vfprintf_r+0x168>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003f8b 	.word	0x08003f8b
 8003d8c:	080049d1 	.word	0x080049d1
 8003d90:	080049d1 	.word	0x080049d1
 8003d94:	08003f9d 	.word	0x08003f9d
 8003d98:	080049d1 	.word	0x080049d1
 8003d9c:	080049d1 	.word	0x080049d1
 8003da0:	080049d1 	.word	0x080049d1
 8003da4:	08003f51 	.word	0x08003f51
 8003da8:	080049d1 	.word	0x080049d1
 8003dac:	080049d1 	.word	0x080049d1
 8003db0:	08003fa3 	.word	0x08003fa3
 8003db4:	08003fb9 	.word	0x08003fb9
 8003db8:	080049d1 	.word	0x080049d1
 8003dbc:	08003fb3 	.word	0x08003fb3
 8003dc0:	08003fbd 	.word	0x08003fbd
 8003dc4:	080049d1 	.word	0x080049d1
 8003dc8:	08003fef 	.word	0x08003fef
 8003dcc:	08003ff5 	.word	0x08003ff5
 8003dd0:	08003ff5 	.word	0x08003ff5
 8003dd4:	08003ff5 	.word	0x08003ff5
 8003dd8:	08003ff5 	.word	0x08003ff5
 8003ddc:	08003ff5 	.word	0x08003ff5
 8003de0:	08003ff5 	.word	0x08003ff5
 8003de4:	08003ff5 	.word	0x08003ff5
 8003de8:	08003ff5 	.word	0x08003ff5
 8003dec:	08003ff5 	.word	0x08003ff5
 8003df0:	080049d1 	.word	0x080049d1
 8003df4:	080049d1 	.word	0x080049d1
 8003df8:	080049d1 	.word	0x080049d1
 8003dfc:	080049d1 	.word	0x080049d1
 8003e00:	080049d1 	.word	0x080049d1
 8003e04:	080049d1 	.word	0x080049d1
 8003e08:	080049d1 	.word	0x080049d1
 8003e0c:	080040e1 	.word	0x080040e1
 8003e10:	080049d1 	.word	0x080049d1
 8003e14:	0800404f 	.word	0x0800404f
 8003e18:	08004071 	.word	0x08004071
 8003e1c:	080040e1 	.word	0x080040e1
 8003e20:	080040e1 	.word	0x080040e1
 8003e24:	080040e1 	.word	0x080040e1
 8003e28:	080049d1 	.word	0x080049d1
 8003e2c:	080049d1 	.word	0x080049d1
 8003e30:	080049d1 	.word	0x080049d1
 8003e34:	080049d1 	.word	0x080049d1
 8003e38:	08004015 	.word	0x08004015
 8003e3c:	080049d1 	.word	0x080049d1
 8003e40:	080049d1 	.word	0x080049d1
 8003e44:	080045c5 	.word	0x080045c5
 8003e48:	080049d1 	.word	0x080049d1
 8003e4c:	080049d1 	.word	0x080049d1
 8003e50:	080049d1 	.word	0x080049d1
 8003e54:	08004651 	.word	0x08004651
 8003e58:	080049d1 	.word	0x080049d1
 8003e5c:	08004831 	.word	0x08004831
 8003e60:	080049d1 	.word	0x080049d1
 8003e64:	080049d1 	.word	0x080049d1
 8003e68:	08003f11 	.word	0x08003f11
 8003e6c:	080049d1 	.word	0x080049d1
 8003e70:	080049d1 	.word	0x080049d1
 8003e74:	080049d1 	.word	0x080049d1
 8003e78:	080049d1 	.word	0x080049d1
 8003e7c:	080049d1 	.word	0x080049d1
 8003e80:	080049d1 	.word	0x080049d1
 8003e84:	080049d1 	.word	0x080049d1
 8003e88:	080049d1 	.word	0x080049d1
 8003e8c:	080040e1 	.word	0x080040e1
 8003e90:	080049d1 	.word	0x080049d1
 8003e94:	0800404f 	.word	0x0800404f
 8003e98:	08004075 	.word	0x08004075
 8003e9c:	080040e1 	.word	0x080040e1
 8003ea0:	080040e1 	.word	0x080040e1
 8003ea4:	080040e1 	.word	0x080040e1
 8003ea8:	0800401b 	.word	0x0800401b
 8003eac:	08004075 	.word	0x08004075
 8003eb0:	08004043 	.word	0x08004043
 8003eb4:	080049d1 	.word	0x080049d1
 8003eb8:	08004035 	.word	0x08004035
 8003ebc:	080049d1 	.word	0x080049d1
 8003ec0:	0800457f 	.word	0x0800457f
 8003ec4:	080045c9 	.word	0x080045c9
 8003ec8:	08004631 	.word	0x08004631
 8003ecc:	08004043 	.word	0x08004043
 8003ed0:	080049d1 	.word	0x080049d1
 8003ed4:	08004651 	.word	0x08004651
 8003ed8:	08003d6d 	.word	0x08003d6d
 8003edc:	08004835 	.word	0x08004835
 8003ee0:	080049d1 	.word	0x080049d1
 8003ee4:	080049d1 	.word	0x080049d1
 8003ee8:	08004873 	.word	0x08004873
 8003eec:	080049d1 	.word	0x080049d1
 8003ef0:	08003d6d 	.word	0x08003d6d
 8003ef4:	461d      	mov	r5, r3
 8003ef6:	e712      	b.n	8003d1e <_vfprintf_r+0xfe>
 8003ef8:	aa28      	add	r2, sp, #160	; 0xa0
 8003efa:	4649      	mov	r1, r9
 8003efc:	4658      	mov	r0, fp
 8003efe:	f002 fe03 	bl	8006b08 <__sprint_r>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	f040 8157 	bne.w	80041b6 <_vfprintf_r+0x596>
 8003f08:	ac2b      	add	r4, sp, #172	; 0xac
 8003f0a:	e71e      	b.n	8003d4a <_vfprintf_r+0x12a>
 8003f0c:	461e      	mov	r6, r3
 8003f0e:	e72d      	b.n	8003d6c <_vfprintf_r+0x14c>
 8003f10:	4bb2      	ldr	r3, [pc, #712]	; (80041dc <_vfprintf_r+0x5bc>)
 8003f12:	f01a 0f20 	tst.w	sl, #32
 8003f16:	931c      	str	r3, [sp, #112]	; 0x70
 8003f18:	f000 84ae 	beq.w	8004878 <_vfprintf_r+0xc58>
 8003f1c:	3607      	adds	r6, #7
 8003f1e:	f026 0607 	bic.w	r6, r6, #7
 8003f22:	f106 0308 	add.w	r3, r6, #8
 8003f26:	930d      	str	r3, [sp, #52]	; 0x34
 8003f28:	e9d6 6700 	ldrd	r6, r7, [r6]
 8003f2c:	f01a 0f01 	tst.w	sl, #1
 8003f30:	d00a      	beq.n	8003f48 <_vfprintf_r+0x328>
 8003f32:	ea56 0307 	orrs.w	r3, r6, r7
 8003f36:	d007      	beq.n	8003f48 <_vfprintf_r+0x328>
 8003f38:	2330      	movs	r3, #48	; 0x30
 8003f3a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8003f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f40:	f04a 0a02 	orr.w	sl, sl, #2
 8003f44:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8003f48:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e349      	b.n	80045e4 <_vfprintf_r+0x9c4>
 8003f50:	4658      	mov	r0, fp
 8003f52:	f002 fa07 	bl	8006364 <_localeconv_r>
 8003f56:	6843      	ldr	r3, [r0, #4]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	931d      	str	r3, [sp, #116]	; 0x74
 8003f5c:	f7fc f8f8 	bl	8000150 <strlen>
 8003f60:	9016      	str	r0, [sp, #88]	; 0x58
 8003f62:	4658      	mov	r0, fp
 8003f64:	f002 f9fe 	bl	8006364 <_localeconv_r>
 8003f68:	6883      	ldr	r3, [r0, #8]
 8003f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8003f6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f43f aefc 	beq.w	8003d6c <_vfprintf_r+0x14c>
 8003f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f43f aef8 	beq.w	8003d6c <_vfprintf_r+0x14c>
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f43f aef4 	beq.w	8003d6c <_vfprintf_r+0x14c>
 8003f84:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8003f88:	e6f0      	b.n	8003d6c <_vfprintf_r+0x14c>
 8003f8a:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f47f aeec 	bne.w	8003d6c <_vfprintf_r+0x14c>
 8003f94:	2320      	movs	r3, #32
 8003f96:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8003f9a:	e6e7      	b.n	8003d6c <_vfprintf_r+0x14c>
 8003f9c:	f04a 0a01 	orr.w	sl, sl, #1
 8003fa0:	e6e4      	b.n	8003d6c <_vfprintf_r+0x14c>
 8003fa2:	6832      	ldr	r2, [r6, #0]
 8003fa4:	1d33      	adds	r3, r6, #4
 8003fa6:	2a00      	cmp	r2, #0
 8003fa8:	9211      	str	r2, [sp, #68]	; 0x44
 8003faa:	daaf      	bge.n	8003f0c <_vfprintf_r+0x2ec>
 8003fac:	461e      	mov	r6, r3
 8003fae:	4252      	negs	r2, r2
 8003fb0:	9211      	str	r2, [sp, #68]	; 0x44
 8003fb2:	f04a 0a04 	orr.w	sl, sl, #4
 8003fb6:	e6d9      	b.n	8003d6c <_vfprintf_r+0x14c>
 8003fb8:	232b      	movs	r3, #43	; 0x2b
 8003fba:	e7ec      	b.n	8003f96 <_vfprintf_r+0x376>
 8003fbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fc0:	7812      	ldrb	r2, [r2, #0]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	2a2a      	cmp	r2, #42	; 0x2a
 8003fc6:	920a      	str	r2, [sp, #40]	; 0x28
 8003fc8:	d10f      	bne.n	8003fea <_vfprintf_r+0x3ca>
 8003fca:	6835      	ldr	r5, [r6, #0]
 8003fcc:	930e      	str	r3, [sp, #56]	; 0x38
 8003fce:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8003fd2:	3604      	adds	r6, #4
 8003fd4:	e6ca      	b.n	8003d6c <_vfprintf_r+0x14c>
 8003fd6:	fb07 2505 	mla	r5, r7, r5, r2
 8003fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fde:	920a      	str	r2, [sp, #40]	; 0x28
 8003fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fe2:	3a30      	subs	r2, #48	; 0x30
 8003fe4:	2a09      	cmp	r2, #9
 8003fe6:	d9f6      	bls.n	8003fd6 <_vfprintf_r+0x3b6>
 8003fe8:	e6c5      	b.n	8003d76 <_vfprintf_r+0x156>
 8003fea:	2500      	movs	r5, #0
 8003fec:	e7f8      	b.n	8003fe0 <_vfprintf_r+0x3c0>
 8003fee:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8003ff2:	e6bb      	b.n	8003d6c <_vfprintf_r+0x14c>
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ff8:	9211      	str	r2, [sp, #68]	; 0x44
 8003ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ffc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003ffe:	3a30      	subs	r2, #48	; 0x30
 8004000:	fb07 2201 	mla	r2, r7, r1, r2
 8004004:	9211      	str	r2, [sp, #68]	; 0x44
 8004006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800400a:	920a      	str	r2, [sp, #40]	; 0x28
 800400c:	3a30      	subs	r2, #48	; 0x30
 800400e:	2a09      	cmp	r2, #9
 8004010:	d9f3      	bls.n	8003ffa <_vfprintf_r+0x3da>
 8004012:	e6b0      	b.n	8003d76 <_vfprintf_r+0x156>
 8004014:	f04a 0a08 	orr.w	sl, sl, #8
 8004018:	e6a8      	b.n	8003d6c <_vfprintf_r+0x14c>
 800401a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b68      	cmp	r3, #104	; 0x68
 8004020:	bf01      	itttt	eq
 8004022:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8004024:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8004028:	3301      	addeq	r3, #1
 800402a:	930e      	streq	r3, [sp, #56]	; 0x38
 800402c:	bf18      	it	ne
 800402e:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8004032:	e69b      	b.n	8003d6c <_vfprintf_r+0x14c>
 8004034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b6c      	cmp	r3, #108	; 0x6c
 800403a:	d105      	bne.n	8004048 <_vfprintf_r+0x428>
 800403c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800403e:	3301      	adds	r3, #1
 8004040:	930e      	str	r3, [sp, #56]	; 0x38
 8004042:	f04a 0a20 	orr.w	sl, sl, #32
 8004046:	e691      	b.n	8003d6c <_vfprintf_r+0x14c>
 8004048:	f04a 0a10 	orr.w	sl, sl, #16
 800404c:	e68e      	b.n	8003d6c <_vfprintf_r+0x14c>
 800404e:	2000      	movs	r0, #0
 8004050:	1d33      	adds	r3, r6, #4
 8004052:	930d      	str	r3, [sp, #52]	; 0x34
 8004054:	6833      	ldr	r3, [r6, #0]
 8004056:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 800405a:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 800405e:	ab3b      	add	r3, sp, #236	; 0xec
 8004060:	4680      	mov	r8, r0
 8004062:	2501      	movs	r5, #1
 8004064:	9012      	str	r0, [sp, #72]	; 0x48
 8004066:	4607      	mov	r7, r0
 8004068:	900b      	str	r0, [sp, #44]	; 0x2c
 800406a:	4606      	mov	r6, r0
 800406c:	9307      	str	r3, [sp, #28]
 800406e:	e308      	b.n	8004682 <_vfprintf_r+0xa62>
 8004070:	f04a 0a10 	orr.w	sl, sl, #16
 8004074:	f01a 0f20 	tst.w	sl, #32
 8004078:	d01f      	beq.n	80040ba <_vfprintf_r+0x49a>
 800407a:	3607      	adds	r6, #7
 800407c:	f026 0607 	bic.w	r6, r6, #7
 8004080:	f106 0308 	add.w	r3, r6, #8
 8004084:	930d      	str	r3, [sp, #52]	; 0x34
 8004086:	e9d6 6700 	ldrd	r6, r7, [r6]
 800408a:	2e00      	cmp	r6, #0
 800408c:	f177 0300 	sbcs.w	r3, r7, #0
 8004090:	da05      	bge.n	800409e <_vfprintf_r+0x47e>
 8004092:	232d      	movs	r3, #45	; 0x2d
 8004094:	4276      	negs	r6, r6
 8004096:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800409a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800409e:	1c6b      	adds	r3, r5, #1
 80040a0:	f040 83fd 	bne.w	800489e <_vfprintf_r+0xc7e>
 80040a4:	2f00      	cmp	r7, #0
 80040a6:	bf08      	it	eq
 80040a8:	2e0a      	cmpeq	r6, #10
 80040aa:	f080 8425 	bcs.w	80048f8 <_vfprintf_r+0xcd8>
 80040ae:	3630      	adds	r6, #48	; 0x30
 80040b0:	ab54      	add	r3, sp, #336	; 0x150
 80040b2:	f803 6d01 	strb.w	r6, [r3, #-1]!
 80040b6:	f000 bc15 	b.w	80048e4 <_vfprintf_r+0xcc4>
 80040ba:	1d33      	adds	r3, r6, #4
 80040bc:	f01a 0f10 	tst.w	sl, #16
 80040c0:	930d      	str	r3, [sp, #52]	; 0x34
 80040c2:	d002      	beq.n	80040ca <_vfprintf_r+0x4aa>
 80040c4:	6836      	ldr	r6, [r6, #0]
 80040c6:	17f7      	asrs	r7, r6, #31
 80040c8:	e7df      	b.n	800408a <_vfprintf_r+0x46a>
 80040ca:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80040ce:	6836      	ldr	r6, [r6, #0]
 80040d0:	d001      	beq.n	80040d6 <_vfprintf_r+0x4b6>
 80040d2:	b236      	sxth	r6, r6
 80040d4:	e7f7      	b.n	80040c6 <_vfprintf_r+0x4a6>
 80040d6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80040da:	bf18      	it	ne
 80040dc:	b276      	sxtbne	r6, r6
 80040de:	e7f2      	b.n	80040c6 <_vfprintf_r+0x4a6>
 80040e0:	3607      	adds	r6, #7
 80040e2:	f026 0607 	bic.w	r6, r6, #7
 80040e6:	f106 0308 	add.w	r3, r6, #8
 80040ea:	930d      	str	r3, [sp, #52]	; 0x34
 80040ec:	6833      	ldr	r3, [r6, #0]
 80040ee:	f04f 32ff 	mov.w	r2, #4294967295
 80040f2:	9314      	str	r3, [sp, #80]	; 0x50
 80040f4:	6873      	ldr	r3, [r6, #4]
 80040f6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80040f8:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80040fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80040fe:	4638      	mov	r0, r7
 8004100:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <_vfprintf_r+0x5c0>)
 8004102:	4631      	mov	r1, r6
 8004104:	f7fc fc82 	bl	8000a0c <__aeabi_dcmpun>
 8004108:	bb08      	cbnz	r0, 800414e <_vfprintf_r+0x52e>
 800410a:	f04f 32ff 	mov.w	r2, #4294967295
 800410e:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <_vfprintf_r+0x5c0>)
 8004110:	4638      	mov	r0, r7
 8004112:	4631      	mov	r1, r6
 8004114:	f7fc fc5c 	bl	80009d0 <__aeabi_dcmple>
 8004118:	b9c8      	cbnz	r0, 800414e <_vfprintf_r+0x52e>
 800411a:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800411e:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8004122:	f7fc fc4b 	bl	80009bc <__aeabi_dcmplt>
 8004126:	b110      	cbz	r0, 800412e <_vfprintf_r+0x50e>
 8004128:	232d      	movs	r3, #45	; 0x2d
 800412a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800412e:	4a2d      	ldr	r2, [pc, #180]	; (80041e4 <_vfprintf_r+0x5c4>)
 8004130:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <_vfprintf_r+0x5c8>)
 8004132:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004134:	f04f 0800 	mov.w	r8, #0
 8004138:	2947      	cmp	r1, #71	; 0x47
 800413a:	bfd8      	it	le
 800413c:	461a      	movle	r2, r3
 800413e:	2503      	movs	r5, #3
 8004140:	9207      	str	r2, [sp, #28]
 8004142:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8004146:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800414a:	f000 bc19 	b.w	8004980 <_vfprintf_r+0xd60>
 800414e:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8004152:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8004156:	f7fc fc59 	bl	8000a0c <__aeabi_dcmpun>
 800415a:	4680      	mov	r8, r0
 800415c:	b140      	cbz	r0, 8004170 <_vfprintf_r+0x550>
 800415e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004160:	4a22      	ldr	r2, [pc, #136]	; (80041ec <_vfprintf_r+0x5cc>)
 8004162:	2b00      	cmp	r3, #0
 8004164:	bfbc      	itt	lt
 8004166:	232d      	movlt	r3, #45	; 0x2d
 8004168:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 800416c:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <_vfprintf_r+0x5d0>)
 800416e:	e7e0      	b.n	8004132 <_vfprintf_r+0x512>
 8004170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004172:	f023 0320 	bic.w	r3, r3, #32
 8004176:	2b41      	cmp	r3, #65	; 0x41
 8004178:	930b      	str	r3, [sp, #44]	; 0x2c
 800417a:	d13b      	bne.n	80041f4 <_vfprintf_r+0x5d4>
 800417c:	2330      	movs	r3, #48	; 0x30
 800417e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8004182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004184:	f04a 0a02 	orr.w	sl, sl, #2
 8004188:	2b61      	cmp	r3, #97	; 0x61
 800418a:	bf14      	ite	ne
 800418c:	2358      	movne	r3, #88	; 0x58
 800418e:	2378      	moveq	r3, #120	; 0x78
 8004190:	2d63      	cmp	r5, #99	; 0x63
 8004192:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8004196:	f340 811b 	ble.w	80043d0 <_vfprintf_r+0x7b0>
 800419a:	1c69      	adds	r1, r5, #1
 800419c:	4658      	mov	r0, fp
 800419e:	f7ff fac5 	bl	800372c <_malloc_r>
 80041a2:	9007      	str	r0, [sp, #28]
 80041a4:	2800      	cmp	r0, #0
 80041a6:	f040 8116 	bne.w	80043d6 <_vfprintf_r+0x7b6>
 80041aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80041ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b2:	f8a9 300c 	strh.w	r3, [r9, #12]
 80041b6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80041ba:	07d8      	lsls	r0, r3, #31
 80041bc:	d407      	bmi.n	80041ce <_vfprintf_r+0x5ae>
 80041be:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80041c2:	0599      	lsls	r1, r3, #22
 80041c4:	d403      	bmi.n	80041ce <_vfprintf_r+0x5ae>
 80041c6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80041ca:	f002 f8dc 	bl	8006386 <__retarget_lock_release_recursive>
 80041ce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80041d2:	065a      	lsls	r2, r3, #25
 80041d4:	f57f ad8e 	bpl.w	8003cf4 <_vfprintf_r+0xd4>
 80041d8:	e56d      	b.n	8003cb6 <_vfprintf_r+0x96>
 80041da:	bf00      	nop
 80041dc:	08007711 	.word	0x08007711
 80041e0:	7fefffff 	.word	0x7fefffff
 80041e4:	080076f4 	.word	0x080076f4
 80041e8:	080076f0 	.word	0x080076f0
 80041ec:	080076fc 	.word	0x080076fc
 80041f0:	080076f8 	.word	0x080076f8
 80041f4:	1c6a      	adds	r2, r5, #1
 80041f6:	f000 80f1 	beq.w	80043dc <_vfprintf_r+0x7bc>
 80041fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041fc:	2b47      	cmp	r3, #71	; 0x47
 80041fe:	d102      	bne.n	8004206 <_vfprintf_r+0x5e6>
 8004200:	2d00      	cmp	r5, #0
 8004202:	f000 80ed 	beq.w	80043e0 <_vfprintf_r+0x7c0>
 8004206:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 800420a:	9315      	str	r3, [sp, #84]	; 0x54
 800420c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800420e:	1e1e      	subs	r6, r3, #0
 8004210:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004212:	9308      	str	r3, [sp, #32]
 8004214:	bfb7      	itett	lt
 8004216:	4633      	movlt	r3, r6
 8004218:	2300      	movge	r3, #0
 800421a:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 800421e:	232d      	movlt	r3, #45	; 0x2d
 8004220:	9319      	str	r3, [sp, #100]	; 0x64
 8004222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004224:	2b41      	cmp	r3, #65	; 0x41
 8004226:	f040 80ec 	bne.w	8004402 <_vfprintf_r+0x7e2>
 800422a:	aa22      	add	r2, sp, #136	; 0x88
 800422c:	9808      	ldr	r0, [sp, #32]
 800422e:	4631      	mov	r1, r6
 8004230:	f002 fbe0 	bl	80069f4 <frexp>
 8004234:	2200      	movs	r2, #0
 8004236:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800423a:	f7fc f94d 	bl	80004d8 <__aeabi_dmul>
 800423e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8004242:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004246:	f7fc fbaf 	bl	80009a8 <__aeabi_dcmpeq>
 800424a:	b108      	cbz	r0, 8004250 <_vfprintf_r+0x630>
 800424c:	2301      	movs	r3, #1
 800424e:	9322      	str	r3, [sp, #136]	; 0x88
 8004250:	4fa7      	ldr	r7, [pc, #668]	; (80044f0 <_vfprintf_r+0x8d0>)
 8004252:	4ba8      	ldr	r3, [pc, #672]	; (80044f4 <_vfprintf_r+0x8d4>)
 8004254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004256:	9e07      	ldr	r6, [sp, #28]
 8004258:	2a61      	cmp	r2, #97	; 0x61
 800425a:	bf08      	it	eq
 800425c:	461f      	moveq	r7, r3
 800425e:	9712      	str	r7, [sp, #72]	; 0x48
 8004260:	1e6f      	subs	r7, r5, #1
 8004262:	2200      	movs	r2, #0
 8004264:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004268:	4ba3      	ldr	r3, [pc, #652]	; (80044f8 <_vfprintf_r+0x8d8>)
 800426a:	f7fc f935 	bl	80004d8 <__aeabi_dmul>
 800426e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004272:	f7fc fbe1 	bl	8000a38 <__aeabi_d2iz>
 8004276:	901e      	str	r0, [sp, #120]	; 0x78
 8004278:	f7fc f8c4 	bl	8000404 <__aeabi_i2d>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004284:	f7fb ff70 	bl	8000168 <__aeabi_dsub>
 8004288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800428a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800428c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004290:	5c9b      	ldrb	r3, [r3, r2]
 8004292:	971f      	str	r7, [sp, #124]	; 0x7c
 8004294:	f806 3b01 	strb.w	r3, [r6], #1
 8004298:	1c7b      	adds	r3, r7, #1
 800429a:	d006      	beq.n	80042aa <_vfprintf_r+0x68a>
 800429c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80042a0:	3f01      	subs	r7, #1
 80042a2:	f7fc fb81 	bl	80009a8 <__aeabi_dcmpeq>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d0db      	beq.n	8004262 <_vfprintf_r+0x642>
 80042aa:	2200      	movs	r2, #0
 80042ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80042b0:	4b92      	ldr	r3, [pc, #584]	; (80044fc <_vfprintf_r+0x8dc>)
 80042b2:	f7fc fba1 	bl	80009f8 <__aeabi_dcmpgt>
 80042b6:	b960      	cbnz	r0, 80042d2 <_vfprintf_r+0x6b2>
 80042b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80042bc:	2200      	movs	r2, #0
 80042be:	4b8f      	ldr	r3, [pc, #572]	; (80044fc <_vfprintf_r+0x8dc>)
 80042c0:	f7fc fb72 	bl	80009a8 <__aeabi_dcmpeq>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	f000 8097 	beq.w	80043f8 <_vfprintf_r+0x7d8>
 80042ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042cc:	07df      	lsls	r7, r3, #31
 80042ce:	f140 8093 	bpl.w	80043f8 <_vfprintf_r+0x7d8>
 80042d2:	2030      	movs	r0, #48	; 0x30
 80042d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042d6:	9626      	str	r6, [sp, #152]	; 0x98
 80042d8:	7bd9      	ldrb	r1, [r3, #15]
 80042da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80042dc:	1e53      	subs	r3, r2, #1
 80042de:	9326      	str	r3, [sp, #152]	; 0x98
 80042e0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80042e4:	428b      	cmp	r3, r1
 80042e6:	d07e      	beq.n	80043e6 <_vfprintf_r+0x7c6>
 80042e8:	2b39      	cmp	r3, #57	; 0x39
 80042ea:	bf0b      	itete	eq
 80042ec:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 80042ee:	3301      	addne	r3, #1
 80042f0:	7a9b      	ldrbeq	r3, [r3, #10]
 80042f2:	b2db      	uxtbne	r3, r3
 80042f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80042f8:	4633      	mov	r3, r6
 80042fa:	9a07      	ldr	r2, [sp, #28]
 80042fc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	9308      	str	r3, [sp, #32]
 8004302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004304:	2b47      	cmp	r3, #71	; 0x47
 8004306:	f040 80c8 	bne.w	800449a <_vfprintf_r+0x87a>
 800430a:	1cf0      	adds	r0, r6, #3
 800430c:	db02      	blt.n	8004314 <_vfprintf_r+0x6f4>
 800430e:	42b5      	cmp	r5, r6
 8004310:	f280 80f6 	bge.w	8004500 <_vfprintf_r+0x8e0>
 8004314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004316:	3b02      	subs	r3, #2
 8004318:	930a      	str	r3, [sp, #40]	; 0x28
 800431a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800431c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8004320:	f021 0120 	bic.w	r1, r1, #32
 8004324:	2941      	cmp	r1, #65	; 0x41
 8004326:	bf08      	it	eq
 8004328:	320f      	addeq	r2, #15
 800432a:	f106 33ff 	add.w	r3, r6, #4294967295
 800432e:	bf06      	itte	eq
 8004330:	b2d2      	uxtbeq	r2, r2
 8004332:	2101      	moveq	r1, #1
 8004334:	2100      	movne	r1, #0
 8004336:	2b00      	cmp	r3, #0
 8004338:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 800433c:	bfb4      	ite	lt
 800433e:	222d      	movlt	r2, #45	; 0x2d
 8004340:	222b      	movge	r2, #43	; 0x2b
 8004342:	9322      	str	r3, [sp, #136]	; 0x88
 8004344:	bfb8      	it	lt
 8004346:	f1c6 0301 	rsblt	r3, r6, #1
 800434a:	2b09      	cmp	r3, #9
 800434c:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8004350:	f340 80ba 	ble.w	80044c8 <_vfprintf_r+0x8a8>
 8004354:	250a      	movs	r5, #10
 8004356:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 800435a:	fb93 f0f5 	sdiv	r0, r3, r5
 800435e:	fb05 3310 	mls	r3, r5, r0, r3
 8004362:	2809      	cmp	r0, #9
 8004364:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8004368:	f802 3c01 	strb.w	r3, [r2, #-1]
 800436c:	f102 31ff 	add.w	r1, r2, #4294967295
 8004370:	4603      	mov	r3, r0
 8004372:	f300 80a2 	bgt.w	80044ba <_vfprintf_r+0x89a>
 8004376:	3330      	adds	r3, #48	; 0x30
 8004378:	f801 3c01 	strb.w	r3, [r1, #-1]
 800437c:	3a02      	subs	r2, #2
 800437e:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8004382:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8004386:	4282      	cmp	r2, r0
 8004388:	4619      	mov	r1, r3
 800438a:	f0c0 8098 	bcc.w	80044be <_vfprintf_r+0x89e>
 800438e:	9a08      	ldr	r2, [sp, #32]
 8004390:	ab24      	add	r3, sp, #144	; 0x90
 8004392:	1acb      	subs	r3, r1, r3
 8004394:	2a01      	cmp	r2, #1
 8004396:	931b      	str	r3, [sp, #108]	; 0x6c
 8004398:	eb03 0502 	add.w	r5, r3, r2
 800439c:	dc02      	bgt.n	80043a4 <_vfprintf_r+0x784>
 800439e:	f01a 0f01 	tst.w	sl, #1
 80043a2:	d001      	beq.n	80043a8 <_vfprintf_r+0x788>
 80043a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043a6:	441d      	add	r5, r3
 80043a8:	2700      	movs	r7, #0
 80043aa:	463e      	mov	r6, r7
 80043ac:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	9315      	str	r3, [sp, #84]	; 0x54
 80043b6:	970b      	str	r7, [sp, #44]	; 0x2c
 80043b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8314 	beq.w	80049e8 <_vfprintf_r+0xdc8>
 80043c0:	232d      	movs	r3, #45	; 0x2d
 80043c2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80043c6:	2300      	movs	r3, #0
 80043c8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80043cc:	9312      	str	r3, [sp, #72]	; 0x48
 80043ce:	e158      	b.n	8004682 <_vfprintf_r+0xa62>
 80043d0:	ab3b      	add	r3, sp, #236	; 0xec
 80043d2:	9307      	str	r3, [sp, #28]
 80043d4:	e717      	b.n	8004206 <_vfprintf_r+0x5e6>
 80043d6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80043da:	e714      	b.n	8004206 <_vfprintf_r+0x5e6>
 80043dc:	2506      	movs	r5, #6
 80043de:	e712      	b.n	8004206 <_vfprintf_r+0x5e6>
 80043e0:	46a8      	mov	r8, r5
 80043e2:	2501      	movs	r5, #1
 80043e4:	e70f      	b.n	8004206 <_vfprintf_r+0x5e6>
 80043e6:	f802 0c01 	strb.w	r0, [r2, #-1]
 80043ea:	e776      	b.n	80042da <_vfprintf_r+0x6ba>
 80043ec:	f803 1b01 	strb.w	r1, [r3], #1
 80043f0:	1af2      	subs	r2, r6, r3
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	dafa      	bge.n	80043ec <_vfprintf_r+0x7cc>
 80043f6:	e780      	b.n	80042fa <_vfprintf_r+0x6da>
 80043f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80043fa:	4633      	mov	r3, r6
 80043fc:	2130      	movs	r1, #48	; 0x30
 80043fe:	4416      	add	r6, r2
 8004400:	e7f6      	b.n	80043f0 <_vfprintf_r+0x7d0>
 8004402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004404:	2b46      	cmp	r3, #70	; 0x46
 8004406:	d004      	beq.n	8004412 <_vfprintf_r+0x7f2>
 8004408:	2b45      	cmp	r3, #69	; 0x45
 800440a:	d140      	bne.n	800448e <_vfprintf_r+0x86e>
 800440c:	1c6f      	adds	r7, r5, #1
 800440e:	2302      	movs	r3, #2
 8004410:	e001      	b.n	8004416 <_vfprintf_r+0x7f6>
 8004412:	462f      	mov	r7, r5
 8004414:	2303      	movs	r3, #3
 8004416:	aa26      	add	r2, sp, #152	; 0x98
 8004418:	9204      	str	r2, [sp, #16]
 800441a:	aa23      	add	r2, sp, #140	; 0x8c
 800441c:	9203      	str	r2, [sp, #12]
 800441e:	aa22      	add	r2, sp, #136	; 0x88
 8004420:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	9a08      	ldr	r2, [sp, #32]
 8004428:	4633      	mov	r3, r6
 800442a:	4658      	mov	r0, fp
 800442c:	f000 ff94 	bl	8005358 <_dtoa_r>
 8004430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004432:	9007      	str	r0, [sp, #28]
 8004434:	2b47      	cmp	r3, #71	; 0x47
 8004436:	d102      	bne.n	800443e <_vfprintf_r+0x81e>
 8004438:	f01a 0f01 	tst.w	sl, #1
 800443c:	d02b      	beq.n	8004496 <_vfprintf_r+0x876>
 800443e:	9b07      	ldr	r3, [sp, #28]
 8004440:	443b      	add	r3, r7
 8004442:	9312      	str	r3, [sp, #72]	; 0x48
 8004444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004446:	2b46      	cmp	r3, #70	; 0x46
 8004448:	d111      	bne.n	800446e <_vfprintf_r+0x84e>
 800444a:	9b07      	ldr	r3, [sp, #28]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b30      	cmp	r3, #48	; 0x30
 8004450:	d109      	bne.n	8004466 <_vfprintf_r+0x846>
 8004452:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8004456:	9808      	ldr	r0, [sp, #32]
 8004458:	4631      	mov	r1, r6
 800445a:	f7fc faa5 	bl	80009a8 <__aeabi_dcmpeq>
 800445e:	b910      	cbnz	r0, 8004466 <_vfprintf_r+0x846>
 8004460:	f1c7 0701 	rsb	r7, r7, #1
 8004464:	9722      	str	r7, [sp, #136]	; 0x88
 8004466:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004468:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800446a:	441a      	add	r2, r3
 800446c:	9212      	str	r2, [sp, #72]	; 0x48
 800446e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8004472:	9808      	ldr	r0, [sp, #32]
 8004474:	4631      	mov	r1, r6
 8004476:	f7fc fa97 	bl	80009a8 <__aeabi_dcmpeq>
 800447a:	b950      	cbnz	r0, 8004492 <_vfprintf_r+0x872>
 800447c:	2230      	movs	r2, #48	; 0x30
 800447e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004480:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004482:	4299      	cmp	r1, r3
 8004484:	d907      	bls.n	8004496 <_vfprintf_r+0x876>
 8004486:	1c59      	adds	r1, r3, #1
 8004488:	9126      	str	r1, [sp, #152]	; 0x98
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e7f7      	b.n	800447e <_vfprintf_r+0x85e>
 800448e:	462f      	mov	r7, r5
 8004490:	e7bd      	b.n	800440e <_vfprintf_r+0x7ee>
 8004492:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004494:	9326      	str	r3, [sp, #152]	; 0x98
 8004496:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004498:	e72f      	b.n	80042fa <_vfprintf_r+0x6da>
 800449a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800449c:	2b46      	cmp	r3, #70	; 0x46
 800449e:	f47f af3c 	bne.w	800431a <_vfprintf_r+0x6fa>
 80044a2:	2e00      	cmp	r6, #0
 80044a4:	dd1d      	ble.n	80044e2 <_vfprintf_r+0x8c2>
 80044a6:	b915      	cbnz	r5, 80044ae <_vfprintf_r+0x88e>
 80044a8:	f01a 0f01 	tst.w	sl, #1
 80044ac:	d03c      	beq.n	8004528 <_vfprintf_r+0x908>
 80044ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044b0:	18f3      	adds	r3, r6, r3
 80044b2:	441d      	add	r5, r3
 80044b4:	2366      	movs	r3, #102	; 0x66
 80044b6:	930a      	str	r3, [sp, #40]	; 0x28
 80044b8:	e03b      	b.n	8004532 <_vfprintf_r+0x912>
 80044ba:	460a      	mov	r2, r1
 80044bc:	e74d      	b.n	800435a <_vfprintf_r+0x73a>
 80044be:	f812 1b01 	ldrb.w	r1, [r2], #1
 80044c2:	f803 1b01 	strb.w	r1, [r3], #1
 80044c6:	e75e      	b.n	8004386 <_vfprintf_r+0x766>
 80044c8:	b941      	cbnz	r1, 80044dc <_vfprintf_r+0x8bc>
 80044ca:	2230      	movs	r2, #48	; 0x30
 80044cc:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 80044d0:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 80044d4:	3330      	adds	r3, #48	; 0x30
 80044d6:	1c51      	adds	r1, r2, #1
 80044d8:	7013      	strb	r3, [r2, #0]
 80044da:	e758      	b.n	800438e <_vfprintf_r+0x76e>
 80044dc:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 80044e0:	e7f8      	b.n	80044d4 <_vfprintf_r+0x8b4>
 80044e2:	b915      	cbnz	r5, 80044ea <_vfprintf_r+0x8ca>
 80044e4:	f01a 0f01 	tst.w	sl, #1
 80044e8:	d020      	beq.n	800452c <_vfprintf_r+0x90c>
 80044ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044ec:	3301      	adds	r3, #1
 80044ee:	e7e0      	b.n	80044b2 <_vfprintf_r+0x892>
 80044f0:	08007711 	.word	0x08007711
 80044f4:	08007700 	.word	0x08007700
 80044f8:	40300000 	.word	0x40300000
 80044fc:	3fe00000 	.word	0x3fe00000
 8004500:	9b08      	ldr	r3, [sp, #32]
 8004502:	42b3      	cmp	r3, r6
 8004504:	dc06      	bgt.n	8004514 <_vfprintf_r+0x8f4>
 8004506:	f01a 0f01 	tst.w	sl, #1
 800450a:	d025      	beq.n	8004558 <_vfprintf_r+0x938>
 800450c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800450e:	18f5      	adds	r5, r6, r3
 8004510:	2367      	movs	r3, #103	; 0x67
 8004512:	e7d0      	b.n	80044b6 <_vfprintf_r+0x896>
 8004514:	9b08      	ldr	r3, [sp, #32]
 8004516:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004518:	2e00      	cmp	r6, #0
 800451a:	eb03 0502 	add.w	r5, r3, r2
 800451e:	dcf7      	bgt.n	8004510 <_vfprintf_r+0x8f0>
 8004520:	f1c6 0301 	rsb	r3, r6, #1
 8004524:	441d      	add	r5, r3
 8004526:	e7f3      	b.n	8004510 <_vfprintf_r+0x8f0>
 8004528:	4635      	mov	r5, r6
 800452a:	e7c3      	b.n	80044b4 <_vfprintf_r+0x894>
 800452c:	2366      	movs	r3, #102	; 0x66
 800452e:	2501      	movs	r5, #1
 8004530:	930a      	str	r3, [sp, #40]	; 0x28
 8004532:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8004536:	930b      	str	r3, [sp, #44]	; 0x2c
 8004538:	d01f      	beq.n	800457a <_vfprintf_r+0x95a>
 800453a:	2700      	movs	r7, #0
 800453c:	2e00      	cmp	r6, #0
 800453e:	970b      	str	r7, [sp, #44]	; 0x2c
 8004540:	f77f af3a 	ble.w	80043b8 <_vfprintf_r+0x798>
 8004544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2bff      	cmp	r3, #255	; 0xff
 800454a:	d107      	bne.n	800455c <_vfprintf_r+0x93c>
 800454c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800454e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004550:	443b      	add	r3, r7
 8004552:	fb02 5503 	mla	r5, r2, r3, r5
 8004556:	e72f      	b.n	80043b8 <_vfprintf_r+0x798>
 8004558:	4635      	mov	r5, r6
 800455a:	e7d9      	b.n	8004510 <_vfprintf_r+0x8f0>
 800455c:	42b3      	cmp	r3, r6
 800455e:	daf5      	bge.n	800454c <_vfprintf_r+0x92c>
 8004560:	1af6      	subs	r6, r6, r3
 8004562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004564:	785b      	ldrb	r3, [r3, #1]
 8004566:	b133      	cbz	r3, 8004576 <_vfprintf_r+0x956>
 8004568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800456a:	3301      	adds	r3, #1
 800456c:	930b      	str	r3, [sp, #44]	; 0x2c
 800456e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004570:	3301      	adds	r3, #1
 8004572:	930c      	str	r3, [sp, #48]	; 0x30
 8004574:	e7e6      	b.n	8004544 <_vfprintf_r+0x924>
 8004576:	3701      	adds	r7, #1
 8004578:	e7e4      	b.n	8004544 <_vfprintf_r+0x924>
 800457a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800457c:	e71c      	b.n	80043b8 <_vfprintf_r+0x798>
 800457e:	4632      	mov	r2, r6
 8004580:	f852 3b04 	ldr.w	r3, [r2], #4
 8004584:	f01a 0f20 	tst.w	sl, #32
 8004588:	920d      	str	r2, [sp, #52]	; 0x34
 800458a:	d009      	beq.n	80045a0 <_vfprintf_r+0x980>
 800458c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800458e:	4610      	mov	r0, r2
 8004590:	17d1      	asrs	r1, r2, #31
 8004592:	e9c3 0100 	strd	r0, r1, [r3]
 8004596:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	; 0x34
 800459a:	9307      	str	r3, [sp, #28]
 800459c:	f7ff bbbe 	b.w	8003d1c <_vfprintf_r+0xfc>
 80045a0:	f01a 0f10 	tst.w	sl, #16
 80045a4:	d002      	beq.n	80045ac <_vfprintf_r+0x98c>
 80045a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e7f4      	b.n	8004596 <_vfprintf_r+0x976>
 80045ac:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80045b0:	d002      	beq.n	80045b8 <_vfprintf_r+0x998>
 80045b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045b4:	801a      	strh	r2, [r3, #0]
 80045b6:	e7ee      	b.n	8004596 <_vfprintf_r+0x976>
 80045b8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80045bc:	d0f3      	beq.n	80045a6 <_vfprintf_r+0x986>
 80045be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e7e8      	b.n	8004596 <_vfprintf_r+0x976>
 80045c4:	f04a 0a10 	orr.w	sl, sl, #16
 80045c8:	f01a 0f20 	tst.w	sl, #32
 80045cc:	d01e      	beq.n	800460c <_vfprintf_r+0x9ec>
 80045ce:	3607      	adds	r6, #7
 80045d0:	f026 0607 	bic.w	r6, r6, #7
 80045d4:	f106 0308 	add.w	r3, r6, #8
 80045d8:	930d      	str	r3, [sp, #52]	; 0x34
 80045da:	e9d6 6700 	ldrd	r6, r7, [r6]
 80045de:	2300      	movs	r3, #0
 80045e0:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80045e4:	2200      	movs	r2, #0
 80045e6:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 80045ea:	1c6a      	adds	r2, r5, #1
 80045ec:	f000 815a 	beq.w	80048a4 <_vfprintf_r+0xc84>
 80045f0:	4652      	mov	r2, sl
 80045f2:	ea56 0107 	orrs.w	r1, r6, r7
 80045f6:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80045fa:	f040 8153 	bne.w	80048a4 <_vfprintf_r+0xc84>
 80045fe:	2d00      	cmp	r5, #0
 8004600:	f000 81d9 	beq.w	80049b6 <_vfprintf_r+0xd96>
 8004604:	2b01      	cmp	r3, #1
 8004606:	f040 8150 	bne.w	80048aa <_vfprintf_r+0xc8a>
 800460a:	e550      	b.n	80040ae <_vfprintf_r+0x48e>
 800460c:	1d33      	adds	r3, r6, #4
 800460e:	f01a 0f10 	tst.w	sl, #16
 8004612:	930d      	str	r3, [sp, #52]	; 0x34
 8004614:	d001      	beq.n	800461a <_vfprintf_r+0x9fa>
 8004616:	6836      	ldr	r6, [r6, #0]
 8004618:	e003      	b.n	8004622 <_vfprintf_r+0xa02>
 800461a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800461e:	d002      	beq.n	8004626 <_vfprintf_r+0xa06>
 8004620:	8836      	ldrh	r6, [r6, #0]
 8004622:	2700      	movs	r7, #0
 8004624:	e7db      	b.n	80045de <_vfprintf_r+0x9be>
 8004626:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800462a:	d0f4      	beq.n	8004616 <_vfprintf_r+0x9f6>
 800462c:	7836      	ldrb	r6, [r6, #0]
 800462e:	e7f8      	b.n	8004622 <_vfprintf_r+0xa02>
 8004630:	1d33      	adds	r3, r6, #4
 8004632:	930d      	str	r3, [sp, #52]	; 0x34
 8004634:	f647 0330 	movw	r3, #30768	; 0x7830
 8004638:	2278      	movs	r2, #120	; 0x78
 800463a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 800463e:	4bab      	ldr	r3, [pc, #684]	; (80048ec <_vfprintf_r+0xccc>)
 8004640:	6836      	ldr	r6, [r6, #0]
 8004642:	931c      	str	r3, [sp, #112]	; 0x70
 8004644:	2700      	movs	r7, #0
 8004646:	f04a 0a02 	orr.w	sl, sl, #2
 800464a:	2302      	movs	r3, #2
 800464c:	920a      	str	r2, [sp, #40]	; 0x28
 800464e:	e7c9      	b.n	80045e4 <_vfprintf_r+0x9c4>
 8004650:	1d33      	adds	r3, r6, #4
 8004652:	930d      	str	r3, [sp, #52]	; 0x34
 8004654:	6833      	ldr	r3, [r6, #0]
 8004656:	2600      	movs	r6, #0
 8004658:	1c69      	adds	r1, r5, #1
 800465a:	9307      	str	r3, [sp, #28]
 800465c:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8004660:	f000 80e0 	beq.w	8004824 <_vfprintf_r+0xc04>
 8004664:	462a      	mov	r2, r5
 8004666:	4631      	mov	r1, r6
 8004668:	4618      	mov	r0, r3
 800466a:	f001 fef9 	bl	8006460 <memchr>
 800466e:	4680      	mov	r8, r0
 8004670:	2800      	cmp	r0, #0
 8004672:	f43f ad68 	beq.w	8004146 <_vfprintf_r+0x526>
 8004676:	46b0      	mov	r8, r6
 8004678:	4637      	mov	r7, r6
 800467a:	9b07      	ldr	r3, [sp, #28]
 800467c:	9612      	str	r6, [sp, #72]	; 0x48
 800467e:	1ac5      	subs	r5, r0, r3
 8004680:	960b      	str	r6, [sp, #44]	; 0x2c
 8004682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004684:	42ab      	cmp	r3, r5
 8004686:	bfb8      	it	lt
 8004688:	462b      	movlt	r3, r5
 800468a:	9315      	str	r3, [sp, #84]	; 0x54
 800468c:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8004690:	b113      	cbz	r3, 8004698 <_vfprintf_r+0xa78>
 8004692:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004694:	3301      	adds	r3, #1
 8004696:	9315      	str	r3, [sp, #84]	; 0x54
 8004698:	f01a 0302 	ands.w	r3, sl, #2
 800469c:	931e      	str	r3, [sp, #120]	; 0x78
 800469e:	bf1e      	ittt	ne
 80046a0:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 80046a2:	3302      	addne	r3, #2
 80046a4:	9315      	strne	r3, [sp, #84]	; 0x54
 80046a6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80046aa:	931f      	str	r3, [sp, #124]	; 0x7c
 80046ac:	d121      	bne.n	80046f2 <_vfprintf_r+0xad2>
 80046ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	9319      	str	r3, [sp, #100]	; 0x64
 80046b8:	dd1b      	ble.n	80046f2 <_vfprintf_r+0xad2>
 80046ba:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80046be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80046c0:	3201      	adds	r2, #1
 80046c2:	2810      	cmp	r0, #16
 80046c4:	488a      	ldr	r0, [pc, #552]	; (80048f0 <_vfprintf_r+0xcd0>)
 80046c6:	f104 0108 	add.w	r1, r4, #8
 80046ca:	6020      	str	r0, [r4, #0]
 80046cc:	f300 8190 	bgt.w	80049f0 <_vfprintf_r+0xdd0>
 80046d0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80046d2:	2a07      	cmp	r2, #7
 80046d4:	4403      	add	r3, r0
 80046d6:	6060      	str	r0, [r4, #4]
 80046d8:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80046dc:	f340 819d 	ble.w	8004a1a <_vfprintf_r+0xdfa>
 80046e0:	aa28      	add	r2, sp, #160	; 0xa0
 80046e2:	4649      	mov	r1, r9
 80046e4:	4658      	mov	r0, fp
 80046e6:	f002 fa0f 	bl	8006b08 <__sprint_r>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f040 84c7 	bne.w	800507e <_vfprintf_r+0x145e>
 80046f0:	ac2b      	add	r4, sp, #172	; 0xac
 80046f2:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80046f6:	b173      	cbz	r3, 8004716 <_vfprintf_r+0xaf6>
 80046f8:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	2301      	movs	r3, #1
 8004700:	6063      	str	r3, [r4, #4]
 8004702:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004704:	3301      	adds	r3, #1
 8004706:	932a      	str	r3, [sp, #168]	; 0xa8
 8004708:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800470a:	3301      	adds	r3, #1
 800470c:	2b07      	cmp	r3, #7
 800470e:	9329      	str	r3, [sp, #164]	; 0xa4
 8004710:	f300 8185 	bgt.w	8004a1e <_vfprintf_r+0xdfe>
 8004714:	3408      	adds	r4, #8
 8004716:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004718:	b16b      	cbz	r3, 8004736 <_vfprintf_r+0xb16>
 800471a:	ab21      	add	r3, sp, #132	; 0x84
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	2302      	movs	r3, #2
 8004720:	6063      	str	r3, [r4, #4]
 8004722:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004724:	3302      	adds	r3, #2
 8004726:	932a      	str	r3, [sp, #168]	; 0xa8
 8004728:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800472a:	3301      	adds	r3, #1
 800472c:	2b07      	cmp	r3, #7
 800472e:	9329      	str	r3, [sp, #164]	; 0xa4
 8004730:	f300 817f 	bgt.w	8004a32 <_vfprintf_r+0xe12>
 8004734:	3408      	adds	r4, #8
 8004736:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004738:	2b80      	cmp	r3, #128	; 0x80
 800473a:	d121      	bne.n	8004780 <_vfprintf_r+0xb60>
 800473c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800473e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	2b00      	cmp	r3, #0
 8004744:	9319      	str	r3, [sp, #100]	; 0x64
 8004746:	dd1b      	ble.n	8004780 <_vfprintf_r+0xb60>
 8004748:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 800474c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800474e:	3201      	adds	r2, #1
 8004750:	2810      	cmp	r0, #16
 8004752:	4868      	ldr	r0, [pc, #416]	; (80048f4 <_vfprintf_r+0xcd4>)
 8004754:	f104 0108 	add.w	r1, r4, #8
 8004758:	6020      	str	r0, [r4, #0]
 800475a:	f300 8174 	bgt.w	8004a46 <_vfprintf_r+0xe26>
 800475e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004760:	2a07      	cmp	r2, #7
 8004762:	4403      	add	r3, r0
 8004764:	6060      	str	r0, [r4, #4]
 8004766:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800476a:	f340 8181 	ble.w	8004a70 <_vfprintf_r+0xe50>
 800476e:	aa28      	add	r2, sp, #160	; 0xa0
 8004770:	4649      	mov	r1, r9
 8004772:	4658      	mov	r0, fp
 8004774:	f002 f9c8 	bl	8006b08 <__sprint_r>
 8004778:	2800      	cmp	r0, #0
 800477a:	f040 8480 	bne.w	800507e <_vfprintf_r+0x145e>
 800477e:	ac2b      	add	r4, sp, #172	; 0xac
 8004780:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004782:	1b5b      	subs	r3, r3, r5
 8004784:	2b00      	cmp	r3, #0
 8004786:	9312      	str	r3, [sp, #72]	; 0x48
 8004788:	dd1b      	ble.n	80047c2 <_vfprintf_r+0xba2>
 800478a:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 800478e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004790:	3201      	adds	r2, #1
 8004792:	2810      	cmp	r0, #16
 8004794:	4857      	ldr	r0, [pc, #348]	; (80048f4 <_vfprintf_r+0xcd4>)
 8004796:	f104 0108 	add.w	r1, r4, #8
 800479a:	6020      	str	r0, [r4, #0]
 800479c:	f300 816a 	bgt.w	8004a74 <_vfprintf_r+0xe54>
 80047a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80047a2:	2a07      	cmp	r2, #7
 80047a4:	4403      	add	r3, r0
 80047a6:	6060      	str	r0, [r4, #4]
 80047a8:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80047ac:	f340 8177 	ble.w	8004a9e <_vfprintf_r+0xe7e>
 80047b0:	aa28      	add	r2, sp, #160	; 0xa0
 80047b2:	4649      	mov	r1, r9
 80047b4:	4658      	mov	r0, fp
 80047b6:	f002 f9a7 	bl	8006b08 <__sprint_r>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	f040 845f 	bne.w	800507e <_vfprintf_r+0x145e>
 80047c0:	ac2b      	add	r4, sp, #172	; 0xac
 80047c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80047c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80047c8:	9312      	str	r3, [sp, #72]	; 0x48
 80047ca:	f040 816a 	bne.w	8004aa2 <_vfprintf_r+0xe82>
 80047ce:	9b07      	ldr	r3, [sp, #28]
 80047d0:	e9c4 3500 	strd	r3, r5, [r4]
 80047d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80047d6:	441d      	add	r5, r3
 80047d8:	952a      	str	r5, [sp, #168]	; 0xa8
 80047da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80047dc:	3301      	adds	r3, #1
 80047de:	2b07      	cmp	r3, #7
 80047e0:	9329      	str	r3, [sp, #164]	; 0xa4
 80047e2:	f300 81a4 	bgt.w	8004b2e <_vfprintf_r+0xf0e>
 80047e6:	3408      	adds	r4, #8
 80047e8:	f01a 0f04 	tst.w	sl, #4
 80047ec:	f040 8429 	bne.w	8005042 <_vfprintf_r+0x1422>
 80047f0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80047f4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80047f6:	428a      	cmp	r2, r1
 80047f8:	bfac      	ite	ge
 80047fa:	189b      	addge	r3, r3, r2
 80047fc:	185b      	addlt	r3, r3, r1
 80047fe:	9310      	str	r3, [sp, #64]	; 0x40
 8004800:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004802:	b13b      	cbz	r3, 8004814 <_vfprintf_r+0xbf4>
 8004804:	aa28      	add	r2, sp, #160	; 0xa0
 8004806:	4649      	mov	r1, r9
 8004808:	4658      	mov	r0, fp
 800480a:	f002 f97d 	bl	8006b08 <__sprint_r>
 800480e:	2800      	cmp	r0, #0
 8004810:	f040 8435 	bne.w	800507e <_vfprintf_r+0x145e>
 8004814:	2300      	movs	r3, #0
 8004816:	9329      	str	r3, [sp, #164]	; 0xa4
 8004818:	f1b8 0f00 	cmp.w	r8, #0
 800481c:	f040 844b 	bne.w	80050b6 <_vfprintf_r+0x1496>
 8004820:	ac2b      	add	r4, sp, #172	; 0xac
 8004822:	e6b8      	b.n	8004596 <_vfprintf_r+0x976>
 8004824:	9807      	ldr	r0, [sp, #28]
 8004826:	f7fb fc93 	bl	8000150 <strlen>
 800482a:	46b0      	mov	r8, r6
 800482c:	4605      	mov	r5, r0
 800482e:	e48a      	b.n	8004146 <_vfprintf_r+0x526>
 8004830:	f04a 0a10 	orr.w	sl, sl, #16
 8004834:	f01a 0f20 	tst.w	sl, #32
 8004838:	d009      	beq.n	800484e <_vfprintf_r+0xc2e>
 800483a:	3607      	adds	r6, #7
 800483c:	f026 0607 	bic.w	r6, r6, #7
 8004840:	f106 0308 	add.w	r3, r6, #8
 8004844:	930d      	str	r3, [sp, #52]	; 0x34
 8004846:	e9d6 6700 	ldrd	r6, r7, [r6]
 800484a:	2301      	movs	r3, #1
 800484c:	e6ca      	b.n	80045e4 <_vfprintf_r+0x9c4>
 800484e:	1d33      	adds	r3, r6, #4
 8004850:	f01a 0f10 	tst.w	sl, #16
 8004854:	930d      	str	r3, [sp, #52]	; 0x34
 8004856:	d001      	beq.n	800485c <_vfprintf_r+0xc3c>
 8004858:	6836      	ldr	r6, [r6, #0]
 800485a:	e003      	b.n	8004864 <_vfprintf_r+0xc44>
 800485c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8004860:	d002      	beq.n	8004868 <_vfprintf_r+0xc48>
 8004862:	8836      	ldrh	r6, [r6, #0]
 8004864:	2700      	movs	r7, #0
 8004866:	e7f0      	b.n	800484a <_vfprintf_r+0xc2a>
 8004868:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800486c:	d0f4      	beq.n	8004858 <_vfprintf_r+0xc38>
 800486e:	7836      	ldrb	r6, [r6, #0]
 8004870:	e7f8      	b.n	8004864 <_vfprintf_r+0xc44>
 8004872:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <_vfprintf_r+0xccc>)
 8004874:	f7ff bb4d 	b.w	8003f12 <_vfprintf_r+0x2f2>
 8004878:	1d33      	adds	r3, r6, #4
 800487a:	f01a 0f10 	tst.w	sl, #16
 800487e:	930d      	str	r3, [sp, #52]	; 0x34
 8004880:	d001      	beq.n	8004886 <_vfprintf_r+0xc66>
 8004882:	6836      	ldr	r6, [r6, #0]
 8004884:	e003      	b.n	800488e <_vfprintf_r+0xc6e>
 8004886:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800488a:	d003      	beq.n	8004894 <_vfprintf_r+0xc74>
 800488c:	8836      	ldrh	r6, [r6, #0]
 800488e:	2700      	movs	r7, #0
 8004890:	f7ff bb4c 	b.w	8003f2c <_vfprintf_r+0x30c>
 8004894:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004898:	d0f3      	beq.n	8004882 <_vfprintf_r+0xc62>
 800489a:	7836      	ldrb	r6, [r6, #0]
 800489c:	e7f7      	b.n	800488e <_vfprintf_r+0xc6e>
 800489e:	4652      	mov	r2, sl
 80048a0:	2301      	movs	r3, #1
 80048a2:	e6a6      	b.n	80045f2 <_vfprintf_r+0x9d2>
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	f43f abfd 	beq.w	80040a4 <_vfprintf_r+0x484>
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	ab54      	add	r3, sp, #336	; 0x150
 80048ae:	d06f      	beq.n	8004990 <_vfprintf_r+0xd70>
 80048b0:	08f1      	lsrs	r1, r6, #3
 80048b2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	08f8      	lsrs	r0, r7, #3
 80048ba:	9207      	str	r2, [sp, #28]
 80048bc:	4607      	mov	r7, r0
 80048be:	f006 0207 	and.w	r2, r6, #7
 80048c2:	460e      	mov	r6, r1
 80048c4:	3230      	adds	r2, #48	; 0x30
 80048c6:	ea56 0107 	orrs.w	r1, r6, r7
 80048ca:	f803 2c01 	strb.w	r2, [r3, #-1]
 80048ce:	d10b      	bne.n	80048e8 <_vfprintf_r+0xcc8>
 80048d0:	f01a 0f01 	tst.w	sl, #1
 80048d4:	d04e      	beq.n	8004974 <_vfprintf_r+0xd54>
 80048d6:	2a30      	cmp	r2, #48	; 0x30
 80048d8:	d04c      	beq.n	8004974 <_vfprintf_r+0xd54>
 80048da:	2230      	movs	r2, #48	; 0x30
 80048dc:	9907      	ldr	r1, [sp, #28]
 80048de:	3b02      	subs	r3, #2
 80048e0:	f801 2c01 	strb.w	r2, [r1, #-1]
 80048e4:	9307      	str	r3, [sp, #28]
 80048e6:	e045      	b.n	8004974 <_vfprintf_r+0xd54>
 80048e8:	9b07      	ldr	r3, [sp, #28]
 80048ea:	e7e1      	b.n	80048b0 <_vfprintf_r+0xc90>
 80048ec:	08007700 	.word	0x08007700
 80048f0:	08007724 	.word	0x08007724
 80048f4:	08007734 	.word	0x08007734
 80048f8:	2300      	movs	r3, #0
 80048fa:	9308      	str	r3, [sp, #32]
 80048fc:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8004900:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8004904:	930b      	str	r3, [sp, #44]	; 0x2c
 8004906:	f108 33ff 	add.w	r3, r8, #4294967295
 800490a:	9307      	str	r3, [sp, #28]
 800490c:	220a      	movs	r2, #10
 800490e:	2300      	movs	r3, #0
 8004910:	4630      	mov	r0, r6
 8004912:	4639      	mov	r1, r7
 8004914:	f7fc fb16 	bl	8000f44 <__aeabi_uldivmod>
 8004918:	9b08      	ldr	r3, [sp, #32]
 800491a:	3230      	adds	r2, #48	; 0x30
 800491c:	3301      	adds	r3, #1
 800491e:	9308      	str	r3, [sp, #32]
 8004920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004922:	f808 2c01 	strb.w	r2, [r8, #-1]
 8004926:	b1d3      	cbz	r3, 800495e <_vfprintf_r+0xd3e>
 8004928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800492a:	9a08      	ldr	r2, [sp, #32]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d115      	bne.n	800495e <_vfprintf_r+0xd3e>
 8004932:	2aff      	cmp	r2, #255	; 0xff
 8004934:	d013      	beq.n	800495e <_vfprintf_r+0xd3e>
 8004936:	2f00      	cmp	r7, #0
 8004938:	bf08      	it	eq
 800493a:	2e0a      	cmpeq	r6, #10
 800493c:	d30f      	bcc.n	800495e <_vfprintf_r+0xd3e>
 800493e:	9b07      	ldr	r3, [sp, #28]
 8004940:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004942:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	4618      	mov	r0, r3
 8004948:	9307      	str	r3, [sp, #28]
 800494a:	f002 f8c8 	bl	8006ade <strncpy>
 800494e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004950:	785b      	ldrb	r3, [r3, #1]
 8004952:	b11b      	cbz	r3, 800495c <_vfprintf_r+0xd3c>
 8004954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004956:	3301      	adds	r3, #1
 8004958:	930c      	str	r3, [sp, #48]	; 0x30
 800495a:	2300      	movs	r3, #0
 800495c:	9308      	str	r3, [sp, #32]
 800495e:	2300      	movs	r3, #0
 8004960:	4630      	mov	r0, r6
 8004962:	4639      	mov	r1, r7
 8004964:	220a      	movs	r2, #10
 8004966:	f7fc faed 	bl	8000f44 <__aeabi_uldivmod>
 800496a:	4606      	mov	r6, r0
 800496c:	460f      	mov	r7, r1
 800496e:	ea56 0307 	orrs.w	r3, r6, r7
 8004972:	d10a      	bne.n	800498a <_vfprintf_r+0xd6a>
 8004974:	f04f 0800 	mov.w	r8, #0
 8004978:	9a07      	ldr	r2, [sp, #28]
 800497a:	ab54      	add	r3, sp, #336	; 0x150
 800497c:	9512      	str	r5, [sp, #72]	; 0x48
 800497e:	1a9d      	subs	r5, r3, r2
 8004980:	4647      	mov	r7, r8
 8004982:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8004986:	4646      	mov	r6, r8
 8004988:	e67b      	b.n	8004682 <_vfprintf_r+0xa62>
 800498a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800498e:	e7ba      	b.n	8004906 <_vfprintf_r+0xce6>
 8004990:	9307      	str	r3, [sp, #28]
 8004992:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004994:	f006 030f 	and.w	r3, r6, #15
 8004998:	5cd3      	ldrb	r3, [r2, r3]
 800499a:	9a07      	ldr	r2, [sp, #28]
 800499c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80049a0:	0933      	lsrs	r3, r6, #4
 80049a2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80049a6:	9207      	str	r2, [sp, #28]
 80049a8:	093a      	lsrs	r2, r7, #4
 80049aa:	461e      	mov	r6, r3
 80049ac:	4617      	mov	r7, r2
 80049ae:	ea56 0307 	orrs.w	r3, r6, r7
 80049b2:	d1ee      	bne.n	8004992 <_vfprintf_r+0xd72>
 80049b4:	e7de      	b.n	8004974 <_vfprintf_r+0xd54>
 80049b6:	b94b      	cbnz	r3, 80049cc <_vfprintf_r+0xdac>
 80049b8:	ab54      	add	r3, sp, #336	; 0x150
 80049ba:	07d6      	lsls	r6, r2, #31
 80049bc:	9307      	str	r3, [sp, #28]
 80049be:	d5d9      	bpl.n	8004974 <_vfprintf_r+0xd54>
 80049c0:	2330      	movs	r3, #48	; 0x30
 80049c2:	9a07      	ldr	r2, [sp, #28]
 80049c4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80049c8:	4613      	mov	r3, r2
 80049ca:	e78b      	b.n	80048e4 <_vfprintf_r+0xcc4>
 80049cc:	ab54      	add	r3, sp, #336	; 0x150
 80049ce:	e789      	b.n	80048e4 <_vfprintf_r+0xcc4>
 80049d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8375 	beq.w	80050c2 <_vfprintf_r+0x14a2>
 80049d8:	2000      	movs	r0, #0
 80049da:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 80049de:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 80049e2:	960d      	str	r6, [sp, #52]	; 0x34
 80049e4:	f7ff bb3b 	b.w	800405e <_vfprintf_r+0x43e>
 80049e8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80049ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80049ee:	e4ed      	b.n	80043cc <_vfprintf_r+0x7ac>
 80049f0:	2010      	movs	r0, #16
 80049f2:	2a07      	cmp	r2, #7
 80049f4:	4403      	add	r3, r0
 80049f6:	6060      	str	r0, [r4, #4]
 80049f8:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80049fc:	dd08      	ble.n	8004a10 <_vfprintf_r+0xdf0>
 80049fe:	aa28      	add	r2, sp, #160	; 0xa0
 8004a00:	4649      	mov	r1, r9
 8004a02:	4658      	mov	r0, fp
 8004a04:	f002 f880 	bl	8006b08 <__sprint_r>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	f040 8338 	bne.w	800507e <_vfprintf_r+0x145e>
 8004a0e:	a92b      	add	r1, sp, #172	; 0xac
 8004a10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a12:	460c      	mov	r4, r1
 8004a14:	3b10      	subs	r3, #16
 8004a16:	9319      	str	r3, [sp, #100]	; 0x64
 8004a18:	e64f      	b.n	80046ba <_vfprintf_r+0xa9a>
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	e669      	b.n	80046f2 <_vfprintf_r+0xad2>
 8004a1e:	aa28      	add	r2, sp, #160	; 0xa0
 8004a20:	4649      	mov	r1, r9
 8004a22:	4658      	mov	r0, fp
 8004a24:	f002 f870 	bl	8006b08 <__sprint_r>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	f040 8328 	bne.w	800507e <_vfprintf_r+0x145e>
 8004a2e:	ac2b      	add	r4, sp, #172	; 0xac
 8004a30:	e671      	b.n	8004716 <_vfprintf_r+0xaf6>
 8004a32:	aa28      	add	r2, sp, #160	; 0xa0
 8004a34:	4649      	mov	r1, r9
 8004a36:	4658      	mov	r0, fp
 8004a38:	f002 f866 	bl	8006b08 <__sprint_r>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	f040 831e 	bne.w	800507e <_vfprintf_r+0x145e>
 8004a42:	ac2b      	add	r4, sp, #172	; 0xac
 8004a44:	e677      	b.n	8004736 <_vfprintf_r+0xb16>
 8004a46:	2010      	movs	r0, #16
 8004a48:	2a07      	cmp	r2, #7
 8004a4a:	4403      	add	r3, r0
 8004a4c:	6060      	str	r0, [r4, #4]
 8004a4e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004a52:	dd08      	ble.n	8004a66 <_vfprintf_r+0xe46>
 8004a54:	aa28      	add	r2, sp, #160	; 0xa0
 8004a56:	4649      	mov	r1, r9
 8004a58:	4658      	mov	r0, fp
 8004a5a:	f002 f855 	bl	8006b08 <__sprint_r>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	f040 830d 	bne.w	800507e <_vfprintf_r+0x145e>
 8004a64:	a92b      	add	r1, sp, #172	; 0xac
 8004a66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a68:	460c      	mov	r4, r1
 8004a6a:	3b10      	subs	r3, #16
 8004a6c:	9319      	str	r3, [sp, #100]	; 0x64
 8004a6e:	e66b      	b.n	8004748 <_vfprintf_r+0xb28>
 8004a70:	460c      	mov	r4, r1
 8004a72:	e685      	b.n	8004780 <_vfprintf_r+0xb60>
 8004a74:	2010      	movs	r0, #16
 8004a76:	2a07      	cmp	r2, #7
 8004a78:	4403      	add	r3, r0
 8004a7a:	6060      	str	r0, [r4, #4]
 8004a7c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004a80:	dd08      	ble.n	8004a94 <_vfprintf_r+0xe74>
 8004a82:	aa28      	add	r2, sp, #160	; 0xa0
 8004a84:	4649      	mov	r1, r9
 8004a86:	4658      	mov	r0, fp
 8004a88:	f002 f83e 	bl	8006b08 <__sprint_r>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	f040 82f6 	bne.w	800507e <_vfprintf_r+0x145e>
 8004a92:	a92b      	add	r1, sp, #172	; 0xac
 8004a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a96:	460c      	mov	r4, r1
 8004a98:	3b10      	subs	r3, #16
 8004a9a:	9312      	str	r3, [sp, #72]	; 0x48
 8004a9c:	e675      	b.n	800478a <_vfprintf_r+0xb6a>
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	e68f      	b.n	80047c2 <_vfprintf_r+0xba2>
 8004aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa4:	2b65      	cmp	r3, #101	; 0x65
 8004aa6:	f340 8237 	ble.w	8004f18 <_vfprintf_r+0x12f8>
 8004aaa:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8004aae:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8004ab2:	f7fb ff79 	bl	80009a8 <__aeabi_dcmpeq>
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d069      	beq.n	8004b8e <_vfprintf_r+0xf6e>
 8004aba:	4b6f      	ldr	r3, [pc, #444]	; (8004c78 <_vfprintf_r+0x1058>)
 8004abc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	441d      	add	r5, r3
 8004ac4:	6063      	str	r3, [r4, #4]
 8004ac6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004ac8:	952a      	str	r5, [sp, #168]	; 0xa8
 8004aca:	3301      	adds	r3, #1
 8004acc:	2b07      	cmp	r3, #7
 8004ace:	9329      	str	r3, [sp, #164]	; 0xa4
 8004ad0:	dc37      	bgt.n	8004b42 <_vfprintf_r+0xf22>
 8004ad2:	3408      	adds	r4, #8
 8004ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ad6:	9a08      	ldr	r2, [sp, #32]
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	db03      	blt.n	8004ae4 <_vfprintf_r+0xec4>
 8004adc:	f01a 0f01 	tst.w	sl, #1
 8004ae0:	f43f ae82 	beq.w	80047e8 <_vfprintf_r+0xbc8>
 8004ae4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004ae6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004aec:	6063      	str	r3, [r4, #4]
 8004aee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004af0:	4413      	add	r3, r2
 8004af2:	932a      	str	r3, [sp, #168]	; 0xa8
 8004af4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004af6:	3301      	adds	r3, #1
 8004af8:	2b07      	cmp	r3, #7
 8004afa:	9329      	str	r3, [sp, #164]	; 0xa4
 8004afc:	dc2b      	bgt.n	8004b56 <_vfprintf_r+0xf36>
 8004afe:	3408      	adds	r4, #8
 8004b00:	9b08      	ldr	r3, [sp, #32]
 8004b02:	1e5d      	subs	r5, r3, #1
 8004b04:	2d00      	cmp	r5, #0
 8004b06:	f77f ae6f 	ble.w	80047e8 <_vfprintf_r+0xbc8>
 8004b0a:	2710      	movs	r7, #16
 8004b0c:	4e5b      	ldr	r6, [pc, #364]	; (8004c7c <_vfprintf_r+0x105c>)
 8004b0e:	2d10      	cmp	r5, #16
 8004b10:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8004b14:	f104 0108 	add.w	r1, r4, #8
 8004b18:	f103 0301 	add.w	r3, r3, #1
 8004b1c:	6026      	str	r6, [r4, #0]
 8004b1e:	dc24      	bgt.n	8004b6a <_vfprintf_r+0xf4a>
 8004b20:	6065      	str	r5, [r4, #4]
 8004b22:	2b07      	cmp	r3, #7
 8004b24:	4415      	add	r5, r2
 8004b26:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8004b2a:	f340 8287 	ble.w	800503c <_vfprintf_r+0x141c>
 8004b2e:	aa28      	add	r2, sp, #160	; 0xa0
 8004b30:	4649      	mov	r1, r9
 8004b32:	4658      	mov	r0, fp
 8004b34:	f001 ffe8 	bl	8006b08 <__sprint_r>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f040 82a0 	bne.w	800507e <_vfprintf_r+0x145e>
 8004b3e:	ac2b      	add	r4, sp, #172	; 0xac
 8004b40:	e652      	b.n	80047e8 <_vfprintf_r+0xbc8>
 8004b42:	aa28      	add	r2, sp, #160	; 0xa0
 8004b44:	4649      	mov	r1, r9
 8004b46:	4658      	mov	r0, fp
 8004b48:	f001 ffde 	bl	8006b08 <__sprint_r>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	f040 8296 	bne.w	800507e <_vfprintf_r+0x145e>
 8004b52:	ac2b      	add	r4, sp, #172	; 0xac
 8004b54:	e7be      	b.n	8004ad4 <_vfprintf_r+0xeb4>
 8004b56:	aa28      	add	r2, sp, #160	; 0xa0
 8004b58:	4649      	mov	r1, r9
 8004b5a:	4658      	mov	r0, fp
 8004b5c:	f001 ffd4 	bl	8006b08 <__sprint_r>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	f040 828c 	bne.w	800507e <_vfprintf_r+0x145e>
 8004b66:	ac2b      	add	r4, sp, #172	; 0xac
 8004b68:	e7ca      	b.n	8004b00 <_vfprintf_r+0xee0>
 8004b6a:	3210      	adds	r2, #16
 8004b6c:	2b07      	cmp	r3, #7
 8004b6e:	6067      	str	r7, [r4, #4]
 8004b70:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8004b74:	dd08      	ble.n	8004b88 <_vfprintf_r+0xf68>
 8004b76:	aa28      	add	r2, sp, #160	; 0xa0
 8004b78:	4649      	mov	r1, r9
 8004b7a:	4658      	mov	r0, fp
 8004b7c:	f001 ffc4 	bl	8006b08 <__sprint_r>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f040 827c 	bne.w	800507e <_vfprintf_r+0x145e>
 8004b86:	a92b      	add	r1, sp, #172	; 0xac
 8004b88:	3d10      	subs	r5, #16
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	e7bf      	b.n	8004b0e <_vfprintf_r+0xeee>
 8004b8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	dc75      	bgt.n	8004c80 <_vfprintf_r+0x1060>
 8004b94:	4b38      	ldr	r3, [pc, #224]	; (8004c78 <_vfprintf_r+0x1058>)
 8004b96:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	441d      	add	r5, r3
 8004b9e:	6063      	str	r3, [r4, #4]
 8004ba0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004ba2:	952a      	str	r5, [sp, #168]	; 0xa8
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	2b07      	cmp	r3, #7
 8004ba8:	9329      	str	r3, [sp, #164]	; 0xa4
 8004baa:	dc3e      	bgt.n	8004c2a <_vfprintf_r+0x100a>
 8004bac:	3408      	adds	r4, #8
 8004bae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bb0:	b92b      	cbnz	r3, 8004bbe <_vfprintf_r+0xf9e>
 8004bb2:	9b08      	ldr	r3, [sp, #32]
 8004bb4:	b91b      	cbnz	r3, 8004bbe <_vfprintf_r+0xf9e>
 8004bb6:	f01a 0f01 	tst.w	sl, #1
 8004bba:	f43f ae15 	beq.w	80047e8 <_vfprintf_r+0xbc8>
 8004bbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bc2:	6023      	str	r3, [r4, #0]
 8004bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004bca:	4413      	add	r3, r2
 8004bcc:	932a      	str	r3, [sp, #168]	; 0xa8
 8004bce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	2b07      	cmp	r3, #7
 8004bd4:	9329      	str	r3, [sp, #164]	; 0xa4
 8004bd6:	dc32      	bgt.n	8004c3e <_vfprintf_r+0x101e>
 8004bd8:	3408      	adds	r4, #8
 8004bda:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8004bdc:	2d00      	cmp	r5, #0
 8004bde:	da1b      	bge.n	8004c18 <_vfprintf_r+0xff8>
 8004be0:	4623      	mov	r3, r4
 8004be2:	2710      	movs	r7, #16
 8004be4:	4e25      	ldr	r6, [pc, #148]	; (8004c7c <_vfprintf_r+0x105c>)
 8004be6:	426d      	negs	r5, r5
 8004be8:	2d10      	cmp	r5, #16
 8004bea:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8004bee:	f104 0408 	add.w	r4, r4, #8
 8004bf2:	f102 0201 	add.w	r2, r2, #1
 8004bf6:	601e      	str	r6, [r3, #0]
 8004bf8:	dc2b      	bgt.n	8004c52 <_vfprintf_r+0x1032>
 8004bfa:	605d      	str	r5, [r3, #4]
 8004bfc:	2a07      	cmp	r2, #7
 8004bfe:	440d      	add	r5, r1
 8004c00:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 8004c04:	dd08      	ble.n	8004c18 <_vfprintf_r+0xff8>
 8004c06:	aa28      	add	r2, sp, #160	; 0xa0
 8004c08:	4649      	mov	r1, r9
 8004c0a:	4658      	mov	r0, fp
 8004c0c:	f001 ff7c 	bl	8006b08 <__sprint_r>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	f040 8234 	bne.w	800507e <_vfprintf_r+0x145e>
 8004c16:	ac2b      	add	r4, sp, #172	; 0xac
 8004c18:	9b07      	ldr	r3, [sp, #28]
 8004c1a:	9a08      	ldr	r2, [sp, #32]
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	9b08      	ldr	r3, [sp, #32]
 8004c20:	6063      	str	r3, [r4, #4]
 8004c22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004c24:	4413      	add	r3, r2
 8004c26:	932a      	str	r3, [sp, #168]	; 0xa8
 8004c28:	e5d7      	b.n	80047da <_vfprintf_r+0xbba>
 8004c2a:	aa28      	add	r2, sp, #160	; 0xa0
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	4658      	mov	r0, fp
 8004c30:	f001 ff6a 	bl	8006b08 <__sprint_r>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	f040 8222 	bne.w	800507e <_vfprintf_r+0x145e>
 8004c3a:	ac2b      	add	r4, sp, #172	; 0xac
 8004c3c:	e7b7      	b.n	8004bae <_vfprintf_r+0xf8e>
 8004c3e:	aa28      	add	r2, sp, #160	; 0xa0
 8004c40:	4649      	mov	r1, r9
 8004c42:	4658      	mov	r0, fp
 8004c44:	f001 ff60 	bl	8006b08 <__sprint_r>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	f040 8218 	bne.w	800507e <_vfprintf_r+0x145e>
 8004c4e:	ac2b      	add	r4, sp, #172	; 0xac
 8004c50:	e7c3      	b.n	8004bda <_vfprintf_r+0xfba>
 8004c52:	3110      	adds	r1, #16
 8004c54:	2a07      	cmp	r2, #7
 8004c56:	605f      	str	r7, [r3, #4]
 8004c58:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 8004c5c:	dd08      	ble.n	8004c70 <_vfprintf_r+0x1050>
 8004c5e:	aa28      	add	r2, sp, #160	; 0xa0
 8004c60:	4649      	mov	r1, r9
 8004c62:	4658      	mov	r0, fp
 8004c64:	f001 ff50 	bl	8006b08 <__sprint_r>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	f040 8208 	bne.w	800507e <_vfprintf_r+0x145e>
 8004c6e:	ac2b      	add	r4, sp, #172	; 0xac
 8004c70:	3d10      	subs	r5, #16
 8004c72:	4623      	mov	r3, r4
 8004c74:	e7b8      	b.n	8004be8 <_vfprintf_r+0xfc8>
 8004c76:	bf00      	nop
 8004c78:	08007722 	.word	0x08007722
 8004c7c:	08007734 	.word	0x08007734
 8004c80:	9b08      	ldr	r3, [sp, #32]
 8004c82:	42b3      	cmp	r3, r6
 8004c84:	bfa8      	it	ge
 8004c86:	4633      	movge	r3, r6
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	461d      	mov	r5, r3
 8004c8c:	dd0c      	ble.n	8004ca8 <_vfprintf_r+0x1088>
 8004c8e:	9b07      	ldr	r3, [sp, #28]
 8004c90:	e9c4 3500 	strd	r3, r5, [r4]
 8004c94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c96:	442b      	add	r3, r5
 8004c98:	932a      	str	r3, [sp, #168]	; 0xa8
 8004c9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	2b07      	cmp	r3, #7
 8004ca0:	9329      	str	r3, [sp, #164]	; 0xa4
 8004ca2:	f300 8087 	bgt.w	8004db4 <_vfprintf_r+0x1194>
 8004ca6:	3408      	adds	r4, #8
 8004ca8:	2d00      	cmp	r5, #0
 8004caa:	bfb4      	ite	lt
 8004cac:	4635      	movlt	r5, r6
 8004cae:	1b75      	subge	r5, r6, r5
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	dd19      	ble.n	8004ce8 <_vfprintf_r+0x10c8>
 8004cb4:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8004cb8:	4896      	ldr	r0, [pc, #600]	; (8004f14 <_vfprintf_r+0x12f4>)
 8004cba:	2d10      	cmp	r5, #16
 8004cbc:	f103 0301 	add.w	r3, r3, #1
 8004cc0:	f104 0108 	add.w	r1, r4, #8
 8004cc4:	6020      	str	r0, [r4, #0]
 8004cc6:	dc7f      	bgt.n	8004dc8 <_vfprintf_r+0x11a8>
 8004cc8:	6065      	str	r5, [r4, #4]
 8004cca:	2b07      	cmp	r3, #7
 8004ccc:	4415      	add	r5, r2
 8004cce:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8004cd2:	f340 808c 	ble.w	8004dee <_vfprintf_r+0x11ce>
 8004cd6:	aa28      	add	r2, sp, #160	; 0xa0
 8004cd8:	4649      	mov	r1, r9
 8004cda:	4658      	mov	r0, fp
 8004cdc:	f001 ff14 	bl	8006b08 <__sprint_r>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	f040 81cc 	bne.w	800507e <_vfprintf_r+0x145e>
 8004ce6:	ac2b      	add	r4, sp, #172	; 0xac
 8004ce8:	9b07      	ldr	r3, [sp, #28]
 8004cea:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004cee:	441e      	add	r6, r3
 8004cf0:	d00a      	beq.n	8004d08 <_vfprintf_r+0x10e8>
 8004cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d17c      	bne.n	8004df2 <_vfprintf_r+0x11d2>
 8004cf8:	2f00      	cmp	r7, #0
 8004cfa:	d17c      	bne.n	8004df6 <_vfprintf_r+0x11d6>
 8004cfc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	429e      	cmp	r6, r3
 8004d04:	bf28      	it	cs
 8004d06:	461e      	movcs	r6, r3
 8004d08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d0a:	9a08      	ldr	r2, [sp, #32]
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	db02      	blt.n	8004d16 <_vfprintf_r+0x10f6>
 8004d10:	f01a 0f01 	tst.w	sl, #1
 8004d14:	d00e      	beq.n	8004d34 <_vfprintf_r+0x1114>
 8004d16:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004d18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d1a:	6023      	str	r3, [r4, #0]
 8004d1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d1e:	6063      	str	r3, [r4, #4]
 8004d20:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004d22:	4413      	add	r3, r2
 8004d24:	932a      	str	r3, [sp, #168]	; 0xa8
 8004d26:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004d28:	3301      	adds	r3, #1
 8004d2a:	2b07      	cmp	r3, #7
 8004d2c:	9329      	str	r3, [sp, #164]	; 0xa4
 8004d2e:	f300 80dd 	bgt.w	8004eec <_vfprintf_r+0x12cc>
 8004d32:	3408      	adds	r4, #8
 8004d34:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8004d36:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	1b55      	subs	r5, r2, r5
 8004d3e:	1b9b      	subs	r3, r3, r6
 8004d40:	429d      	cmp	r5, r3
 8004d42:	bfa8      	it	ge
 8004d44:	461d      	movge	r5, r3
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	dd0b      	ble.n	8004d62 <_vfprintf_r+0x1142>
 8004d4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004d4c:	e9c4 6500 	strd	r6, r5, [r4]
 8004d50:	442b      	add	r3, r5
 8004d52:	932a      	str	r3, [sp, #168]	; 0xa8
 8004d54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004d56:	3301      	adds	r3, #1
 8004d58:	2b07      	cmp	r3, #7
 8004d5a:	9329      	str	r3, [sp, #164]	; 0xa4
 8004d5c:	f300 80d0 	bgt.w	8004f00 <_vfprintf_r+0x12e0>
 8004d60:	3408      	adds	r4, #8
 8004d62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d64:	9a08      	ldr	r2, [sp, #32]
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	eba2 0303 	sub.w	r3, r2, r3
 8004d6c:	bfb4      	ite	lt
 8004d6e:	461d      	movlt	r5, r3
 8004d70:	1b5d      	subge	r5, r3, r5
 8004d72:	2d00      	cmp	r5, #0
 8004d74:	f77f ad38 	ble.w	80047e8 <_vfprintf_r+0xbc8>
 8004d78:	2710      	movs	r7, #16
 8004d7a:	4e66      	ldr	r6, [pc, #408]	; (8004f14 <_vfprintf_r+0x12f4>)
 8004d7c:	2d10      	cmp	r5, #16
 8004d7e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8004d82:	f104 0108 	add.w	r1, r4, #8
 8004d86:	f103 0301 	add.w	r3, r3, #1
 8004d8a:	6026      	str	r6, [r4, #0]
 8004d8c:	f77f aec8 	ble.w	8004b20 <_vfprintf_r+0xf00>
 8004d90:	3210      	adds	r2, #16
 8004d92:	2b07      	cmp	r3, #7
 8004d94:	6067      	str	r7, [r4, #4]
 8004d96:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8004d9a:	dd08      	ble.n	8004dae <_vfprintf_r+0x118e>
 8004d9c:	aa28      	add	r2, sp, #160	; 0xa0
 8004d9e:	4649      	mov	r1, r9
 8004da0:	4658      	mov	r0, fp
 8004da2:	f001 feb1 	bl	8006b08 <__sprint_r>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	f040 8169 	bne.w	800507e <_vfprintf_r+0x145e>
 8004dac:	a92b      	add	r1, sp, #172	; 0xac
 8004dae:	3d10      	subs	r5, #16
 8004db0:	460c      	mov	r4, r1
 8004db2:	e7e3      	b.n	8004d7c <_vfprintf_r+0x115c>
 8004db4:	aa28      	add	r2, sp, #160	; 0xa0
 8004db6:	4649      	mov	r1, r9
 8004db8:	4658      	mov	r0, fp
 8004dba:	f001 fea5 	bl	8006b08 <__sprint_r>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	f040 815d 	bne.w	800507e <_vfprintf_r+0x145e>
 8004dc4:	ac2b      	add	r4, sp, #172	; 0xac
 8004dc6:	e76f      	b.n	8004ca8 <_vfprintf_r+0x1088>
 8004dc8:	2010      	movs	r0, #16
 8004dca:	2b07      	cmp	r3, #7
 8004dcc:	4402      	add	r2, r0
 8004dce:	6060      	str	r0, [r4, #4]
 8004dd0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8004dd4:	dd08      	ble.n	8004de8 <_vfprintf_r+0x11c8>
 8004dd6:	aa28      	add	r2, sp, #160	; 0xa0
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4658      	mov	r0, fp
 8004ddc:	f001 fe94 	bl	8006b08 <__sprint_r>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f040 814c 	bne.w	800507e <_vfprintf_r+0x145e>
 8004de6:	a92b      	add	r1, sp, #172	; 0xac
 8004de8:	3d10      	subs	r5, #16
 8004dea:	460c      	mov	r4, r1
 8004dec:	e762      	b.n	8004cb4 <_vfprintf_r+0x1094>
 8004dee:	460c      	mov	r4, r1
 8004df0:	e77a      	b.n	8004ce8 <_vfprintf_r+0x10c8>
 8004df2:	2f00      	cmp	r7, #0
 8004df4:	d04a      	beq.n	8004e8c <_vfprintf_r+0x126c>
 8004df6:	3f01      	subs	r7, #1
 8004df8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e00:	6063      	str	r3, [r4, #4]
 8004e02:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004e04:	4413      	add	r3, r2
 8004e06:	932a      	str	r3, [sp, #168]	; 0xa8
 8004e08:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	2b07      	cmp	r3, #7
 8004e0e:	9329      	str	r3, [sp, #164]	; 0xa4
 8004e10:	dc43      	bgt.n	8004e9a <_vfprintf_r+0x127a>
 8004e12:	3408      	adds	r4, #8
 8004e14:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	1b9a      	subs	r2, r3, r6
 8004e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	4293      	cmp	r3, r2
 8004e22:	bfa8      	it	ge
 8004e24:	4613      	movge	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	461d      	mov	r5, r3
 8004e2a:	dd0a      	ble.n	8004e42 <_vfprintf_r+0x1222>
 8004e2c:	e9c4 6300 	strd	r6, r3, [r4]
 8004e30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004e32:	442b      	add	r3, r5
 8004e34:	932a      	str	r3, [sp, #168]	; 0xa8
 8004e36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004e38:	3301      	adds	r3, #1
 8004e3a:	2b07      	cmp	r3, #7
 8004e3c:	9329      	str	r3, [sp, #164]	; 0xa4
 8004e3e:	dc36      	bgt.n	8004eae <_vfprintf_r+0x128e>
 8004e40:	3408      	adds	r4, #8
 8004e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e44:	2d00      	cmp	r5, #0
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	bfb4      	ite	lt
 8004e4a:	461d      	movlt	r5, r3
 8004e4c:	1b5d      	subge	r5, r3, r5
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	dd18      	ble.n	8004e84 <_vfprintf_r+0x1264>
 8004e52:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8004e56:	482f      	ldr	r0, [pc, #188]	; (8004f14 <_vfprintf_r+0x12f4>)
 8004e58:	2d10      	cmp	r5, #16
 8004e5a:	f102 0201 	add.w	r2, r2, #1
 8004e5e:	f104 0108 	add.w	r1, r4, #8
 8004e62:	6020      	str	r0, [r4, #0]
 8004e64:	dc2d      	bgt.n	8004ec2 <_vfprintf_r+0x12a2>
 8004e66:	442b      	add	r3, r5
 8004e68:	2a07      	cmp	r2, #7
 8004e6a:	6065      	str	r5, [r4, #4]
 8004e6c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004e70:	dd3a      	ble.n	8004ee8 <_vfprintf_r+0x12c8>
 8004e72:	aa28      	add	r2, sp, #160	; 0xa0
 8004e74:	4649      	mov	r1, r9
 8004e76:	4658      	mov	r0, fp
 8004e78:	f001 fe46 	bl	8006b08 <__sprint_r>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	f040 80fe 	bne.w	800507e <_vfprintf_r+0x145e>
 8004e82:	ac2b      	add	r4, sp, #172	; 0xac
 8004e84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	441e      	add	r6, r3
 8004e8a:	e732      	b.n	8004cf2 <_vfprintf_r+0x10d2>
 8004e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	930c      	str	r3, [sp, #48]	; 0x30
 8004e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e94:	3b01      	subs	r3, #1
 8004e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e98:	e7ae      	b.n	8004df8 <_vfprintf_r+0x11d8>
 8004e9a:	aa28      	add	r2, sp, #160	; 0xa0
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	4658      	mov	r0, fp
 8004ea0:	f001 fe32 	bl	8006b08 <__sprint_r>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f040 80ea 	bne.w	800507e <_vfprintf_r+0x145e>
 8004eaa:	ac2b      	add	r4, sp, #172	; 0xac
 8004eac:	e7b2      	b.n	8004e14 <_vfprintf_r+0x11f4>
 8004eae:	aa28      	add	r2, sp, #160	; 0xa0
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	4658      	mov	r0, fp
 8004eb4:	f001 fe28 	bl	8006b08 <__sprint_r>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	f040 80e0 	bne.w	800507e <_vfprintf_r+0x145e>
 8004ebe:	ac2b      	add	r4, sp, #172	; 0xac
 8004ec0:	e7bf      	b.n	8004e42 <_vfprintf_r+0x1222>
 8004ec2:	2010      	movs	r0, #16
 8004ec4:	2a07      	cmp	r2, #7
 8004ec6:	4403      	add	r3, r0
 8004ec8:	6060      	str	r0, [r4, #4]
 8004eca:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004ece:	dd08      	ble.n	8004ee2 <_vfprintf_r+0x12c2>
 8004ed0:	aa28      	add	r2, sp, #160	; 0xa0
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	4658      	mov	r0, fp
 8004ed6:	f001 fe17 	bl	8006b08 <__sprint_r>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	f040 80cf 	bne.w	800507e <_vfprintf_r+0x145e>
 8004ee0:	a92b      	add	r1, sp, #172	; 0xac
 8004ee2:	3d10      	subs	r5, #16
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	e7b4      	b.n	8004e52 <_vfprintf_r+0x1232>
 8004ee8:	460c      	mov	r4, r1
 8004eea:	e7cb      	b.n	8004e84 <_vfprintf_r+0x1264>
 8004eec:	aa28      	add	r2, sp, #160	; 0xa0
 8004eee:	4649      	mov	r1, r9
 8004ef0:	4658      	mov	r0, fp
 8004ef2:	f001 fe09 	bl	8006b08 <__sprint_r>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f040 80c1 	bne.w	800507e <_vfprintf_r+0x145e>
 8004efc:	ac2b      	add	r4, sp, #172	; 0xac
 8004efe:	e719      	b.n	8004d34 <_vfprintf_r+0x1114>
 8004f00:	aa28      	add	r2, sp, #160	; 0xa0
 8004f02:	4649      	mov	r1, r9
 8004f04:	4658      	mov	r0, fp
 8004f06:	f001 fdff 	bl	8006b08 <__sprint_r>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	f040 80b7 	bne.w	800507e <_vfprintf_r+0x145e>
 8004f10:	ac2b      	add	r4, sp, #172	; 0xac
 8004f12:	e726      	b.n	8004d62 <_vfprintf_r+0x1142>
 8004f14:	08007734 	.word	0x08007734
 8004f18:	9a08      	ldr	r2, [sp, #32]
 8004f1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004f1c:	2a01      	cmp	r2, #1
 8004f1e:	9a07      	ldr	r2, [sp, #28]
 8004f20:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004f22:	6022      	str	r2, [r4, #0]
 8004f24:	f04f 0201 	mov.w	r2, #1
 8004f28:	f105 0501 	add.w	r5, r5, #1
 8004f2c:	f103 0301 	add.w	r3, r3, #1
 8004f30:	f104 0608 	add.w	r6, r4, #8
 8004f34:	6062      	str	r2, [r4, #4]
 8004f36:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8004f3a:	dc02      	bgt.n	8004f42 <_vfprintf_r+0x1322>
 8004f3c:	f01a 0f01 	tst.w	sl, #1
 8004f40:	d077      	beq.n	8005032 <_vfprintf_r+0x1412>
 8004f42:	2b07      	cmp	r3, #7
 8004f44:	dd08      	ble.n	8004f58 <_vfprintf_r+0x1338>
 8004f46:	aa28      	add	r2, sp, #160	; 0xa0
 8004f48:	4649      	mov	r1, r9
 8004f4a:	4658      	mov	r0, fp
 8004f4c:	f001 fddc 	bl	8006b08 <__sprint_r>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	f040 8094 	bne.w	800507e <_vfprintf_r+0x145e>
 8004f56:	ae2b      	add	r6, sp, #172	; 0xac
 8004f58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004f5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f5c:	6033      	str	r3, [r6, #0]
 8004f5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f60:	6073      	str	r3, [r6, #4]
 8004f62:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004f64:	4413      	add	r3, r2
 8004f66:	932a      	str	r3, [sp, #168]	; 0xa8
 8004f68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	2b07      	cmp	r3, #7
 8004f6e:	9329      	str	r3, [sp, #164]	; 0xa4
 8004f70:	dc31      	bgt.n	8004fd6 <_vfprintf_r+0x13b6>
 8004f72:	3608      	adds	r6, #8
 8004f74:	9b08      	ldr	r3, [sp, #32]
 8004f76:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8004f7a:	1e5c      	subs	r4, r3, #1
 8004f7c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8004f80:	f7fb fd12 	bl	80009a8 <__aeabi_dcmpeq>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d12f      	bne.n	8004fe8 <_vfprintf_r+0x13c8>
 8004f88:	9b07      	ldr	r3, [sp, #28]
 8004f8a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	e9c6 3400 	strd	r3, r4, [r6]
 8004f92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004f94:	9908      	ldr	r1, [sp, #32]
 8004f96:	3201      	adds	r2, #1
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	440b      	add	r3, r1
 8004f9c:	2a07      	cmp	r2, #7
 8004f9e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004fa2:	dd49      	ble.n	8005038 <_vfprintf_r+0x1418>
 8004fa4:	aa28      	add	r2, sp, #160	; 0xa0
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	4658      	mov	r0, fp
 8004faa:	f001 fdad 	bl	8006b08 <__sprint_r>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d165      	bne.n	800507e <_vfprintf_r+0x145e>
 8004fb2:	ae2b      	add	r6, sp, #172	; 0xac
 8004fb4:	ab24      	add	r3, sp, #144	; 0x90
 8004fb6:	6033      	str	r3, [r6, #0]
 8004fb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004fbc:	6073      	str	r3, [r6, #4]
 8004fbe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004fc0:	4413      	add	r3, r2
 8004fc2:	932a      	str	r3, [sp, #168]	; 0xa8
 8004fc4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	2b07      	cmp	r3, #7
 8004fca:	9329      	str	r3, [sp, #164]	; 0xa4
 8004fcc:	f73f adaf 	bgt.w	8004b2e <_vfprintf_r+0xf0e>
 8004fd0:	f106 0408 	add.w	r4, r6, #8
 8004fd4:	e408      	b.n	80047e8 <_vfprintf_r+0xbc8>
 8004fd6:	aa28      	add	r2, sp, #160	; 0xa0
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4658      	mov	r0, fp
 8004fdc:	f001 fd94 	bl	8006b08 <__sprint_r>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d14c      	bne.n	800507e <_vfprintf_r+0x145e>
 8004fe4:	ae2b      	add	r6, sp, #172	; 0xac
 8004fe6:	e7c5      	b.n	8004f74 <_vfprintf_r+0x1354>
 8004fe8:	2c00      	cmp	r4, #0
 8004fea:	dde3      	ble.n	8004fb4 <_vfprintf_r+0x1394>
 8004fec:	2710      	movs	r7, #16
 8004fee:	4d3c      	ldr	r5, [pc, #240]	; (80050e0 <_vfprintf_r+0x14c0>)
 8004ff0:	2c10      	cmp	r4, #16
 8004ff2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8004ff6:	f106 0108 	add.w	r1, r6, #8
 8004ffa:	f103 0301 	add.w	r3, r3, #1
 8004ffe:	6035      	str	r5, [r6, #0]
 8005000:	dc07      	bgt.n	8005012 <_vfprintf_r+0x13f2>
 8005002:	6074      	str	r4, [r6, #4]
 8005004:	2b07      	cmp	r3, #7
 8005006:	4414      	add	r4, r2
 8005008:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 800500c:	dcca      	bgt.n	8004fa4 <_vfprintf_r+0x1384>
 800500e:	460e      	mov	r6, r1
 8005010:	e7d0      	b.n	8004fb4 <_vfprintf_r+0x1394>
 8005012:	3210      	adds	r2, #16
 8005014:	2b07      	cmp	r3, #7
 8005016:	6077      	str	r7, [r6, #4]
 8005018:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800501c:	dd06      	ble.n	800502c <_vfprintf_r+0x140c>
 800501e:	aa28      	add	r2, sp, #160	; 0xa0
 8005020:	4649      	mov	r1, r9
 8005022:	4658      	mov	r0, fp
 8005024:	f001 fd70 	bl	8006b08 <__sprint_r>
 8005028:	bb48      	cbnz	r0, 800507e <_vfprintf_r+0x145e>
 800502a:	a92b      	add	r1, sp, #172	; 0xac
 800502c:	3c10      	subs	r4, #16
 800502e:	460e      	mov	r6, r1
 8005030:	e7de      	b.n	8004ff0 <_vfprintf_r+0x13d0>
 8005032:	2b07      	cmp	r3, #7
 8005034:	ddbe      	ble.n	8004fb4 <_vfprintf_r+0x1394>
 8005036:	e7b5      	b.n	8004fa4 <_vfprintf_r+0x1384>
 8005038:	3608      	adds	r6, #8
 800503a:	e7bb      	b.n	8004fb4 <_vfprintf_r+0x1394>
 800503c:	460c      	mov	r4, r1
 800503e:	f7ff bbd3 	b.w	80047e8 <_vfprintf_r+0xbc8>
 8005042:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005044:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005046:	1a9d      	subs	r5, r3, r2
 8005048:	2d00      	cmp	r5, #0
 800504a:	f77f abd1 	ble.w	80047f0 <_vfprintf_r+0xbd0>
 800504e:	2710      	movs	r7, #16
 8005050:	4e24      	ldr	r6, [pc, #144]	; (80050e4 <_vfprintf_r+0x14c4>)
 8005052:	2d10      	cmp	r5, #16
 8005054:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8005058:	6026      	str	r6, [r4, #0]
 800505a:	f103 0301 	add.w	r3, r3, #1
 800505e:	dc18      	bgt.n	8005092 <_vfprintf_r+0x1472>
 8005060:	6065      	str	r5, [r4, #4]
 8005062:	2b07      	cmp	r3, #7
 8005064:	4415      	add	r5, r2
 8005066:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800506a:	f77f abc1 	ble.w	80047f0 <_vfprintf_r+0xbd0>
 800506e:	aa28      	add	r2, sp, #160	; 0xa0
 8005070:	4649      	mov	r1, r9
 8005072:	4658      	mov	r0, fp
 8005074:	f001 fd48 	bl	8006b08 <__sprint_r>
 8005078:	2800      	cmp	r0, #0
 800507a:	f43f abb9 	beq.w	80047f0 <_vfprintf_r+0xbd0>
 800507e:	f1b8 0f00 	cmp.w	r8, #0
 8005082:	f43f a898 	beq.w	80041b6 <_vfprintf_r+0x596>
 8005086:	4641      	mov	r1, r8
 8005088:	4658      	mov	r0, fp
 800508a:	f001 f891 	bl	80061b0 <_free_r>
 800508e:	f7ff b892 	b.w	80041b6 <_vfprintf_r+0x596>
 8005092:	3210      	adds	r2, #16
 8005094:	2b07      	cmp	r3, #7
 8005096:	6067      	str	r7, [r4, #4]
 8005098:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800509c:	dc02      	bgt.n	80050a4 <_vfprintf_r+0x1484>
 800509e:	3408      	adds	r4, #8
 80050a0:	3d10      	subs	r5, #16
 80050a2:	e7d6      	b.n	8005052 <_vfprintf_r+0x1432>
 80050a4:	aa28      	add	r2, sp, #160	; 0xa0
 80050a6:	4649      	mov	r1, r9
 80050a8:	4658      	mov	r0, fp
 80050aa:	f001 fd2d 	bl	8006b08 <__sprint_r>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d1e5      	bne.n	800507e <_vfprintf_r+0x145e>
 80050b2:	ac2b      	add	r4, sp, #172	; 0xac
 80050b4:	e7f4      	b.n	80050a0 <_vfprintf_r+0x1480>
 80050b6:	4641      	mov	r1, r8
 80050b8:	4658      	mov	r0, fp
 80050ba:	f001 f879 	bl	80061b0 <_free_r>
 80050be:	f7ff bbaf 	b.w	8004820 <_vfprintf_r+0xc00>
 80050c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80050c4:	b91b      	cbnz	r3, 80050ce <_vfprintf_r+0x14ae>
 80050c6:	2300      	movs	r3, #0
 80050c8:	9329      	str	r3, [sp, #164]	; 0xa4
 80050ca:	f7ff b874 	b.w	80041b6 <_vfprintf_r+0x596>
 80050ce:	aa28      	add	r2, sp, #160	; 0xa0
 80050d0:	4649      	mov	r1, r9
 80050d2:	4658      	mov	r0, fp
 80050d4:	f001 fd18 	bl	8006b08 <__sprint_r>
 80050d8:	2800      	cmp	r0, #0
 80050da:	f47f a86c 	bne.w	80041b6 <_vfprintf_r+0x596>
 80050de:	e7f2      	b.n	80050c6 <_vfprintf_r+0x14a6>
 80050e0:	08007734 	.word	0x08007734
 80050e4:	08007724 	.word	0x08007724

080050e8 <__sbprintf>:
 80050e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ea:	460c      	mov	r4, r1
 80050ec:	461f      	mov	r7, r3
 80050ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050f0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80050f4:	9319      	str	r3, [sp, #100]	; 0x64
 80050f6:	89e3      	ldrh	r3, [r4, #14]
 80050f8:	8989      	ldrh	r1, [r1, #12]
 80050fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80050fe:	69e3      	ldr	r3, [r4, #28]
 8005100:	f021 0102 	bic.w	r1, r1, #2
 8005104:	9307      	str	r3, [sp, #28]
 8005106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005108:	f8ad 100c 	strh.w	r1, [sp, #12]
 800510c:	a91a      	add	r1, sp, #104	; 0x68
 800510e:	4615      	mov	r5, r2
 8005110:	4606      	mov	r6, r0
 8005112:	9309      	str	r3, [sp, #36]	; 0x24
 8005114:	9100      	str	r1, [sp, #0]
 8005116:	2300      	movs	r3, #0
 8005118:	9104      	str	r1, [sp, #16]
 800511a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800511e:	a816      	add	r0, sp, #88	; 0x58
 8005120:	9102      	str	r1, [sp, #8]
 8005122:	9105      	str	r1, [sp, #20]
 8005124:	9306      	str	r3, [sp, #24]
 8005126:	f001 f92b 	bl	8006380 <__retarget_lock_init_recursive>
 800512a:	462a      	mov	r2, r5
 800512c:	463b      	mov	r3, r7
 800512e:	4669      	mov	r1, sp
 8005130:	4630      	mov	r0, r6
 8005132:	f7fe fd75 	bl	8003c20 <_vfprintf_r>
 8005136:	1e05      	subs	r5, r0, #0
 8005138:	db07      	blt.n	800514a <__sbprintf+0x62>
 800513a:	4669      	mov	r1, sp
 800513c:	4630      	mov	r0, r6
 800513e:	f000 ff3b 	bl	8005fb8 <_fflush_r>
 8005142:	2800      	cmp	r0, #0
 8005144:	bf18      	it	ne
 8005146:	f04f 35ff 	movne.w	r5, #4294967295
 800514a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800514e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005150:	065b      	lsls	r3, r3, #25
 8005152:	bf42      	ittt	mi
 8005154:	89a3      	ldrhmi	r3, [r4, #12]
 8005156:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800515a:	81a3      	strhmi	r3, [r4, #12]
 800515c:	f001 f911 	bl	8006382 <__retarget_lock_close_recursive>
 8005160:	4628      	mov	r0, r5
 8005162:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8005166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005168 <__swsetup_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4b2a      	ldr	r3, [pc, #168]	; (8005214 <__swsetup_r+0xac>)
 800516c:	4605      	mov	r5, r0
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	460c      	mov	r4, r1
 8005172:	b118      	cbz	r0, 800517c <__swsetup_r+0x14>
 8005174:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005176:	b90b      	cbnz	r3, 800517c <__swsetup_r+0x14>
 8005178:	f000 ff8a 	bl	8006090 <__sinit>
 800517c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005180:	b29a      	uxth	r2, r3
 8005182:	0711      	lsls	r1, r2, #28
 8005184:	d422      	bmi.n	80051cc <__swsetup_r+0x64>
 8005186:	06d0      	lsls	r0, r2, #27
 8005188:	d407      	bmi.n	800519a <__swsetup_r+0x32>
 800518a:	2209      	movs	r2, #9
 800518c:	602a      	str	r2, [r5, #0]
 800518e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
 8005198:	e034      	b.n	8005204 <__swsetup_r+0x9c>
 800519a:	0751      	lsls	r1, r2, #29
 800519c:	d512      	bpl.n	80051c4 <__swsetup_r+0x5c>
 800519e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80051a0:	b141      	cbz	r1, 80051b4 <__swsetup_r+0x4c>
 80051a2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80051a6:	4299      	cmp	r1, r3
 80051a8:	d002      	beq.n	80051b0 <__swsetup_r+0x48>
 80051aa:	4628      	mov	r0, r5
 80051ac:	f001 f800 	bl	80061b0 <_free_r>
 80051b0:	2300      	movs	r3, #0
 80051b2:	6323      	str	r3, [r4, #48]	; 0x30
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051ba:	81a3      	strh	r3, [r4, #12]
 80051bc:	2300      	movs	r3, #0
 80051be:	6063      	str	r3, [r4, #4]
 80051c0:	6923      	ldr	r3, [r4, #16]
 80051c2:	6023      	str	r3, [r4, #0]
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	f043 0308 	orr.w	r3, r3, #8
 80051ca:	81a3      	strh	r3, [r4, #12]
 80051cc:	6923      	ldr	r3, [r4, #16]
 80051ce:	b94b      	cbnz	r3, 80051e4 <__swsetup_r+0x7c>
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051da:	d003      	beq.n	80051e4 <__swsetup_r+0x7c>
 80051dc:	4621      	mov	r1, r4
 80051de:	4628      	mov	r0, r5
 80051e0:	f001 f8fe 	bl	80063e0 <__smakebuf_r>
 80051e4:	89a2      	ldrh	r2, [r4, #12]
 80051e6:	f012 0301 	ands.w	r3, r2, #1
 80051ea:	d00c      	beq.n	8005206 <__swsetup_r+0x9e>
 80051ec:	2300      	movs	r3, #0
 80051ee:	60a3      	str	r3, [r4, #8]
 80051f0:	6963      	ldr	r3, [r4, #20]
 80051f2:	425b      	negs	r3, r3
 80051f4:	61a3      	str	r3, [r4, #24]
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	b953      	cbnz	r3, 8005210 <__swsetup_r+0xa8>
 80051fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051fe:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005202:	d1c4      	bne.n	800518e <__swsetup_r+0x26>
 8005204:	bd38      	pop	{r3, r4, r5, pc}
 8005206:	0792      	lsls	r2, r2, #30
 8005208:	bf58      	it	pl
 800520a:	6963      	ldrpl	r3, [r4, #20]
 800520c:	60a3      	str	r3, [r4, #8]
 800520e:	e7f2      	b.n	80051f6 <__swsetup_r+0x8e>
 8005210:	2000      	movs	r0, #0
 8005212:	e7f7      	b.n	8005204 <__swsetup_r+0x9c>
 8005214:	20000010 	.word	0x20000010

08005218 <register_fini>:
 8005218:	4b02      	ldr	r3, [pc, #8]	; (8005224 <register_fini+0xc>)
 800521a:	b113      	cbz	r3, 8005222 <register_fini+0xa>
 800521c:	4802      	ldr	r0, [pc, #8]	; (8005228 <register_fini+0x10>)
 800521e:	f000 b805 	b.w	800522c <atexit>
 8005222:	4770      	bx	lr
 8005224:	00000000 	.word	0x00000000
 8005228:	080060e1 	.word	0x080060e1

0800522c <atexit>:
 800522c:	2300      	movs	r3, #0
 800522e:	4601      	mov	r1, r0
 8005230:	461a      	mov	r2, r3
 8005232:	4618      	mov	r0, r3
 8005234:	f001 bcac 	b.w	8006b90 <__register_exitproc>

08005238 <quorem>:
 8005238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	6903      	ldr	r3, [r0, #16]
 800523e:	690c      	ldr	r4, [r1, #16]
 8005240:	4680      	mov	r8, r0
 8005242:	42a3      	cmp	r3, r4
 8005244:	f2c0 8084 	blt.w	8005350 <quorem+0x118>
 8005248:	3c01      	subs	r4, #1
 800524a:	f101 0714 	add.w	r7, r1, #20
 800524e:	f100 0614 	add.w	r6, r0, #20
 8005252:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005256:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800525a:	3501      	adds	r5, #1
 800525c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005260:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005264:	eb06 030c 	add.w	r3, r6, ip
 8005268:	eb07 090c 	add.w	r9, r7, ip
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	b39d      	cbz	r5, 80052d8 <quorem+0xa0>
 8005270:	f04f 0a00 	mov.w	sl, #0
 8005274:	4638      	mov	r0, r7
 8005276:	46b6      	mov	lr, r6
 8005278:	46d3      	mov	fp, sl
 800527a:	f850 2b04 	ldr.w	r2, [r0], #4
 800527e:	b293      	uxth	r3, r2
 8005280:	fb05 a303 	mla	r3, r5, r3, sl
 8005284:	0c12      	lsrs	r2, r2, #16
 8005286:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800528a:	fb05 a202 	mla	r2, r5, r2, sl
 800528e:	b29b      	uxth	r3, r3
 8005290:	ebab 0303 	sub.w	r3, fp, r3
 8005294:	f8de b000 	ldr.w	fp, [lr]
 8005298:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800529c:	fa1f fb8b 	uxth.w	fp, fp
 80052a0:	445b      	add	r3, fp
 80052a2:	fa1f fb82 	uxth.w	fp, r2
 80052a6:	f8de 2000 	ldr.w	r2, [lr]
 80052aa:	4581      	cmp	r9, r0
 80052ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80052b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ba:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80052be:	f84e 3b04 	str.w	r3, [lr], #4
 80052c2:	d2da      	bcs.n	800527a <quorem+0x42>
 80052c4:	f856 300c 	ldr.w	r3, [r6, ip]
 80052c8:	b933      	cbnz	r3, 80052d8 <quorem+0xa0>
 80052ca:	9b01      	ldr	r3, [sp, #4]
 80052cc:	3b04      	subs	r3, #4
 80052ce:	429e      	cmp	r6, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	d331      	bcc.n	8005338 <quorem+0x100>
 80052d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80052d8:	4640      	mov	r0, r8
 80052da:	f001 fac3 	bl	8006864 <__mcmp>
 80052de:	2800      	cmp	r0, #0
 80052e0:	db26      	blt.n	8005330 <quorem+0xf8>
 80052e2:	4630      	mov	r0, r6
 80052e4:	f04f 0c00 	mov.w	ip, #0
 80052e8:	3501      	adds	r5, #1
 80052ea:	f857 1b04 	ldr.w	r1, [r7], #4
 80052ee:	f8d0 e000 	ldr.w	lr, [r0]
 80052f2:	b28b      	uxth	r3, r1
 80052f4:	ebac 0303 	sub.w	r3, ip, r3
 80052f8:	fa1f f28e 	uxth.w	r2, lr
 80052fc:	4413      	add	r3, r2
 80052fe:	0c0a      	lsrs	r2, r1, #16
 8005300:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005308:	b29b      	uxth	r3, r3
 800530a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800530e:	45b9      	cmp	r9, r7
 8005310:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005314:	f840 3b04 	str.w	r3, [r0], #4
 8005318:	d2e7      	bcs.n	80052ea <quorem+0xb2>
 800531a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800531e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005322:	b92a      	cbnz	r2, 8005330 <quorem+0xf8>
 8005324:	3b04      	subs	r3, #4
 8005326:	429e      	cmp	r6, r3
 8005328:	461a      	mov	r2, r3
 800532a:	d30b      	bcc.n	8005344 <quorem+0x10c>
 800532c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005330:	4628      	mov	r0, r5
 8005332:	b003      	add	sp, #12
 8005334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	3b04      	subs	r3, #4
 800533c:	2a00      	cmp	r2, #0
 800533e:	d1c9      	bne.n	80052d4 <quorem+0x9c>
 8005340:	3c01      	subs	r4, #1
 8005342:	e7c4      	b.n	80052ce <quorem+0x96>
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	3b04      	subs	r3, #4
 8005348:	2a00      	cmp	r2, #0
 800534a:	d1ef      	bne.n	800532c <quorem+0xf4>
 800534c:	3c01      	subs	r4, #1
 800534e:	e7ea      	b.n	8005326 <quorem+0xee>
 8005350:	2000      	movs	r0, #0
 8005352:	e7ee      	b.n	8005332 <quorem+0xfa>
 8005354:	0000      	movs	r0, r0
	...

08005358 <_dtoa_r>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	4616      	mov	r6, r2
 800535e:	461f      	mov	r7, r3
 8005360:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005362:	b095      	sub	sp, #84	; 0x54
 8005364:	4604      	mov	r4, r0
 8005366:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005368:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800536c:	b141      	cbz	r1, 8005380 <_dtoa_r+0x28>
 800536e:	2301      	movs	r3, #1
 8005370:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005372:	4093      	lsls	r3, r2
 8005374:	608b      	str	r3, [r1, #8]
 8005376:	604a      	str	r2, [r1, #4]
 8005378:	f001 f8b0 	bl	80064dc <_Bfree>
 800537c:	2300      	movs	r3, #0
 800537e:	6423      	str	r3, [r4, #64]	; 0x40
 8005380:	1e3b      	subs	r3, r7, #0
 8005382:	bfaf      	iteee	ge
 8005384:	2300      	movge	r3, #0
 8005386:	2201      	movlt	r2, #1
 8005388:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800538c:	9303      	strlt	r3, [sp, #12]
 800538e:	bfa8      	it	ge
 8005390:	602b      	strge	r3, [r5, #0]
 8005392:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005396:	4bb0      	ldr	r3, [pc, #704]	; (8005658 <_dtoa_r+0x300>)
 8005398:	bfb8      	it	lt
 800539a:	602a      	strlt	r2, [r5, #0]
 800539c:	ea33 0308 	bics.w	r3, r3, r8
 80053a0:	d116      	bne.n	80053d0 <_dtoa_r+0x78>
 80053a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80053a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	9b02      	ldr	r3, [sp, #8]
 80053ac:	b923      	cbnz	r3, 80053b8 <_dtoa_r+0x60>
 80053ae:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80053b2:	2800      	cmp	r0, #0
 80053b4:	f000 853f 	beq.w	8005e36 <_dtoa_r+0xade>
 80053b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053ba:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 800566c <_dtoa_r+0x314>
 80053be:	b11b      	cbz	r3, 80053c8 <_dtoa_r+0x70>
 80053c0:	f10b 0303 	add.w	r3, fp, #3
 80053c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	4658      	mov	r0, fp
 80053ca:	b015      	add	sp, #84	; 0x54
 80053cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80053d4:	2200      	movs	r2, #0
 80053d6:	2300      	movs	r3, #0
 80053d8:	4630      	mov	r0, r6
 80053da:	4639      	mov	r1, r7
 80053dc:	f7fb fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80053e0:	4682      	mov	sl, r0
 80053e2:	b160      	cbz	r0, 80053fe <_dtoa_r+0xa6>
 80053e4:	2301      	movs	r3, #1
 80053e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 851e 	beq.w	8005e2e <_dtoa_r+0xad6>
 80053f2:	4b9a      	ldr	r3, [pc, #616]	; (800565c <_dtoa_r+0x304>)
 80053f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	e7e4      	b.n	80053c8 <_dtoa_r+0x70>
 80053fe:	ab12      	add	r3, sp, #72	; 0x48
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	ab13      	add	r3, sp, #76	; 0x4c
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4632      	mov	r2, r6
 8005408:	463b      	mov	r3, r7
 800540a:	4620      	mov	r0, r4
 800540c:	f001 faa2 	bl	8006954 <__d2b>
 8005410:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005414:	9006      	str	r0, [sp, #24]
 8005416:	2d00      	cmp	r5, #0
 8005418:	d07d      	beq.n	8005516 <_dtoa_r+0x1be>
 800541a:	46b0      	mov	r8, r6
 800541c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005420:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005424:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005428:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800542c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005430:	2200      	movs	r2, #0
 8005432:	4b8b      	ldr	r3, [pc, #556]	; (8005660 <_dtoa_r+0x308>)
 8005434:	4640      	mov	r0, r8
 8005436:	4649      	mov	r1, r9
 8005438:	f7fa fe96 	bl	8000168 <__aeabi_dsub>
 800543c:	a380      	add	r3, pc, #512	; (adr r3, 8005640 <_dtoa_r+0x2e8>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f7fb f849 	bl	80004d8 <__aeabi_dmul>
 8005446:	a380      	add	r3, pc, #512	; (adr r3, 8005648 <_dtoa_r+0x2f0>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f7fa fe8e 	bl	800016c <__adddf3>
 8005450:	4606      	mov	r6, r0
 8005452:	4628      	mov	r0, r5
 8005454:	460f      	mov	r7, r1
 8005456:	f7fa ffd5 	bl	8000404 <__aeabi_i2d>
 800545a:	a37d      	add	r3, pc, #500	; (adr r3, 8005650 <_dtoa_r+0x2f8>)
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f7fb f83a 	bl	80004d8 <__aeabi_dmul>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4630      	mov	r0, r6
 800546a:	4639      	mov	r1, r7
 800546c:	f7fa fe7e 	bl	800016c <__adddf3>
 8005470:	4606      	mov	r6, r0
 8005472:	460f      	mov	r7, r1
 8005474:	f7fb fae0 	bl	8000a38 <__aeabi_d2iz>
 8005478:	2200      	movs	r2, #0
 800547a:	4682      	mov	sl, r0
 800547c:	2300      	movs	r3, #0
 800547e:	4630      	mov	r0, r6
 8005480:	4639      	mov	r1, r7
 8005482:	f7fb fa9b 	bl	80009bc <__aeabi_dcmplt>
 8005486:	b148      	cbz	r0, 800549c <_dtoa_r+0x144>
 8005488:	4650      	mov	r0, sl
 800548a:	f7fa ffbb 	bl	8000404 <__aeabi_i2d>
 800548e:	4632      	mov	r2, r6
 8005490:	463b      	mov	r3, r7
 8005492:	f7fb fa89 	bl	80009a8 <__aeabi_dcmpeq>
 8005496:	b908      	cbnz	r0, 800549c <_dtoa_r+0x144>
 8005498:	f10a 3aff 	add.w	sl, sl, #4294967295
 800549c:	f1ba 0f16 	cmp.w	sl, #22
 80054a0:	d85a      	bhi.n	8005558 <_dtoa_r+0x200>
 80054a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054a6:	496f      	ldr	r1, [pc, #444]	; (8005664 <_dtoa_r+0x30c>)
 80054a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80054ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054b0:	f7fb faa2 	bl	80009f8 <__aeabi_dcmpgt>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d051      	beq.n	800555c <_dtoa_r+0x204>
 80054b8:	2300      	movs	r3, #0
 80054ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054be:	930d      	str	r3, [sp, #52]	; 0x34
 80054c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054c2:	1b5d      	subs	r5, r3, r5
 80054c4:	1e6b      	subs	r3, r5, #1
 80054c6:	9307      	str	r3, [sp, #28]
 80054c8:	bf43      	ittte	mi
 80054ca:	2300      	movmi	r3, #0
 80054cc:	f1c5 0901 	rsbmi	r9, r5, #1
 80054d0:	9307      	strmi	r3, [sp, #28]
 80054d2:	f04f 0900 	movpl.w	r9, #0
 80054d6:	f1ba 0f00 	cmp.w	sl, #0
 80054da:	db41      	blt.n	8005560 <_dtoa_r+0x208>
 80054dc:	9b07      	ldr	r3, [sp, #28]
 80054de:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80054e2:	4453      	add	r3, sl
 80054e4:	9307      	str	r3, [sp, #28]
 80054e6:	2300      	movs	r3, #0
 80054e8:	9308      	str	r3, [sp, #32]
 80054ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80054ec:	2b09      	cmp	r3, #9
 80054ee:	f200 808c 	bhi.w	800560a <_dtoa_r+0x2b2>
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	bfc4      	itt	gt
 80054f6:	3b04      	subgt	r3, #4
 80054f8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80054fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80054fc:	bfc8      	it	gt
 80054fe:	2500      	movgt	r5, #0
 8005500:	f1a3 0302 	sub.w	r3, r3, #2
 8005504:	bfd8      	it	le
 8005506:	2501      	movle	r5, #1
 8005508:	2b03      	cmp	r3, #3
 800550a:	f200 808a 	bhi.w	8005622 <_dtoa_r+0x2ca>
 800550e:	e8df f003 	tbb	[pc, r3]
 8005512:	7a78      	.short	0x7a78
 8005514:	6c2f      	.short	0x6c2f
 8005516:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800551a:	441d      	add	r5, r3
 800551c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005520:	2820      	cmp	r0, #32
 8005522:	dd13      	ble.n	800554c <_dtoa_r+0x1f4>
 8005524:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005528:	9b02      	ldr	r3, [sp, #8]
 800552a:	fa08 f800 	lsl.w	r8, r8, r0
 800552e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005532:	fa23 f000 	lsr.w	r0, r3, r0
 8005536:	ea48 0000 	orr.w	r0, r8, r0
 800553a:	f7fa ff53 	bl	80003e4 <__aeabi_ui2d>
 800553e:	2301      	movs	r3, #1
 8005540:	4680      	mov	r8, r0
 8005542:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005546:	3d01      	subs	r5, #1
 8005548:	9310      	str	r3, [sp, #64]	; 0x40
 800554a:	e771      	b.n	8005430 <_dtoa_r+0xd8>
 800554c:	9b02      	ldr	r3, [sp, #8]
 800554e:	f1c0 0020 	rsb	r0, r0, #32
 8005552:	fa03 f000 	lsl.w	r0, r3, r0
 8005556:	e7f0      	b.n	800553a <_dtoa_r+0x1e2>
 8005558:	2301      	movs	r3, #1
 800555a:	e7b0      	b.n	80054be <_dtoa_r+0x166>
 800555c:	900d      	str	r0, [sp, #52]	; 0x34
 800555e:	e7af      	b.n	80054c0 <_dtoa_r+0x168>
 8005560:	f1ca 0300 	rsb	r3, sl, #0
 8005564:	9308      	str	r3, [sp, #32]
 8005566:	2300      	movs	r3, #0
 8005568:	eba9 090a 	sub.w	r9, r9, sl
 800556c:	930c      	str	r3, [sp, #48]	; 0x30
 800556e:	e7bc      	b.n	80054ea <_dtoa_r+0x192>
 8005570:	2301      	movs	r3, #1
 8005572:	9309      	str	r3, [sp, #36]	; 0x24
 8005574:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005576:	2b00      	cmp	r3, #0
 8005578:	dd56      	ble.n	8005628 <_dtoa_r+0x2d0>
 800557a:	4698      	mov	r8, r3
 800557c:	9304      	str	r3, [sp, #16]
 800557e:	2200      	movs	r2, #0
 8005580:	6462      	str	r2, [r4, #68]	; 0x44
 8005582:	2204      	movs	r2, #4
 8005584:	f102 0014 	add.w	r0, r2, #20
 8005588:	4298      	cmp	r0, r3
 800558a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800558c:	d951      	bls.n	8005632 <_dtoa_r+0x2da>
 800558e:	4620      	mov	r0, r4
 8005590:	f000 ff7f 	bl	8006492 <_Balloc>
 8005594:	f1b8 0f0e 	cmp.w	r8, #14
 8005598:	4683      	mov	fp, r0
 800559a:	6420      	str	r0, [r4, #64]	; 0x40
 800559c:	f200 80ed 	bhi.w	800577a <_dtoa_r+0x422>
 80055a0:	2d00      	cmp	r5, #0
 80055a2:	f000 80ea 	beq.w	800577a <_dtoa_r+0x422>
 80055a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055aa:	f1ba 0f00 	cmp.w	sl, #0
 80055ae:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80055b2:	dd77      	ble.n	80056a4 <_dtoa_r+0x34c>
 80055b4:	4a2b      	ldr	r2, [pc, #172]	; (8005664 <_dtoa_r+0x30c>)
 80055b6:	f00a 030f 	and.w	r3, sl, #15
 80055ba:	ea4f 162a 	mov.w	r6, sl, asr #4
 80055be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055c2:	06f0      	lsls	r0, r6, #27
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80055cc:	d568      	bpl.n	80056a0 <_dtoa_r+0x348>
 80055ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80055d2:	4b25      	ldr	r3, [pc, #148]	; (8005668 <_dtoa_r+0x310>)
 80055d4:	2503      	movs	r5, #3
 80055d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055da:	f7fb f8a7 	bl	800072c <__aeabi_ddiv>
 80055de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e2:	f006 060f 	and.w	r6, r6, #15
 80055e6:	4f20      	ldr	r7, [pc, #128]	; (8005668 <_dtoa_r+0x310>)
 80055e8:	e04f      	b.n	800568a <_dtoa_r+0x332>
 80055ea:	2301      	movs	r3, #1
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055f0:	4453      	add	r3, sl
 80055f2:	f103 0801 	add.w	r8, r3, #1
 80055f6:	9304      	str	r3, [sp, #16]
 80055f8:	4643      	mov	r3, r8
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	bfb8      	it	lt
 80055fe:	2301      	movlt	r3, #1
 8005600:	e7bd      	b.n	800557e <_dtoa_r+0x226>
 8005602:	2300      	movs	r3, #0
 8005604:	e7b5      	b.n	8005572 <_dtoa_r+0x21a>
 8005606:	2300      	movs	r3, #0
 8005608:	e7f0      	b.n	80055ec <_dtoa_r+0x294>
 800560a:	2501      	movs	r5, #1
 800560c:	2300      	movs	r3, #0
 800560e:	9509      	str	r5, [sp, #36]	; 0x24
 8005610:	931e      	str	r3, [sp, #120]	; 0x78
 8005612:	f04f 33ff 	mov.w	r3, #4294967295
 8005616:	2200      	movs	r2, #0
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	4698      	mov	r8, r3
 800561c:	2312      	movs	r3, #18
 800561e:	921f      	str	r2, [sp, #124]	; 0x7c
 8005620:	e7ad      	b.n	800557e <_dtoa_r+0x226>
 8005622:	2301      	movs	r3, #1
 8005624:	9309      	str	r3, [sp, #36]	; 0x24
 8005626:	e7f4      	b.n	8005612 <_dtoa_r+0x2ba>
 8005628:	2301      	movs	r3, #1
 800562a:	9304      	str	r3, [sp, #16]
 800562c:	4698      	mov	r8, r3
 800562e:	461a      	mov	r2, r3
 8005630:	e7f5      	b.n	800561e <_dtoa_r+0x2c6>
 8005632:	3101      	adds	r1, #1
 8005634:	6461      	str	r1, [r4, #68]	; 0x44
 8005636:	0052      	lsls	r2, r2, #1
 8005638:	e7a4      	b.n	8005584 <_dtoa_r+0x22c>
 800563a:	bf00      	nop
 800563c:	f3af 8000 	nop.w
 8005640:	636f4361 	.word	0x636f4361
 8005644:	3fd287a7 	.word	0x3fd287a7
 8005648:	8b60c8b3 	.word	0x8b60c8b3
 800564c:	3fc68a28 	.word	0x3fc68a28
 8005650:	509f79fb 	.word	0x509f79fb
 8005654:	3fd34413 	.word	0x3fd34413
 8005658:	7ff00000 	.word	0x7ff00000
 800565c:	08007723 	.word	0x08007723
 8005660:	3ff80000 	.word	0x3ff80000
 8005664:	08007780 	.word	0x08007780
 8005668:	08007758 	.word	0x08007758
 800566c:	0800774d 	.word	0x0800774d
 8005670:	07f1      	lsls	r1, r6, #31
 8005672:	d508      	bpl.n	8005686 <_dtoa_r+0x32e>
 8005674:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800567c:	f7fa ff2c 	bl	80004d8 <__aeabi_dmul>
 8005680:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005684:	3501      	adds	r5, #1
 8005686:	1076      	asrs	r6, r6, #1
 8005688:	3708      	adds	r7, #8
 800568a:	2e00      	cmp	r6, #0
 800568c:	d1f0      	bne.n	8005670 <_dtoa_r+0x318>
 800568e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005696:	f7fb f849 	bl	800072c <__aeabi_ddiv>
 800569a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800569e:	e01b      	b.n	80056d8 <_dtoa_r+0x380>
 80056a0:	2502      	movs	r5, #2
 80056a2:	e7a0      	b.n	80055e6 <_dtoa_r+0x28e>
 80056a4:	f000 80a4 	beq.w	80057f0 <_dtoa_r+0x498>
 80056a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80056ac:	f1ca 0600 	rsb	r6, sl, #0
 80056b0:	4ba0      	ldr	r3, [pc, #640]	; (8005934 <_dtoa_r+0x5dc>)
 80056b2:	f006 020f 	and.w	r2, r6, #15
 80056b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f7fa ff0b 	bl	80004d8 <__aeabi_dmul>
 80056c2:	2502      	movs	r5, #2
 80056c4:	2300      	movs	r3, #0
 80056c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ca:	4f9b      	ldr	r7, [pc, #620]	; (8005938 <_dtoa_r+0x5e0>)
 80056cc:	1136      	asrs	r6, r6, #4
 80056ce:	2e00      	cmp	r6, #0
 80056d0:	f040 8083 	bne.w	80057da <_dtoa_r+0x482>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e0      	bne.n	800569a <_dtoa_r+0x342>
 80056d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 808a 	beq.w	80057f4 <_dtoa_r+0x49c>
 80056e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80056e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056ec:	2200      	movs	r2, #0
 80056ee:	4b93      	ldr	r3, [pc, #588]	; (800593c <_dtoa_r+0x5e4>)
 80056f0:	f7fb f964 	bl	80009bc <__aeabi_dcmplt>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d07d      	beq.n	80057f4 <_dtoa_r+0x49c>
 80056f8:	f1b8 0f00 	cmp.w	r8, #0
 80056fc:	d07a      	beq.n	80057f4 <_dtoa_r+0x49c>
 80056fe:	9b04      	ldr	r3, [sp, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	dd36      	ble.n	8005772 <_dtoa_r+0x41a>
 8005704:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005708:	2200      	movs	r2, #0
 800570a:	4b8d      	ldr	r3, [pc, #564]	; (8005940 <_dtoa_r+0x5e8>)
 800570c:	f7fa fee4 	bl	80004d8 <__aeabi_dmul>
 8005710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005714:	9e04      	ldr	r6, [sp, #16]
 8005716:	f10a 37ff 	add.w	r7, sl, #4294967295
 800571a:	3501      	adds	r5, #1
 800571c:	4628      	mov	r0, r5
 800571e:	f7fa fe71 	bl	8000404 <__aeabi_i2d>
 8005722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005726:	f7fa fed7 	bl	80004d8 <__aeabi_dmul>
 800572a:	2200      	movs	r2, #0
 800572c:	4b85      	ldr	r3, [pc, #532]	; (8005944 <_dtoa_r+0x5ec>)
 800572e:	f7fa fd1d 	bl	800016c <__adddf3>
 8005732:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005736:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800573a:	950b      	str	r5, [sp, #44]	; 0x2c
 800573c:	2e00      	cmp	r6, #0
 800573e:	d15c      	bne.n	80057fa <_dtoa_r+0x4a2>
 8005740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005744:	2200      	movs	r2, #0
 8005746:	4b80      	ldr	r3, [pc, #512]	; (8005948 <_dtoa_r+0x5f0>)
 8005748:	f7fa fd0e 	bl	8000168 <__aeabi_dsub>
 800574c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800574e:	462b      	mov	r3, r5
 8005750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005754:	f7fb f950 	bl	80009f8 <__aeabi_dcmpgt>
 8005758:	2800      	cmp	r0, #0
 800575a:	f040 8282 	bne.w	8005c62 <_dtoa_r+0x90a>
 800575e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005764:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005768:	f7fb f928 	bl	80009bc <__aeabi_dcmplt>
 800576c:	2800      	cmp	r0, #0
 800576e:	f040 8276 	bne.w	8005c5e <_dtoa_r+0x906>
 8005772:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005776:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800577a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800577c:	2b00      	cmp	r3, #0
 800577e:	f2c0 814c 	blt.w	8005a1a <_dtoa_r+0x6c2>
 8005782:	f1ba 0f0e 	cmp.w	sl, #14
 8005786:	f300 8148 	bgt.w	8005a1a <_dtoa_r+0x6c2>
 800578a:	4b6a      	ldr	r3, [pc, #424]	; (8005934 <_dtoa_r+0x5dc>)
 800578c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005798:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800579a:	2b00      	cmp	r3, #0
 800579c:	f280 80d8 	bge.w	8005950 <_dtoa_r+0x5f8>
 80057a0:	f1b8 0f00 	cmp.w	r8, #0
 80057a4:	f300 80d4 	bgt.w	8005950 <_dtoa_r+0x5f8>
 80057a8:	f040 8258 	bne.w	8005c5c <_dtoa_r+0x904>
 80057ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057b0:	2200      	movs	r2, #0
 80057b2:	4b65      	ldr	r3, [pc, #404]	; (8005948 <_dtoa_r+0x5f0>)
 80057b4:	f7fa fe90 	bl	80004d8 <__aeabi_dmul>
 80057b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057bc:	f7fb f912 	bl	80009e4 <__aeabi_dcmpge>
 80057c0:	4646      	mov	r6, r8
 80057c2:	4647      	mov	r7, r8
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f040 822e 	bne.w	8005c26 <_dtoa_r+0x8ce>
 80057ca:	2331      	movs	r3, #49	; 0x31
 80057cc:	f10b 0501 	add.w	r5, fp, #1
 80057d0:	f88b 3000 	strb.w	r3, [fp]
 80057d4:	f10a 0a01 	add.w	sl, sl, #1
 80057d8:	e229      	b.n	8005c2e <_dtoa_r+0x8d6>
 80057da:	07f2      	lsls	r2, r6, #31
 80057dc:	d505      	bpl.n	80057ea <_dtoa_r+0x492>
 80057de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e2:	f7fa fe79 	bl	80004d8 <__aeabi_dmul>
 80057e6:	2301      	movs	r3, #1
 80057e8:	3501      	adds	r5, #1
 80057ea:	1076      	asrs	r6, r6, #1
 80057ec:	3708      	adds	r7, #8
 80057ee:	e76e      	b.n	80056ce <_dtoa_r+0x376>
 80057f0:	2502      	movs	r5, #2
 80057f2:	e771      	b.n	80056d8 <_dtoa_r+0x380>
 80057f4:	4657      	mov	r7, sl
 80057f6:	4646      	mov	r6, r8
 80057f8:	e790      	b.n	800571c <_dtoa_r+0x3c4>
 80057fa:	4b4e      	ldr	r3, [pc, #312]	; (8005934 <_dtoa_r+0x5dc>)
 80057fc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005800:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d048      	beq.n	800589c <_dtoa_r+0x544>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	2000      	movs	r0, #0
 8005810:	494e      	ldr	r1, [pc, #312]	; (800594c <_dtoa_r+0x5f4>)
 8005812:	f7fa ff8b 	bl	800072c <__aeabi_ddiv>
 8005816:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800581a:	f7fa fca5 	bl	8000168 <__aeabi_dsub>
 800581e:	465d      	mov	r5, fp
 8005820:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005828:	f7fb f906 	bl	8000a38 <__aeabi_d2iz>
 800582c:	9011      	str	r0, [sp, #68]	; 0x44
 800582e:	f7fa fde9 	bl	8000404 <__aeabi_i2d>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800583a:	f7fa fc95 	bl	8000168 <__aeabi_dsub>
 800583e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005844:	3330      	adds	r3, #48	; 0x30
 8005846:	f805 3b01 	strb.w	r3, [r5], #1
 800584a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800584e:	f7fb f8b5 	bl	80009bc <__aeabi_dcmplt>
 8005852:	2800      	cmp	r0, #0
 8005854:	d163      	bne.n	800591e <_dtoa_r+0x5c6>
 8005856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800585a:	2000      	movs	r0, #0
 800585c:	4937      	ldr	r1, [pc, #220]	; (800593c <_dtoa_r+0x5e4>)
 800585e:	f7fa fc83 	bl	8000168 <__aeabi_dsub>
 8005862:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005866:	f7fb f8a9 	bl	80009bc <__aeabi_dcmplt>
 800586a:	2800      	cmp	r0, #0
 800586c:	f040 80b6 	bne.w	80059dc <_dtoa_r+0x684>
 8005870:	eba5 030b 	sub.w	r3, r5, fp
 8005874:	429e      	cmp	r6, r3
 8005876:	f77f af7c 	ble.w	8005772 <_dtoa_r+0x41a>
 800587a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800587e:	2200      	movs	r2, #0
 8005880:	4b2f      	ldr	r3, [pc, #188]	; (8005940 <_dtoa_r+0x5e8>)
 8005882:	f7fa fe29 	bl	80004d8 <__aeabi_dmul>
 8005886:	2200      	movs	r2, #0
 8005888:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800588c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005890:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <_dtoa_r+0x5e8>)
 8005892:	f7fa fe21 	bl	80004d8 <__aeabi_dmul>
 8005896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800589a:	e7c3      	b.n	8005824 <_dtoa_r+0x4cc>
 800589c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058a0:	f7fa fe1a 	bl	80004d8 <__aeabi_dmul>
 80058a4:	eb0b 0506 	add.w	r5, fp, r6
 80058a8:	465e      	mov	r6, fp
 80058aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058b2:	f7fb f8c1 	bl	8000a38 <__aeabi_d2iz>
 80058b6:	9011      	str	r0, [sp, #68]	; 0x44
 80058b8:	f7fa fda4 	bl	8000404 <__aeabi_i2d>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058c4:	f7fa fc50 	bl	8000168 <__aeabi_dsub>
 80058c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058ce:	3330      	adds	r3, #48	; 0x30
 80058d0:	f806 3b01 	strb.w	r3, [r6], #1
 80058d4:	42ae      	cmp	r6, r5
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	d124      	bne.n	8005926 <_dtoa_r+0x5ce>
 80058dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058e0:	4b1a      	ldr	r3, [pc, #104]	; (800594c <_dtoa_r+0x5f4>)
 80058e2:	f7fa fc43 	bl	800016c <__adddf3>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ee:	f7fb f883 	bl	80009f8 <__aeabi_dcmpgt>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d172      	bne.n	80059dc <_dtoa_r+0x684>
 80058f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058fa:	2000      	movs	r0, #0
 80058fc:	4913      	ldr	r1, [pc, #76]	; (800594c <_dtoa_r+0x5f4>)
 80058fe:	f7fa fc33 	bl	8000168 <__aeabi_dsub>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800590a:	f7fb f857 	bl	80009bc <__aeabi_dcmplt>
 800590e:	2800      	cmp	r0, #0
 8005910:	f43f af2f 	beq.w	8005772 <_dtoa_r+0x41a>
 8005914:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005918:	1e6a      	subs	r2, r5, #1
 800591a:	2b30      	cmp	r3, #48	; 0x30
 800591c:	d001      	beq.n	8005922 <_dtoa_r+0x5ca>
 800591e:	46ba      	mov	sl, r7
 8005920:	e04b      	b.n	80059ba <_dtoa_r+0x662>
 8005922:	4615      	mov	r5, r2
 8005924:	e7f6      	b.n	8005914 <_dtoa_r+0x5bc>
 8005926:	4b06      	ldr	r3, [pc, #24]	; (8005940 <_dtoa_r+0x5e8>)
 8005928:	f7fa fdd6 	bl	80004d8 <__aeabi_dmul>
 800592c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005930:	e7bd      	b.n	80058ae <_dtoa_r+0x556>
 8005932:	bf00      	nop
 8005934:	08007780 	.word	0x08007780
 8005938:	08007758 	.word	0x08007758
 800593c:	3ff00000 	.word	0x3ff00000
 8005940:	40240000 	.word	0x40240000
 8005944:	401c0000 	.word	0x401c0000
 8005948:	40140000 	.word	0x40140000
 800594c:	3fe00000 	.word	0x3fe00000
 8005950:	465d      	mov	r5, fp
 8005952:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800595a:	4630      	mov	r0, r6
 800595c:	4639      	mov	r1, r7
 800595e:	f7fa fee5 	bl	800072c <__aeabi_ddiv>
 8005962:	f7fb f869 	bl	8000a38 <__aeabi_d2iz>
 8005966:	4681      	mov	r9, r0
 8005968:	f7fa fd4c 	bl	8000404 <__aeabi_i2d>
 800596c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005970:	f7fa fdb2 	bl	80004d8 <__aeabi_dmul>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4630      	mov	r0, r6
 800597a:	4639      	mov	r1, r7
 800597c:	f7fa fbf4 	bl	8000168 <__aeabi_dsub>
 8005980:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005984:	f805 6b01 	strb.w	r6, [r5], #1
 8005988:	eba5 060b 	sub.w	r6, r5, fp
 800598c:	45b0      	cmp	r8, r6
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	d135      	bne.n	8005a00 <_dtoa_r+0x6a8>
 8005994:	f7fa fbea 	bl	800016c <__adddf3>
 8005998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800599c:	4606      	mov	r6, r0
 800599e:	460f      	mov	r7, r1
 80059a0:	f7fb f82a 	bl	80009f8 <__aeabi_dcmpgt>
 80059a4:	b9c8      	cbnz	r0, 80059da <_dtoa_r+0x682>
 80059a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059aa:	4630      	mov	r0, r6
 80059ac:	4639      	mov	r1, r7
 80059ae:	f7fa fffb 	bl	80009a8 <__aeabi_dcmpeq>
 80059b2:	b110      	cbz	r0, 80059ba <_dtoa_r+0x662>
 80059b4:	f019 0f01 	tst.w	r9, #1
 80059b8:	d10f      	bne.n	80059da <_dtoa_r+0x682>
 80059ba:	9906      	ldr	r1, [sp, #24]
 80059bc:	4620      	mov	r0, r4
 80059be:	f000 fd8d 	bl	80064dc <_Bfree>
 80059c2:	2300      	movs	r3, #0
 80059c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059c6:	702b      	strb	r3, [r5, #0]
 80059c8:	f10a 0301 	add.w	r3, sl, #1
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f43f acf9 	beq.w	80053c8 <_dtoa_r+0x70>
 80059d6:	601d      	str	r5, [r3, #0]
 80059d8:	e4f6      	b.n	80053c8 <_dtoa_r+0x70>
 80059da:	4657      	mov	r7, sl
 80059dc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059e0:	1e6b      	subs	r3, r5, #1
 80059e2:	2a39      	cmp	r2, #57	; 0x39
 80059e4:	d106      	bne.n	80059f4 <_dtoa_r+0x69c>
 80059e6:	459b      	cmp	fp, r3
 80059e8:	d108      	bne.n	80059fc <_dtoa_r+0x6a4>
 80059ea:	2330      	movs	r3, #48	; 0x30
 80059ec:	f88b 3000 	strb.w	r3, [fp]
 80059f0:	465b      	mov	r3, fp
 80059f2:	3701      	adds	r7, #1
 80059f4:	781a      	ldrb	r2, [r3, #0]
 80059f6:	3201      	adds	r2, #1
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	e790      	b.n	800591e <_dtoa_r+0x5c6>
 80059fc:	461d      	mov	r5, r3
 80059fe:	e7ed      	b.n	80059dc <_dtoa_r+0x684>
 8005a00:	2200      	movs	r2, #0
 8005a02:	4b99      	ldr	r3, [pc, #612]	; (8005c68 <_dtoa_r+0x910>)
 8005a04:	f7fa fd68 	bl	80004d8 <__aeabi_dmul>
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	460f      	mov	r7, r1
 8005a10:	f7fa ffca 	bl	80009a8 <__aeabi_dcmpeq>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d09e      	beq.n	8005956 <_dtoa_r+0x5fe>
 8005a18:	e7cf      	b.n	80059ba <_dtoa_r+0x662>
 8005a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	f000 8088 	beq.w	8005b32 <_dtoa_r+0x7da>
 8005a22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a24:	2a01      	cmp	r2, #1
 8005a26:	dc6d      	bgt.n	8005b04 <_dtoa_r+0x7ac>
 8005a28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a2a:	2a00      	cmp	r2, #0
 8005a2c:	d066      	beq.n	8005afc <_dtoa_r+0x7a4>
 8005a2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a32:	464d      	mov	r5, r9
 8005a34:	9e08      	ldr	r6, [sp, #32]
 8005a36:	9a07      	ldr	r2, [sp, #28]
 8005a38:	2101      	movs	r1, #1
 8005a3a:	441a      	add	r2, r3
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4499      	add	r9, r3
 8005a40:	9207      	str	r2, [sp, #28]
 8005a42:	f000 fddd 	bl	8006600 <__i2b>
 8005a46:	4607      	mov	r7, r0
 8005a48:	2d00      	cmp	r5, #0
 8005a4a:	dd0b      	ble.n	8005a64 <_dtoa_r+0x70c>
 8005a4c:	9b07      	ldr	r3, [sp, #28]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dd08      	ble.n	8005a64 <_dtoa_r+0x70c>
 8005a52:	42ab      	cmp	r3, r5
 8005a54:	bfa8      	it	ge
 8005a56:	462b      	movge	r3, r5
 8005a58:	9a07      	ldr	r2, [sp, #28]
 8005a5a:	eba9 0903 	sub.w	r9, r9, r3
 8005a5e:	1aed      	subs	r5, r5, r3
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	9307      	str	r3, [sp, #28]
 8005a64:	9b08      	ldr	r3, [sp, #32]
 8005a66:	b1eb      	cbz	r3, 8005aa4 <_dtoa_r+0x74c>
 8005a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d065      	beq.n	8005b3a <_dtoa_r+0x7e2>
 8005a6e:	b18e      	cbz	r6, 8005a94 <_dtoa_r+0x73c>
 8005a70:	4639      	mov	r1, r7
 8005a72:	4632      	mov	r2, r6
 8005a74:	4620      	mov	r0, r4
 8005a76:	f000 fe61 	bl	800673c <__pow5mult>
 8005a7a:	9a06      	ldr	r2, [sp, #24]
 8005a7c:	4601      	mov	r1, r0
 8005a7e:	4607      	mov	r7, r0
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 fdc6 	bl	8006612 <__multiply>
 8005a86:	9906      	ldr	r1, [sp, #24]
 8005a88:	900a      	str	r0, [sp, #40]	; 0x28
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 fd26 	bl	80064dc <_Bfree>
 8005a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a92:	9306      	str	r3, [sp, #24]
 8005a94:	9b08      	ldr	r3, [sp, #32]
 8005a96:	1b9a      	subs	r2, r3, r6
 8005a98:	d004      	beq.n	8005aa4 <_dtoa_r+0x74c>
 8005a9a:	9906      	ldr	r1, [sp, #24]
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 fe4d 	bl	800673c <__pow5mult>
 8005aa2:	9006      	str	r0, [sp, #24]
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 fdaa 	bl	8006600 <__i2b>
 8005aac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aae:	4606      	mov	r6, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 81ca 	beq.w	8005e4a <_dtoa_r+0xaf2>
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	4601      	mov	r1, r0
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 fe3e 	bl	800673c <__pow5mult>
 8005ac0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	dc3e      	bgt.n	8005b46 <_dtoa_r+0x7ee>
 8005ac8:	9b02      	ldr	r3, [sp, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d137      	bne.n	8005b3e <_dtoa_r+0x7e6>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d134      	bne.n	8005b42 <_dtoa_r+0x7ea>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ade:	0d1b      	lsrs	r3, r3, #20
 8005ae0:	051b      	lsls	r3, r3, #20
 8005ae2:	b12b      	cbz	r3, 8005af0 <_dtoa_r+0x798>
 8005ae4:	9b07      	ldr	r3, [sp, #28]
 8005ae6:	f109 0901 	add.w	r9, r9, #1
 8005aea:	3301      	adds	r3, #1
 8005aec:	9307      	str	r3, [sp, #28]
 8005aee:	2301      	movs	r3, #1
 8005af0:	9308      	str	r3, [sp, #32]
 8005af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d128      	bne.n	8005b4a <_dtoa_r+0x7f2>
 8005af8:	2001      	movs	r0, #1
 8005afa:	e02e      	b.n	8005b5a <_dtoa_r+0x802>
 8005afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b02:	e796      	b.n	8005a32 <_dtoa_r+0x6da>
 8005b04:	9b08      	ldr	r3, [sp, #32]
 8005b06:	f108 36ff 	add.w	r6, r8, #4294967295
 8005b0a:	42b3      	cmp	r3, r6
 8005b0c:	bfb7      	itett	lt
 8005b0e:	9b08      	ldrlt	r3, [sp, #32]
 8005b10:	1b9e      	subge	r6, r3, r6
 8005b12:	1af2      	sublt	r2, r6, r3
 8005b14:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005b16:	bfbf      	itttt	lt
 8005b18:	9608      	strlt	r6, [sp, #32]
 8005b1a:	189b      	addlt	r3, r3, r2
 8005b1c:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005b1e:	2600      	movlt	r6, #0
 8005b20:	f1b8 0f00 	cmp.w	r8, #0
 8005b24:	bfb9      	ittee	lt
 8005b26:	eba9 0508 	sublt.w	r5, r9, r8
 8005b2a:	2300      	movlt	r3, #0
 8005b2c:	464d      	movge	r5, r9
 8005b2e:	4643      	movge	r3, r8
 8005b30:	e781      	b.n	8005a36 <_dtoa_r+0x6de>
 8005b32:	9e08      	ldr	r6, [sp, #32]
 8005b34:	464d      	mov	r5, r9
 8005b36:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b38:	e786      	b.n	8005a48 <_dtoa_r+0x6f0>
 8005b3a:	9a08      	ldr	r2, [sp, #32]
 8005b3c:	e7ad      	b.n	8005a9a <_dtoa_r+0x742>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e7d6      	b.n	8005af0 <_dtoa_r+0x798>
 8005b42:	9b02      	ldr	r3, [sp, #8]
 8005b44:	e7d4      	b.n	8005af0 <_dtoa_r+0x798>
 8005b46:	2300      	movs	r3, #0
 8005b48:	9308      	str	r3, [sp, #32]
 8005b4a:	6933      	ldr	r3, [r6, #16]
 8005b4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b50:	6918      	ldr	r0, [r3, #16]
 8005b52:	f000 fd07 	bl	8006564 <__hi0bits>
 8005b56:	f1c0 0020 	rsb	r0, r0, #32
 8005b5a:	9b07      	ldr	r3, [sp, #28]
 8005b5c:	4418      	add	r0, r3
 8005b5e:	f010 001f 	ands.w	r0, r0, #31
 8005b62:	d047      	beq.n	8005bf4 <_dtoa_r+0x89c>
 8005b64:	f1c0 0320 	rsb	r3, r0, #32
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	dd3b      	ble.n	8005be4 <_dtoa_r+0x88c>
 8005b6c:	9b07      	ldr	r3, [sp, #28]
 8005b6e:	f1c0 001c 	rsb	r0, r0, #28
 8005b72:	4481      	add	r9, r0
 8005b74:	4405      	add	r5, r0
 8005b76:	4403      	add	r3, r0
 8005b78:	9307      	str	r3, [sp, #28]
 8005b7a:	f1b9 0f00 	cmp.w	r9, #0
 8005b7e:	dd05      	ble.n	8005b8c <_dtoa_r+0x834>
 8005b80:	464a      	mov	r2, r9
 8005b82:	9906      	ldr	r1, [sp, #24]
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 fe19 	bl	80067bc <__lshift>
 8005b8a:	9006      	str	r0, [sp, #24]
 8005b8c:	9b07      	ldr	r3, [sp, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	dd05      	ble.n	8005b9e <_dtoa_r+0x846>
 8005b92:	4631      	mov	r1, r6
 8005b94:	461a      	mov	r2, r3
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 fe10 	bl	80067bc <__lshift>
 8005b9c:	4606      	mov	r6, r0
 8005b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ba0:	b353      	cbz	r3, 8005bf8 <_dtoa_r+0x8a0>
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	9806      	ldr	r0, [sp, #24]
 8005ba6:	f000 fe5d 	bl	8006864 <__mcmp>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	da24      	bge.n	8005bf8 <_dtoa_r+0x8a0>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	220a      	movs	r2, #10
 8005bb2:	9906      	ldr	r1, [sp, #24]
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f000 fc9a 	bl	80064ee <__multadd>
 8005bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bc0:	9006      	str	r0, [sp, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8148 	beq.w	8005e58 <_dtoa_r+0xb00>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4639      	mov	r1, r7
 8005bcc:	220a      	movs	r2, #10
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f000 fc8d 	bl	80064ee <__multadd>
 8005bd4:	9b04      	ldr	r3, [sp, #16]
 8005bd6:	4607      	mov	r7, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dc4d      	bgt.n	8005c78 <_dtoa_r+0x920>
 8005bdc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	dd4a      	ble.n	8005c78 <_dtoa_r+0x920>
 8005be2:	e011      	b.n	8005c08 <_dtoa_r+0x8b0>
 8005be4:	d0c9      	beq.n	8005b7a <_dtoa_r+0x822>
 8005be6:	9a07      	ldr	r2, [sp, #28]
 8005be8:	331c      	adds	r3, #28
 8005bea:	441a      	add	r2, r3
 8005bec:	4499      	add	r9, r3
 8005bee:	441d      	add	r5, r3
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	e7c1      	b.n	8005b78 <_dtoa_r+0x820>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	e7f6      	b.n	8005be6 <_dtoa_r+0x88e>
 8005bf8:	f1b8 0f00 	cmp.w	r8, #0
 8005bfc:	dc36      	bgt.n	8005c6c <_dtoa_r+0x914>
 8005bfe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	dd33      	ble.n	8005c6c <_dtoa_r+0x914>
 8005c04:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c08:	9b04      	ldr	r3, [sp, #16]
 8005c0a:	b963      	cbnz	r3, 8005c26 <_dtoa_r+0x8ce>
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	2205      	movs	r2, #5
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 fc6c 	bl	80064ee <__multadd>
 8005c16:	4601      	mov	r1, r0
 8005c18:	4606      	mov	r6, r0
 8005c1a:	9806      	ldr	r0, [sp, #24]
 8005c1c:	f000 fe22 	bl	8006864 <__mcmp>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	f73f add2 	bgt.w	80057ca <_dtoa_r+0x472>
 8005c26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c28:	465d      	mov	r5, fp
 8005c2a:	ea6f 0a03 	mvn.w	sl, r3
 8005c2e:	f04f 0900 	mov.w	r9, #0
 8005c32:	4631      	mov	r1, r6
 8005c34:	4620      	mov	r0, r4
 8005c36:	f000 fc51 	bl	80064dc <_Bfree>
 8005c3a:	2f00      	cmp	r7, #0
 8005c3c:	f43f aebd 	beq.w	80059ba <_dtoa_r+0x662>
 8005c40:	f1b9 0f00 	cmp.w	r9, #0
 8005c44:	d005      	beq.n	8005c52 <_dtoa_r+0x8fa>
 8005c46:	45b9      	cmp	r9, r7
 8005c48:	d003      	beq.n	8005c52 <_dtoa_r+0x8fa>
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f000 fc45 	bl	80064dc <_Bfree>
 8005c52:	4639      	mov	r1, r7
 8005c54:	4620      	mov	r0, r4
 8005c56:	f000 fc41 	bl	80064dc <_Bfree>
 8005c5a:	e6ae      	b.n	80059ba <_dtoa_r+0x662>
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	4637      	mov	r7, r6
 8005c60:	e7e1      	b.n	8005c26 <_dtoa_r+0x8ce>
 8005c62:	46ba      	mov	sl, r7
 8005c64:	4637      	mov	r7, r6
 8005c66:	e5b0      	b.n	80057ca <_dtoa_r+0x472>
 8005c68:	40240000 	.word	0x40240000
 8005c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6e:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 80f7 	beq.w	8005e66 <_dtoa_r+0xb0e>
 8005c78:	2d00      	cmp	r5, #0
 8005c7a:	dd05      	ble.n	8005c88 <_dtoa_r+0x930>
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	462a      	mov	r2, r5
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fd9b 	bl	80067bc <__lshift>
 8005c86:	4607      	mov	r7, r0
 8005c88:	9b08      	ldr	r3, [sp, #32]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d04c      	beq.n	8005d28 <_dtoa_r+0x9d0>
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fbfe 	bl	8006492 <_Balloc>
 8005c96:	4605      	mov	r5, r0
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	f107 010c 	add.w	r1, r7, #12
 8005c9e:	3202      	adds	r2, #2
 8005ca0:	0092      	lsls	r2, r2, #2
 8005ca2:	300c      	adds	r0, #12
 8005ca4:	f000 fbea 	bl	800647c <memcpy>
 8005ca8:	2201      	movs	r2, #1
 8005caa:	4629      	mov	r1, r5
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 fd85 	bl	80067bc <__lshift>
 8005cb2:	46b9      	mov	r9, r7
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	9b02      	ldr	r3, [sp, #8]
 8005cb8:	f8cd b01c 	str.w	fp, [sp, #28]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	9308      	str	r3, [sp, #32]
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	9806      	ldr	r0, [sp, #24]
 8005cc6:	f7ff fab7 	bl	8005238 <quorem>
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4605      	mov	r5, r0
 8005cce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005cd2:	9806      	ldr	r0, [sp, #24]
 8005cd4:	f000 fdc6 	bl	8006864 <__mcmp>
 8005cd8:	463a      	mov	r2, r7
 8005cda:	9002      	str	r0, [sp, #8]
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f000 fdda 	bl	8006898 <__mdiff>
 8005ce4:	68c3      	ldr	r3, [r0, #12]
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	bb03      	cbnz	r3, 8005d2c <_dtoa_r+0x9d4>
 8005cea:	4601      	mov	r1, r0
 8005cec:	9009      	str	r0, [sp, #36]	; 0x24
 8005cee:	9806      	ldr	r0, [sp, #24]
 8005cf0:	f000 fdb8 	bl	8006864 <__mcmp>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfe:	f000 fbed 	bl	80064dc <_Bfree>
 8005d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d04:	b9a3      	cbnz	r3, 8005d30 <_dtoa_r+0x9d8>
 8005d06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d08:	b992      	cbnz	r2, 8005d30 <_dtoa_r+0x9d8>
 8005d0a:	9a08      	ldr	r2, [sp, #32]
 8005d0c:	b982      	cbnz	r2, 8005d30 <_dtoa_r+0x9d8>
 8005d0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d12:	d029      	beq.n	8005d68 <_dtoa_r+0xa10>
 8005d14:	9b02      	ldr	r3, [sp, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	dd01      	ble.n	8005d1e <_dtoa_r+0x9c6>
 8005d1a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d1e:	9b07      	ldr	r3, [sp, #28]
 8005d20:	1c5d      	adds	r5, r3, #1
 8005d22:	f883 8000 	strb.w	r8, [r3]
 8005d26:	e784      	b.n	8005c32 <_dtoa_r+0x8da>
 8005d28:	4638      	mov	r0, r7
 8005d2a:	e7c2      	b.n	8005cb2 <_dtoa_r+0x95a>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e7e3      	b.n	8005cf8 <_dtoa_r+0x9a0>
 8005d30:	9a02      	ldr	r2, [sp, #8]
 8005d32:	2a00      	cmp	r2, #0
 8005d34:	db04      	blt.n	8005d40 <_dtoa_r+0x9e8>
 8005d36:	d124      	bne.n	8005d82 <_dtoa_r+0xa2a>
 8005d38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d3a:	bb12      	cbnz	r2, 8005d82 <_dtoa_r+0xa2a>
 8005d3c:	9a08      	ldr	r2, [sp, #32]
 8005d3e:	bb02      	cbnz	r2, 8005d82 <_dtoa_r+0xa2a>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	ddec      	ble.n	8005d1e <_dtoa_r+0x9c6>
 8005d44:	2201      	movs	r2, #1
 8005d46:	9906      	ldr	r1, [sp, #24]
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 fd37 	bl	80067bc <__lshift>
 8005d4e:	4631      	mov	r1, r6
 8005d50:	9006      	str	r0, [sp, #24]
 8005d52:	f000 fd87 	bl	8006864 <__mcmp>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	dc03      	bgt.n	8005d62 <_dtoa_r+0xa0a>
 8005d5a:	d1e0      	bne.n	8005d1e <_dtoa_r+0x9c6>
 8005d5c:	f018 0f01 	tst.w	r8, #1
 8005d60:	d0dd      	beq.n	8005d1e <_dtoa_r+0x9c6>
 8005d62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d66:	d1d8      	bne.n	8005d1a <_dtoa_r+0x9c2>
 8005d68:	9b07      	ldr	r3, [sp, #28]
 8005d6a:	9a07      	ldr	r2, [sp, #28]
 8005d6c:	1c5d      	adds	r5, r3, #1
 8005d6e:	2339      	movs	r3, #57	; 0x39
 8005d70:	7013      	strb	r3, [r2, #0]
 8005d72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d76:	1e6a      	subs	r2, r5, #1
 8005d78:	2b39      	cmp	r3, #57	; 0x39
 8005d7a:	d04e      	beq.n	8005e1a <_dtoa_r+0xac2>
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	7013      	strb	r3, [r2, #0]
 8005d80:	e757      	b.n	8005c32 <_dtoa_r+0x8da>
 8005d82:	9a07      	ldr	r2, [sp, #28]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f102 0501 	add.w	r5, r2, #1
 8005d8a:	dd06      	ble.n	8005d9a <_dtoa_r+0xa42>
 8005d8c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d90:	d0ea      	beq.n	8005d68 <_dtoa_r+0xa10>
 8005d92:	f108 0801 	add.w	r8, r8, #1
 8005d96:	9b07      	ldr	r3, [sp, #28]
 8005d98:	e7c3      	b.n	8005d22 <_dtoa_r+0x9ca>
 8005d9a:	9a04      	ldr	r2, [sp, #16]
 8005d9c:	eba5 030b 	sub.w	r3, r5, fp
 8005da0:	4293      	cmp	r3, r2
 8005da2:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005da6:	d021      	beq.n	8005dec <_dtoa_r+0xa94>
 8005da8:	2300      	movs	r3, #0
 8005daa:	220a      	movs	r2, #10
 8005dac:	9906      	ldr	r1, [sp, #24]
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 fb9d 	bl	80064ee <__multadd>
 8005db4:	45b9      	cmp	r9, r7
 8005db6:	9006      	str	r0, [sp, #24]
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	f04f 020a 	mov.w	r2, #10
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	d105      	bne.n	8005dd2 <_dtoa_r+0xa7a>
 8005dc6:	f000 fb92 	bl	80064ee <__multadd>
 8005dca:	4681      	mov	r9, r0
 8005dcc:	4607      	mov	r7, r0
 8005dce:	9507      	str	r5, [sp, #28]
 8005dd0:	e777      	b.n	8005cc2 <_dtoa_r+0x96a>
 8005dd2:	f000 fb8c 	bl	80064ee <__multadd>
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	4681      	mov	r9, r0
 8005dda:	2300      	movs	r3, #0
 8005ddc:	220a      	movs	r2, #10
 8005dde:	4620      	mov	r0, r4
 8005de0:	f000 fb85 	bl	80064ee <__multadd>
 8005de4:	4607      	mov	r7, r0
 8005de6:	e7f2      	b.n	8005dce <_dtoa_r+0xa76>
 8005de8:	f04f 0900 	mov.w	r9, #0
 8005dec:	2201      	movs	r2, #1
 8005dee:	9906      	ldr	r1, [sp, #24]
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 fce3 	bl	80067bc <__lshift>
 8005df6:	4631      	mov	r1, r6
 8005df8:	9006      	str	r0, [sp, #24]
 8005dfa:	f000 fd33 	bl	8006864 <__mcmp>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	dcb7      	bgt.n	8005d72 <_dtoa_r+0xa1a>
 8005e02:	d102      	bne.n	8005e0a <_dtoa_r+0xab2>
 8005e04:	f018 0f01 	tst.w	r8, #1
 8005e08:	d1b3      	bne.n	8005d72 <_dtoa_r+0xa1a>
 8005e0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e0e:	1e6a      	subs	r2, r5, #1
 8005e10:	2b30      	cmp	r3, #48	; 0x30
 8005e12:	f47f af0e 	bne.w	8005c32 <_dtoa_r+0x8da>
 8005e16:	4615      	mov	r5, r2
 8005e18:	e7f7      	b.n	8005e0a <_dtoa_r+0xab2>
 8005e1a:	4593      	cmp	fp, r2
 8005e1c:	d105      	bne.n	8005e2a <_dtoa_r+0xad2>
 8005e1e:	2331      	movs	r3, #49	; 0x31
 8005e20:	f10a 0a01 	add.w	sl, sl, #1
 8005e24:	f88b 3000 	strb.w	r3, [fp]
 8005e28:	e703      	b.n	8005c32 <_dtoa_r+0x8da>
 8005e2a:	4615      	mov	r5, r2
 8005e2c:	e7a1      	b.n	8005d72 <_dtoa_r+0xa1a>
 8005e2e:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005e94 <_dtoa_r+0xb3c>
 8005e32:	f7ff bac9 	b.w	80053c8 <_dtoa_r+0x70>
 8005e36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e38:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8005e98 <_dtoa_r+0xb40>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f43f aac3 	beq.w	80053c8 <_dtoa_r+0x70>
 8005e42:	f10b 0308 	add.w	r3, fp, #8
 8005e46:	f7ff babd 	b.w	80053c4 <_dtoa_r+0x6c>
 8005e4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	f77f ae3b 	ble.w	8005ac8 <_dtoa_r+0x770>
 8005e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e54:	9308      	str	r3, [sp, #32]
 8005e56:	e64f      	b.n	8005af8 <_dtoa_r+0x7a0>
 8005e58:	9b04      	ldr	r3, [sp, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dc03      	bgt.n	8005e66 <_dtoa_r+0xb0e>
 8005e5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	f73f aed1 	bgt.w	8005c08 <_dtoa_r+0x8b0>
 8005e66:	465d      	mov	r5, fp
 8005e68:	4631      	mov	r1, r6
 8005e6a:	9806      	ldr	r0, [sp, #24]
 8005e6c:	f7ff f9e4 	bl	8005238 <quorem>
 8005e70:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005e74:	f805 8b01 	strb.w	r8, [r5], #1
 8005e78:	9a04      	ldr	r2, [sp, #16]
 8005e7a:	eba5 030b 	sub.w	r3, r5, fp
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	ddb2      	ble.n	8005de8 <_dtoa_r+0xa90>
 8005e82:	2300      	movs	r3, #0
 8005e84:	220a      	movs	r2, #10
 8005e86:	9906      	ldr	r1, [sp, #24]
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 fb30 	bl	80064ee <__multadd>
 8005e8e:	9006      	str	r0, [sp, #24]
 8005e90:	e7ea      	b.n	8005e68 <_dtoa_r+0xb10>
 8005e92:	bf00      	nop
 8005e94:	08007722 	.word	0x08007722
 8005e98:	08007744 	.word	0x08007744

08005e9c <__sflush_r>:
 8005e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	b293      	uxth	r3, r2
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	0718      	lsls	r0, r3, #28
 8005eaa:	460c      	mov	r4, r1
 8005eac:	d45f      	bmi.n	8005f6e <__sflush_r+0xd2>
 8005eae:	684b      	ldr	r3, [r1, #4]
 8005eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	818a      	strh	r2, [r1, #12]
 8005eb8:	dc05      	bgt.n	8005ec6 <__sflush_r+0x2a>
 8005eba:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dc02      	bgt.n	8005ec6 <__sflush_r+0x2a>
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ec8:	2e00      	cmp	r6, #0
 8005eca:	d0f9      	beq.n	8005ec0 <__sflush_r+0x24>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ed2:	682f      	ldr	r7, [r5, #0]
 8005ed4:	69e1      	ldr	r1, [r4, #28]
 8005ed6:	602b      	str	r3, [r5, #0]
 8005ed8:	d036      	beq.n	8005f48 <__sflush_r+0xac>
 8005eda:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	075a      	lsls	r2, r3, #29
 8005ee0:	d505      	bpl.n	8005eee <__sflush_r+0x52>
 8005ee2:	6863      	ldr	r3, [r4, #4]
 8005ee4:	1ac0      	subs	r0, r0, r3
 8005ee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ee8:	b10b      	cbz	r3, 8005eee <__sflush_r+0x52>
 8005eea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005eec:	1ac0      	subs	r0, r0, r3
 8005eee:	2300      	movs	r3, #0
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ef4:	69e1      	ldr	r1, [r4, #28]
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47b0      	blx	r6
 8005efa:	1c43      	adds	r3, r0, #1
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	d106      	bne.n	8005f0e <__sflush_r+0x72>
 8005f00:	6829      	ldr	r1, [r5, #0]
 8005f02:	291d      	cmp	r1, #29
 8005f04:	d84c      	bhi.n	8005fa0 <__sflush_r+0x104>
 8005f06:	4a2b      	ldr	r2, [pc, #172]	; (8005fb4 <__sflush_r+0x118>)
 8005f08:	40ca      	lsrs	r2, r1
 8005f0a:	07d6      	lsls	r6, r2, #31
 8005f0c:	d548      	bpl.n	8005fa0 <__sflush_r+0x104>
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f14:	b21b      	sxth	r3, r3
 8005f16:	6062      	str	r2, [r4, #4]
 8005f18:	6922      	ldr	r2, [r4, #16]
 8005f1a:	04d9      	lsls	r1, r3, #19
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	6022      	str	r2, [r4, #0]
 8005f20:	d504      	bpl.n	8005f2c <__sflush_r+0x90>
 8005f22:	1c42      	adds	r2, r0, #1
 8005f24:	d101      	bne.n	8005f2a <__sflush_r+0x8e>
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	b903      	cbnz	r3, 8005f2c <__sflush_r+0x90>
 8005f2a:	6520      	str	r0, [r4, #80]	; 0x50
 8005f2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005f2e:	602f      	str	r7, [r5, #0]
 8005f30:	2900      	cmp	r1, #0
 8005f32:	d0c5      	beq.n	8005ec0 <__sflush_r+0x24>
 8005f34:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	d002      	beq.n	8005f42 <__sflush_r+0xa6>
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 f937 	bl	80061b0 <_free_r>
 8005f42:	2000      	movs	r0, #0
 8005f44:	6320      	str	r0, [r4, #48]	; 0x30
 8005f46:	e7bc      	b.n	8005ec2 <__sflush_r+0x26>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b0      	blx	r6
 8005f4e:	1c41      	adds	r1, r0, #1
 8005f50:	d1c4      	bne.n	8005edc <__sflush_r+0x40>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0c1      	beq.n	8005edc <__sflush_r+0x40>
 8005f58:	2b1d      	cmp	r3, #29
 8005f5a:	d001      	beq.n	8005f60 <__sflush_r+0xc4>
 8005f5c:	2b16      	cmp	r3, #22
 8005f5e:	d101      	bne.n	8005f64 <__sflush_r+0xc8>
 8005f60:	602f      	str	r7, [r5, #0]
 8005f62:	e7ad      	b.n	8005ec0 <__sflush_r+0x24>
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f6a:	81a3      	strh	r3, [r4, #12]
 8005f6c:	e7a9      	b.n	8005ec2 <__sflush_r+0x26>
 8005f6e:	690f      	ldr	r7, [r1, #16]
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	d0a5      	beq.n	8005ec0 <__sflush_r+0x24>
 8005f74:	079b      	lsls	r3, r3, #30
 8005f76:	bf18      	it	ne
 8005f78:	2300      	movne	r3, #0
 8005f7a:	680e      	ldr	r6, [r1, #0]
 8005f7c:	bf08      	it	eq
 8005f7e:	694b      	ldreq	r3, [r1, #20]
 8005f80:	eba6 0807 	sub.w	r8, r6, r7
 8005f84:	600f      	str	r7, [r1, #0]
 8005f86:	608b      	str	r3, [r1, #8]
 8005f88:	f1b8 0f00 	cmp.w	r8, #0
 8005f8c:	dd98      	ble.n	8005ec0 <__sflush_r+0x24>
 8005f8e:	4643      	mov	r3, r8
 8005f90:	463a      	mov	r2, r7
 8005f92:	69e1      	ldr	r1, [r4, #28]
 8005f94:	4628      	mov	r0, r5
 8005f96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f98:	47b0      	blx	r6
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	dc06      	bgt.n	8005fac <__sflush_r+0x110>
 8005f9e:	89a3      	ldrh	r3, [r4, #12]
 8005fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa4:	81a3      	strh	r3, [r4, #12]
 8005fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005faa:	e78a      	b.n	8005ec2 <__sflush_r+0x26>
 8005fac:	4407      	add	r7, r0
 8005fae:	eba8 0800 	sub.w	r8, r8, r0
 8005fb2:	e7e9      	b.n	8005f88 <__sflush_r+0xec>
 8005fb4:	20400001 	.word	0x20400001

08005fb8 <_fflush_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	460c      	mov	r4, r1
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	b118      	cbz	r0, 8005fc8 <_fflush_r+0x10>
 8005fc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005fc2:	b90b      	cbnz	r3, 8005fc8 <_fflush_r+0x10>
 8005fc4:	f000 f864 	bl	8006090 <__sinit>
 8005fc8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8005fcc:	b1b8      	cbz	r0, 8005ffe <_fflush_r+0x46>
 8005fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fd0:	07db      	lsls	r3, r3, #31
 8005fd2:	d404      	bmi.n	8005fde <_fflush_r+0x26>
 8005fd4:	0581      	lsls	r1, r0, #22
 8005fd6:	d402      	bmi.n	8005fde <_fflush_r+0x26>
 8005fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fda:	f000 f9d3 	bl	8006384 <__retarget_lock_acquire_recursive>
 8005fde:	4628      	mov	r0, r5
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	f7ff ff5b 	bl	8005e9c <__sflush_r>
 8005fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fe8:	4605      	mov	r5, r0
 8005fea:	07da      	lsls	r2, r3, #31
 8005fec:	d405      	bmi.n	8005ffa <_fflush_r+0x42>
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	059b      	lsls	r3, r3, #22
 8005ff2:	d402      	bmi.n	8005ffa <_fflush_r+0x42>
 8005ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ff6:	f000 f9c6 	bl	8006386 <__retarget_lock_release_recursive>
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	4605      	mov	r5, r0
 8006000:	e7fb      	b.n	8005ffa <_fflush_r+0x42>
	...

08006004 <std>:
 8006004:	2300      	movs	r3, #0
 8006006:	b510      	push	{r4, lr}
 8006008:	4604      	mov	r4, r0
 800600a:	e9c0 3300 	strd	r3, r3, [r0]
 800600e:	6083      	str	r3, [r0, #8]
 8006010:	8181      	strh	r1, [r0, #12]
 8006012:	6643      	str	r3, [r0, #100]	; 0x64
 8006014:	81c2      	strh	r2, [r0, #14]
 8006016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800601a:	6183      	str	r3, [r0, #24]
 800601c:	4619      	mov	r1, r3
 800601e:	2208      	movs	r2, #8
 8006020:	305c      	adds	r0, #92	; 0x5c
 8006022:	f7fd fdb9 	bl	8003b98 <memset>
 8006026:	4b07      	ldr	r3, [pc, #28]	; (8006044 <std+0x40>)
 8006028:	61e4      	str	r4, [r4, #28]
 800602a:	6223      	str	r3, [r4, #32]
 800602c:	4b06      	ldr	r3, [pc, #24]	; (8006048 <std+0x44>)
 800602e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006032:	6263      	str	r3, [r4, #36]	; 0x24
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <std+0x48>)
 8006036:	62a3      	str	r3, [r4, #40]	; 0x28
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <std+0x4c>)
 800603a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800603c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006040:	f000 b99e 	b.w	8006380 <__retarget_lock_init_recursive>
 8006044:	08006a59 	.word	0x08006a59
 8006048:	08006a7b 	.word	0x08006a7b
 800604c:	08006ab3 	.word	0x08006ab3
 8006050:	08006ad7 	.word	0x08006ad7

08006054 <_cleanup_r>:
 8006054:	4901      	ldr	r1, [pc, #4]	; (800605c <_cleanup_r+0x8>)
 8006056:	f000 b967 	b.w	8006328 <_fwalk_reent>
 800605a:	bf00      	nop
 800605c:	08006cb9 	.word	0x08006cb9

08006060 <__sfp_lock_acquire>:
 8006060:	4801      	ldr	r0, [pc, #4]	; (8006068 <__sfp_lock_acquire+0x8>)
 8006062:	f000 b98f 	b.w	8006384 <__retarget_lock_acquire_recursive>
 8006066:	bf00      	nop
 8006068:	20000b68 	.word	0x20000b68

0800606c <__sfp_lock_release>:
 800606c:	4801      	ldr	r0, [pc, #4]	; (8006074 <__sfp_lock_release+0x8>)
 800606e:	f000 b98a 	b.w	8006386 <__retarget_lock_release_recursive>
 8006072:	bf00      	nop
 8006074:	20000b68 	.word	0x20000b68

08006078 <__sinit_lock_acquire>:
 8006078:	4801      	ldr	r0, [pc, #4]	; (8006080 <__sinit_lock_acquire+0x8>)
 800607a:	f000 b983 	b.w	8006384 <__retarget_lock_acquire_recursive>
 800607e:	bf00      	nop
 8006080:	20000b63 	.word	0x20000b63

08006084 <__sinit_lock_release>:
 8006084:	4801      	ldr	r0, [pc, #4]	; (800608c <__sinit_lock_release+0x8>)
 8006086:	f000 b97e 	b.w	8006386 <__retarget_lock_release_recursive>
 800608a:	bf00      	nop
 800608c:	20000b63 	.word	0x20000b63

08006090 <__sinit>:
 8006090:	b510      	push	{r4, lr}
 8006092:	4604      	mov	r4, r0
 8006094:	f7ff fff0 	bl	8006078 <__sinit_lock_acquire>
 8006098:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800609a:	b11a      	cbz	r2, 80060a4 <__sinit+0x14>
 800609c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a0:	f7ff bff0 	b.w	8006084 <__sinit_lock_release>
 80060a4:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <__sinit+0x4c>)
 80060a6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80060aa:	63e3      	str	r3, [r4, #60]	; 0x3c
 80060ac:	2303      	movs	r3, #3
 80060ae:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80060b2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80060b6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80060ba:	2104      	movs	r1, #4
 80060bc:	6860      	ldr	r0, [r4, #4]
 80060be:	f7ff ffa1 	bl	8006004 <std>
 80060c2:	2201      	movs	r2, #1
 80060c4:	2109      	movs	r1, #9
 80060c6:	68a0      	ldr	r0, [r4, #8]
 80060c8:	f7ff ff9c 	bl	8006004 <std>
 80060cc:	2202      	movs	r2, #2
 80060ce:	2112      	movs	r1, #18
 80060d0:	68e0      	ldr	r0, [r4, #12]
 80060d2:	f7ff ff97 	bl	8006004 <std>
 80060d6:	2301      	movs	r3, #1
 80060d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80060da:	e7df      	b.n	800609c <__sinit+0xc>
 80060dc:	08006055 	.word	0x08006055

080060e0 <__libc_fini_array>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4d07      	ldr	r5, [pc, #28]	; (8006100 <__libc_fini_array+0x20>)
 80060e4:	4c07      	ldr	r4, [pc, #28]	; (8006104 <__libc_fini_array+0x24>)
 80060e6:	1b64      	subs	r4, r4, r5
 80060e8:	10a4      	asrs	r4, r4, #2
 80060ea:	b91c      	cbnz	r4, 80060f4 <__libc_fini_array+0x14>
 80060ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060f0:	f001 baa0 	b.w	8007634 <_fini>
 80060f4:	3c01      	subs	r4, #1
 80060f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80060fa:	4798      	blx	r3
 80060fc:	e7f5      	b.n	80060ea <__libc_fini_array+0xa>
 80060fe:	bf00      	nop
 8006100:	08007970 	.word	0x08007970
 8006104:	08007974 	.word	0x08007974

08006108 <_malloc_trim_r>:
 8006108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800610c:	4605      	mov	r5, r0
 800610e:	2008      	movs	r0, #8
 8006110:	460c      	mov	r4, r1
 8006112:	f7fd fd77 	bl	8003c04 <sysconf>
 8006116:	4680      	mov	r8, r0
 8006118:	4f22      	ldr	r7, [pc, #136]	; (80061a4 <_malloc_trim_r+0x9c>)
 800611a:	4628      	mov	r0, r5
 800611c:	f7fd fd44 	bl	8003ba8 <__malloc_lock>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	685e      	ldr	r6, [r3, #4]
 8006124:	f026 0603 	bic.w	r6, r6, #3
 8006128:	1b34      	subs	r4, r6, r4
 800612a:	3c11      	subs	r4, #17
 800612c:	4444      	add	r4, r8
 800612e:	fbb4 f4f8 	udiv	r4, r4, r8
 8006132:	3c01      	subs	r4, #1
 8006134:	fb08 f404 	mul.w	r4, r8, r4
 8006138:	45a0      	cmp	r8, r4
 800613a:	dd05      	ble.n	8006148 <_malloc_trim_r+0x40>
 800613c:	4628      	mov	r0, r5
 800613e:	f7fd fd39 	bl	8003bb4 <__malloc_unlock>
 8006142:	2000      	movs	r0, #0
 8006144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006148:	2100      	movs	r1, #0
 800614a:	4628      	mov	r0, r5
 800614c:	f7fd fd4a 	bl	8003be4 <_sbrk_r>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4433      	add	r3, r6
 8006154:	4298      	cmp	r0, r3
 8006156:	d1f1      	bne.n	800613c <_malloc_trim_r+0x34>
 8006158:	4261      	negs	r1, r4
 800615a:	4628      	mov	r0, r5
 800615c:	f7fd fd42 	bl	8003be4 <_sbrk_r>
 8006160:	3001      	adds	r0, #1
 8006162:	d110      	bne.n	8006186 <_malloc_trim_r+0x7e>
 8006164:	2100      	movs	r1, #0
 8006166:	4628      	mov	r0, r5
 8006168:	f7fd fd3c 	bl	8003be4 <_sbrk_r>
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	1a83      	subs	r3, r0, r2
 8006170:	2b0f      	cmp	r3, #15
 8006172:	dde3      	ble.n	800613c <_malloc_trim_r+0x34>
 8006174:	490c      	ldr	r1, [pc, #48]	; (80061a8 <_malloc_trim_r+0xa0>)
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	6809      	ldr	r1, [r1, #0]
 800617c:	6053      	str	r3, [r2, #4]
 800617e:	1a40      	subs	r0, r0, r1
 8006180:	490a      	ldr	r1, [pc, #40]	; (80061ac <_malloc_trim_r+0xa4>)
 8006182:	6008      	str	r0, [r1, #0]
 8006184:	e7da      	b.n	800613c <_malloc_trim_r+0x34>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4a08      	ldr	r2, [pc, #32]	; (80061ac <_malloc_trim_r+0xa4>)
 800618a:	1b36      	subs	r6, r6, r4
 800618c:	f046 0601 	orr.w	r6, r6, #1
 8006190:	605e      	str	r6, [r3, #4]
 8006192:	6813      	ldr	r3, [r2, #0]
 8006194:	4628      	mov	r0, r5
 8006196:	1b1c      	subs	r4, r3, r4
 8006198:	6014      	str	r4, [r2, #0]
 800619a:	f7fd fd0b 	bl	8003bb4 <__malloc_unlock>
 800619e:	2001      	movs	r0, #1
 80061a0:	e7d0      	b.n	8006144 <_malloc_trim_r+0x3c>
 80061a2:	bf00      	nop
 80061a4:	20000440 	.word	0x20000440
 80061a8:	20000848 	.word	0x20000848
 80061ac:	200009e0 	.word	0x200009e0

080061b0 <_free_r>:
 80061b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b4:	4604      	mov	r4, r0
 80061b6:	4688      	mov	r8, r1
 80061b8:	2900      	cmp	r1, #0
 80061ba:	f000 80ab 	beq.w	8006314 <_free_r+0x164>
 80061be:	f7fd fcf3 	bl	8003ba8 <__malloc_lock>
 80061c2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80061c6:	4d54      	ldr	r5, [pc, #336]	; (8006318 <_free_r+0x168>)
 80061c8:	f022 0001 	bic.w	r0, r2, #1
 80061cc:	f1a8 0308 	sub.w	r3, r8, #8
 80061d0:	181f      	adds	r7, r3, r0
 80061d2:	68a9      	ldr	r1, [r5, #8]
 80061d4:	687e      	ldr	r6, [r7, #4]
 80061d6:	42b9      	cmp	r1, r7
 80061d8:	f026 0603 	bic.w	r6, r6, #3
 80061dc:	f002 0201 	and.w	r2, r2, #1
 80061e0:	d11b      	bne.n	800621a <_free_r+0x6a>
 80061e2:	4430      	add	r0, r6
 80061e4:	b93a      	cbnz	r2, 80061f6 <_free_r+0x46>
 80061e6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	4410      	add	r0, r2
 80061ee:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80061f2:	60ca      	str	r2, [r1, #12]
 80061f4:	6091      	str	r1, [r2, #8]
 80061f6:	f040 0201 	orr.w	r2, r0, #1
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	60ab      	str	r3, [r5, #8]
 80061fe:	4b47      	ldr	r3, [pc, #284]	; (800631c <_free_r+0x16c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4283      	cmp	r3, r0
 8006204:	d804      	bhi.n	8006210 <_free_r+0x60>
 8006206:	4b46      	ldr	r3, [pc, #280]	; (8006320 <_free_r+0x170>)
 8006208:	4620      	mov	r0, r4
 800620a:	6819      	ldr	r1, [r3, #0]
 800620c:	f7ff ff7c 	bl	8006108 <_malloc_trim_r>
 8006210:	4620      	mov	r0, r4
 8006212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006216:	f7fd bccd 	b.w	8003bb4 <__malloc_unlock>
 800621a:	607e      	str	r6, [r7, #4]
 800621c:	2a00      	cmp	r2, #0
 800621e:	d139      	bne.n	8006294 <_free_r+0xe4>
 8006220:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006224:	f105 0c08 	add.w	ip, r5, #8
 8006228:	1a5b      	subs	r3, r3, r1
 800622a:	4408      	add	r0, r1
 800622c:	6899      	ldr	r1, [r3, #8]
 800622e:	4561      	cmp	r1, ip
 8006230:	d032      	beq.n	8006298 <_free_r+0xe8>
 8006232:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006236:	f8c1 c00c 	str.w	ip, [r1, #12]
 800623a:	f8cc 1008 	str.w	r1, [ip, #8]
 800623e:	19b9      	adds	r1, r7, r6
 8006240:	6849      	ldr	r1, [r1, #4]
 8006242:	07c9      	lsls	r1, r1, #31
 8006244:	d40a      	bmi.n	800625c <_free_r+0xac>
 8006246:	4430      	add	r0, r6
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	bb3a      	cbnz	r2, 800629c <_free_r+0xec>
 800624c:	4e35      	ldr	r6, [pc, #212]	; (8006324 <_free_r+0x174>)
 800624e:	42b1      	cmp	r1, r6
 8006250:	d124      	bne.n	800629c <_free_r+0xec>
 8006252:	2201      	movs	r2, #1
 8006254:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8006258:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800625c:	f040 0101 	orr.w	r1, r0, #1
 8006260:	6059      	str	r1, [r3, #4]
 8006262:	5018      	str	r0, [r3, r0]
 8006264:	2a00      	cmp	r2, #0
 8006266:	d1d3      	bne.n	8006210 <_free_r+0x60>
 8006268:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800626c:	d21a      	bcs.n	80062a4 <_free_r+0xf4>
 800626e:	2201      	movs	r2, #1
 8006270:	08c0      	lsrs	r0, r0, #3
 8006272:	1081      	asrs	r1, r0, #2
 8006274:	408a      	lsls	r2, r1
 8006276:	6869      	ldr	r1, [r5, #4]
 8006278:	3001      	adds	r0, #1
 800627a:	430a      	orrs	r2, r1
 800627c:	606a      	str	r2, [r5, #4]
 800627e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006282:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006286:	3a08      	subs	r2, #8
 8006288:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800628c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006290:	60cb      	str	r3, [r1, #12]
 8006292:	e7bd      	b.n	8006210 <_free_r+0x60>
 8006294:	2200      	movs	r2, #0
 8006296:	e7d2      	b.n	800623e <_free_r+0x8e>
 8006298:	2201      	movs	r2, #1
 800629a:	e7d0      	b.n	800623e <_free_r+0x8e>
 800629c:	68fe      	ldr	r6, [r7, #12]
 800629e:	60ce      	str	r6, [r1, #12]
 80062a0:	60b1      	str	r1, [r6, #8]
 80062a2:	e7db      	b.n	800625c <_free_r+0xac>
 80062a4:	0a42      	lsrs	r2, r0, #9
 80062a6:	2a04      	cmp	r2, #4
 80062a8:	d813      	bhi.n	80062d2 <_free_r+0x122>
 80062aa:	0982      	lsrs	r2, r0, #6
 80062ac:	3238      	adds	r2, #56	; 0x38
 80062ae:	1c51      	adds	r1, r2, #1
 80062b0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80062b4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80062b8:	428e      	cmp	r6, r1
 80062ba:	d124      	bne.n	8006306 <_free_r+0x156>
 80062bc:	2001      	movs	r0, #1
 80062be:	1092      	asrs	r2, r2, #2
 80062c0:	fa00 f202 	lsl.w	r2, r0, r2
 80062c4:	6868      	ldr	r0, [r5, #4]
 80062c6:	4302      	orrs	r2, r0
 80062c8:	606a      	str	r2, [r5, #4]
 80062ca:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80062ce:	60b3      	str	r3, [r6, #8]
 80062d0:	e7de      	b.n	8006290 <_free_r+0xe0>
 80062d2:	2a14      	cmp	r2, #20
 80062d4:	d801      	bhi.n	80062da <_free_r+0x12a>
 80062d6:	325b      	adds	r2, #91	; 0x5b
 80062d8:	e7e9      	b.n	80062ae <_free_r+0xfe>
 80062da:	2a54      	cmp	r2, #84	; 0x54
 80062dc:	d802      	bhi.n	80062e4 <_free_r+0x134>
 80062de:	0b02      	lsrs	r2, r0, #12
 80062e0:	326e      	adds	r2, #110	; 0x6e
 80062e2:	e7e4      	b.n	80062ae <_free_r+0xfe>
 80062e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80062e8:	d802      	bhi.n	80062f0 <_free_r+0x140>
 80062ea:	0bc2      	lsrs	r2, r0, #15
 80062ec:	3277      	adds	r2, #119	; 0x77
 80062ee:	e7de      	b.n	80062ae <_free_r+0xfe>
 80062f0:	f240 5154 	movw	r1, #1364	; 0x554
 80062f4:	428a      	cmp	r2, r1
 80062f6:	bf9a      	itte	ls
 80062f8:	0c82      	lsrls	r2, r0, #18
 80062fa:	327c      	addls	r2, #124	; 0x7c
 80062fc:	227e      	movhi	r2, #126	; 0x7e
 80062fe:	e7d6      	b.n	80062ae <_free_r+0xfe>
 8006300:	6889      	ldr	r1, [r1, #8]
 8006302:	428e      	cmp	r6, r1
 8006304:	d004      	beq.n	8006310 <_free_r+0x160>
 8006306:	684a      	ldr	r2, [r1, #4]
 8006308:	f022 0203 	bic.w	r2, r2, #3
 800630c:	4282      	cmp	r2, r0
 800630e:	d8f7      	bhi.n	8006300 <_free_r+0x150>
 8006310:	68ce      	ldr	r6, [r1, #12]
 8006312:	e7da      	b.n	80062ca <_free_r+0x11a>
 8006314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006318:	20000440 	.word	0x20000440
 800631c:	2000084c 	.word	0x2000084c
 8006320:	20000a10 	.word	0x20000a10
 8006324:	20000448 	.word	0x20000448

08006328 <_fwalk_reent>:
 8006328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800632c:	4680      	mov	r8, r0
 800632e:	4689      	mov	r9, r1
 8006330:	2600      	movs	r6, #0
 8006332:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8006336:	b914      	cbnz	r4, 800633e <_fwalk_reent+0x16>
 8006338:	4630      	mov	r0, r6
 800633a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006342:	3f01      	subs	r7, #1
 8006344:	d501      	bpl.n	800634a <_fwalk_reent+0x22>
 8006346:	6824      	ldr	r4, [r4, #0]
 8006348:	e7f5      	b.n	8006336 <_fwalk_reent+0xe>
 800634a:	89ab      	ldrh	r3, [r5, #12]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d907      	bls.n	8006360 <_fwalk_reent+0x38>
 8006350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006354:	3301      	adds	r3, #1
 8006356:	d003      	beq.n	8006360 <_fwalk_reent+0x38>
 8006358:	4629      	mov	r1, r5
 800635a:	4640      	mov	r0, r8
 800635c:	47c8      	blx	r9
 800635e:	4306      	orrs	r6, r0
 8006360:	3568      	adds	r5, #104	; 0x68
 8006362:	e7ee      	b.n	8006342 <_fwalk_reent+0x1a>

08006364 <_localeconv_r>:
 8006364:	4b04      	ldr	r3, [pc, #16]	; (8006378 <_localeconv_r+0x14>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800636a:	4b04      	ldr	r3, [pc, #16]	; (800637c <_localeconv_r+0x18>)
 800636c:	2800      	cmp	r0, #0
 800636e:	bf08      	it	eq
 8006370:	4618      	moveq	r0, r3
 8006372:	30f0      	adds	r0, #240	; 0xf0
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000010 	.word	0x20000010
 800637c:	20000854 	.word	0x20000854

08006380 <__retarget_lock_init_recursive>:
 8006380:	4770      	bx	lr

08006382 <__retarget_lock_close_recursive>:
 8006382:	4770      	bx	lr

08006384 <__retarget_lock_acquire_recursive>:
 8006384:	4770      	bx	lr

08006386 <__retarget_lock_release_recursive>:
 8006386:	4770      	bx	lr

08006388 <__swhatbuf_r>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	460e      	mov	r6, r1
 800638c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006390:	b096      	sub	sp, #88	; 0x58
 8006392:	2900      	cmp	r1, #0
 8006394:	4614      	mov	r4, r2
 8006396:	461d      	mov	r5, r3
 8006398:	da09      	bge.n	80063ae <__swhatbuf_r+0x26>
 800639a:	2200      	movs	r2, #0
 800639c:	89b3      	ldrh	r3, [r6, #12]
 800639e:	602a      	str	r2, [r5, #0]
 80063a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80063a4:	d116      	bne.n	80063d4 <__swhatbuf_r+0x4c>
 80063a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063aa:	6023      	str	r3, [r4, #0]
 80063ac:	e015      	b.n	80063da <__swhatbuf_r+0x52>
 80063ae:	466a      	mov	r2, sp
 80063b0:	f000 fd44 	bl	8006e3c <_fstat_r>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	dbf0      	blt.n	800639a <__swhatbuf_r+0x12>
 80063b8:	9a01      	ldr	r2, [sp, #4]
 80063ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80063be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063c6:	425a      	negs	r2, r3
 80063c8:	415a      	adcs	r2, r3
 80063ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ce:	602a      	str	r2, [r5, #0]
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	e002      	b.n	80063da <__swhatbuf_r+0x52>
 80063d4:	2340      	movs	r3, #64	; 0x40
 80063d6:	4610      	mov	r0, r2
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	b016      	add	sp, #88	; 0x58
 80063dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080063e0 <__smakebuf_r>:
 80063e0:	898b      	ldrh	r3, [r1, #12]
 80063e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063e4:	079d      	lsls	r5, r3, #30
 80063e6:	4606      	mov	r6, r0
 80063e8:	460c      	mov	r4, r1
 80063ea:	d507      	bpl.n	80063fc <__smakebuf_r+0x1c>
 80063ec:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	6123      	str	r3, [r4, #16]
 80063f4:	2301      	movs	r3, #1
 80063f6:	6163      	str	r3, [r4, #20]
 80063f8:	b002      	add	sp, #8
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	ab01      	add	r3, sp, #4
 80063fe:	466a      	mov	r2, sp
 8006400:	f7ff ffc2 	bl	8006388 <__swhatbuf_r>
 8006404:	9900      	ldr	r1, [sp, #0]
 8006406:	4605      	mov	r5, r0
 8006408:	4630      	mov	r0, r6
 800640a:	f7fd f98f 	bl	800372c <_malloc_r>
 800640e:	b948      	cbnz	r0, 8006424 <__smakebuf_r+0x44>
 8006410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006414:	059a      	lsls	r2, r3, #22
 8006416:	d4ef      	bmi.n	80063f8 <__smakebuf_r+0x18>
 8006418:	f023 0303 	bic.w	r3, r3, #3
 800641c:	f043 0302 	orr.w	r3, r3, #2
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	e7e3      	b.n	80063ec <__smakebuf_r+0xc>
 8006424:	4b0d      	ldr	r3, [pc, #52]	; (800645c <__smakebuf_r+0x7c>)
 8006426:	63f3      	str	r3, [r6, #60]	; 0x3c
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	6020      	str	r0, [r4, #0]
 800642c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	9b00      	ldr	r3, [sp, #0]
 8006434:	6120      	str	r0, [r4, #16]
 8006436:	6163      	str	r3, [r4, #20]
 8006438:	9b01      	ldr	r3, [sp, #4]
 800643a:	b15b      	cbz	r3, 8006454 <__smakebuf_r+0x74>
 800643c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006440:	4630      	mov	r0, r6
 8006442:	f000 fe5b 	bl	80070fc <_isatty_r>
 8006446:	b128      	cbz	r0, 8006454 <__smakebuf_r+0x74>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	431d      	orrs	r5, r3
 8006458:	81a5      	strh	r5, [r4, #12]
 800645a:	e7cd      	b.n	80063f8 <__smakebuf_r+0x18>
 800645c:	08006055 	.word	0x08006055

08006460 <memchr>:
 8006460:	b510      	push	{r4, lr}
 8006462:	b2c9      	uxtb	r1, r1
 8006464:	4402      	add	r2, r0
 8006466:	4290      	cmp	r0, r2
 8006468:	4603      	mov	r3, r0
 800646a:	d101      	bne.n	8006470 <memchr+0x10>
 800646c:	2300      	movs	r3, #0
 800646e:	e003      	b.n	8006478 <memchr+0x18>
 8006470:	781c      	ldrb	r4, [r3, #0]
 8006472:	3001      	adds	r0, #1
 8006474:	428c      	cmp	r4, r1
 8006476:	d1f6      	bne.n	8006466 <memchr+0x6>
 8006478:	4618      	mov	r0, r3
 800647a:	bd10      	pop	{r4, pc}

0800647c <memcpy>:
 800647c:	b510      	push	{r4, lr}
 800647e:	1e43      	subs	r3, r0, #1
 8006480:	440a      	add	r2, r1
 8006482:	4291      	cmp	r1, r2
 8006484:	d100      	bne.n	8006488 <memcpy+0xc>
 8006486:	bd10      	pop	{r4, pc}
 8006488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800648c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006490:	e7f7      	b.n	8006482 <memcpy+0x6>

08006492 <_Balloc>:
 8006492:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	4605      	mov	r5, r0
 8006498:	460c      	mov	r4, r1
 800649a:	b17b      	cbz	r3, 80064bc <_Balloc+0x2a>
 800649c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800649e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80064a2:	b9a0      	cbnz	r0, 80064ce <_Balloc+0x3c>
 80064a4:	2101      	movs	r1, #1
 80064a6:	fa01 f604 	lsl.w	r6, r1, r4
 80064aa:	1d72      	adds	r2, r6, #5
 80064ac:	0092      	lsls	r2, r2, #2
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 fbc4 	bl	8006c3c <_calloc_r>
 80064b4:	b148      	cbz	r0, 80064ca <_Balloc+0x38>
 80064b6:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80064ba:	e00b      	b.n	80064d4 <_Balloc+0x42>
 80064bc:	2221      	movs	r2, #33	; 0x21
 80064be:	2104      	movs	r1, #4
 80064c0:	f000 fbbc 	bl	8006c3c <_calloc_r>
 80064c4:	64e8      	str	r0, [r5, #76]	; 0x4c
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d1e8      	bne.n	800649c <_Balloc+0xa>
 80064ca:	2000      	movs	r0, #0
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	6802      	ldr	r2, [r0, #0]
 80064d0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80064d4:	2300      	movs	r3, #0
 80064d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064da:	e7f7      	b.n	80064cc <_Balloc+0x3a>

080064dc <_Bfree>:
 80064dc:	b131      	cbz	r1, 80064ec <_Bfree+0x10>
 80064de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80064e0:	684a      	ldr	r2, [r1, #4]
 80064e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80064e6:	6008      	str	r0, [r1, #0]
 80064e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80064ec:	4770      	bx	lr

080064ee <__multadd>:
 80064ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f2:	461f      	mov	r7, r3
 80064f4:	4606      	mov	r6, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	2300      	movs	r3, #0
 80064fa:	690d      	ldr	r5, [r1, #16]
 80064fc:	f101 0c14 	add.w	ip, r1, #20
 8006500:	f8dc 0000 	ldr.w	r0, [ip]
 8006504:	3301      	adds	r3, #1
 8006506:	b281      	uxth	r1, r0
 8006508:	fb02 7101 	mla	r1, r2, r1, r7
 800650c:	0c00      	lsrs	r0, r0, #16
 800650e:	0c0f      	lsrs	r7, r1, #16
 8006510:	fb02 7000 	mla	r0, r2, r0, r7
 8006514:	b289      	uxth	r1, r1
 8006516:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800651a:	429d      	cmp	r5, r3
 800651c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006520:	f84c 1b04 	str.w	r1, [ip], #4
 8006524:	dcec      	bgt.n	8006500 <__multadd+0x12>
 8006526:	b1d7      	cbz	r7, 800655e <__multadd+0x70>
 8006528:	68a3      	ldr	r3, [r4, #8]
 800652a:	42ab      	cmp	r3, r5
 800652c:	dc12      	bgt.n	8006554 <__multadd+0x66>
 800652e:	6861      	ldr	r1, [r4, #4]
 8006530:	4630      	mov	r0, r6
 8006532:	3101      	adds	r1, #1
 8006534:	f7ff ffad 	bl	8006492 <_Balloc>
 8006538:	4680      	mov	r8, r0
 800653a:	6922      	ldr	r2, [r4, #16]
 800653c:	f104 010c 	add.w	r1, r4, #12
 8006540:	3202      	adds	r2, #2
 8006542:	0092      	lsls	r2, r2, #2
 8006544:	300c      	adds	r0, #12
 8006546:	f7ff ff99 	bl	800647c <memcpy>
 800654a:	4621      	mov	r1, r4
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff ffc5 	bl	80064dc <_Bfree>
 8006552:	4644      	mov	r4, r8
 8006554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006558:	3501      	adds	r5, #1
 800655a:	615f      	str	r7, [r3, #20]
 800655c:	6125      	str	r5, [r4, #16]
 800655e:	4620      	mov	r0, r4
 8006560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006564 <__hi0bits>:
 8006564:	0c02      	lsrs	r2, r0, #16
 8006566:	0412      	lsls	r2, r2, #16
 8006568:	4603      	mov	r3, r0
 800656a:	b9b2      	cbnz	r2, 800659a <__hi0bits+0x36>
 800656c:	0403      	lsls	r3, r0, #16
 800656e:	2010      	movs	r0, #16
 8006570:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006574:	bf04      	itt	eq
 8006576:	021b      	lsleq	r3, r3, #8
 8006578:	3008      	addeq	r0, #8
 800657a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800657e:	bf04      	itt	eq
 8006580:	011b      	lsleq	r3, r3, #4
 8006582:	3004      	addeq	r0, #4
 8006584:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006588:	bf04      	itt	eq
 800658a:	009b      	lsleq	r3, r3, #2
 800658c:	3002      	addeq	r0, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	db06      	blt.n	80065a0 <__hi0bits+0x3c>
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	d503      	bpl.n	800659e <__hi0bits+0x3a>
 8006596:	3001      	adds	r0, #1
 8006598:	4770      	bx	lr
 800659a:	2000      	movs	r0, #0
 800659c:	e7e8      	b.n	8006570 <__hi0bits+0xc>
 800659e:	2020      	movs	r0, #32
 80065a0:	4770      	bx	lr

080065a2 <__lo0bits>:
 80065a2:	6803      	ldr	r3, [r0, #0]
 80065a4:	4601      	mov	r1, r0
 80065a6:	f013 0207 	ands.w	r2, r3, #7
 80065aa:	d00b      	beq.n	80065c4 <__lo0bits+0x22>
 80065ac:	07da      	lsls	r2, r3, #31
 80065ae:	d423      	bmi.n	80065f8 <__lo0bits+0x56>
 80065b0:	0798      	lsls	r0, r3, #30
 80065b2:	bf49      	itett	mi
 80065b4:	085b      	lsrmi	r3, r3, #1
 80065b6:	089b      	lsrpl	r3, r3, #2
 80065b8:	2001      	movmi	r0, #1
 80065ba:	600b      	strmi	r3, [r1, #0]
 80065bc:	bf5c      	itt	pl
 80065be:	600b      	strpl	r3, [r1, #0]
 80065c0:	2002      	movpl	r0, #2
 80065c2:	4770      	bx	lr
 80065c4:	b298      	uxth	r0, r3
 80065c6:	b9a8      	cbnz	r0, 80065f4 <__lo0bits+0x52>
 80065c8:	2010      	movs	r0, #16
 80065ca:	0c1b      	lsrs	r3, r3, #16
 80065cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80065d0:	bf04      	itt	eq
 80065d2:	0a1b      	lsreq	r3, r3, #8
 80065d4:	3008      	addeq	r0, #8
 80065d6:	071a      	lsls	r2, r3, #28
 80065d8:	bf04      	itt	eq
 80065da:	091b      	lsreq	r3, r3, #4
 80065dc:	3004      	addeq	r0, #4
 80065de:	079a      	lsls	r2, r3, #30
 80065e0:	bf04      	itt	eq
 80065e2:	089b      	lsreq	r3, r3, #2
 80065e4:	3002      	addeq	r0, #2
 80065e6:	07da      	lsls	r2, r3, #31
 80065e8:	d402      	bmi.n	80065f0 <__lo0bits+0x4e>
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	d006      	beq.n	80065fc <__lo0bits+0x5a>
 80065ee:	3001      	adds	r0, #1
 80065f0:	600b      	str	r3, [r1, #0]
 80065f2:	4770      	bx	lr
 80065f4:	4610      	mov	r0, r2
 80065f6:	e7e9      	b.n	80065cc <__lo0bits+0x2a>
 80065f8:	2000      	movs	r0, #0
 80065fa:	4770      	bx	lr
 80065fc:	2020      	movs	r0, #32
 80065fe:	4770      	bx	lr

08006600 <__i2b>:
 8006600:	b510      	push	{r4, lr}
 8006602:	460c      	mov	r4, r1
 8006604:	2101      	movs	r1, #1
 8006606:	f7ff ff44 	bl	8006492 <_Balloc>
 800660a:	2201      	movs	r2, #1
 800660c:	6144      	str	r4, [r0, #20]
 800660e:	6102      	str	r2, [r0, #16]
 8006610:	bd10      	pop	{r4, pc}

08006612 <__multiply>:
 8006612:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006616:	4614      	mov	r4, r2
 8006618:	690a      	ldr	r2, [r1, #16]
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	4688      	mov	r8, r1
 800661e:	429a      	cmp	r2, r3
 8006620:	bfbe      	ittt	lt
 8006622:	460b      	movlt	r3, r1
 8006624:	46a0      	movlt	r8, r4
 8006626:	461c      	movlt	r4, r3
 8006628:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800662c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006630:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006634:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006638:	eb07 0609 	add.w	r6, r7, r9
 800663c:	42b3      	cmp	r3, r6
 800663e:	bfb8      	it	lt
 8006640:	3101      	addlt	r1, #1
 8006642:	f7ff ff26 	bl	8006492 <_Balloc>
 8006646:	f100 0514 	add.w	r5, r0, #20
 800664a:	462b      	mov	r3, r5
 800664c:	2200      	movs	r2, #0
 800664e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006652:	4573      	cmp	r3, lr
 8006654:	d316      	bcc.n	8006684 <__multiply+0x72>
 8006656:	f104 0214 	add.w	r2, r4, #20
 800665a:	f108 0114 	add.w	r1, r8, #20
 800665e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006662:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	9b00      	ldr	r3, [sp, #0]
 800666a:	9201      	str	r2, [sp, #4]
 800666c:	4293      	cmp	r3, r2
 800666e:	d80c      	bhi.n	800668a <__multiply+0x78>
 8006670:	2e00      	cmp	r6, #0
 8006672:	dd03      	ble.n	800667c <__multiply+0x6a>
 8006674:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05d      	beq.n	8006738 <__multiply+0x126>
 800667c:	6106      	str	r6, [r0, #16]
 800667e:	b003      	add	sp, #12
 8006680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006684:	f843 2b04 	str.w	r2, [r3], #4
 8006688:	e7e3      	b.n	8006652 <__multiply+0x40>
 800668a:	f8b2 b000 	ldrh.w	fp, [r2]
 800668e:	f1bb 0f00 	cmp.w	fp, #0
 8006692:	d023      	beq.n	80066dc <__multiply+0xca>
 8006694:	4689      	mov	r9, r1
 8006696:	46ac      	mov	ip, r5
 8006698:	f04f 0800 	mov.w	r8, #0
 800669c:	f859 4b04 	ldr.w	r4, [r9], #4
 80066a0:	f8dc a000 	ldr.w	sl, [ip]
 80066a4:	b2a3      	uxth	r3, r4
 80066a6:	fa1f fa8a 	uxth.w	sl, sl
 80066aa:	fb0b a303 	mla	r3, fp, r3, sl
 80066ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80066b2:	f8dc 4000 	ldr.w	r4, [ip]
 80066b6:	4443      	add	r3, r8
 80066b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80066bc:	fb0b 840a 	mla	r4, fp, sl, r8
 80066c0:	46e2      	mov	sl, ip
 80066c2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80066cc:	454f      	cmp	r7, r9
 80066ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80066d2:	f84a 3b04 	str.w	r3, [sl], #4
 80066d6:	d82b      	bhi.n	8006730 <__multiply+0x11e>
 80066d8:	f8cc 8004 	str.w	r8, [ip, #4]
 80066dc:	9b01      	ldr	r3, [sp, #4]
 80066de:	3204      	adds	r2, #4
 80066e0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80066e4:	f1ba 0f00 	cmp.w	sl, #0
 80066e8:	d020      	beq.n	800672c <__multiply+0x11a>
 80066ea:	4689      	mov	r9, r1
 80066ec:	46a8      	mov	r8, r5
 80066ee:	f04f 0b00 	mov.w	fp, #0
 80066f2:	682b      	ldr	r3, [r5, #0]
 80066f4:	f8b9 c000 	ldrh.w	ip, [r9]
 80066f8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	fb0a 440c 	mla	r4, sl, ip, r4
 8006702:	46c4      	mov	ip, r8
 8006704:	445c      	add	r4, fp
 8006706:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800670a:	f84c 3b04 	str.w	r3, [ip], #4
 800670e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006712:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006716:	0c1b      	lsrs	r3, r3, #16
 8006718:	fb0a b303 	mla	r3, sl, r3, fp
 800671c:	454f      	cmp	r7, r9
 800671e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006722:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006726:	d805      	bhi.n	8006734 <__multiply+0x122>
 8006728:	f8c8 3004 	str.w	r3, [r8, #4]
 800672c:	3504      	adds	r5, #4
 800672e:	e79b      	b.n	8006668 <__multiply+0x56>
 8006730:	46d4      	mov	ip, sl
 8006732:	e7b3      	b.n	800669c <__multiply+0x8a>
 8006734:	46e0      	mov	r8, ip
 8006736:	e7dd      	b.n	80066f4 <__multiply+0xe2>
 8006738:	3e01      	subs	r6, #1
 800673a:	e799      	b.n	8006670 <__multiply+0x5e>

0800673c <__pow5mult>:
 800673c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006740:	4615      	mov	r5, r2
 8006742:	f012 0203 	ands.w	r2, r2, #3
 8006746:	4606      	mov	r6, r0
 8006748:	460f      	mov	r7, r1
 800674a:	d007      	beq.n	800675c <__pow5mult+0x20>
 800674c:	4c1a      	ldr	r4, [pc, #104]	; (80067b8 <__pow5mult+0x7c>)
 800674e:	3a01      	subs	r2, #1
 8006750:	2300      	movs	r3, #0
 8006752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006756:	f7ff feca 	bl	80064ee <__multadd>
 800675a:	4607      	mov	r7, r0
 800675c:	10ad      	asrs	r5, r5, #2
 800675e:	d027      	beq.n	80067b0 <__pow5mult+0x74>
 8006760:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8006762:	b944      	cbnz	r4, 8006776 <__pow5mult+0x3a>
 8006764:	f240 2171 	movw	r1, #625	; 0x271
 8006768:	4630      	mov	r0, r6
 800676a:	f7ff ff49 	bl	8006600 <__i2b>
 800676e:	2300      	movs	r3, #0
 8006770:	4604      	mov	r4, r0
 8006772:	64b0      	str	r0, [r6, #72]	; 0x48
 8006774:	6003      	str	r3, [r0, #0]
 8006776:	f04f 0800 	mov.w	r8, #0
 800677a:	07eb      	lsls	r3, r5, #31
 800677c:	d50a      	bpl.n	8006794 <__pow5mult+0x58>
 800677e:	4639      	mov	r1, r7
 8006780:	4622      	mov	r2, r4
 8006782:	4630      	mov	r0, r6
 8006784:	f7ff ff45 	bl	8006612 <__multiply>
 8006788:	4681      	mov	r9, r0
 800678a:	4639      	mov	r1, r7
 800678c:	4630      	mov	r0, r6
 800678e:	f7ff fea5 	bl	80064dc <_Bfree>
 8006792:	464f      	mov	r7, r9
 8006794:	106d      	asrs	r5, r5, #1
 8006796:	d00b      	beq.n	80067b0 <__pow5mult+0x74>
 8006798:	6820      	ldr	r0, [r4, #0]
 800679a:	b938      	cbnz	r0, 80067ac <__pow5mult+0x70>
 800679c:	4622      	mov	r2, r4
 800679e:	4621      	mov	r1, r4
 80067a0:	4630      	mov	r0, r6
 80067a2:	f7ff ff36 	bl	8006612 <__multiply>
 80067a6:	6020      	str	r0, [r4, #0]
 80067a8:	f8c0 8000 	str.w	r8, [r0]
 80067ac:	4604      	mov	r4, r0
 80067ae:	e7e4      	b.n	800677a <__pow5mult+0x3e>
 80067b0:	4638      	mov	r0, r7
 80067b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067b6:	bf00      	nop
 80067b8:	08007848 	.word	0x08007848

080067bc <__lshift>:
 80067bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	460c      	mov	r4, r1
 80067c2:	4607      	mov	r7, r0
 80067c4:	4616      	mov	r6, r2
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067cc:	eb0a 0903 	add.w	r9, sl, r3
 80067d0:	6849      	ldr	r1, [r1, #4]
 80067d2:	68a3      	ldr	r3, [r4, #8]
 80067d4:	f109 0501 	add.w	r5, r9, #1
 80067d8:	42ab      	cmp	r3, r5
 80067da:	db32      	blt.n	8006842 <__lshift+0x86>
 80067dc:	4638      	mov	r0, r7
 80067de:	f7ff fe58 	bl	8006492 <_Balloc>
 80067e2:	2300      	movs	r3, #0
 80067e4:	4680      	mov	r8, r0
 80067e6:	461a      	mov	r2, r3
 80067e8:	f100 0114 	add.w	r1, r0, #20
 80067ec:	4553      	cmp	r3, sl
 80067ee:	db2b      	blt.n	8006848 <__lshift+0x8c>
 80067f0:	6920      	ldr	r0, [r4, #16]
 80067f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067f6:	f104 0314 	add.w	r3, r4, #20
 80067fa:	f016 021f 	ands.w	r2, r6, #31
 80067fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006802:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006806:	d025      	beq.n	8006854 <__lshift+0x98>
 8006808:	2000      	movs	r0, #0
 800680a:	f1c2 0e20 	rsb	lr, r2, #32
 800680e:	468a      	mov	sl, r1
 8006810:	681e      	ldr	r6, [r3, #0]
 8006812:	4096      	lsls	r6, r2
 8006814:	4330      	orrs	r0, r6
 8006816:	f84a 0b04 	str.w	r0, [sl], #4
 800681a:	f853 0b04 	ldr.w	r0, [r3], #4
 800681e:	459c      	cmp	ip, r3
 8006820:	fa20 f00e 	lsr.w	r0, r0, lr
 8006824:	d814      	bhi.n	8006850 <__lshift+0x94>
 8006826:	6048      	str	r0, [r1, #4]
 8006828:	b108      	cbz	r0, 800682e <__lshift+0x72>
 800682a:	f109 0502 	add.w	r5, r9, #2
 800682e:	3d01      	subs	r5, #1
 8006830:	4638      	mov	r0, r7
 8006832:	f8c8 5010 	str.w	r5, [r8, #16]
 8006836:	4621      	mov	r1, r4
 8006838:	f7ff fe50 	bl	80064dc <_Bfree>
 800683c:	4640      	mov	r0, r8
 800683e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006842:	3101      	adds	r1, #1
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	e7c7      	b.n	80067d8 <__lshift+0x1c>
 8006848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800684c:	3301      	adds	r3, #1
 800684e:	e7cd      	b.n	80067ec <__lshift+0x30>
 8006850:	4651      	mov	r1, sl
 8006852:	e7dc      	b.n	800680e <__lshift+0x52>
 8006854:	3904      	subs	r1, #4
 8006856:	f853 2b04 	ldr.w	r2, [r3], #4
 800685a:	459c      	cmp	ip, r3
 800685c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006860:	d8f9      	bhi.n	8006856 <__lshift+0x9a>
 8006862:	e7e4      	b.n	800682e <__lshift+0x72>

08006864 <__mcmp>:
 8006864:	6903      	ldr	r3, [r0, #16]
 8006866:	690a      	ldr	r2, [r1, #16]
 8006868:	b530      	push	{r4, r5, lr}
 800686a:	1a9b      	subs	r3, r3, r2
 800686c:	d10c      	bne.n	8006888 <__mcmp+0x24>
 800686e:	0092      	lsls	r2, r2, #2
 8006870:	3014      	adds	r0, #20
 8006872:	3114      	adds	r1, #20
 8006874:	1884      	adds	r4, r0, r2
 8006876:	4411      	add	r1, r2
 8006878:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800687c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006880:	4295      	cmp	r5, r2
 8006882:	d003      	beq.n	800688c <__mcmp+0x28>
 8006884:	d305      	bcc.n	8006892 <__mcmp+0x2e>
 8006886:	2301      	movs	r3, #1
 8006888:	4618      	mov	r0, r3
 800688a:	bd30      	pop	{r4, r5, pc}
 800688c:	42a0      	cmp	r0, r4
 800688e:	d3f3      	bcc.n	8006878 <__mcmp+0x14>
 8006890:	e7fa      	b.n	8006888 <__mcmp+0x24>
 8006892:	f04f 33ff 	mov.w	r3, #4294967295
 8006896:	e7f7      	b.n	8006888 <__mcmp+0x24>

08006898 <__mdiff>:
 8006898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	460d      	mov	r5, r1
 800689e:	4607      	mov	r7, r0
 80068a0:	4611      	mov	r1, r2
 80068a2:	4628      	mov	r0, r5
 80068a4:	4614      	mov	r4, r2
 80068a6:	f7ff ffdd 	bl	8006864 <__mcmp>
 80068aa:	1e06      	subs	r6, r0, #0
 80068ac:	d108      	bne.n	80068c0 <__mdiff+0x28>
 80068ae:	4631      	mov	r1, r6
 80068b0:	4638      	mov	r0, r7
 80068b2:	f7ff fdee 	bl	8006492 <_Balloc>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c0:	bfa4      	itt	ge
 80068c2:	4623      	movge	r3, r4
 80068c4:	462c      	movge	r4, r5
 80068c6:	4638      	mov	r0, r7
 80068c8:	6861      	ldr	r1, [r4, #4]
 80068ca:	bfa6      	itte	ge
 80068cc:	461d      	movge	r5, r3
 80068ce:	2600      	movge	r6, #0
 80068d0:	2601      	movlt	r6, #1
 80068d2:	f7ff fdde 	bl	8006492 <_Balloc>
 80068d6:	f04f 0e00 	mov.w	lr, #0
 80068da:	60c6      	str	r6, [r0, #12]
 80068dc:	692b      	ldr	r3, [r5, #16]
 80068de:	6926      	ldr	r6, [r4, #16]
 80068e0:	f104 0214 	add.w	r2, r4, #20
 80068e4:	f105 0914 	add.w	r9, r5, #20
 80068e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80068ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80068f0:	f100 0114 	add.w	r1, r0, #20
 80068f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80068f8:	f859 5b04 	ldr.w	r5, [r9], #4
 80068fc:	fa1f f38a 	uxth.w	r3, sl
 8006900:	4473      	add	r3, lr
 8006902:	b2ac      	uxth	r4, r5
 8006904:	1b1b      	subs	r3, r3, r4
 8006906:	0c2c      	lsrs	r4, r5, #16
 8006908:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800690c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006910:	b29b      	uxth	r3, r3
 8006912:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006916:	45c8      	cmp	r8, r9
 8006918:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800691c:	4694      	mov	ip, r2
 800691e:	f841 4b04 	str.w	r4, [r1], #4
 8006922:	d8e7      	bhi.n	80068f4 <__mdiff+0x5c>
 8006924:	45bc      	cmp	ip, r7
 8006926:	d304      	bcc.n	8006932 <__mdiff+0x9a>
 8006928:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800692c:	b183      	cbz	r3, 8006950 <__mdiff+0xb8>
 800692e:	6106      	str	r6, [r0, #16]
 8006930:	e7c4      	b.n	80068bc <__mdiff+0x24>
 8006932:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006936:	b2a2      	uxth	r2, r4
 8006938:	4472      	add	r2, lr
 800693a:	1413      	asrs	r3, r2, #16
 800693c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006940:	b292      	uxth	r2, r2
 8006942:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006946:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800694a:	f841 2b04 	str.w	r2, [r1], #4
 800694e:	e7e9      	b.n	8006924 <__mdiff+0x8c>
 8006950:	3e01      	subs	r6, #1
 8006952:	e7e9      	b.n	8006928 <__mdiff+0x90>

08006954 <__d2b>:
 8006954:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006958:	461c      	mov	r4, r3
 800695a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800695e:	2101      	movs	r1, #1
 8006960:	4690      	mov	r8, r2
 8006962:	f7ff fd96 	bl	8006492 <_Balloc>
 8006966:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800696a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800696e:	4607      	mov	r7, r0
 8006970:	bb34      	cbnz	r4, 80069c0 <__d2b+0x6c>
 8006972:	9201      	str	r2, [sp, #4]
 8006974:	f1b8 0200 	subs.w	r2, r8, #0
 8006978:	d027      	beq.n	80069ca <__d2b+0x76>
 800697a:	a802      	add	r0, sp, #8
 800697c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006980:	f7ff fe0f 	bl	80065a2 <__lo0bits>
 8006984:	9900      	ldr	r1, [sp, #0]
 8006986:	b1f0      	cbz	r0, 80069c6 <__d2b+0x72>
 8006988:	9a01      	ldr	r2, [sp, #4]
 800698a:	f1c0 0320 	rsb	r3, r0, #32
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	430b      	orrs	r3, r1
 8006994:	40c2      	lsrs	r2, r0
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	9201      	str	r2, [sp, #4]
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf14      	ite	ne
 80069a0:	2102      	movne	r1, #2
 80069a2:	2101      	moveq	r1, #1
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	6139      	str	r1, [r7, #16]
 80069a8:	b1c4      	cbz	r4, 80069dc <__d2b+0x88>
 80069aa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80069ae:	4404      	add	r4, r0
 80069b0:	6034      	str	r4, [r6, #0]
 80069b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069b6:	6028      	str	r0, [r5, #0]
 80069b8:	4638      	mov	r0, r7
 80069ba:	b002      	add	sp, #8
 80069bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80069c4:	e7d5      	b.n	8006972 <__d2b+0x1e>
 80069c6:	6179      	str	r1, [r7, #20]
 80069c8:	e7e7      	b.n	800699a <__d2b+0x46>
 80069ca:	a801      	add	r0, sp, #4
 80069cc:	f7ff fde9 	bl	80065a2 <__lo0bits>
 80069d0:	2101      	movs	r1, #1
 80069d2:	9b01      	ldr	r3, [sp, #4]
 80069d4:	6139      	str	r1, [r7, #16]
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	3020      	adds	r0, #32
 80069da:	e7e5      	b.n	80069a8 <__d2b+0x54>
 80069dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80069e4:	6030      	str	r0, [r6, #0]
 80069e6:	6918      	ldr	r0, [r3, #16]
 80069e8:	f7ff fdbc 	bl	8006564 <__hi0bits>
 80069ec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80069f0:	e7e1      	b.n	80069b6 <__d2b+0x62>
	...

080069f4 <frexp>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	4616      	mov	r6, r2
 80069f8:	2700      	movs	r7, #0
 80069fa:	6037      	str	r7, [r6, #0]
 80069fc:	4f14      	ldr	r7, [pc, #80]	; (8006a50 <frexp+0x5c>)
 80069fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a02:	42bb      	cmp	r3, r7
 8006a04:	4604      	mov	r4, r0
 8006a06:	460d      	mov	r5, r1
 8006a08:	460a      	mov	r2, r1
 8006a0a:	dc1e      	bgt.n	8006a4a <frexp+0x56>
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	431f      	orrs	r7, r3
 8006a10:	d01b      	beq.n	8006a4a <frexp+0x56>
 8006a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a16:	da0a      	bge.n	8006a2e <frexp+0x3a>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	4b0e      	ldr	r3, [pc, #56]	; (8006a54 <frexp+0x60>)
 8006a1c:	f7f9 fd5c 	bl	80004d8 <__aeabi_dmul>
 8006a20:	460a      	mov	r2, r1
 8006a22:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a26:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	6031      	str	r1, [r6, #0]
 8006a2e:	6831      	ldr	r1, [r6, #0]
 8006a30:	151b      	asrs	r3, r3, #20
 8006a32:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006a36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006a3a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8006a3e:	440b      	add	r3, r1
 8006a40:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006a44:	6033      	str	r3, [r6, #0]
 8006a46:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a50:	7fefffff 	.word	0x7fefffff
 8006a54:	43500000 	.word	0x43500000

08006a58 <__sread>:
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a60:	f000 fba8 	bl	80071b4 <_read_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	bfab      	itete	ge
 8006a68:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8006a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a6c:	181b      	addge	r3, r3, r0
 8006a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a72:	bfac      	ite	ge
 8006a74:	6523      	strge	r3, [r4, #80]	; 0x50
 8006a76:	81a3      	strhlt	r3, [r4, #12]
 8006a78:	bd10      	pop	{r4, pc}

08006a7a <__swrite>:
 8006a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7e:	461f      	mov	r7, r3
 8006a80:	898b      	ldrh	r3, [r1, #12]
 8006a82:	4605      	mov	r5, r0
 8006a84:	05db      	lsls	r3, r3, #23
 8006a86:	460c      	mov	r4, r1
 8006a88:	4616      	mov	r6, r2
 8006a8a:	d505      	bpl.n	8006a98 <__swrite+0x1e>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a94:	f000 fb50 	bl	8007138 <_lseek_r>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	4632      	mov	r2, r6
 8006a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aae:	f000 b85d 	b.w	8006b6c <_write_r>

08006ab2 <__sseek>:
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aba:	f000 fb3d 	bl	8007138 <_lseek_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	bf15      	itete	ne
 8006ac4:	6520      	strne	r0, [r4, #80]	; 0x50
 8006ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ace:	81a3      	strheq	r3, [r4, #12]
 8006ad0:	bf18      	it	ne
 8006ad2:	81a3      	strhne	r3, [r4, #12]
 8006ad4:	bd10      	pop	{r4, pc}

08006ad6 <__sclose>:
 8006ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ada:	f000 b8dd 	b.w	8006c98 <_close_r>

08006ade <strncpy>:
 8006ade:	b570      	push	{r4, r5, r6, lr}
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	3901      	subs	r1, #1
 8006ae4:	b902      	cbnz	r2, 8006ae8 <strncpy+0xa>
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
 8006ae8:	4623      	mov	r3, r4
 8006aea:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006aee:	1e56      	subs	r6, r2, #1
 8006af0:	f803 5b01 	strb.w	r5, [r3], #1
 8006af4:	b92d      	cbnz	r5, 8006b02 <strncpy+0x24>
 8006af6:	4414      	add	r4, r2
 8006af8:	42a3      	cmp	r3, r4
 8006afa:	d0f4      	beq.n	8006ae6 <strncpy+0x8>
 8006afc:	f803 5b01 	strb.w	r5, [r3], #1
 8006b00:	e7fa      	b.n	8006af8 <strncpy+0x1a>
 8006b02:	461c      	mov	r4, r3
 8006b04:	4632      	mov	r2, r6
 8006b06:	e7ed      	b.n	8006ae4 <strncpy+0x6>

08006b08 <__sprint_r>:
 8006b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	6893      	ldr	r3, [r2, #8]
 8006b0e:	4680      	mov	r8, r0
 8006b10:	460f      	mov	r7, r1
 8006b12:	4614      	mov	r4, r2
 8006b14:	b91b      	cbnz	r3, 8006b1e <__sprint_r+0x16>
 8006b16:	4618      	mov	r0, r3
 8006b18:	6053      	str	r3, [r2, #4]
 8006b1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006b20:	049d      	lsls	r5, r3, #18
 8006b22:	d520      	bpl.n	8006b66 <__sprint_r+0x5e>
 8006b24:	6815      	ldr	r5, [r2, #0]
 8006b26:	68a0      	ldr	r0, [r4, #8]
 8006b28:	3508      	adds	r5, #8
 8006b2a:	b918      	cbnz	r0, 8006b34 <__sprint_r+0x2c>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8006b32:	e7f2      	b.n	8006b1a <__sprint_r+0x12>
 8006b34:	f04f 0900 	mov.w	r9, #0
 8006b38:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8006b3c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8006b40:	45ca      	cmp	sl, r9
 8006b42:	dc05      	bgt.n	8006b50 <__sprint_r+0x48>
 8006b44:	68a3      	ldr	r3, [r4, #8]
 8006b46:	f026 0603 	bic.w	r6, r6, #3
 8006b4a:	1b9e      	subs	r6, r3, r6
 8006b4c:	60a6      	str	r6, [r4, #8]
 8006b4e:	e7ea      	b.n	8006b26 <__sprint_r+0x1e>
 8006b50:	463a      	mov	r2, r7
 8006b52:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8006b56:	4640      	mov	r0, r8
 8006b58:	f000 f946 	bl	8006de8 <_fputwc_r>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d0e5      	beq.n	8006b2c <__sprint_r+0x24>
 8006b60:	f109 0901 	add.w	r9, r9, #1
 8006b64:	e7ec      	b.n	8006b40 <__sprint_r+0x38>
 8006b66:	f000 f97b 	bl	8006e60 <__sfvwrite_r>
 8006b6a:	e7df      	b.n	8006b2c <__sprint_r+0x24>

08006b6c <_write_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4605      	mov	r5, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	4611      	mov	r1, r2
 8006b74:	2200      	movs	r2, #0
 8006b76:	4c05      	ldr	r4, [pc, #20]	; (8006b8c <_write_r+0x20>)
 8006b78:	6022      	str	r2, [r4, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f7fb f825 	bl	8001bca <_write>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	d102      	bne.n	8006b8a <_write_r+0x1e>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	b103      	cbz	r3, 8006b8a <_write_r+0x1e>
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
 8006b8c:	20000b6c 	.word	0x20000b6c

08006b90 <__register_exitproc>:
 8006b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b94:	4c26      	ldr	r4, [pc, #152]	; (8006c30 <__register_exitproc+0xa0>)
 8006b96:	4606      	mov	r6, r0
 8006b98:	6820      	ldr	r0, [r4, #0]
 8006b9a:	4698      	mov	r8, r3
 8006b9c:	460f      	mov	r7, r1
 8006b9e:	4691      	mov	r9, r2
 8006ba0:	f7ff fbf0 	bl	8006384 <__retarget_lock_acquire_recursive>
 8006ba4:	4b23      	ldr	r3, [pc, #140]	; (8006c34 <__register_exitproc+0xa4>)
 8006ba6:	681d      	ldr	r5, [r3, #0]
 8006ba8:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8006bac:	b918      	cbnz	r0, 8006bb6 <__register_exitproc+0x26>
 8006bae:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8006bb2:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8006bb6:	6843      	ldr	r3, [r0, #4]
 8006bb8:	2b1f      	cmp	r3, #31
 8006bba:	dd19      	ble.n	8006bf0 <__register_exitproc+0x60>
 8006bbc:	4b1e      	ldr	r3, [pc, #120]	; (8006c38 <__register_exitproc+0xa8>)
 8006bbe:	b933      	cbnz	r3, 8006bce <__register_exitproc+0x3e>
 8006bc0:	6820      	ldr	r0, [r4, #0]
 8006bc2:	f7ff fbe0 	bl	8006386 <__retarget_lock_release_recursive>
 8006bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006bd2:	f7fc fda3 	bl	800371c <malloc>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d0f2      	beq.n	8006bc0 <__register_exitproc+0x30>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8006be0:	6042      	str	r2, [r0, #4]
 8006be2:	6003      	str	r3, [r0, #0]
 8006be4:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8006be8:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8006bec:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8006bf0:	6843      	ldr	r3, [r0, #4]
 8006bf2:	b19e      	cbz	r6, 8006c1c <__register_exitproc+0x8c>
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8006bfa:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8006bfe:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8006c02:	409a      	lsls	r2, r3
 8006c04:	4311      	orrs	r1, r2
 8006c06:	2e02      	cmp	r6, #2
 8006c08:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8006c0c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8006c10:	bf02      	ittt	eq
 8006c12:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8006c16:	430a      	orreq	r2, r1
 8006c18:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	3302      	adds	r3, #2
 8006c20:	6042      	str	r2, [r0, #4]
 8006c22:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8006c26:	6820      	ldr	r0, [r4, #0]
 8006c28:	f7ff fbad 	bl	8006386 <__retarget_lock_release_recursive>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e7cc      	b.n	8006bca <__register_exitproc+0x3a>
 8006c30:	20000850 	.word	0x20000850
 8006c34:	080076ec 	.word	0x080076ec
 8006c38:	0800371d 	.word	0x0800371d

08006c3c <_calloc_r>:
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	4351      	muls	r1, r2
 8006c40:	f7fc fd74 	bl	800372c <_malloc_r>
 8006c44:	4604      	mov	r4, r0
 8006c46:	b198      	cbz	r0, 8006c70 <_calloc_r+0x34>
 8006c48:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006c4c:	f022 0203 	bic.w	r2, r2, #3
 8006c50:	3a04      	subs	r2, #4
 8006c52:	2a24      	cmp	r2, #36	; 0x24
 8006c54:	d81b      	bhi.n	8006c8e <_calloc_r+0x52>
 8006c56:	2a13      	cmp	r2, #19
 8006c58:	d917      	bls.n	8006c8a <_calloc_r+0x4e>
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	2a1b      	cmp	r2, #27
 8006c5e:	e9c0 1100 	strd	r1, r1, [r0]
 8006c62:	d807      	bhi.n	8006c74 <_calloc_r+0x38>
 8006c64:	f100 0308 	add.w	r3, r0, #8
 8006c68:	2200      	movs	r2, #0
 8006c6a:	e9c3 2200 	strd	r2, r2, [r3]
 8006c6e:	609a      	str	r2, [r3, #8]
 8006c70:	4620      	mov	r0, r4
 8006c72:	bd10      	pop	{r4, pc}
 8006c74:	2a24      	cmp	r2, #36	; 0x24
 8006c76:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8006c7a:	bf11      	iteee	ne
 8006c7c:	f100 0310 	addne.w	r3, r0, #16
 8006c80:	6101      	streq	r1, [r0, #16]
 8006c82:	f100 0318 	addeq.w	r3, r0, #24
 8006c86:	6141      	streq	r1, [r0, #20]
 8006c88:	e7ee      	b.n	8006c68 <_calloc_r+0x2c>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	e7ec      	b.n	8006c68 <_calloc_r+0x2c>
 8006c8e:	2100      	movs	r1, #0
 8006c90:	f7fc ff82 	bl	8003b98 <memset>
 8006c94:	e7ec      	b.n	8006c70 <_calloc_r+0x34>
	...

08006c98 <_close_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4c05      	ldr	r4, [pc, #20]	; (8006cb4 <_close_r+0x1c>)
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	f7fa ffad 	bl	8001c02 <_close>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_close_r+0x1a>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_close_r+0x1a>
 8006cb0:	602b      	str	r3, [r5, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	20000b6c 	.word	0x20000b6c

08006cb8 <_fclose_r>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	b911      	cbnz	r1, 8006cc6 <_fclose_r+0xe>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	bd70      	pop	{r4, r5, r6, pc}
 8006cc6:	b118      	cbz	r0, 8006cd0 <_fclose_r+0x18>
 8006cc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006cca:	b90b      	cbnz	r3, 8006cd0 <_fclose_r+0x18>
 8006ccc:	f7ff f9e0 	bl	8006090 <__sinit>
 8006cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cd2:	07d8      	lsls	r0, r3, #31
 8006cd4:	d405      	bmi.n	8006ce2 <_fclose_r+0x2a>
 8006cd6:	89a3      	ldrh	r3, [r4, #12]
 8006cd8:	0599      	lsls	r1, r3, #22
 8006cda:	d402      	bmi.n	8006ce2 <_fclose_r+0x2a>
 8006cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cde:	f7ff fb51 	bl	8006384 <__retarget_lock_acquire_recursive>
 8006ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce6:	b93b      	cbnz	r3, 8006cf8 <_fclose_r+0x40>
 8006ce8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006cea:	f015 0501 	ands.w	r5, r5, #1
 8006cee:	d1e7      	bne.n	8006cc0 <_fclose_r+0x8>
 8006cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cf2:	f7ff fb48 	bl	8006386 <__retarget_lock_release_recursive>
 8006cf6:	e7e4      	b.n	8006cc2 <_fclose_r+0xa>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f7ff f8ce 	bl	8005e9c <__sflush_r>
 8006d00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d02:	4605      	mov	r5, r0
 8006d04:	b133      	cbz	r3, 8006d14 <_fclose_r+0x5c>
 8006d06:	69e1      	ldr	r1, [r4, #28]
 8006d08:	4630      	mov	r0, r6
 8006d0a:	4798      	blx	r3
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	bfb8      	it	lt
 8006d10:	f04f 35ff 	movlt.w	r5, #4294967295
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	061a      	lsls	r2, r3, #24
 8006d18:	d503      	bpl.n	8006d22 <_fclose_r+0x6a>
 8006d1a:	6921      	ldr	r1, [r4, #16]
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f7ff fa47 	bl	80061b0 <_free_r>
 8006d22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d24:	b141      	cbz	r1, 8006d38 <_fclose_r+0x80>
 8006d26:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	d002      	beq.n	8006d34 <_fclose_r+0x7c>
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f7ff fa3e 	bl	80061b0 <_free_r>
 8006d34:	2300      	movs	r3, #0
 8006d36:	6323      	str	r3, [r4, #48]	; 0x30
 8006d38:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006d3a:	b121      	cbz	r1, 8006d46 <_fclose_r+0x8e>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f7ff fa37 	bl	80061b0 <_free_r>
 8006d42:	2300      	movs	r3, #0
 8006d44:	6463      	str	r3, [r4, #68]	; 0x44
 8006d46:	f7ff f98b 	bl	8006060 <__sfp_lock_acquire>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d50:	07db      	lsls	r3, r3, #31
 8006d52:	d402      	bmi.n	8006d5a <_fclose_r+0xa2>
 8006d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d56:	f7ff fb16 	bl	8006386 <__retarget_lock_release_recursive>
 8006d5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d5c:	f7ff fb11 	bl	8006382 <__retarget_lock_close_recursive>
 8006d60:	f7ff f984 	bl	800606c <__sfp_lock_release>
 8006d64:	e7ad      	b.n	8006cc2 <_fclose_r+0xa>

08006d66 <__fputwc>:
 8006d66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	460e      	mov	r6, r1
 8006d6e:	4614      	mov	r4, r2
 8006d70:	f000 f9d4 	bl	800711c <__locale_mb_cur_max>
 8006d74:	2801      	cmp	r0, #1
 8006d76:	d11c      	bne.n	8006db2 <__fputwc+0x4c>
 8006d78:	1e73      	subs	r3, r6, #1
 8006d7a:	2bfe      	cmp	r3, #254	; 0xfe
 8006d7c:	d819      	bhi.n	8006db2 <__fputwc+0x4c>
 8006d7e:	4605      	mov	r5, r0
 8006d80:	f88d 6004 	strb.w	r6, [sp, #4]
 8006d84:	2700      	movs	r7, #0
 8006d86:	f10d 0904 	add.w	r9, sp, #4
 8006d8a:	42af      	cmp	r7, r5
 8006d8c:	d020      	beq.n	8006dd0 <__fputwc+0x6a>
 8006d8e:	68a3      	ldr	r3, [r4, #8]
 8006d90:	f817 1009 	ldrb.w	r1, [r7, r9]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	60a3      	str	r3, [r4, #8]
 8006d9a:	da04      	bge.n	8006da6 <__fputwc+0x40>
 8006d9c:	69a2      	ldr	r2, [r4, #24]
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	db1a      	blt.n	8006dd8 <__fputwc+0x72>
 8006da2:	290a      	cmp	r1, #10
 8006da4:	d018      	beq.n	8006dd8 <__fputwc+0x72>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	6022      	str	r2, [r4, #0]
 8006dac:	7019      	strb	r1, [r3, #0]
 8006dae:	3701      	adds	r7, #1
 8006db0:	e7eb      	b.n	8006d8a <__fputwc+0x24>
 8006db2:	4632      	mov	r2, r6
 8006db4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006db8:	a901      	add	r1, sp, #4
 8006dba:	4640      	mov	r0, r8
 8006dbc:	f000 fc02 	bl	80075c4 <_wcrtomb_r>
 8006dc0:	1c42      	adds	r2, r0, #1
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	d1de      	bne.n	8006d84 <__fputwc+0x1e>
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dce:	81a3      	strh	r3, [r4, #12]
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	b003      	add	sp, #12
 8006dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dd8:	4622      	mov	r2, r4
 8006dda:	4640      	mov	r0, r8
 8006ddc:	f000 fba8 	bl	8007530 <__swbuf_r>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d1e4      	bne.n	8006dae <__fputwc+0x48>
 8006de4:	4606      	mov	r6, r0
 8006de6:	e7f3      	b.n	8006dd0 <__fputwc+0x6a>

08006de8 <_fputwc_r>:
 8006de8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006dea:	b570      	push	{r4, r5, r6, lr}
 8006dec:	07db      	lsls	r3, r3, #31
 8006dee:	4605      	mov	r5, r0
 8006df0:	460e      	mov	r6, r1
 8006df2:	4614      	mov	r4, r2
 8006df4:	d405      	bmi.n	8006e02 <_fputwc_r+0x1a>
 8006df6:	8993      	ldrh	r3, [r2, #12]
 8006df8:	0598      	lsls	r0, r3, #22
 8006dfa:	d402      	bmi.n	8006e02 <_fputwc_r+0x1a>
 8006dfc:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8006dfe:	f7ff fac1 	bl	8006384 <__retarget_lock_acquire_recursive>
 8006e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e06:	0499      	lsls	r1, r3, #18
 8006e08:	d406      	bmi.n	8006e18 <_fputwc_r+0x30>
 8006e0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e16:	6663      	str	r3, [r4, #100]	; 0x64
 8006e18:	4622      	mov	r2, r4
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	f7ff ffa2 	bl	8006d66 <__fputwc>
 8006e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e24:	4605      	mov	r5, r0
 8006e26:	07da      	lsls	r2, r3, #31
 8006e28:	d405      	bmi.n	8006e36 <_fputwc_r+0x4e>
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	059b      	lsls	r3, r3, #22
 8006e2e:	d402      	bmi.n	8006e36 <_fputwc_r+0x4e>
 8006e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e32:	f7ff faa8 	bl	8006386 <__retarget_lock_release_recursive>
 8006e36:	4628      	mov	r0, r5
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e3c <_fstat_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4c06      	ldr	r4, [pc, #24]	; (8006e5c <_fstat_r+0x20>)
 8006e42:	4605      	mov	r5, r0
 8006e44:	4608      	mov	r0, r1
 8006e46:	4611      	mov	r1, r2
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	f7fa fee5 	bl	8001c18 <_fstat>
 8006e4e:	1c43      	adds	r3, r0, #1
 8006e50:	d102      	bne.n	8006e58 <_fstat_r+0x1c>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	b103      	cbz	r3, 8006e58 <_fstat_r+0x1c>
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	bd38      	pop	{r3, r4, r5, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000b6c 	.word	0x20000b6c

08006e60 <__sfvwrite_r>:
 8006e60:	6893      	ldr	r3, [r2, #8]
 8006e62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e66:	4680      	mov	r8, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	4691      	mov	r9, r2
 8006e6c:	b91b      	cbnz	r3, 8006e76 <__sfvwrite_r+0x16>
 8006e6e:	2000      	movs	r0, #0
 8006e70:	b003      	add	sp, #12
 8006e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e76:	898b      	ldrh	r3, [r1, #12]
 8006e78:	0718      	lsls	r0, r3, #28
 8006e7a:	d54f      	bpl.n	8006f1c <__sfvwrite_r+0xbc>
 8006e7c:	690b      	ldr	r3, [r1, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d04c      	beq.n	8006f1c <__sfvwrite_r+0xbc>
 8006e82:	89a5      	ldrh	r5, [r4, #12]
 8006e84:	f8d9 6000 	ldr.w	r6, [r9]
 8006e88:	f015 0702 	ands.w	r7, r5, #2
 8006e8c:	d169      	bne.n	8006f62 <__sfvwrite_r+0x102>
 8006e8e:	f015 0501 	ands.w	r5, r5, #1
 8006e92:	f000 809a 	beq.w	8006fca <__sfvwrite_r+0x16a>
 8006e96:	4638      	mov	r0, r7
 8006e98:	46ba      	mov	sl, r7
 8006e9a:	46bb      	mov	fp, r7
 8006e9c:	f1bb 0f00 	cmp.w	fp, #0
 8006ea0:	f000 8103 	beq.w	80070aa <__sfvwrite_r+0x24a>
 8006ea4:	b950      	cbnz	r0, 8006ebc <__sfvwrite_r+0x5c>
 8006ea6:	465a      	mov	r2, fp
 8006ea8:	210a      	movs	r1, #10
 8006eaa:	4650      	mov	r0, sl
 8006eac:	f7ff fad8 	bl	8006460 <memchr>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	f000 80ff 	beq.w	80070b4 <__sfvwrite_r+0x254>
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	eba0 070a 	sub.w	r7, r0, sl
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	6921      	ldr	r1, [r4, #16]
 8006ec0:	455f      	cmp	r7, fp
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	bf28      	it	cs
 8006ec6:	465b      	movcs	r3, fp
 8006ec8:	4288      	cmp	r0, r1
 8006eca:	6962      	ldr	r2, [r4, #20]
 8006ecc:	f240 80f5 	bls.w	80070ba <__sfvwrite_r+0x25a>
 8006ed0:	68a5      	ldr	r5, [r4, #8]
 8006ed2:	4415      	add	r5, r2
 8006ed4:	42ab      	cmp	r3, r5
 8006ed6:	f340 80f0 	ble.w	80070ba <__sfvwrite_r+0x25a>
 8006eda:	4651      	mov	r1, sl
 8006edc:	462a      	mov	r2, r5
 8006ede:	f000 f94f 	bl	8007180 <memmove>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	442b      	add	r3, r5
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7ff f864 	bl	8005fb8 <_fflush_r>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d165      	bne.n	8006fc0 <__sfvwrite_r+0x160>
 8006ef4:	1b7f      	subs	r7, r7, r5
 8006ef6:	f040 80fa 	bne.w	80070ee <__sfvwrite_r+0x28e>
 8006efa:	4621      	mov	r1, r4
 8006efc:	4640      	mov	r0, r8
 8006efe:	f7ff f85b 	bl	8005fb8 <_fflush_r>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d15c      	bne.n	8006fc0 <__sfvwrite_r+0x160>
 8006f06:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006f0a:	44aa      	add	sl, r5
 8006f0c:	ebab 0b05 	sub.w	fp, fp, r5
 8006f10:	1b5d      	subs	r5, r3, r5
 8006f12:	f8c9 5008 	str.w	r5, [r9, #8]
 8006f16:	2d00      	cmp	r5, #0
 8006f18:	d1c0      	bne.n	8006e9c <__sfvwrite_r+0x3c>
 8006f1a:	e7a8      	b.n	8006e6e <__sfvwrite_r+0xe>
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	4640      	mov	r0, r8
 8006f20:	f7fe f922 	bl	8005168 <__swsetup_r>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d0ac      	beq.n	8006e82 <__sfvwrite_r+0x22>
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	e7a0      	b.n	8006e70 <__sfvwrite_r+0x10>
 8006f2e:	e9d6 a700 	ldrd	sl, r7, [r6]
 8006f32:	3608      	adds	r6, #8
 8006f34:	2f00      	cmp	r7, #0
 8006f36:	d0fa      	beq.n	8006f2e <__sfvwrite_r+0xce>
 8006f38:	455f      	cmp	r7, fp
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	4652      	mov	r2, sl
 8006f3e:	bf28      	it	cs
 8006f40:	465b      	movcs	r3, fp
 8006f42:	69e1      	ldr	r1, [r4, #28]
 8006f44:	4640      	mov	r0, r8
 8006f46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f48:	47a8      	blx	r5
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	dd38      	ble.n	8006fc0 <__sfvwrite_r+0x160>
 8006f4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006f52:	4482      	add	sl, r0
 8006f54:	1a3f      	subs	r7, r7, r0
 8006f56:	1a18      	subs	r0, r3, r0
 8006f58:	f8c9 0008 	str.w	r0, [r9, #8]
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d1e9      	bne.n	8006f34 <__sfvwrite_r+0xd4>
 8006f60:	e785      	b.n	8006e6e <__sfvwrite_r+0xe>
 8006f62:	f04f 0a00 	mov.w	sl, #0
 8006f66:	f8df b190 	ldr.w	fp, [pc, #400]	; 80070f8 <__sfvwrite_r+0x298>
 8006f6a:	4657      	mov	r7, sl
 8006f6c:	e7e2      	b.n	8006f34 <__sfvwrite_r+0xd4>
 8006f6e:	e9d6 5a00 	ldrd	r5, sl, [r6]
 8006f72:	3608      	adds	r6, #8
 8006f74:	f1ba 0f00 	cmp.w	sl, #0
 8006f78:	d0f9      	beq.n	8006f6e <__sfvwrite_r+0x10e>
 8006f7a:	89a2      	ldrh	r2, [r4, #12]
 8006f7c:	68a3      	ldr	r3, [r4, #8]
 8006f7e:	0591      	lsls	r1, r2, #22
 8006f80:	6820      	ldr	r0, [r4, #0]
 8006f82:	d564      	bpl.n	800704e <__sfvwrite_r+0x1ee>
 8006f84:	4553      	cmp	r3, sl
 8006f86:	d836      	bhi.n	8006ff6 <__sfvwrite_r+0x196>
 8006f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f8c:	d033      	beq.n	8006ff6 <__sfvwrite_r+0x196>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	6967      	ldr	r7, [r4, #20]
 8006f92:	6921      	ldr	r1, [r4, #16]
 8006f94:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8006f98:	fb97 f7f3 	sdiv	r7, r7, r3
 8006f9c:	eba0 0b01 	sub.w	fp, r0, r1
 8006fa0:	f10b 0301 	add.w	r3, fp, #1
 8006fa4:	4453      	add	r3, sl
 8006fa6:	429f      	cmp	r7, r3
 8006fa8:	bf38      	it	cc
 8006faa:	461f      	movcc	r7, r3
 8006fac:	0553      	lsls	r3, r2, #21
 8006fae:	d53e      	bpl.n	800702e <__sfvwrite_r+0x1ce>
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	f7fc fbba 	bl	800372c <_malloc_r>
 8006fb8:	b948      	cbnz	r0, 8006fce <__sfvwrite_r+0x16e>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	f8c8 3000 	str.w	r3, [r8]
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	e7ae      	b.n	8006f28 <__sfvwrite_r+0xc8>
 8006fca:	46aa      	mov	sl, r5
 8006fcc:	e7d2      	b.n	8006f74 <__sfvwrite_r+0x114>
 8006fce:	465a      	mov	r2, fp
 8006fd0:	6921      	ldr	r1, [r4, #16]
 8006fd2:	9001      	str	r0, [sp, #4]
 8006fd4:	f7ff fa52 	bl	800647c <memcpy>
 8006fd8:	89a2      	ldrh	r2, [r4, #12]
 8006fda:	9b01      	ldr	r3, [sp, #4]
 8006fdc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006fe0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006fe4:	81a2      	strh	r2, [r4, #12]
 8006fe6:	6123      	str	r3, [r4, #16]
 8006fe8:	445b      	add	r3, fp
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	4653      	mov	r3, sl
 8006fee:	6167      	str	r7, [r4, #20]
 8006ff0:	eba7 070b 	sub.w	r7, r7, fp
 8006ff4:	60a7      	str	r7, [r4, #8]
 8006ff6:	4553      	cmp	r3, sl
 8006ff8:	bf28      	it	cs
 8006ffa:	4653      	movcs	r3, sl
 8006ffc:	4657      	mov	r7, sl
 8006ffe:	461a      	mov	r2, r3
 8007000:	4629      	mov	r1, r5
 8007002:	6820      	ldr	r0, [r4, #0]
 8007004:	9301      	str	r3, [sp, #4]
 8007006:	f000 f8bb 	bl	8007180 <memmove>
 800700a:	68a2      	ldr	r2, [r4, #8]
 800700c:	9b01      	ldr	r3, [sp, #4]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	60a2      	str	r2, [r4, #8]
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	4413      	add	r3, r2
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800701c:	443d      	add	r5, r7
 800701e:	ebaa 0a07 	sub.w	sl, sl, r7
 8007022:	1bdf      	subs	r7, r3, r7
 8007024:	f8c9 7008 	str.w	r7, [r9, #8]
 8007028:	2f00      	cmp	r7, #0
 800702a:	d1a3      	bne.n	8006f74 <__sfvwrite_r+0x114>
 800702c:	e71f      	b.n	8006e6e <__sfvwrite_r+0xe>
 800702e:	463a      	mov	r2, r7
 8007030:	4640      	mov	r0, r8
 8007032:	f000 f8d1 	bl	80071d8 <_realloc_r>
 8007036:	4603      	mov	r3, r0
 8007038:	2800      	cmp	r0, #0
 800703a:	d1d4      	bne.n	8006fe6 <__sfvwrite_r+0x186>
 800703c:	6921      	ldr	r1, [r4, #16]
 800703e:	4640      	mov	r0, r8
 8007040:	f7ff f8b6 	bl	80061b0 <_free_r>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	e7b5      	b.n	8006fba <__sfvwrite_r+0x15a>
 800704e:	6922      	ldr	r2, [r4, #16]
 8007050:	4282      	cmp	r2, r0
 8007052:	d302      	bcc.n	800705a <__sfvwrite_r+0x1fa>
 8007054:	6962      	ldr	r2, [r4, #20]
 8007056:	4552      	cmp	r2, sl
 8007058:	d916      	bls.n	8007088 <__sfvwrite_r+0x228>
 800705a:	4553      	cmp	r3, sl
 800705c:	bf28      	it	cs
 800705e:	4653      	movcs	r3, sl
 8007060:	461f      	mov	r7, r3
 8007062:	461a      	mov	r2, r3
 8007064:	4629      	mov	r1, r5
 8007066:	f000 f88b 	bl	8007180 <memmove>
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	1bdb      	subs	r3, r3, r7
 8007070:	443a      	add	r2, r7
 8007072:	60a3      	str	r3, [r4, #8]
 8007074:	6022      	str	r2, [r4, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1ce      	bne.n	8007018 <__sfvwrite_r+0x1b8>
 800707a:	4621      	mov	r1, r4
 800707c:	4640      	mov	r0, r8
 800707e:	f7fe ff9b 	bl	8005fb8 <_fflush_r>
 8007082:	2800      	cmp	r0, #0
 8007084:	d0c8      	beq.n	8007018 <__sfvwrite_r+0x1b8>
 8007086:	e79b      	b.n	8006fc0 <__sfvwrite_r+0x160>
 8007088:	4b1a      	ldr	r3, [pc, #104]	; (80070f4 <__sfvwrite_r+0x294>)
 800708a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800708c:	459a      	cmp	sl, r3
 800708e:	bf94      	ite	ls
 8007090:	4653      	movls	r3, sl
 8007092:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 8007096:	fb93 f3f2 	sdiv	r3, r3, r2
 800709a:	69e1      	ldr	r1, [r4, #28]
 800709c:	4353      	muls	r3, r2
 800709e:	4640      	mov	r0, r8
 80070a0:	462a      	mov	r2, r5
 80070a2:	47b8      	blx	r7
 80070a4:	1e07      	subs	r7, r0, #0
 80070a6:	dcb7      	bgt.n	8007018 <__sfvwrite_r+0x1b8>
 80070a8:	e78a      	b.n	8006fc0 <__sfvwrite_r+0x160>
 80070aa:	e9d6 ab00 	ldrd	sl, fp, [r6]
 80070ae:	2000      	movs	r0, #0
 80070b0:	3608      	adds	r6, #8
 80070b2:	e6f3      	b.n	8006e9c <__sfvwrite_r+0x3c>
 80070b4:	f10b 0701 	add.w	r7, fp, #1
 80070b8:	e700      	b.n	8006ebc <__sfvwrite_r+0x5c>
 80070ba:	429a      	cmp	r2, r3
 80070bc:	dc09      	bgt.n	80070d2 <__sfvwrite_r+0x272>
 80070be:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80070c0:	4613      	mov	r3, r2
 80070c2:	69e1      	ldr	r1, [r4, #28]
 80070c4:	4652      	mov	r2, sl
 80070c6:	4640      	mov	r0, r8
 80070c8:	47a8      	blx	r5
 80070ca:	1e05      	subs	r5, r0, #0
 80070cc:	f73f af12 	bgt.w	8006ef4 <__sfvwrite_r+0x94>
 80070d0:	e776      	b.n	8006fc0 <__sfvwrite_r+0x160>
 80070d2:	461a      	mov	r2, r3
 80070d4:	4651      	mov	r1, sl
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	f000 f852 	bl	8007180 <memmove>
 80070dc:	9b01      	ldr	r3, [sp, #4]
 80070de:	68a2      	ldr	r2, [r4, #8]
 80070e0:	461d      	mov	r5, r3
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	60a2      	str	r2, [r4, #8]
 80070e6:	6822      	ldr	r2, [r4, #0]
 80070e8:	441a      	add	r2, r3
 80070ea:	6022      	str	r2, [r4, #0]
 80070ec:	e702      	b.n	8006ef4 <__sfvwrite_r+0x94>
 80070ee:	2001      	movs	r0, #1
 80070f0:	e709      	b.n	8006f06 <__sfvwrite_r+0xa6>
 80070f2:	bf00      	nop
 80070f4:	7ffffffe 	.word	0x7ffffffe
 80070f8:	7ffffc00 	.word	0x7ffffc00

080070fc <_isatty_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	2300      	movs	r3, #0
 8007100:	4c05      	ldr	r4, [pc, #20]	; (8007118 <_isatty_r+0x1c>)
 8007102:	4605      	mov	r5, r0
 8007104:	4608      	mov	r0, r1
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	f7fa fd95 	bl	8001c36 <_isatty>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_isatty_r+0x1a>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	b103      	cbz	r3, 8007116 <_isatty_r+0x1a>
 8007114:	602b      	str	r3, [r5, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20000b6c 	.word	0x20000b6c

0800711c <__locale_mb_cur_max>:
 800711c:	4b04      	ldr	r3, [pc, #16]	; (8007130 <__locale_mb_cur_max+0x14>)
 800711e:	4a05      	ldr	r2, [pc, #20]	; (8007134 <__locale_mb_cur_max+0x18>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf08      	it	eq
 8007128:	4613      	moveq	r3, r2
 800712a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800712e:	4770      	bx	lr
 8007130:	20000010 	.word	0x20000010
 8007134:	20000854 	.word	0x20000854

08007138 <_lseek_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4605      	mov	r5, r0
 800713c:	4608      	mov	r0, r1
 800713e:	4611      	mov	r1, r2
 8007140:	2200      	movs	r2, #0
 8007142:	4c05      	ldr	r4, [pc, #20]	; (8007158 <_lseek_r+0x20>)
 8007144:	6022      	str	r2, [r4, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	f7fa fd7f 	bl	8001c4a <_lseek>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_lseek_r+0x1e>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	b103      	cbz	r3, 8007156 <_lseek_r+0x1e>
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	20000b6c 	.word	0x20000b6c

0800715c <__ascii_mbtowc>:
 800715c:	b082      	sub	sp, #8
 800715e:	b901      	cbnz	r1, 8007162 <__ascii_mbtowc+0x6>
 8007160:	a901      	add	r1, sp, #4
 8007162:	b142      	cbz	r2, 8007176 <__ascii_mbtowc+0x1a>
 8007164:	b14b      	cbz	r3, 800717a <__ascii_mbtowc+0x1e>
 8007166:	7813      	ldrb	r3, [r2, #0]
 8007168:	600b      	str	r3, [r1, #0]
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	1c10      	adds	r0, r2, #0
 800716e:	bf18      	it	ne
 8007170:	2001      	movne	r0, #1
 8007172:	b002      	add	sp, #8
 8007174:	4770      	bx	lr
 8007176:	4610      	mov	r0, r2
 8007178:	e7fb      	b.n	8007172 <__ascii_mbtowc+0x16>
 800717a:	f06f 0001 	mvn.w	r0, #1
 800717e:	e7f8      	b.n	8007172 <__ascii_mbtowc+0x16>

08007180 <memmove>:
 8007180:	4288      	cmp	r0, r1
 8007182:	b510      	push	{r4, lr}
 8007184:	eb01 0302 	add.w	r3, r1, r2
 8007188:	d807      	bhi.n	800719a <memmove+0x1a>
 800718a:	1e42      	subs	r2, r0, #1
 800718c:	4299      	cmp	r1, r3
 800718e:	d00a      	beq.n	80071a6 <memmove+0x26>
 8007190:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007194:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007198:	e7f8      	b.n	800718c <memmove+0xc>
 800719a:	4283      	cmp	r3, r0
 800719c:	d9f5      	bls.n	800718a <memmove+0xa>
 800719e:	1881      	adds	r1, r0, r2
 80071a0:	1ad2      	subs	r2, r2, r3
 80071a2:	42d3      	cmn	r3, r2
 80071a4:	d100      	bne.n	80071a8 <memmove+0x28>
 80071a6:	bd10      	pop	{r4, pc}
 80071a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80071b0:	e7f7      	b.n	80071a2 <memmove+0x22>
	...

080071b4 <_read_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4605      	mov	r5, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	2200      	movs	r2, #0
 80071be:	4c05      	ldr	r4, [pc, #20]	; (80071d4 <_read_r+0x20>)
 80071c0:	6022      	str	r2, [r4, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f7fa fce4 	bl	8001b90 <_read>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_read_r+0x1e>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_read_r+0x1e>
 80071d0:	602b      	str	r3, [r5, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	20000b6c 	.word	0x20000b6c

080071d8 <_realloc_r>:
 80071d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	4682      	mov	sl, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	b929      	cbnz	r1, 80071ee <_realloc_r+0x16>
 80071e2:	4611      	mov	r1, r2
 80071e4:	b003      	add	sp, #12
 80071e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	f7fc ba9f 	b.w	800372c <_malloc_r>
 80071ee:	9201      	str	r2, [sp, #4]
 80071f0:	f7fc fcda 	bl	8003ba8 <__malloc_lock>
 80071f4:	9a01      	ldr	r2, [sp, #4]
 80071f6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80071fa:	f102 080b 	add.w	r8, r2, #11
 80071fe:	f1b8 0f16 	cmp.w	r8, #22
 8007202:	f1a4 0908 	sub.w	r9, r4, #8
 8007206:	f025 0603 	bic.w	r6, r5, #3
 800720a:	d90b      	bls.n	8007224 <_realloc_r+0x4c>
 800720c:	f038 0807 	bics.w	r8, r8, #7
 8007210:	d50a      	bpl.n	8007228 <_realloc_r+0x50>
 8007212:	230c      	movs	r3, #12
 8007214:	f04f 0b00 	mov.w	fp, #0
 8007218:	f8ca 3000 	str.w	r3, [sl]
 800721c:	4658      	mov	r0, fp
 800721e:	b003      	add	sp, #12
 8007220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007224:	f04f 0810 	mov.w	r8, #16
 8007228:	4590      	cmp	r8, r2
 800722a:	d3f2      	bcc.n	8007212 <_realloc_r+0x3a>
 800722c:	45b0      	cmp	r8, r6
 800722e:	f340 8175 	ble.w	800751c <_realloc_r+0x344>
 8007232:	49ab      	ldr	r1, [pc, #684]	; (80074e0 <_realloc_r+0x308>)
 8007234:	eb09 0306 	add.w	r3, r9, r6
 8007238:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800723c:	6858      	ldr	r0, [r3, #4]
 800723e:	459c      	cmp	ip, r3
 8007240:	9101      	str	r1, [sp, #4]
 8007242:	d005      	beq.n	8007250 <_realloc_r+0x78>
 8007244:	f020 0101 	bic.w	r1, r0, #1
 8007248:	4419      	add	r1, r3
 800724a:	6849      	ldr	r1, [r1, #4]
 800724c:	07cf      	lsls	r7, r1, #31
 800724e:	d447      	bmi.n	80072e0 <_realloc_r+0x108>
 8007250:	f020 0003 	bic.w	r0, r0, #3
 8007254:	459c      	cmp	ip, r3
 8007256:	eb06 0700 	add.w	r7, r6, r0
 800725a:	d119      	bne.n	8007290 <_realloc_r+0xb8>
 800725c:	f108 0110 	add.w	r1, r8, #16
 8007260:	42b9      	cmp	r1, r7
 8007262:	dc3f      	bgt.n	80072e4 <_realloc_r+0x10c>
 8007264:	9a01      	ldr	r2, [sp, #4]
 8007266:	eba7 0708 	sub.w	r7, r7, r8
 800726a:	eb09 0308 	add.w	r3, r9, r8
 800726e:	f047 0701 	orr.w	r7, r7, #1
 8007272:	6093      	str	r3, [r2, #8]
 8007274:	605f      	str	r7, [r3, #4]
 8007276:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800727a:	4650      	mov	r0, sl
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	ea43 0308 	orr.w	r3, r3, r8
 8007284:	f844 3c04 	str.w	r3, [r4, #-4]
 8007288:	f7fc fc94 	bl	8003bb4 <__malloc_unlock>
 800728c:	46a3      	mov	fp, r4
 800728e:	e7c5      	b.n	800721c <_realloc_r+0x44>
 8007290:	45b8      	cmp	r8, r7
 8007292:	dc27      	bgt.n	80072e4 <_realloc_r+0x10c>
 8007294:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007298:	60da      	str	r2, [r3, #12]
 800729a:	6093      	str	r3, [r2, #8]
 800729c:	eba7 0008 	sub.w	r0, r7, r8
 80072a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80072a4:	280f      	cmp	r0, #15
 80072a6:	f002 0201 	and.w	r2, r2, #1
 80072aa:	eb09 0307 	add.w	r3, r9, r7
 80072ae:	f240 8137 	bls.w	8007520 <_realloc_r+0x348>
 80072b2:	eb09 0108 	add.w	r1, r9, r8
 80072b6:	ea48 0202 	orr.w	r2, r8, r2
 80072ba:	f040 0001 	orr.w	r0, r0, #1
 80072be:	f8c9 2004 	str.w	r2, [r9, #4]
 80072c2:	6048      	str	r0, [r1, #4]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	3108      	adds	r1, #8
 80072c8:	f042 0201 	orr.w	r2, r2, #1
 80072cc:	605a      	str	r2, [r3, #4]
 80072ce:	4650      	mov	r0, sl
 80072d0:	f7fe ff6e 	bl	80061b0 <_free_r>
 80072d4:	4650      	mov	r0, sl
 80072d6:	f7fc fc6d 	bl	8003bb4 <__malloc_unlock>
 80072da:	f109 0b08 	add.w	fp, r9, #8
 80072de:	e79d      	b.n	800721c <_realloc_r+0x44>
 80072e0:	2000      	movs	r0, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	07e9      	lsls	r1, r5, #31
 80072e6:	f100 80c9 	bmi.w	800747c <_realloc_r+0x2a4>
 80072ea:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80072ee:	eba9 0505 	sub.w	r5, r9, r5
 80072f2:	6869      	ldr	r1, [r5, #4]
 80072f4:	f021 0103 	bic.w	r1, r1, #3
 80072f8:	eb01 0b06 	add.w	fp, r1, r6
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8088 	beq.w	8007412 <_realloc_r+0x23a>
 8007302:	459c      	cmp	ip, r3
 8007304:	eb00 070b 	add.w	r7, r0, fp
 8007308:	d14a      	bne.n	80073a0 <_realloc_r+0x1c8>
 800730a:	f108 0310 	add.w	r3, r8, #16
 800730e:	42bb      	cmp	r3, r7
 8007310:	dc7f      	bgt.n	8007412 <_realloc_r+0x23a>
 8007312:	46ab      	mov	fp, r5
 8007314:	68eb      	ldr	r3, [r5, #12]
 8007316:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800731a:	60d3      	str	r3, [r2, #12]
 800731c:	609a      	str	r2, [r3, #8]
 800731e:	1f32      	subs	r2, r6, #4
 8007320:	2a24      	cmp	r2, #36	; 0x24
 8007322:	d838      	bhi.n	8007396 <_realloc_r+0x1be>
 8007324:	2a13      	cmp	r2, #19
 8007326:	d934      	bls.n	8007392 <_realloc_r+0x1ba>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	2a1b      	cmp	r2, #27
 800732c:	60ab      	str	r3, [r5, #8]
 800732e:	6863      	ldr	r3, [r4, #4]
 8007330:	60eb      	str	r3, [r5, #12]
 8007332:	d81b      	bhi.n	800736c <_realloc_r+0x194>
 8007334:	3408      	adds	r4, #8
 8007336:	f105 0310 	add.w	r3, r5, #16
 800733a:	6822      	ldr	r2, [r4, #0]
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	6862      	ldr	r2, [r4, #4]
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	68a2      	ldr	r2, [r4, #8]
 8007344:	609a      	str	r2, [r3, #8]
 8007346:	9a01      	ldr	r2, [sp, #4]
 8007348:	eba7 0708 	sub.w	r7, r7, r8
 800734c:	eb05 0308 	add.w	r3, r5, r8
 8007350:	f047 0701 	orr.w	r7, r7, #1
 8007354:	6093      	str	r3, [r2, #8]
 8007356:	605f      	str	r7, [r3, #4]
 8007358:	686b      	ldr	r3, [r5, #4]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	ea43 0308 	orr.w	r3, r3, r8
 8007362:	606b      	str	r3, [r5, #4]
 8007364:	4650      	mov	r0, sl
 8007366:	f7fc fc25 	bl	8003bb4 <__malloc_unlock>
 800736a:	e757      	b.n	800721c <_realloc_r+0x44>
 800736c:	68a3      	ldr	r3, [r4, #8]
 800736e:	2a24      	cmp	r2, #36	; 0x24
 8007370:	612b      	str	r3, [r5, #16]
 8007372:	68e3      	ldr	r3, [r4, #12]
 8007374:	bf18      	it	ne
 8007376:	3410      	addne	r4, #16
 8007378:	616b      	str	r3, [r5, #20]
 800737a:	bf09      	itett	eq
 800737c:	6923      	ldreq	r3, [r4, #16]
 800737e:	f105 0318 	addne.w	r3, r5, #24
 8007382:	61ab      	streq	r3, [r5, #24]
 8007384:	6962      	ldreq	r2, [r4, #20]
 8007386:	bf02      	ittt	eq
 8007388:	f105 0320 	addeq.w	r3, r5, #32
 800738c:	61ea      	streq	r2, [r5, #28]
 800738e:	3418      	addeq	r4, #24
 8007390:	e7d3      	b.n	800733a <_realloc_r+0x162>
 8007392:	465b      	mov	r3, fp
 8007394:	e7d1      	b.n	800733a <_realloc_r+0x162>
 8007396:	4621      	mov	r1, r4
 8007398:	4658      	mov	r0, fp
 800739a:	f7ff fef1 	bl	8007180 <memmove>
 800739e:	e7d2      	b.n	8007346 <_realloc_r+0x16e>
 80073a0:	45b8      	cmp	r8, r7
 80073a2:	dc36      	bgt.n	8007412 <_realloc_r+0x23a>
 80073a4:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80073a8:	4628      	mov	r0, r5
 80073aa:	60da      	str	r2, [r3, #12]
 80073ac:	6093      	str	r3, [r2, #8]
 80073ae:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80073b2:	68eb      	ldr	r3, [r5, #12]
 80073b4:	60d3      	str	r3, [r2, #12]
 80073b6:	609a      	str	r2, [r3, #8]
 80073b8:	1f32      	subs	r2, r6, #4
 80073ba:	2a24      	cmp	r2, #36	; 0x24
 80073bc:	d825      	bhi.n	800740a <_realloc_r+0x232>
 80073be:	2a13      	cmp	r2, #19
 80073c0:	d908      	bls.n	80073d4 <_realloc_r+0x1fc>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	2a1b      	cmp	r2, #27
 80073c6:	60ab      	str	r3, [r5, #8]
 80073c8:	6863      	ldr	r3, [r4, #4]
 80073ca:	60eb      	str	r3, [r5, #12]
 80073cc:	d80a      	bhi.n	80073e4 <_realloc_r+0x20c>
 80073ce:	3408      	adds	r4, #8
 80073d0:	f105 0010 	add.w	r0, r5, #16
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	6003      	str	r3, [r0, #0]
 80073d8:	6863      	ldr	r3, [r4, #4]
 80073da:	6043      	str	r3, [r0, #4]
 80073dc:	68a3      	ldr	r3, [r4, #8]
 80073de:	6083      	str	r3, [r0, #8]
 80073e0:	46a9      	mov	r9, r5
 80073e2:	e75b      	b.n	800729c <_realloc_r+0xc4>
 80073e4:	68a3      	ldr	r3, [r4, #8]
 80073e6:	2a24      	cmp	r2, #36	; 0x24
 80073e8:	612b      	str	r3, [r5, #16]
 80073ea:	68e3      	ldr	r3, [r4, #12]
 80073ec:	bf18      	it	ne
 80073ee:	f105 0018 	addne.w	r0, r5, #24
 80073f2:	616b      	str	r3, [r5, #20]
 80073f4:	bf09      	itett	eq
 80073f6:	6923      	ldreq	r3, [r4, #16]
 80073f8:	3410      	addne	r4, #16
 80073fa:	61ab      	streq	r3, [r5, #24]
 80073fc:	6963      	ldreq	r3, [r4, #20]
 80073fe:	bf02      	ittt	eq
 8007400:	f105 0020 	addeq.w	r0, r5, #32
 8007404:	61eb      	streq	r3, [r5, #28]
 8007406:	3418      	addeq	r4, #24
 8007408:	e7e4      	b.n	80073d4 <_realloc_r+0x1fc>
 800740a:	4621      	mov	r1, r4
 800740c:	f7ff feb8 	bl	8007180 <memmove>
 8007410:	e7e6      	b.n	80073e0 <_realloc_r+0x208>
 8007412:	45d8      	cmp	r8, fp
 8007414:	dc32      	bgt.n	800747c <_realloc_r+0x2a4>
 8007416:	4628      	mov	r0, r5
 8007418:	68eb      	ldr	r3, [r5, #12]
 800741a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800741e:	60d3      	str	r3, [r2, #12]
 8007420:	609a      	str	r2, [r3, #8]
 8007422:	1f32      	subs	r2, r6, #4
 8007424:	2a24      	cmp	r2, #36	; 0x24
 8007426:	d825      	bhi.n	8007474 <_realloc_r+0x29c>
 8007428:	2a13      	cmp	r2, #19
 800742a:	d908      	bls.n	800743e <_realloc_r+0x266>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	2a1b      	cmp	r2, #27
 8007430:	60ab      	str	r3, [r5, #8]
 8007432:	6863      	ldr	r3, [r4, #4]
 8007434:	60eb      	str	r3, [r5, #12]
 8007436:	d80a      	bhi.n	800744e <_realloc_r+0x276>
 8007438:	3408      	adds	r4, #8
 800743a:	f105 0010 	add.w	r0, r5, #16
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	6863      	ldr	r3, [r4, #4]
 8007444:	6043      	str	r3, [r0, #4]
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	6083      	str	r3, [r0, #8]
 800744a:	465f      	mov	r7, fp
 800744c:	e7c8      	b.n	80073e0 <_realloc_r+0x208>
 800744e:	68a3      	ldr	r3, [r4, #8]
 8007450:	2a24      	cmp	r2, #36	; 0x24
 8007452:	612b      	str	r3, [r5, #16]
 8007454:	68e3      	ldr	r3, [r4, #12]
 8007456:	bf18      	it	ne
 8007458:	f105 0018 	addne.w	r0, r5, #24
 800745c:	616b      	str	r3, [r5, #20]
 800745e:	bf09      	itett	eq
 8007460:	6923      	ldreq	r3, [r4, #16]
 8007462:	3410      	addne	r4, #16
 8007464:	61ab      	streq	r3, [r5, #24]
 8007466:	6963      	ldreq	r3, [r4, #20]
 8007468:	bf02      	ittt	eq
 800746a:	f105 0020 	addeq.w	r0, r5, #32
 800746e:	61eb      	streq	r3, [r5, #28]
 8007470:	3418      	addeq	r4, #24
 8007472:	e7e4      	b.n	800743e <_realloc_r+0x266>
 8007474:	4621      	mov	r1, r4
 8007476:	f7ff fe83 	bl	8007180 <memmove>
 800747a:	e7e6      	b.n	800744a <_realloc_r+0x272>
 800747c:	4611      	mov	r1, r2
 800747e:	4650      	mov	r0, sl
 8007480:	f7fc f954 	bl	800372c <_malloc_r>
 8007484:	4683      	mov	fp, r0
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f af6c 	beq.w	8007364 <_realloc_r+0x18c>
 800748c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007490:	f1a0 0208 	sub.w	r2, r0, #8
 8007494:	f023 0301 	bic.w	r3, r3, #1
 8007498:	444b      	add	r3, r9
 800749a:	4293      	cmp	r3, r2
 800749c:	d105      	bne.n	80074aa <_realloc_r+0x2d2>
 800749e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80074a2:	f027 0703 	bic.w	r7, r7, #3
 80074a6:	4437      	add	r7, r6
 80074a8:	e6f8      	b.n	800729c <_realloc_r+0xc4>
 80074aa:	1f32      	subs	r2, r6, #4
 80074ac:	2a24      	cmp	r2, #36	; 0x24
 80074ae:	d831      	bhi.n	8007514 <_realloc_r+0x33c>
 80074b0:	2a13      	cmp	r2, #19
 80074b2:	d92c      	bls.n	800750e <_realloc_r+0x336>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	2a1b      	cmp	r2, #27
 80074b8:	6003      	str	r3, [r0, #0]
 80074ba:	6863      	ldr	r3, [r4, #4]
 80074bc:	6043      	str	r3, [r0, #4]
 80074be:	d811      	bhi.n	80074e4 <_realloc_r+0x30c>
 80074c0:	f104 0208 	add.w	r2, r4, #8
 80074c4:	f100 0308 	add.w	r3, r0, #8
 80074c8:	6811      	ldr	r1, [r2, #0]
 80074ca:	6019      	str	r1, [r3, #0]
 80074cc:	6851      	ldr	r1, [r2, #4]
 80074ce:	6059      	str	r1, [r3, #4]
 80074d0:	6892      	ldr	r2, [r2, #8]
 80074d2:	609a      	str	r2, [r3, #8]
 80074d4:	4621      	mov	r1, r4
 80074d6:	4650      	mov	r0, sl
 80074d8:	f7fe fe6a 	bl	80061b0 <_free_r>
 80074dc:	e742      	b.n	8007364 <_realloc_r+0x18c>
 80074de:	bf00      	nop
 80074e0:	20000440 	.word	0x20000440
 80074e4:	68a3      	ldr	r3, [r4, #8]
 80074e6:	2a24      	cmp	r2, #36	; 0x24
 80074e8:	6083      	str	r3, [r0, #8]
 80074ea:	68e3      	ldr	r3, [r4, #12]
 80074ec:	bf18      	it	ne
 80074ee:	f104 0210 	addne.w	r2, r4, #16
 80074f2:	60c3      	str	r3, [r0, #12]
 80074f4:	bf09      	itett	eq
 80074f6:	6923      	ldreq	r3, [r4, #16]
 80074f8:	f100 0310 	addne.w	r3, r0, #16
 80074fc:	6103      	streq	r3, [r0, #16]
 80074fe:	6961      	ldreq	r1, [r4, #20]
 8007500:	bf02      	ittt	eq
 8007502:	f104 0218 	addeq.w	r2, r4, #24
 8007506:	f100 0318 	addeq.w	r3, r0, #24
 800750a:	6141      	streq	r1, [r0, #20]
 800750c:	e7dc      	b.n	80074c8 <_realloc_r+0x2f0>
 800750e:	4603      	mov	r3, r0
 8007510:	4622      	mov	r2, r4
 8007512:	e7d9      	b.n	80074c8 <_realloc_r+0x2f0>
 8007514:	4621      	mov	r1, r4
 8007516:	f7ff fe33 	bl	8007180 <memmove>
 800751a:	e7db      	b.n	80074d4 <_realloc_r+0x2fc>
 800751c:	4637      	mov	r7, r6
 800751e:	e6bd      	b.n	800729c <_realloc_r+0xc4>
 8007520:	4317      	orrs	r7, r2
 8007522:	f8c9 7004 	str.w	r7, [r9, #4]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	f042 0201 	orr.w	r2, r2, #1
 800752c:	605a      	str	r2, [r3, #4]
 800752e:	e6d1      	b.n	80072d4 <_realloc_r+0xfc>

08007530 <__swbuf_r>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	460d      	mov	r5, r1
 8007534:	4614      	mov	r4, r2
 8007536:	4606      	mov	r6, r0
 8007538:	b118      	cbz	r0, 8007542 <__swbuf_r+0x12>
 800753a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800753c:	b90b      	cbnz	r3, 8007542 <__swbuf_r+0x12>
 800753e:	f7fe fda7 	bl	8006090 <__sinit>
 8007542:	69a3      	ldr	r3, [r4, #24]
 8007544:	60a3      	str	r3, [r4, #8]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	0719      	lsls	r1, r3, #28
 800754a:	d528      	bpl.n	800759e <__swbuf_r+0x6e>
 800754c:	6923      	ldr	r3, [r4, #16]
 800754e:	b333      	cbz	r3, 800759e <__swbuf_r+0x6e>
 8007550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007554:	b2ed      	uxtb	r5, r5
 8007556:	049a      	lsls	r2, r3, #18
 8007558:	462f      	mov	r7, r5
 800755a:	d52a      	bpl.n	80075b2 <__swbuf_r+0x82>
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	6820      	ldr	r0, [r4, #0]
 8007560:	1ac0      	subs	r0, r0, r3
 8007562:	6963      	ldr	r3, [r4, #20]
 8007564:	4283      	cmp	r3, r0
 8007566:	dc04      	bgt.n	8007572 <__swbuf_r+0x42>
 8007568:	4621      	mov	r1, r4
 800756a:	4630      	mov	r0, r6
 800756c:	f7fe fd24 	bl	8005fb8 <_fflush_r>
 8007570:	b9d8      	cbnz	r0, 80075aa <__swbuf_r+0x7a>
 8007572:	68a3      	ldr	r3, [r4, #8]
 8007574:	3001      	adds	r0, #1
 8007576:	3b01      	subs	r3, #1
 8007578:	60a3      	str	r3, [r4, #8]
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	6022      	str	r2, [r4, #0]
 8007580:	701d      	strb	r5, [r3, #0]
 8007582:	6963      	ldr	r3, [r4, #20]
 8007584:	4283      	cmp	r3, r0
 8007586:	d004      	beq.n	8007592 <__swbuf_r+0x62>
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	07db      	lsls	r3, r3, #31
 800758c:	d50f      	bpl.n	80075ae <__swbuf_r+0x7e>
 800758e:	2d0a      	cmp	r5, #10
 8007590:	d10d      	bne.n	80075ae <__swbuf_r+0x7e>
 8007592:	4621      	mov	r1, r4
 8007594:	4630      	mov	r0, r6
 8007596:	f7fe fd0f 	bl	8005fb8 <_fflush_r>
 800759a:	b140      	cbz	r0, 80075ae <__swbuf_r+0x7e>
 800759c:	e005      	b.n	80075aa <__swbuf_r+0x7a>
 800759e:	4621      	mov	r1, r4
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7fd fde1 	bl	8005168 <__swsetup_r>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d0d2      	beq.n	8007550 <__swbuf_r+0x20>
 80075aa:	f04f 37ff 	mov.w	r7, #4294967295
 80075ae:	4638      	mov	r0, r7
 80075b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80075b6:	81a3      	strh	r3, [r4, #12]
 80075b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075be:	6663      	str	r3, [r4, #100]	; 0x64
 80075c0:	e7cc      	b.n	800755c <__swbuf_r+0x2c>
	...

080075c4 <_wcrtomb_r>:
 80075c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075c6:	4c0f      	ldr	r4, [pc, #60]	; (8007604 <_wcrtomb_r+0x40>)
 80075c8:	b085      	sub	sp, #20
 80075ca:	6824      	ldr	r4, [r4, #0]
 80075cc:	4605      	mov	r5, r0
 80075ce:	461e      	mov	r6, r3
 80075d0:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80075d2:	b981      	cbnz	r1, 80075f6 <_wcrtomb_r+0x32>
 80075d4:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <_wcrtomb_r+0x44>)
 80075d6:	2c00      	cmp	r4, #0
 80075d8:	bf08      	it	eq
 80075da:	4614      	moveq	r4, r2
 80075dc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80075e0:	460a      	mov	r2, r1
 80075e2:	a901      	add	r1, sp, #4
 80075e4:	47a0      	blx	r4
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	bf01      	itttt	eq
 80075ea:	2300      	moveq	r3, #0
 80075ec:	6033      	streq	r3, [r6, #0]
 80075ee:	238a      	moveq	r3, #138	; 0x8a
 80075f0:	602b      	streq	r3, [r5, #0]
 80075f2:	b005      	add	sp, #20
 80075f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075f6:	4f04      	ldr	r7, [pc, #16]	; (8007608 <_wcrtomb_r+0x44>)
 80075f8:	2c00      	cmp	r4, #0
 80075fa:	bf08      	it	eq
 80075fc:	463c      	moveq	r4, r7
 80075fe:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8007602:	e7ef      	b.n	80075e4 <_wcrtomb_r+0x20>
 8007604:	20000010 	.word	0x20000010
 8007608:	20000854 	.word	0x20000854

0800760c <__ascii_wctomb>:
 800760c:	b149      	cbz	r1, 8007622 <__ascii_wctomb+0x16>
 800760e:	2aff      	cmp	r2, #255	; 0xff
 8007610:	bf8b      	itete	hi
 8007612:	238a      	movhi	r3, #138	; 0x8a
 8007614:	700a      	strbls	r2, [r1, #0]
 8007616:	6003      	strhi	r3, [r0, #0]
 8007618:	2001      	movls	r0, #1
 800761a:	bf88      	it	hi
 800761c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007620:	4770      	bx	lr
 8007622:	4608      	mov	r0, r1
 8007624:	4770      	bx	lr
	...

08007628 <_init>:
 8007628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762a:	bf00      	nop
 800762c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762e:	bc08      	pop	{r3}
 8007630:	469e      	mov	lr, r3
 8007632:	4770      	bx	lr

08007634 <_fini>:
 8007634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007636:	bf00      	nop
 8007638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763a:	bc08      	pop	{r3}
 800763c:	469e      	mov	lr, r3
 800763e:	4770      	bx	lr
