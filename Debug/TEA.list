
TEA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007574  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007688  08007688  00017688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a8  080079a8  000209c0  2**0
                  CONTENTS
  4 .ARM          00000008  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b0  080079b0  000209c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079b8  080079b8  000179b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c0  20000000  080079bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200009c0  0800837c  000209c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b70  0800837c  00020b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f026  00000000  00000000  000209e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002071  00000000  00000000  0002fa0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001078  00000000  00000000  00031a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  00032af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c6a  00000000  00000000  00033a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b0ad  00000000  00000000  000496f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076949  00000000  00000000  0005479f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb0e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005820  00000000  00000000  000cb164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009c0 	.word	0x200009c0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800766c 	.word	0x0800766c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009c4 	.word	0x200009c4
 800014c:	0800766c 	.word	0x0800766c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b974 	b.w	8001244 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	468c      	mov	ip, r1
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	9e08      	ldr	r6, [sp, #32]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d14b      	bne.n	800101a <__udivmoddi4+0xa6>
 8000f82:	428a      	cmp	r2, r1
 8000f84:	4615      	mov	r5, r2
 8000f86:	d967      	bls.n	8001058 <__udivmoddi4+0xe4>
 8000f88:	fab2 f282 	clz	r2, r2
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0720 	rsb	r7, r2, #32
 8000f92:	fa01 f302 	lsl.w	r3, r1, r2
 8000f96:	fa20 f707 	lsr.w	r7, r0, r7
 8000f9a:	4095      	lsls	r5, r2
 8000f9c:	ea47 0c03 	orr.w	ip, r7, r3
 8000fa0:	4094      	lsls	r4, r2
 8000fa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fa6:	fbbc f7fe 	udiv	r7, ip, lr
 8000faa:	fa1f f885 	uxth.w	r8, r5
 8000fae:	fb0e c317 	mls	r3, lr, r7, ip
 8000fb2:	fb07 f908 	mul.w	r9, r7, r8
 8000fb6:	0c21      	lsrs	r1, r4, #16
 8000fb8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000fbc:	4599      	cmp	r9, r3
 8000fbe:	d909      	bls.n	8000fd4 <__udivmoddi4+0x60>
 8000fc0:	18eb      	adds	r3, r5, r3
 8000fc2:	f107 31ff 	add.w	r1, r7, #4294967295
 8000fc6:	f080 811c 	bcs.w	8001202 <__udivmoddi4+0x28e>
 8000fca:	4599      	cmp	r9, r3
 8000fcc:	f240 8119 	bls.w	8001202 <__udivmoddi4+0x28e>
 8000fd0:	3f02      	subs	r7, #2
 8000fd2:	442b      	add	r3, r5
 8000fd4:	eba3 0309 	sub.w	r3, r3, r9
 8000fd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fe0:	fb00 f108 	mul.w	r1, r0, r8
 8000fe4:	b2a4      	uxth	r4, r4
 8000fe6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fea:	42a1      	cmp	r1, r4
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0x8e>
 8000fee:	192c      	adds	r4, r5, r4
 8000ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ff4:	f080 8107 	bcs.w	8001206 <__udivmoddi4+0x292>
 8000ff8:	42a1      	cmp	r1, r4
 8000ffa:	f240 8104 	bls.w	8001206 <__udivmoddi4+0x292>
 8000ffe:	3802      	subs	r0, #2
 8001000:	442c      	add	r4, r5
 8001002:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001006:	2700      	movs	r7, #0
 8001008:	1a64      	subs	r4, r4, r1
 800100a:	b11e      	cbz	r6, 8001014 <__udivmoddi4+0xa0>
 800100c:	2300      	movs	r3, #0
 800100e:	40d4      	lsrs	r4, r2
 8001010:	e9c6 4300 	strd	r4, r3, [r6]
 8001014:	4639      	mov	r1, r7
 8001016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101a:	428b      	cmp	r3, r1
 800101c:	d909      	bls.n	8001032 <__udivmoddi4+0xbe>
 800101e:	2e00      	cmp	r6, #0
 8001020:	f000 80ec 	beq.w	80011fc <__udivmoddi4+0x288>
 8001024:	2700      	movs	r7, #0
 8001026:	e9c6 0100 	strd	r0, r1, [r6]
 800102a:	4638      	mov	r0, r7
 800102c:	4639      	mov	r1, r7
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	fab3 f783 	clz	r7, r3
 8001036:	2f00      	cmp	r7, #0
 8001038:	d148      	bne.n	80010cc <__udivmoddi4+0x158>
 800103a:	428b      	cmp	r3, r1
 800103c:	d302      	bcc.n	8001044 <__udivmoddi4+0xd0>
 800103e:	4282      	cmp	r2, r0
 8001040:	f200 80fb 	bhi.w	800123a <__udivmoddi4+0x2c6>
 8001044:	1a84      	subs	r4, r0, r2
 8001046:	eb61 0303 	sbc.w	r3, r1, r3
 800104a:	2001      	movs	r0, #1
 800104c:	469c      	mov	ip, r3
 800104e:	2e00      	cmp	r6, #0
 8001050:	d0e0      	beq.n	8001014 <__udivmoddi4+0xa0>
 8001052:	e9c6 4c00 	strd	r4, ip, [r6]
 8001056:	e7dd      	b.n	8001014 <__udivmoddi4+0xa0>
 8001058:	b902      	cbnz	r2, 800105c <__udivmoddi4+0xe8>
 800105a:	deff      	udf	#255	; 0xff
 800105c:	fab2 f282 	clz	r2, r2
 8001060:	2a00      	cmp	r2, #0
 8001062:	f040 808f 	bne.w	8001184 <__udivmoddi4+0x210>
 8001066:	2701      	movs	r7, #1
 8001068:	1b49      	subs	r1, r1, r5
 800106a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800106e:	fa1f f985 	uxth.w	r9, r5
 8001072:	fbb1 fef8 	udiv	lr, r1, r8
 8001076:	fb08 111e 	mls	r1, r8, lr, r1
 800107a:	fb09 f00e 	mul.w	r0, r9, lr
 800107e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001082:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001086:	4298      	cmp	r0, r3
 8001088:	d907      	bls.n	800109a <__udivmoddi4+0x126>
 800108a:	18eb      	adds	r3, r5, r3
 800108c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8001090:	d202      	bcs.n	8001098 <__udivmoddi4+0x124>
 8001092:	4298      	cmp	r0, r3
 8001094:	f200 80cd 	bhi.w	8001232 <__udivmoddi4+0x2be>
 8001098:	468e      	mov	lr, r1
 800109a:	1a1b      	subs	r3, r3, r0
 800109c:	fbb3 f0f8 	udiv	r0, r3, r8
 80010a0:	fb08 3310 	mls	r3, r8, r0, r3
 80010a4:	fb09 f900 	mul.w	r9, r9, r0
 80010a8:	b2a4      	uxth	r4, r4
 80010aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010ae:	45a1      	cmp	r9, r4
 80010b0:	d907      	bls.n	80010c2 <__udivmoddi4+0x14e>
 80010b2:	192c      	adds	r4, r5, r4
 80010b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80010b8:	d202      	bcs.n	80010c0 <__udivmoddi4+0x14c>
 80010ba:	45a1      	cmp	r9, r4
 80010bc:	f200 80b6 	bhi.w	800122c <__udivmoddi4+0x2b8>
 80010c0:	4618      	mov	r0, r3
 80010c2:	eba4 0409 	sub.w	r4, r4, r9
 80010c6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80010ca:	e79e      	b.n	800100a <__udivmoddi4+0x96>
 80010cc:	f1c7 0520 	rsb	r5, r7, #32
 80010d0:	40bb      	lsls	r3, r7
 80010d2:	fa22 fc05 	lsr.w	ip, r2, r5
 80010d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010da:	fa21 f405 	lsr.w	r4, r1, r5
 80010de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010e2:	fbb4 f9fe 	udiv	r9, r4, lr
 80010e6:	fa1f f88c 	uxth.w	r8, ip
 80010ea:	fb0e 4419 	mls	r4, lr, r9, r4
 80010ee:	fa20 f305 	lsr.w	r3, r0, r5
 80010f2:	40b9      	lsls	r1, r7
 80010f4:	fb09 fa08 	mul.w	sl, r9, r8
 80010f8:	4319      	orrs	r1, r3
 80010fa:	0c0b      	lsrs	r3, r1, #16
 80010fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001100:	45a2      	cmp	sl, r4
 8001102:	fa02 f207 	lsl.w	r2, r2, r7
 8001106:	fa00 f307 	lsl.w	r3, r0, r7
 800110a:	d90b      	bls.n	8001124 <__udivmoddi4+0x1b0>
 800110c:	eb1c 0404 	adds.w	r4, ip, r4
 8001110:	f109 30ff 	add.w	r0, r9, #4294967295
 8001114:	f080 8088 	bcs.w	8001228 <__udivmoddi4+0x2b4>
 8001118:	45a2      	cmp	sl, r4
 800111a:	f240 8085 	bls.w	8001228 <__udivmoddi4+0x2b4>
 800111e:	f1a9 0902 	sub.w	r9, r9, #2
 8001122:	4464      	add	r4, ip
 8001124:	eba4 040a 	sub.w	r4, r4, sl
 8001128:	fbb4 f0fe 	udiv	r0, r4, lr
 800112c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001130:	fb00 fa08 	mul.w	sl, r0, r8
 8001134:	b289      	uxth	r1, r1
 8001136:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800113a:	45a2      	cmp	sl, r4
 800113c:	d908      	bls.n	8001150 <__udivmoddi4+0x1dc>
 800113e:	eb1c 0404 	adds.w	r4, ip, r4
 8001142:	f100 31ff 	add.w	r1, r0, #4294967295
 8001146:	d26b      	bcs.n	8001220 <__udivmoddi4+0x2ac>
 8001148:	45a2      	cmp	sl, r4
 800114a:	d969      	bls.n	8001220 <__udivmoddi4+0x2ac>
 800114c:	3802      	subs	r0, #2
 800114e:	4464      	add	r4, ip
 8001150:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001154:	fba0 8902 	umull	r8, r9, r0, r2
 8001158:	eba4 040a 	sub.w	r4, r4, sl
 800115c:	454c      	cmp	r4, r9
 800115e:	4641      	mov	r1, r8
 8001160:	46ce      	mov	lr, r9
 8001162:	d354      	bcc.n	800120e <__udivmoddi4+0x29a>
 8001164:	d051      	beq.n	800120a <__udivmoddi4+0x296>
 8001166:	2e00      	cmp	r6, #0
 8001168:	d069      	beq.n	800123e <__udivmoddi4+0x2ca>
 800116a:	1a5a      	subs	r2, r3, r1
 800116c:	eb64 040e 	sbc.w	r4, r4, lr
 8001170:	fa04 f505 	lsl.w	r5, r4, r5
 8001174:	fa22 f307 	lsr.w	r3, r2, r7
 8001178:	40fc      	lsrs	r4, r7
 800117a:	431d      	orrs	r5, r3
 800117c:	e9c6 5400 	strd	r5, r4, [r6]
 8001180:	2700      	movs	r7, #0
 8001182:	e747      	b.n	8001014 <__udivmoddi4+0xa0>
 8001184:	4095      	lsls	r5, r2
 8001186:	f1c2 0320 	rsb	r3, r2, #32
 800118a:	fa21 f003 	lsr.w	r0, r1, r3
 800118e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001192:	fbb0 f7f8 	udiv	r7, r0, r8
 8001196:	fa1f f985 	uxth.w	r9, r5
 800119a:	fb08 0017 	mls	r0, r8, r7, r0
 800119e:	fa24 f303 	lsr.w	r3, r4, r3
 80011a2:	4091      	lsls	r1, r2
 80011a4:	fb07 fc09 	mul.w	ip, r7, r9
 80011a8:	430b      	orrs	r3, r1
 80011aa:	0c19      	lsrs	r1, r3, #16
 80011ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011b0:	458c      	cmp	ip, r1
 80011b2:	fa04 f402 	lsl.w	r4, r4, r2
 80011b6:	d907      	bls.n	80011c8 <__udivmoddi4+0x254>
 80011b8:	1869      	adds	r1, r5, r1
 80011ba:	f107 30ff 	add.w	r0, r7, #4294967295
 80011be:	d231      	bcs.n	8001224 <__udivmoddi4+0x2b0>
 80011c0:	458c      	cmp	ip, r1
 80011c2:	d92f      	bls.n	8001224 <__udivmoddi4+0x2b0>
 80011c4:	3f02      	subs	r7, #2
 80011c6:	4429      	add	r1, r5
 80011c8:	eba1 010c 	sub.w	r1, r1, ip
 80011cc:	fbb1 f0f8 	udiv	r0, r1, r8
 80011d0:	fb08 1c10 	mls	ip, r8, r0, r1
 80011d4:	fb00 fe09 	mul.w	lr, r0, r9
 80011d8:	b299      	uxth	r1, r3
 80011da:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80011de:	458e      	cmp	lr, r1
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x27e>
 80011e2:	1869      	adds	r1, r5, r1
 80011e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80011e8:	d218      	bcs.n	800121c <__udivmoddi4+0x2a8>
 80011ea:	458e      	cmp	lr, r1
 80011ec:	d916      	bls.n	800121c <__udivmoddi4+0x2a8>
 80011ee:	3802      	subs	r0, #2
 80011f0:	4429      	add	r1, r5
 80011f2:	eba1 010e 	sub.w	r1, r1, lr
 80011f6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011fa:	e73a      	b.n	8001072 <__udivmoddi4+0xfe>
 80011fc:	4637      	mov	r7, r6
 80011fe:	4630      	mov	r0, r6
 8001200:	e708      	b.n	8001014 <__udivmoddi4+0xa0>
 8001202:	460f      	mov	r7, r1
 8001204:	e6e6      	b.n	8000fd4 <__udivmoddi4+0x60>
 8001206:	4618      	mov	r0, r3
 8001208:	e6fb      	b.n	8001002 <__udivmoddi4+0x8e>
 800120a:	4543      	cmp	r3, r8
 800120c:	d2ab      	bcs.n	8001166 <__udivmoddi4+0x1f2>
 800120e:	ebb8 0102 	subs.w	r1, r8, r2
 8001212:	eb69 020c 	sbc.w	r2, r9, ip
 8001216:	3801      	subs	r0, #1
 8001218:	4696      	mov	lr, r2
 800121a:	e7a4      	b.n	8001166 <__udivmoddi4+0x1f2>
 800121c:	4618      	mov	r0, r3
 800121e:	e7e8      	b.n	80011f2 <__udivmoddi4+0x27e>
 8001220:	4608      	mov	r0, r1
 8001222:	e795      	b.n	8001150 <__udivmoddi4+0x1dc>
 8001224:	4607      	mov	r7, r0
 8001226:	e7cf      	b.n	80011c8 <__udivmoddi4+0x254>
 8001228:	4681      	mov	r9, r0
 800122a:	e77b      	b.n	8001124 <__udivmoddi4+0x1b0>
 800122c:	3802      	subs	r0, #2
 800122e:	442c      	add	r4, r5
 8001230:	e747      	b.n	80010c2 <__udivmoddi4+0x14e>
 8001232:	f1ae 0e02 	sub.w	lr, lr, #2
 8001236:	442b      	add	r3, r5
 8001238:	e72f      	b.n	800109a <__udivmoddi4+0x126>
 800123a:	4638      	mov	r0, r7
 800123c:	e707      	b.n	800104e <__udivmoddi4+0xda>
 800123e:	4637      	mov	r7, r6
 8001240:	e6e8      	b.n	8001014 <__udivmoddi4+0xa0>
 8001242:	bf00      	nop

08001244 <__aeabi_idiv0>:
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <DWT_Delay_Init+0x58>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <DWT_Delay_Init+0x58>)
 8001252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001256:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <DWT_Delay_Init+0x58>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <DWT_Delay_Init+0x58>)
 800125e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001262:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <DWT_Delay_Init+0x5c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <DWT_Delay_Init+0x5c>)
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <DWT_Delay_Init+0x5c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <DWT_Delay_Init+0x5c>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <DWT_Delay_Init+0x5c>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001282:	bf00      	nop
     __ASM volatile ("NOP");
 8001284:	bf00      	nop
  __ASM volatile ("NOP");
 8001286:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <DWT_Delay_Init+0x5c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001290:	2300      	movs	r3, #0
 8001292:	e000      	b.n	8001296 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001294:	2301      	movs	r3, #1
  }
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000edf0 	.word	0xe000edf0
 80012a4:	e0001000 	.word	0xe0001000

080012a8 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <DWT_Delay_us+0x3c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80012b6:	f001 fd57 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <DWT_Delay_us+0x40>)
 80012be:	fba3 2302 	umull	r2, r3, r3, r2
 80012c2:	0c9b      	lsrs	r3, r3, #18
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80012cc:	bf00      	nop
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <DWT_Delay_us+0x3c>)
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad2      	subs	r2, r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d3f8      	bcc.n	80012ce <DWT_Delay_us+0x26>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	e0001000 	.word	0xe0001000
 80012e8:	431bde83 	.word	0x431bde83

080012ec <gpio_set_input>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
GPIO_InitTypeDef GPIO_InitStruct;

void gpio_set_input (void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <gpio_set_input+0x24>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <gpio_set_input+0x24>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <gpio_set_input+0x24>)
 80012fe:	2201      	movs	r2, #1
 8001300:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	4903      	ldr	r1, [pc, #12]	; (8001310 <gpio_set_input+0x24>)
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <gpio_set_input+0x28>)
 8001306:	f000 fe99 	bl	800203c <HAL_GPIO_Init>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000ab4 	.word	0x20000ab4
 8001314:	40010800 	.word	0x40010800

08001318 <gpio_set_output>:


void gpio_set_output (void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <gpio_set_output+0x28>)
 800131e:	2202      	movs	r2, #2
 8001320:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <gpio_set_output+0x28>)
 8001324:	2201      	movs	r2, #1
 8001326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <gpio_set_output+0x28>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <gpio_set_output+0x28>)
 8001330:	2202      	movs	r2, #2
 8001332:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	4902      	ldr	r1, [pc, #8]	; (8001340 <gpio_set_output+0x28>)
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <gpio_set_output+0x2c>)
 8001338:	f000 fe80 	bl	800203c <HAL_GPIO_Init>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000ab4 	.word	0x20000ab4
 8001344:	40010800 	.word	0x40010800

08001348 <ds18b20_init>:
uint16_t temp;
float temperature;


uint8_t ds18b20_init (void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	gpio_set_output ();   // set the pin as output
 800134c:	f7ff ffe4 	bl	8001318 <gpio_set_output>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin low
 8001350:	2200      	movs	r2, #0
 8001352:	2102      	movs	r1, #2
 8001354:	480f      	ldr	r0, [pc, #60]	; (8001394 <ds18b20_init+0x4c>)
 8001356:	f000 ffe2 	bl	800231e <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 800135a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800135e:	f7ff ffa3 	bl	80012a8 <DWT_Delay_us>

	gpio_set_input ();    // set the pin as input
 8001362:	f7ff ffc3 	bl	80012ec <gpio_set_input>
	DWT_Delay_us (80);    // delay according to datasheet
 8001366:	2050      	movs	r0, #80	; 0x50
 8001368:	f7ff ff9e 	bl	80012a8 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))    // if the pin is low i.e the presence pulse is there
 800136c:	2102      	movs	r1, #2
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <ds18b20_init+0x4c>)
 8001370:	f000 ffbe 	bl	80022f0 <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <ds18b20_init+0x3e>
	{
		DWT_Delay_us (400);  // wait for 400 us
 800137a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800137e:	f7ff ff93 	bl	80012a8 <DWT_Delay_us>
		return 0;
 8001382:	2300      	movs	r3, #0
 8001384:	e004      	b.n	8001390 <ds18b20_init+0x48>
	}

	else
	{
		DWT_Delay_us (400);
 8001386:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800138a:	f7ff ff8d 	bl	80012a8 <DWT_Delay_us>
		return 1;
 800138e:	2301      	movs	r3, #1
	}
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010800 	.word	0x40010800

08001398 <write>:

void write (uint8_t data)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	gpio_set_output ();   // set as output
 80013a2:	f7ff ffb9 	bl	8001318 <gpio_set_output>

	for (int i=0; i<8; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e026      	b.n	80013fa <write+0x62>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	fa42 f303 	asr.w	r3, r2, r3
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00f      	beq.n	80013dc <write+0x44>
		{
			// write 1

			gpio_set_output ();  // set as output
 80013bc:	f7ff ffac 	bl	8001318 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin LOW
 80013c0:	2200      	movs	r2, #0
 80013c2:	2102      	movs	r1, #2
 80013c4:	4810      	ldr	r0, [pc, #64]	; (8001408 <write+0x70>)
 80013c6:	f000 ffaa 	bl	800231e <HAL_GPIO_WritePin>
			DWT_Delay_us (1);  // wait for  us
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff ff6c 	bl	80012a8 <DWT_Delay_us>

			gpio_set_input ();  // set as input
 80013d0:	f7ff ff8c 	bl	80012ec <gpio_set_input>
			DWT_Delay_us (60);  // wait for 60 us
 80013d4:	203c      	movs	r0, #60	; 0x3c
 80013d6:	f7ff ff67 	bl	80012a8 <DWT_Delay_us>
 80013da:	e00b      	b.n	80013f4 <write+0x5c>

		else  // if the bit is low
		{
			// write 0

			gpio_set_output ();
 80013dc:	f7ff ff9c 	bl	8001318 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin LOW
 80013e0:	2200      	movs	r2, #0
 80013e2:	2102      	movs	r1, #2
 80013e4:	4808      	ldr	r0, [pc, #32]	; (8001408 <write+0x70>)
 80013e6:	f000 ff9a 	bl	800231e <HAL_GPIO_WritePin>
			DWT_Delay_us (60);  // wait for 60 us
 80013ea:	203c      	movs	r0, #60	; 0x3c
 80013ec:	f7ff ff5c 	bl	80012a8 <DWT_Delay_us>

			gpio_set_input ();
 80013f0:	f7ff ff7c 	bl	80012ec <gpio_set_input>
	for (int i=0; i<8; i++)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2b07      	cmp	r3, #7
 80013fe:	ddd5      	ble.n	80013ac <write+0x14>
		}
	}
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40010800 	.word	0x40010800

0800140c <read>:


uint8_t read (void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001412:	2300      	movs	r3, #0
 8001414:	71fb      	strb	r3, [r7, #7]
	gpio_set_input ();
 8001416:	f7ff ff69 	bl	80012ec <gpio_set_input>

	for (int i=0;i<8;i++)
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	e022      	b.n	8001466 <read+0x5a>
	{
		gpio_set_output ();   // set as output
 8001420:	f7ff ff7a 	bl	8001318 <gpio_set_output>

		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the data pin LOW
 8001424:	2200      	movs	r2, #0
 8001426:	2102      	movs	r1, #2
 8001428:	4813      	ldr	r0, [pc, #76]	; (8001478 <read+0x6c>)
 800142a:	f000 ff78 	bl	800231e <HAL_GPIO_WritePin>
		DWT_Delay_us (2);  // wait for 2 us
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff ff3a 	bl	80012a8 <DWT_Delay_us>

		gpio_set_input ();  // set as input
 8001434:	f7ff ff5a 	bl	80012ec <gpio_set_input>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))  // if the pin is HIGH
 8001438:	2102      	movs	r1, #2
 800143a:	480f      	ldr	r0, [pc, #60]	; (8001478 <read+0x6c>)
 800143c:	f000 ff58 	bl	80022f0 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <read+0x4e>
		{
			value |= 1<<i;  // read = 1
 8001446:	2201      	movs	r2, #1
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b25a      	sxtb	r2, r3
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4313      	orrs	r3, r2
 8001456:	b25b      	sxtb	r3, r3
 8001458:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (60);  // wait for 60 us
 800145a:	203c      	movs	r0, #60	; 0x3c
 800145c:	f7ff ff24 	bl	80012a8 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b07      	cmp	r3, #7
 800146a:	ddd9      	ble.n	8001420 <read+0x14>
	}
	return value;
 800146c:	79fb      	ldrb	r3, [r7, #7]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40010800 	.word	0x40010800

0800147c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800147c:	b598      	push	{r3, r4, r7, lr}
 800147e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001480:	f000 fc74 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001484:	f000 f876 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001488:	f000 f998 	bl	80017bc <MX_GPIO_Init>
  MX_I2C1_Init();
 800148c:	f000 f8b8 	bl	8001600 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001490:	f000 f8e4 	bl	800165c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001494:	f000 f968 	bl	8001768 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001498:	f000 f916 	bl	80016c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 800149c:	482c      	ldr	r0, [pc, #176]	; (8001550 <main+0xd4>)
 800149e:	f002 f96f 	bl	8003780 <printf>
  printf("** Test finished successfully. ** \n\r");
 80014a2:	482c      	ldr	r0, [pc, #176]	; (8001554 <main+0xd8>)
 80014a4:	f002 f96c 	bl	8003780 <printf>
  DWT_Delay_Init();
 80014a8:	f7ff fece 	bl	8001248 <DWT_Delay_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	check = ds18b20_init ();
 80014ac:	f7ff ff4c 	bl	8001348 <ds18b20_init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <main+0xdc>)
 80014b6:	701a      	strb	r2, [r3, #0]
	write (0xCC);  // skip ROM
 80014b8:	20cc      	movs	r0, #204	; 0xcc
 80014ba:	f7ff ff6d 	bl	8001398 <write>
	write (0x44);  // convert t
 80014be:	2044      	movs	r0, #68	; 0x44
 80014c0:	f7ff ff6a 	bl	8001398 <write>

	HAL_Delay (800);
 80014c4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80014c8:	f000 fcb2 	bl	8001e30 <HAL_Delay>

	ds18b20_init ();
 80014cc:	f7ff ff3c 	bl	8001348 <ds18b20_init>
	write (0xCC);  // skip ROM
 80014d0:	20cc      	movs	r0, #204	; 0xcc
 80014d2:	f7ff ff61 	bl	8001398 <write>
	write (0xBE);  // Read Scratchpad
 80014d6:	20be      	movs	r0, #190	; 0xbe
 80014d8:	f7ff ff5e 	bl	8001398 <write>

	temp_l = read();
 80014dc:	f7ff ff96 	bl	800140c <read>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <main+0xe0>)
 80014e6:	701a      	strb	r2, [r3, #0]
	temp_h = read();
 80014e8:	f7ff ff90 	bl	800140c <read>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <main+0xe4>)
 80014f2:	701a      	strb	r2, [r3, #0]
	temp = (temp_h<<8)|temp_l;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <main+0xe4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <main+0xe0>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21b      	sxth	r3, r3
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <main+0xe8>)
 800150a:	801a      	strh	r2, [r3, #0]
	temperature = (float)temp/16;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <main+0xe8>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fb6f 	bl	8000bf4 <__aeabi_ui2f>
 8001516:	4603      	mov	r3, r0
 8001518:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc75 	bl	8000e0c <__aeabi_fdiv>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <main+0xec>)
 8001528:	601a      	str	r2, [r3, #0]

	printf("%f \n\r", temperature);
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <main+0xec>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe ff7a 	bl	8000428 <__aeabi_f2d>
 8001534:	4603      	mov	r3, r0
 8001536:	460c      	mov	r4, r1
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	480b      	ldr	r0, [pc, #44]	; (800156c <main+0xf0>)
 800153e:	f002 f91f 	bl	8003780 <printf>
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001546:	480a      	ldr	r0, [pc, #40]	; (8001570 <main+0xf4>)
 8001548:	f000 ff01 	bl	800234e <HAL_GPIO_TogglePin>
	check = ds18b20_init ();
 800154c:	e7ae      	b.n	80014ac <main+0x30>
 800154e:	bf00      	nop
 8001550:	08007688 	.word	0x08007688
 8001554:	080076d8 	.word	0x080076d8
 8001558:	20000000 	.word	0x20000000
 800155c:	20000a68 	.word	0x20000a68
 8001560:	20000a70 	.word	0x20000a70
 8001564:	20000a6a 	.word	0x20000a6a
 8001568:	20000a6c 	.word	0x20000a6c
 800156c:	08007700 	.word	0x08007700
 8001570:	40011000 	.word	0x40011000

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b090      	sub	sp, #64	; 0x40
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	2228      	movs	r2, #40	; 0x28
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f002 f8f4 	bl	8003770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a8:	2302      	movs	r3, #2
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0318 	add.w	r3, r7, #24
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 f807 	bl	80025d0 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015c8:	f000 f98c 	bl	80018e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2302      	movs	r3, #2
 80015d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2102      	movs	r1, #2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 fa71 	bl	8002ad0 <HAL_RCC_ClockConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015f4:	f000 f976 	bl	80018e4 <Error_Handler>
  }
}
 80015f8:	bf00      	nop
 80015fa:	3740      	adds	r7, #64	; 0x40
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x50>)
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <MX_I2C1_Init+0x54>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_I2C1_Init+0x50>)
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_I2C1_Init+0x58>)
 800160e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_I2C1_Init+0x50>)
 800161e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_I2C1_Init+0x50>)
 800163e:	f000 fe9f 	bl	8002380 <HAL_I2C_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001648:	f000 f94c 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000a14 	.word	0x20000a14
 8001654:	40005400 	.word	0x40005400
 8001658:	000186a0 	.word	0x000186a0

0800165c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <MX_SPI1_Init+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800166c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_SPI1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001688:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800168c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_SPI1_Init+0x64>)
 80016a8:	220a      	movs	r2, #10
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_SPI1_Init+0x64>)
 80016ae:	f001 fbab 	bl	8002e08 <HAL_SPI_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016b8:	f000 f914 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000b04 	.word	0x20000b04
 80016c4:	40013000 	.word	0x40013000

080016c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <MX_TIM1_Init+0x98>)
 80016e6:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <MX_TIM1_Init+0x9c>)
 80016e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_TIM1_Init+0x98>)
 80016ec:	2247      	movs	r2, #71	; 0x47
 80016ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_TIM1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_TIM1_Init+0x98>)
 80016f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_TIM1_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_TIM1_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_TIM1_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001710:	4813      	ldr	r0, [pc, #76]	; (8001760 <MX_TIM1_Init+0x98>)
 8001712:	f001 fbda 	bl	8002eca <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800171c:	f000 f8e2 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <MX_TIM1_Init+0x98>)
 800172e:	f001 fbf7 	bl	8002f20 <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001738:	f000 f8d4 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_TIM1_Init+0x98>)
 800174a:	f001 fd99 	bl	8003280 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001754:	f000 f8c6 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000ac4 	.word	0x20000ac4
 8001764:	40012c00 	.word	0x40012c00

08001768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART1_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_USART1_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART1_UART_Init+0x4c>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART1_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART1_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART1_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART1_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART1_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART1_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART1_UART_Init+0x4c>)
 80017a0:	f001 fdb2 	bl	8003308 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f000 f89b 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000a74 	.word	0x20000a74
 80017b8:	40013800 	.word	0x40013800

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d0:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <MX_GPIO_Init+0xf4>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <MX_GPIO_Init+0xf4>)
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <MX_GPIO_Init+0xf4>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <MX_GPIO_Init+0xf4>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a30      	ldr	r2, [pc, #192]	; (80018b0 <MX_GPIO_Init+0xf4>)
 80017ee:	f043 0320 	orr.w	r3, r3, #32
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <MX_GPIO_Init+0xf4>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <MX_GPIO_Init+0xf4>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a2a      	ldr	r2, [pc, #168]	; (80018b0 <MX_GPIO_Init+0xf4>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <MX_GPIO_Init+0xf4>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <MX_GPIO_Init+0xf4>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <MX_GPIO_Init+0xf4>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <MX_GPIO_Init+0xf4>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001836:	481f      	ldr	r0, [pc, #124]	; (80018b4 <MX_GPIO_Init+0xf8>)
 8001838:	f000 fd71 	bl	800231e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2102      	movs	r1, #2
 8001840:	481d      	ldr	r0, [pc, #116]	; (80018b8 <MX_GPIO_Init+0xfc>)
 8001842:	f000 fd6c 	bl	800231e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	210b      	movs	r1, #11
 800184a:	481c      	ldr	r0, [pc, #112]	; (80018bc <MX_GPIO_Init+0x100>)
 800184c:	f000 fd67 	bl	800231e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	4619      	mov	r1, r3
 8001868:	4812      	ldr	r0, [pc, #72]	; (80018b4 <MX_GPIO_Init+0xf8>)
 800186a:	f000 fbe7 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800186e:	2302      	movs	r3, #2
 8001870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2302      	movs	r3, #2
 800187c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_GPIO_Init+0xfc>)
 8001886:	f000 fbd9 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800188a:	230b      	movs	r3, #11
 800188c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2302      	movs	r3, #2
 8001898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	4619      	mov	r1, r3
 80018a0:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_GPIO_Init+0x100>)
 80018a2:	f000 fbcb 	bl	800203c <HAL_GPIO_Init>

}
 80018a6:	bf00      	nop
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40011000 	.word	0x40011000
 80018b8:	40010800 	.word	0x40010800
 80018bc:	40010c00 	.word	0x40010c00

080018c0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80018c8:	1d39      	adds	r1, r7, #4
 80018ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ce:	2201      	movs	r2, #1
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <__io_putchar+0x20>)
 80018d2:	f001 fd66 	bl	80033a2 <HAL_UART_Transmit>
  return ch;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000a74 	.word	0x20000a74

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_MspInit+0x5c>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	4a14      	ldr	r2, [pc, #80]	; (800194c <HAL_MspInit+0x5c>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6193      	str	r3, [r2, #24]
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_MspInit+0x5c>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_MspInit+0x5c>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_MspInit+0x5c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_MspInit+0x5c>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_MspInit+0x60>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_MspInit+0x60>)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000

08001954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <HAL_I2C_MspInit+0x70>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d123      	bne.n	80019bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_I2C_MspInit+0x74>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_I2C_MspInit+0x74>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_I2C_MspInit+0x74>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800198c:	23c0      	movs	r3, #192	; 0xc0
 800198e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001990:	2312      	movs	r3, #18
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	4619      	mov	r1, r3
 800199e:	480b      	ldr	r0, [pc, #44]	; (80019cc <HAL_I2C_MspInit+0x78>)
 80019a0:	f000 fb4c 	bl	800203c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_I2C_MspInit+0x74>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_I2C_MspInit+0x74>)
 80019aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ae:	61d3      	str	r3, [r2, #28]
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_I2C_MspInit+0x74>)
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40005400 	.word	0x40005400
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010c00 	.word	0x40010c00

080019d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <HAL_SPI_MspInit+0x88>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d12f      	bne.n	8001a50 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <HAL_SPI_MspInit+0x8c>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_SPI_MspInit+0x8c>)
 80019f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_SPI_MspInit+0x8c>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_SPI_MspInit+0x8c>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <HAL_SPI_MspInit+0x8c>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_SPI_MspInit+0x8c>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001a20:	23b0      	movs	r3, #176	; 0xb0
 8001a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4619      	mov	r1, r3
 8001a32:	480b      	ldr	r0, [pc, #44]	; (8001a60 <HAL_SPI_MspInit+0x90>)
 8001a34:	f000 fb02 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a38:	2340      	movs	r3, #64	; 0x40
 8001a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <HAL_SPI_MspInit+0x90>)
 8001a4c:	f000 faf6 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40013000 	.word	0x40013000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010800 	.word	0x40010800

08001a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_TIM_Base_MspInit+0x34>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10b      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_TIM_Base_MspInit+0x38>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_TIM_Base_MspInit+0x38>)
 8001a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a80:	6193      	str	r3, [r2, #24]
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_TIM_Base_MspInit+0x38>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_UART_MspInit+0x8c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d131      	bne.n	8001b24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_UART_MspInit+0x90>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a1a      	ldr	r2, [pc, #104]	; (8001b30 <HAL_UART_MspInit+0x90>)
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_UART_MspInit+0x90>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_UART_MspInit+0x90>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <HAL_UART_MspInit+0x90>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_UART_MspInit+0x90>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0310 	add.w	r3, r7, #16
 8001b02:	4619      	mov	r1, r3
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <HAL_UART_MspInit+0x94>)
 8001b06:	f000 fa99 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <HAL_UART_MspInit+0x94>)
 8001b20:	f000 fa8c 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010800 	.word	0x40010800

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <HardFault_Handler+0x4>

08001b4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <BusFault_Handler+0x4>

08001b56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <UsageFault_Handler+0x4>

08001b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b84:	f000 f938 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e00a      	b.n	8001bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b9e:	f3af 8000 	nop.w
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf0      	blt.n	8001b9e <_read+0x12>
	}

return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e009      	b.n	8001bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60ba      	str	r2, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fe6d 	bl	80018c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf1      	blt.n	8001bd8 <_write+0x12>
	}
	return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_close>:

int _close(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c24:	605a      	str	r2, [r3, #4]
	return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <_isatty>:

int _isatty(int file)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
	return 1;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
	return 0;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
	...

08001c60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x50>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x16>
		heap_end = &end;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <_sbrk+0x50>)
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <_sbrk+0x54>)
 8001c74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <_sbrk+0x50>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <_sbrk+0x50>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	466a      	mov	r2, sp
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d907      	bls.n	8001c9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c8a:	f001 fd47 	bl	800371c <__errno>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	230c      	movs	r3, #12
 8001c92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295
 8001c98:	e006      	b.n	8001ca8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <_sbrk+0x50>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <_sbrk+0x50>)
 8001ca4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200009dc 	.word	0x200009dc
 8001cb4:	20000b70 	.word	0x20000b70

08001cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <SystemInit+0x5c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <SystemInit+0x5c>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <SystemInit+0x5c>)
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4911      	ldr	r1, [pc, #68]	; (8001d14 <SystemInit+0x5c>)
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <SystemInit+0x60>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <SystemInit+0x5c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <SystemInit+0x5c>)
 8001cda:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <SystemInit+0x5c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <SystemInit+0x5c>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <SystemInit+0x5c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <SystemInit+0x5c>)
 8001cf6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001cfa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <SystemInit+0x5c>)
 8001cfe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d02:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SystemInit+0x64>)
 8001d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	40021000 	.word	0x40021000
 8001d18:	f8ff0000 	.word	0xf8ff0000
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d20:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d22:	e003      	b.n	8001d2c <LoopCopyDataInit>

08001d24 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d26:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d28:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d2a:	3104      	adds	r1, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d2c:	480a      	ldr	r0, [pc, #40]	; (8001d58 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d30:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d32:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d34:	d3f6      	bcc.n	8001d24 <CopyDataInit>
  ldr r2, =_sbss
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d38:	e002      	b.n	8001d40 <LoopFillZerobss>

08001d3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d3c:	f842 3b04 	str.w	r3, [r2], #4

08001d40 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d42:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d44:	d3f9      	bcc.n	8001d3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d46:	f7ff ffb7 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f001 fced 	bl	8003728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4e:	f7ff fb95 	bl	800147c <main>
  bx lr
 8001d52:	4770      	bx	lr
  ldr r3, =_sidata
 8001d54:	080079bc 	.word	0x080079bc
  ldr r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d5c:	200009c0 	.word	0x200009c0
  ldr r2, =_sbss
 8001d60:	200009c0 	.word	0x200009c0
  ldr r3, = _ebss
 8001d64:	20000b70 	.word	0x20000b70

08001d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC1_2_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x28>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x28>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f929 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fdb2 	bl	80018f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f933 	bl	8002022 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 f909 	bl	8001fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000004 	.word	0x20000004
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	20000008 	.word	0x20000008

08001df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_IncTick+0x1c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_IncTick+0x20>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_IncTick+0x20>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	2000000c 	.word	0x2000000c
 8001e18:	20000b5c 	.word	0x20000b5c

08001e1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <HAL_GetTick+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	20000b5c 	.word	0x20000b5c

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff fff0 	bl	8001e1c <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_Delay+0x40>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffe0 	bl	8001e1c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000000c 	.word	0x2000000c

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa0:	d301      	bcc.n	8001fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00f      	b.n	8001fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <SysTick_Config+0x40>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fae:	210f      	movs	r1, #15
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f7ff ff90 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <SysTick_Config+0x40>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SysTick_Config+0x40>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff49 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffc:	f7ff ff5e 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff90 	bl	8001f2c <NVIC_EncodePriority>
 800200c:	4602      	mov	r2, r0
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff5f 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffb0 	bl	8001f90 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b08b      	sub	sp, #44	; 0x2c
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	e127      	b.n	80022a0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002050:	2201      	movs	r2, #1
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	429a      	cmp	r2, r3
 800206a:	f040 8116 	bne.w	800229a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b12      	cmp	r3, #18
 8002074:	d034      	beq.n	80020e0 <HAL_GPIO_Init+0xa4>
 8002076:	2b12      	cmp	r3, #18
 8002078:	d80d      	bhi.n	8002096 <HAL_GPIO_Init+0x5a>
 800207a:	2b02      	cmp	r3, #2
 800207c:	d02b      	beq.n	80020d6 <HAL_GPIO_Init+0x9a>
 800207e:	2b02      	cmp	r3, #2
 8002080:	d804      	bhi.n	800208c <HAL_GPIO_Init+0x50>
 8002082:	2b00      	cmp	r3, #0
 8002084:	d031      	beq.n	80020ea <HAL_GPIO_Init+0xae>
 8002086:	2b01      	cmp	r3, #1
 8002088:	d01c      	beq.n	80020c4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800208a:	e048      	b.n	800211e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800208c:	2b03      	cmp	r3, #3
 800208e:	d043      	beq.n	8002118 <HAL_GPIO_Init+0xdc>
 8002090:	2b11      	cmp	r3, #17
 8002092:	d01b      	beq.n	80020cc <HAL_GPIO_Init+0x90>
          break;
 8002094:	e043      	b.n	800211e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002096:	4a89      	ldr	r2, [pc, #548]	; (80022bc <HAL_GPIO_Init+0x280>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d026      	beq.n	80020ea <HAL_GPIO_Init+0xae>
 800209c:	4a87      	ldr	r2, [pc, #540]	; (80022bc <HAL_GPIO_Init+0x280>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d806      	bhi.n	80020b0 <HAL_GPIO_Init+0x74>
 80020a2:	4a87      	ldr	r2, [pc, #540]	; (80022c0 <HAL_GPIO_Init+0x284>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d020      	beq.n	80020ea <HAL_GPIO_Init+0xae>
 80020a8:	4a86      	ldr	r2, [pc, #536]	; (80022c4 <HAL_GPIO_Init+0x288>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01d      	beq.n	80020ea <HAL_GPIO_Init+0xae>
          break;
 80020ae:	e036      	b.n	800211e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020b0:	4a85      	ldr	r2, [pc, #532]	; (80022c8 <HAL_GPIO_Init+0x28c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d019      	beq.n	80020ea <HAL_GPIO_Init+0xae>
 80020b6:	4a85      	ldr	r2, [pc, #532]	; (80022cc <HAL_GPIO_Init+0x290>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d016      	beq.n	80020ea <HAL_GPIO_Init+0xae>
 80020bc:	4a84      	ldr	r2, [pc, #528]	; (80022d0 <HAL_GPIO_Init+0x294>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0xae>
          break;
 80020c2:	e02c      	b.n	800211e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e028      	b.n	800211e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	3304      	adds	r3, #4
 80020d2:	623b      	str	r3, [r7, #32]
          break;
 80020d4:	e023      	b.n	800211e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	3308      	adds	r3, #8
 80020dc:	623b      	str	r3, [r7, #32]
          break;
 80020de:	e01e      	b.n	800211e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	330c      	adds	r3, #12
 80020e6:	623b      	str	r3, [r7, #32]
          break;
 80020e8:	e019      	b.n	800211e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020f2:	2304      	movs	r3, #4
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e012      	b.n	800211e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002100:	2308      	movs	r3, #8
 8002102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	611a      	str	r2, [r3, #16]
          break;
 800210a:	e008      	b.n	800211e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800210c:	2308      	movs	r3, #8
 800210e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	615a      	str	r2, [r3, #20]
          break;
 8002116:	e002      	b.n	800211e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
          break;
 800211c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2bff      	cmp	r3, #255	; 0xff
 8002122:	d801      	bhi.n	8002128 <HAL_GPIO_Init+0xec>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	e001      	b.n	800212c <HAL_GPIO_Init+0xf0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2bff      	cmp	r3, #255	; 0xff
 8002132:	d802      	bhi.n	800213a <HAL_GPIO_Init+0xfe>
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	e002      	b.n	8002140 <HAL_GPIO_Init+0x104>
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	3b08      	subs	r3, #8
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	210f      	movs	r1, #15
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	6a39      	ldr	r1, [r7, #32]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	431a      	orrs	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8096 	beq.w	800229a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800216e:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <HAL_GPIO_Init+0x298>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <HAL_GPIO_Init+0x298>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6193      	str	r3, [r2, #24]
 800217a:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <HAL_GPIO_Init+0x298>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002186:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_GPIO_Init+0x29c>)
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4013      	ands	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4b      	ldr	r2, [pc, #300]	; (80022dc <HAL_GPIO_Init+0x2a0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_GPIO_Init+0x19e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4a      	ldr	r2, [pc, #296]	; (80022e0 <HAL_GPIO_Init+0x2a4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00d      	beq.n	80021d6 <HAL_GPIO_Init+0x19a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a49      	ldr	r2, [pc, #292]	; (80022e4 <HAL_GPIO_Init+0x2a8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <HAL_GPIO_Init+0x196>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a48      	ldr	r2, [pc, #288]	; (80022e8 <HAL_GPIO_Init+0x2ac>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_GPIO_Init+0x192>
 80021ca:	2303      	movs	r3, #3
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x1a0>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e004      	b.n	80021dc <HAL_GPIO_Init+0x1a0>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_Init+0x1a0>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_GPIO_Init+0x1a0>
 80021da:	2300      	movs	r3, #0
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	f002 0203 	and.w	r2, r2, #3
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4093      	lsls	r3, r2
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ec:	493a      	ldr	r1, [pc, #232]	; (80022d8 <HAL_GPIO_Init+0x29c>)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002206:	4b39      	ldr	r3, [pc, #228]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4938      	ldr	r1, [pc, #224]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002214:	4b35      	ldr	r3, [pc, #212]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	43db      	mvns	r3, r3
 800221c:	4933      	ldr	r1, [pc, #204]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 800221e:	4013      	ands	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d006      	beq.n	800223c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800222e:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	492e      	ldr	r1, [pc, #184]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
 800223a:	e006      	b.n	800224a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	43db      	mvns	r3, r3
 8002244:	4929      	ldr	r1, [pc, #164]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 8002246:	4013      	ands	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4924      	ldr	r1, [pc, #144]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
 8002262:	e006      	b.n	8002272 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002264:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	43db      	mvns	r3, r3
 800226c:	491f      	ldr	r1, [pc, #124]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 800226e:	4013      	ands	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	491a      	ldr	r1, [pc, #104]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	60cb      	str	r3, [r1, #12]
 800228a:	e006      	b.n	800229a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	43db      	mvns	r3, r3
 8002294:	4915      	ldr	r1, [pc, #84]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 8002296:	4013      	ands	r3, r2
 8002298:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	3301      	adds	r3, #1
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f47f aed0 	bne.w	8002050 <HAL_GPIO_Init+0x14>
  }
}
 80022b0:	bf00      	nop
 80022b2:	372c      	adds	r7, #44	; 0x2c
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	10210000 	.word	0x10210000
 80022c0:	10110000 	.word	0x10110000
 80022c4:	10120000 	.word	0x10120000
 80022c8:	10310000 	.word	0x10310000
 80022cc:	10320000 	.word	0x10320000
 80022d0:	10220000 	.word	0x10220000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010800 	.word	0x40010800
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40011400 	.word	0x40011400
 80022ec:	40010400 	.word	0x40010400

080022f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e001      	b.n	8002312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]
 800232a:	4613      	mov	r3, r2
 800232c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800232e:	787b      	ldrb	r3, [r7, #1]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002334:	887a      	ldrh	r2, [r7, #2]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800233a:	e003      	b.n	8002344 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	041a      	lsls	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	611a      	str	r2, [r3, #16]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800236c:	e002      	b.n	8002374 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	611a      	str	r2, [r3, #16]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
	...

08002380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e10f      	b.n	80025b2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff fad4 	bl	8001954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023c4:	f000 fcda 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80023c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4a7b      	ldr	r2, [pc, #492]	; (80025bc <HAL_I2C_Init+0x23c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d807      	bhi.n	80023e4 <HAL_I2C_Init+0x64>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a7a      	ldr	r2, [pc, #488]	; (80025c0 <HAL_I2C_Init+0x240>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	bf94      	ite	ls
 80023dc:	2301      	movls	r3, #1
 80023de:	2300      	movhi	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e006      	b.n	80023f2 <HAL_I2C_Init+0x72>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a77      	ldr	r2, [pc, #476]	; (80025c4 <HAL_I2C_Init+0x244>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	bf94      	ite	ls
 80023ec:	2301      	movls	r3, #1
 80023ee:	2300      	movhi	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0db      	b.n	80025b2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4a72      	ldr	r2, [pc, #456]	; (80025c8 <HAL_I2C_Init+0x248>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0c9b      	lsrs	r3, r3, #18
 8002404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4a64      	ldr	r2, [pc, #400]	; (80025bc <HAL_I2C_Init+0x23c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d802      	bhi.n	8002434 <HAL_I2C_Init+0xb4>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3301      	adds	r3, #1
 8002432:	e009      	b.n	8002448 <HAL_I2C_Init+0xc8>
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	4a63      	ldr	r2, [pc, #396]	; (80025cc <HAL_I2C_Init+0x24c>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	3301      	adds	r3, #1
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800245a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4956      	ldr	r1, [pc, #344]	; (80025bc <HAL_I2C_Init+0x23c>)
 8002464:	428b      	cmp	r3, r1
 8002466:	d80d      	bhi.n	8002484 <HAL_I2C_Init+0x104>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1e59      	subs	r1, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fbb1 f3f3 	udiv	r3, r1, r3
 8002476:	3301      	adds	r3, #1
 8002478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247c:	2b04      	cmp	r3, #4
 800247e:	bf38      	it	cc
 8002480:	2304      	movcc	r3, #4
 8002482:	e04f      	b.n	8002524 <HAL_I2C_Init+0x1a4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d111      	bne.n	80024b0 <HAL_I2C_Init+0x130>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e012      	b.n	80024d6 <HAL_I2C_Init+0x156>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Init+0x15e>
 80024da:	2301      	movs	r3, #1
 80024dc:	e022      	b.n	8002524 <HAL_I2C_Init+0x1a4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10e      	bne.n	8002504 <HAL_I2C_Init+0x184>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e58      	subs	r0, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	440b      	add	r3, r1
 80024f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Init+0x1a4>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	0099      	lsls	r1, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	6809      	ldr	r1, [r1, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6911      	ldr	r1, [r2, #16]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68d2      	ldr	r2, [r2, #12]
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	000186a0 	.word	0x000186a0
 80025c0:	001e847f 	.word	0x001e847f
 80025c4:	003d08ff 	.word	0x003d08ff
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	10624dd3 	.word	0x10624dd3

080025d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e26c      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 8087 	beq.w	80026fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025f0:	4b92      	ldr	r3, [pc, #584]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d00c      	beq.n	8002616 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025fc:	4b8f      	ldr	r3, [pc, #572]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d112      	bne.n	800262e <HAL_RCC_OscConfig+0x5e>
 8002608:	4b8c      	ldr	r3, [pc, #560]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002614:	d10b      	bne.n	800262e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002616:	4b89      	ldr	r3, [pc, #548]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d06c      	beq.n	80026fc <HAL_RCC_OscConfig+0x12c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d168      	bne.n	80026fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e246      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x76>
 8002638:	4b80      	ldr	r3, [pc, #512]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a7f      	ldr	r2, [pc, #508]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800263e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	e02e      	b.n	80026a4 <HAL_RCC_OscConfig+0xd4>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x98>
 800264e:	4b7b      	ldr	r3, [pc, #492]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a7a      	ldr	r2, [pc, #488]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b78      	ldr	r3, [pc, #480]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a77      	ldr	r2, [pc, #476]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0xd4>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0xbc>
 8002672:	4b72      	ldr	r3, [pc, #456]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a71      	ldr	r2, [pc, #452]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6e      	ldr	r2, [pc, #440]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0xd4>
 800268c:	4b6b      	ldr	r3, [pc, #428]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6a      	ldr	r2, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b68      	ldr	r3, [pc, #416]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a67      	ldr	r2, [pc, #412]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff fbb6 	bl	8001e1c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff fbb2 	bl	8001e1c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1fa      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b5d      	ldr	r3, [pc, #372]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0xe4>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff fba2 	bl	8001e1c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff fb9e 	bl	8001e1c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1e6      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	4b53      	ldr	r3, [pc, #332]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x10c>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d063      	beq.n	80027d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800270a:	4b4c      	ldr	r3, [pc, #304]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002716:	4b49      	ldr	r3, [pc, #292]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b08      	cmp	r3, #8
 8002720:	d11c      	bne.n	800275c <HAL_RCC_OscConfig+0x18c>
 8002722:	4b46      	ldr	r3, [pc, #280]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d116      	bne.n	800275c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x176>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d001      	beq.n	8002746 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e1ba      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002746:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4939      	ldr	r1, [pc, #228]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	e03a      	b.n	80027d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <HAL_RCC_OscConfig+0x270>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7ff fb57 	bl	8001e1c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002772:	f7ff fb53 	bl	8001e1c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e19b      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4927      	ldr	r1, [pc, #156]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]
 80027a4:	e015      	b.n	80027d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_RCC_OscConfig+0x270>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7ff fb36 	bl	8001e1c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b4:	f7ff fb32 	bl	8001e1c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e17a      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d03a      	beq.n	8002854 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d019      	beq.n	800281a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7ff fb16 	bl	8001e1c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f4:	f7ff fb12 	bl	8001e1c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e15a      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002812:	2001      	movs	r0, #1
 8002814:	f000 fada 	bl	8002dcc <RCC_Delay>
 8002818:	e01c      	b.n	8002854 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7ff fafc 	bl	8001e1c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002826:	e00f      	b.n	8002848 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7ff faf8 	bl	8001e1c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d908      	bls.n	8002848 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e140      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	42420000 	.word	0x42420000
 8002844:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	4b9e      	ldr	r3, [pc, #632]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e9      	bne.n	8002828 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80a6 	beq.w	80029ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002866:	4b97      	ldr	r3, [pc, #604]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10d      	bne.n	800288e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	4b94      	ldr	r3, [pc, #592]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4a93      	ldr	r2, [pc, #588]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	61d3      	str	r3, [r2, #28]
 800287e:	4b91      	ldr	r3, [pc, #580]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b8e      	ldr	r3, [pc, #568]	; (8002ac8 <HAL_RCC_OscConfig+0x4f8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <HAL_RCC_OscConfig+0x4f8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a8a      	ldr	r2, [pc, #552]	; (8002ac8 <HAL_RCC_OscConfig+0x4f8>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7ff fab9 	bl	8001e1c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7ff fab5 	bl	8001e1c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b64      	cmp	r3, #100	; 0x64
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0fd      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b81      	ldr	r3, [pc, #516]	; (8002ac8 <HAL_RCC_OscConfig+0x4f8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x312>
 80028d4:	4b7b      	ldr	r3, [pc, #492]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4a7a      	ldr	r2, [pc, #488]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6213      	str	r3, [r2, #32]
 80028e0:	e02d      	b.n	800293e <HAL_RCC_OscConfig+0x36e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x334>
 80028ea:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4a75      	ldr	r2, [pc, #468]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6213      	str	r3, [r2, #32]
 80028f6:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a72      	ldr	r2, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	e01c      	b.n	800293e <HAL_RCC_OscConfig+0x36e>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0x356>
 800290c:	4b6d      	ldr	r3, [pc, #436]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4a6c      	ldr	r2, [pc, #432]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6213      	str	r3, [r2, #32]
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a69      	ldr	r2, [pc, #420]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	e00b      	b.n	800293e <HAL_RCC_OscConfig+0x36e>
 8002926:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4a66      	ldr	r2, [pc, #408]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6213      	str	r3, [r2, #32]
 8002932:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a63      	ldr	r2, [pc, #396]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d015      	beq.n	8002972 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7ff fa69 	bl	8001e1c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7ff fa65 	bl	8001e1c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0ab      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ee      	beq.n	800294e <HAL_RCC_OscConfig+0x37e>
 8002970:	e014      	b.n	800299c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7ff fa53 	bl	8001e1c <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	e00a      	b.n	8002990 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7ff fa4f 	bl	8001e1c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e095      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ee      	bne.n	800297a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a2:	4b48      	ldr	r3, [pc, #288]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	4a47      	ldr	r2, [pc, #284]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80029a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8081 	beq.w	8002aba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b8:	4b42      	ldr	r3, [pc, #264]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d061      	beq.n	8002a88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d146      	bne.n	8002a5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <HAL_RCC_OscConfig+0x4fc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7ff fa23 	bl	8001e1c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029da:	f7ff fa1f 	bl	8001e1c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e067      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a00:	d108      	bne.n	8002a14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a02:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	492d      	ldr	r1, [pc, #180]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a14:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a19      	ldr	r1, [r3, #32]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	430b      	orrs	r3, r1
 8002a26:	4927      	ldr	r1, [pc, #156]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_OscConfig+0x4fc>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7ff f9f3 	bl	8001e1c <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7ff f9ef 	bl	8001e1c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e037      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x46a>
 8002a58:	e02f      	b.n	8002aba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_RCC_OscConfig+0x4fc>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff f9dc 	bl	8001e1c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7ff f9d8 	bl	8001e1c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e020      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x498>
 8002a86:	e018      	b.n	8002aba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e013      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	42420060 	.word	0x42420060

08002ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0d0      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d910      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	4965      	ldr	r1, [pc, #404]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b63      	ldr	r3, [pc, #396]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b8      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a58      	ldr	r2, [pc, #352]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	494d      	ldr	r1, [pc, #308]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d040      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d115      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e073      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06b      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4936      	ldr	r1, [pc, #216]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7ff f92c 	bl	8001e1c <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7ff f928 	bl	8001e1c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e053      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d210      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 0207 	bic.w	r2, r3, #7
 8002c06:	4922      	ldr	r1, [pc, #136]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4916      	ldr	r1, [pc, #88]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	490e      	ldr	r1, [pc, #56]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c5e:	f000 f821 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c62:	4601      	mov	r1, r0
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	fa21 f303 	lsr.w	r3, r1, r3
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <HAL_RCC_ClockConfig+0x1cc>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff f88a 	bl	8001d98 <HAL_InitTick>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	0800771c 	.word	0x0800771c
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b490      	push	{r4, r7}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002caa:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cac:	1d3c      	adds	r4, r7, #4
 8002cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cb4:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d002      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x46>
 8002ce2:	e02d      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ce6:	623b      	str	r3, [r7, #32]
      break;
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	0c9b      	lsrs	r3, r3, #18
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cfc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	0c5b      	lsrs	r3, r3, #17
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d16:	4413      	add	r3, r2
 8002d18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d22:	fb02 f203 	mul.w	r2, r2, r3
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	e004      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	623b      	str	r3, [r7, #32]
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d42:	623b      	str	r3, [r7, #32]
      break;
 8002d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3728      	adds	r7, #40	; 0x28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc90      	pop	{r4, r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	08007708 	.word	0x08007708
 8002d58:	08007718 	.word	0x08007718
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	007a1200 	.word	0x007a1200
 8002d64:	003d0900 	.word	0x003d0900

08002d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	20000004 	.word	0x20000004

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d80:	f7ff fff2 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d84:	4601      	mov	r1, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4a03      	ldr	r2, [pc, #12]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	0800772c 	.word	0x0800772c

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da8:	f7ff ffde 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002dac:	4601      	mov	r1, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	0adb      	lsrs	r3, r3, #11
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4a03      	ldr	r2, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	0800772c 	.word	0x0800772c

08002dcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <RCC_Delay+0x34>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <RCC_Delay+0x38>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	0a5b      	lsrs	r3, r3, #9
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002de8:	bf00      	nop
  }
  while (Delay --);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1e5a      	subs	r2, r3, #1
 8002dee:	60fa      	str	r2, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f9      	bne.n	8002de8 <RCC_Delay+0x1c>
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000004 	.word	0x20000004
 8002e04:	10624dd3 	.word	0x10624dd3

08002e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e053      	b.n	8002ec2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7fe fdcb 	bl	80019d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	ea42 0103 	orr.w	r1, r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	0c1a      	lsrs	r2, r3, #16
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f002 0204 	and.w	r2, r2, #4
 8002ea0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e01d      	b.n	8002f18 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7fe fdb7 	bl	8001a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f000 f8c1 	bl	8003090 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_TIM_ConfigClockSource+0x18>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e0a6      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x166>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	d067      	beq.n	8003040 <HAL_TIM_ConfigClockSource+0x120>
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d80b      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x6c>
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d073      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0x140>
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d802      	bhi.n	8002f82 <HAL_TIM_ConfigClockSource+0x62>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d06f      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f80:	e078      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d06c      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0x140>
 8002f86:	2b30      	cmp	r3, #48	; 0x30
 8002f88:	d06a      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f8a:	e073      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f8c:	2b70      	cmp	r3, #112	; 0x70
 8002f8e:	d00d      	beq.n	8002fac <HAL_TIM_ConfigClockSource+0x8c>
 8002f90:	2b70      	cmp	r3, #112	; 0x70
 8002f92:	d804      	bhi.n	8002f9e <HAL_TIM_ConfigClockSource+0x7e>
 8002f94:	2b50      	cmp	r3, #80	; 0x50
 8002f96:	d033      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0xe0>
 8002f98:	2b60      	cmp	r3, #96	; 0x60
 8002f9a:	d041      	beq.n	8003020 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f9c:	e06a      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa2:	d066      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x152>
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa8:	d017      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002faa:	e063      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6899      	ldr	r1, [r3, #8]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f000 f941 	bl	8003242 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
      break;
 8002fd8:	e04c      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6899      	ldr	r1, [r3, #8]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f000 f92a 	bl	8003242 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ffc:	609a      	str	r2, [r3, #8]
      break;
 8002ffe:	e039      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	461a      	mov	r2, r3
 800300e:	f000 f8a1 	bl	8003154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2150      	movs	r1, #80	; 0x50
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f8f8 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 800301e:	e029      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	461a      	mov	r2, r3
 800302e:	f000 f8bf 	bl	80031b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2160      	movs	r1, #96	; 0x60
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f8e8 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 800303e:	e019      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	461a      	mov	r2, r3
 800304e:	f000 f881 	bl	8003154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2140      	movs	r1, #64	; 0x40
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f8d8 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 800305e:	e009      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f000 f8cf 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8003070:	e000      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a29      	ldr	r2, [pc, #164]	; (8003148 <TIM_Base_SetConfig+0xb8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00b      	beq.n	80030c0 <TIM_Base_SetConfig+0x30>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ae:	d007      	beq.n	80030c0 <TIM_Base_SetConfig+0x30>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a26      	ldr	r2, [pc, #152]	; (800314c <TIM_Base_SetConfig+0xbc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_Base_SetConfig+0x30>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a25      	ldr	r2, [pc, #148]	; (8003150 <TIM_Base_SetConfig+0xc0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d108      	bne.n	80030d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <TIM_Base_SetConfig+0xb8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <TIM_Base_SetConfig+0x62>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e0:	d007      	beq.n	80030f2 <TIM_Base_SetConfig+0x62>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <TIM_Base_SetConfig+0xbc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <TIM_Base_SetConfig+0x62>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a18      	ldr	r2, [pc, #96]	; (8003150 <TIM_Base_SetConfig+0xc0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d108      	bne.n	8003104 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a07      	ldr	r2, [pc, #28]	; (8003148 <TIM_Base_SetConfig+0xb8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d103      	bne.n	8003138 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	615a      	str	r2, [r3, #20]
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800

08003154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0201 	bic.w	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800317e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 030a 	bic.w	r3, r3, #10
 8003190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f023 0210 	bic.w	r2, r3, #16
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	031b      	lsls	r3, r3, #12
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	621a      	str	r2, [r3, #32]
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800320e:	b480      	push	{r7}
 8003210:	b085      	sub	sp, #20
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	f043 0307 	orr.w	r3, r3, #7
 8003230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003242:	b480      	push	{r7}
 8003244:	b087      	sub	sp, #28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800325c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	021a      	lsls	r2, r3, #8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	431a      	orrs	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4313      	orrs	r3, r2
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	609a      	str	r2, [r3, #8]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003294:	2302      	movs	r3, #2
 8003296:	e032      	b.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e03f      	b.n	800339a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe fbb6 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f90b 	bl	8003568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b088      	sub	sp, #32
 80033a6:	af02      	add	r7, sp, #8
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b20      	cmp	r3, #32
 80033c0:	f040 8083 	bne.w	80034ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_UART_Transmit+0x2e>
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e07b      	b.n	80034cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Transmit+0x40>
 80033de:	2302      	movs	r3, #2
 80033e0:	e074      	b.n	80034cc <HAL_UART_Transmit+0x12a>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2221      	movs	r2, #33	; 0x21
 80033f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033f8:	f7fe fd10 	bl	8001e1c <HAL_GetTick>
 80033fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800340a:	e042      	b.n	8003492 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003422:	d122      	bne.n	800346a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2200      	movs	r2, #0
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f850 	bl	80034d4 <UART_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e046      	b.n	80034cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003450:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	3302      	adds	r3, #2
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	e017      	b.n	8003492 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	e013      	b.n	8003492 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	2180      	movs	r1, #128	; 0x80
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f82d 	bl	80034d4 <UART_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e023      	b.n	80034cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	60ba      	str	r2, [r7, #8]
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1b7      	bne.n	800340c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2200      	movs	r2, #0
 80034a4:	2140      	movs	r1, #64	; 0x40
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f814 	bl	80034d4 <UART_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e00a      	b.n	80034cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
  }
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e4:	e02c      	b.n	8003540 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d028      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f4:	f7fe fc92 	bl	8001e1c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	429a      	cmp	r2, r3
 8003502:	d21d      	bcs.n	8003540 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003512:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e00f      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	429a      	cmp	r2, r3
 800355c:	d0c3      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035a2:	f023 030c 	bic.w	r3, r3, #12
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	68f9      	ldr	r1, [r7, #12]
 80035ac:	430b      	orrs	r3, r1
 80035ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a52      	ldr	r2, [pc, #328]	; (8003714 <UART_SetConfig+0x1ac>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d14e      	bne.n	800366e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035d0:	f7ff fbe8 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 80035d4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009a      	lsls	r2, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	4a4a      	ldr	r2, [pc, #296]	; (8003718 <UART_SetConfig+0x1b0>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	0119      	lsls	r1, r3, #4
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009a      	lsls	r2, r3, #2
 8003600:	441a      	add	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	fbb2 f2f3 	udiv	r2, r2, r3
 800360c:	4b42      	ldr	r3, [pc, #264]	; (8003718 <UART_SetConfig+0x1b0>)
 800360e:	fba3 0302 	umull	r0, r3, r3, r2
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2064      	movs	r0, #100	; 0x64
 8003616:	fb00 f303 	mul.w	r3, r0, r3
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	3332      	adds	r3, #50	; 0x32
 8003620:	4a3d      	ldr	r2, [pc, #244]	; (8003718 <UART_SetConfig+0x1b0>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800362c:	4419      	add	r1, r3
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009a      	lsls	r2, r3, #2
 8003638:	441a      	add	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fbb2 f2f3 	udiv	r2, r2, r3
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <UART_SetConfig+0x1b0>)
 8003646:	fba3 0302 	umull	r0, r3, r3, r2
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2064      	movs	r0, #100	; 0x64
 800364e:	fb00 f303 	mul.w	r3, r0, r3
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	3332      	adds	r3, #50	; 0x32
 8003658:	4a2f      	ldr	r2, [pc, #188]	; (8003718 <UART_SetConfig+0x1b0>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	f003 020f 	and.w	r2, r3, #15
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	440a      	add	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800366c:	e04d      	b.n	800370a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800366e:	f7ff fb85 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8003672:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009a      	lsls	r2, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	4a23      	ldr	r2, [pc, #140]	; (8003718 <UART_SetConfig+0x1b0>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	0119      	lsls	r1, r3, #4
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009a      	lsls	r2, r3, #2
 800369e:	441a      	add	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <UART_SetConfig+0x1b0>)
 80036ac:	fba3 0302 	umull	r0, r3, r3, r2
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	2064      	movs	r0, #100	; 0x64
 80036b4:	fb00 f303 	mul.w	r3, r0, r3
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	3332      	adds	r3, #50	; 0x32
 80036be:	4a16      	ldr	r2, [pc, #88]	; (8003718 <UART_SetConfig+0x1b0>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ca:	4419      	add	r1, r3
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009a      	lsls	r2, r3, #2
 80036d6:	441a      	add	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <UART_SetConfig+0x1b0>)
 80036e4:	fba3 0302 	umull	r0, r3, r3, r2
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	2064      	movs	r0, #100	; 0x64
 80036ec:	fb00 f303 	mul.w	r3, r0, r3
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	3332      	adds	r3, #50	; 0x32
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <UART_SetConfig+0x1b0>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	f003 020f 	and.w	r2, r3, #15
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	440a      	add	r2, r1
 8003708:	609a      	str	r2, [r3, #8]
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40013800 	.word	0x40013800
 8003718:	51eb851f 	.word	0x51eb851f

0800371c <__errno>:
 800371c:	4b01      	ldr	r3, [pc, #4]	; (8003724 <__errno+0x8>)
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000010 	.word	0x20000010

08003728 <__libc_init_array>:
 8003728:	b570      	push	{r4, r5, r6, lr}
 800372a:	2500      	movs	r5, #0
 800372c:	4e0c      	ldr	r6, [pc, #48]	; (8003760 <__libc_init_array+0x38>)
 800372e:	4c0d      	ldr	r4, [pc, #52]	; (8003764 <__libc_init_array+0x3c>)
 8003730:	1ba4      	subs	r4, r4, r6
 8003732:	10a4      	asrs	r4, r4, #2
 8003734:	42a5      	cmp	r5, r4
 8003736:	d109      	bne.n	800374c <__libc_init_array+0x24>
 8003738:	f003 ff98 	bl	800766c <_init>
 800373c:	2500      	movs	r5, #0
 800373e:	4e0a      	ldr	r6, [pc, #40]	; (8003768 <__libc_init_array+0x40>)
 8003740:	4c0a      	ldr	r4, [pc, #40]	; (800376c <__libc_init_array+0x44>)
 8003742:	1ba4      	subs	r4, r4, r6
 8003744:	10a4      	asrs	r4, r4, #2
 8003746:	42a5      	cmp	r5, r4
 8003748:	d105      	bne.n	8003756 <__libc_init_array+0x2e>
 800374a:	bd70      	pop	{r4, r5, r6, pc}
 800374c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003750:	4798      	blx	r3
 8003752:	3501      	adds	r5, #1
 8003754:	e7ee      	b.n	8003734 <__libc_init_array+0xc>
 8003756:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800375a:	4798      	blx	r3
 800375c:	3501      	adds	r5, #1
 800375e:	e7f2      	b.n	8003746 <__libc_init_array+0x1e>
 8003760:	080079b0 	.word	0x080079b0
 8003764:	080079b0 	.word	0x080079b0
 8003768:	080079b0 	.word	0x080079b0
 800376c:	080079b8 	.word	0x080079b8

08003770 <memset>:
 8003770:	4603      	mov	r3, r0
 8003772:	4402      	add	r2, r0
 8003774:	4293      	cmp	r3, r2
 8003776:	d100      	bne.n	800377a <memset+0xa>
 8003778:	4770      	bx	lr
 800377a:	f803 1b01 	strb.w	r1, [r3], #1
 800377e:	e7f9      	b.n	8003774 <memset+0x4>

08003780 <printf>:
 8003780:	b40f      	push	{r0, r1, r2, r3}
 8003782:	b507      	push	{r0, r1, r2, lr}
 8003784:	4906      	ldr	r1, [pc, #24]	; (80037a0 <printf+0x20>)
 8003786:	ab04      	add	r3, sp, #16
 8003788:	6808      	ldr	r0, [r1, #0]
 800378a:	f853 2b04 	ldr.w	r2, [r3], #4
 800378e:	6881      	ldr	r1, [r0, #8]
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	f000 f807 	bl	80037a4 <_vfprintf_r>
 8003796:	b003      	add	sp, #12
 8003798:	f85d eb04 	ldr.w	lr, [sp], #4
 800379c:	b004      	add	sp, #16
 800379e:	4770      	bx	lr
 80037a0:	20000010 	.word	0x20000010

080037a4 <_vfprintf_r>:
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	b0d5      	sub	sp, #340	; 0x154
 80037aa:	4689      	mov	r9, r1
 80037ac:	9207      	str	r2, [sp, #28]
 80037ae:	461c      	mov	r4, r3
 80037b0:	461e      	mov	r6, r3
 80037b2:	4683      	mov	fp, r0
 80037b4:	f002 fb96 	bl	8005ee4 <_localeconv_r>
 80037b8:	6803      	ldr	r3, [r0, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	931a      	str	r3, [sp, #104]	; 0x68
 80037be:	f7fc fcc7 	bl	8000150 <strlen>
 80037c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80037c4:	f1bb 0f00 	cmp.w	fp, #0
 80037c8:	d005      	beq.n	80037d6 <_vfprintf_r+0x32>
 80037ca:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80037ce:	b913      	cbnz	r3, 80037d6 <_vfprintf_r+0x32>
 80037d0:	4658      	mov	r0, fp
 80037d2:	f002 fa1d 	bl	8005c10 <__sinit>
 80037d6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80037da:	07d8      	lsls	r0, r3, #31
 80037dc:	d407      	bmi.n	80037ee <_vfprintf_r+0x4a>
 80037de:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80037e2:	0599      	lsls	r1, r3, #22
 80037e4:	d403      	bmi.n	80037ee <_vfprintf_r+0x4a>
 80037e6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80037ea:	f002 fb8b 	bl	8005f04 <__retarget_lock_acquire_recursive>
 80037ee:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 80037f2:	049a      	lsls	r2, r3, #18
 80037f4:	d409      	bmi.n	800380a <_vfprintf_r+0x66>
 80037f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037fa:	f8a9 300c 	strh.w	r3, [r9, #12]
 80037fe:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8003802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003806:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 800380a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800380e:	071f      	lsls	r7, r3, #28
 8003810:	d502      	bpl.n	8003818 <_vfprintf_r+0x74>
 8003812:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003816:	b9a3      	cbnz	r3, 8003842 <_vfprintf_r+0x9e>
 8003818:	4649      	mov	r1, r9
 800381a:	4658      	mov	r0, fp
 800381c:	f001 fa66 	bl	8004cec <__swsetup_r>
 8003820:	b178      	cbz	r0, 8003842 <_vfprintf_r+0x9e>
 8003822:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8003826:	07dd      	lsls	r5, r3, #31
 8003828:	d407      	bmi.n	800383a <_vfprintf_r+0x96>
 800382a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800382e:	059c      	lsls	r4, r3, #22
 8003830:	d403      	bmi.n	800383a <_vfprintf_r+0x96>
 8003832:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8003836:	f002 fb66 	bl	8005f06 <__retarget_lock_release_recursive>
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	9310      	str	r3, [sp, #64]	; 0x40
 8003840:	e01a      	b.n	8003878 <_vfprintf_r+0xd4>
 8003842:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003846:	f003 021a 	and.w	r2, r3, #26
 800384a:	2a0a      	cmp	r2, #10
 800384c:	d118      	bne.n	8003880 <_vfprintf_r+0xdc>
 800384e:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8003852:	2a00      	cmp	r2, #0
 8003854:	db14      	blt.n	8003880 <_vfprintf_r+0xdc>
 8003856:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 800385a:	07d0      	lsls	r0, r2, #31
 800385c:	d405      	bmi.n	800386a <_vfprintf_r+0xc6>
 800385e:	0599      	lsls	r1, r3, #22
 8003860:	d403      	bmi.n	800386a <_vfprintf_r+0xc6>
 8003862:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8003866:	f002 fb4e 	bl	8005f06 <__retarget_lock_release_recursive>
 800386a:	4623      	mov	r3, r4
 800386c:	9a07      	ldr	r2, [sp, #28]
 800386e:	4649      	mov	r1, r9
 8003870:	4658      	mov	r0, fp
 8003872:	f001 f9fb 	bl	8004c6c <__sbprintf>
 8003876:	9010      	str	r0, [sp, #64]	; 0x40
 8003878:	9810      	ldr	r0, [sp, #64]	; 0x40
 800387a:	b055      	add	sp, #340	; 0x154
 800387c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003880:	2300      	movs	r3, #0
 8003882:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8003886:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 800388a:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 800388e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8003892:	ac2b      	add	r4, sp, #172	; 0xac
 8003894:	9428      	str	r4, [sp, #160]	; 0xa0
 8003896:	9308      	str	r3, [sp, #32]
 8003898:	930c      	str	r3, [sp, #48]	; 0x30
 800389a:	9316      	str	r3, [sp, #88]	; 0x58
 800389c:	931d      	str	r3, [sp, #116]	; 0x74
 800389e:	9310      	str	r3, [sp, #64]	; 0x40
 80038a0:	9d07      	ldr	r5, [sp, #28]
 80038a2:	462b      	mov	r3, r5
 80038a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038a8:	b112      	cbz	r2, 80038b0 <_vfprintf_r+0x10c>
 80038aa:	2a25      	cmp	r2, #37	; 0x25
 80038ac:	f040 80e4 	bne.w	8003a78 <_vfprintf_r+0x2d4>
 80038b0:	9b07      	ldr	r3, [sp, #28]
 80038b2:	1aef      	subs	r7, r5, r3
 80038b4:	d00e      	beq.n	80038d4 <_vfprintf_r+0x130>
 80038b6:	e9c4 3700 	strd	r3, r7, [r4]
 80038ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80038bc:	443b      	add	r3, r7
 80038be:	932a      	str	r3, [sp, #168]	; 0xa8
 80038c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80038c2:	3301      	adds	r3, #1
 80038c4:	2b07      	cmp	r3, #7
 80038c6:	9329      	str	r3, [sp, #164]	; 0xa4
 80038c8:	f300 80d8 	bgt.w	8003a7c <_vfprintf_r+0x2d8>
 80038cc:	3408      	adds	r4, #8
 80038ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80038d0:	443b      	add	r3, r7
 80038d2:	9310      	str	r3, [sp, #64]	; 0x40
 80038d4:	782b      	ldrb	r3, [r5, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f001 81b5 	beq.w	8004c46 <_vfprintf_r+0x14a2>
 80038dc:	1c6b      	adds	r3, r5, #1
 80038de:	930e      	str	r3, [sp, #56]	; 0x38
 80038e0:	2300      	movs	r3, #0
 80038e2:	f04f 35ff 	mov.w	r5, #4294967295
 80038e6:	469a      	mov	sl, r3
 80038e8:	270a      	movs	r7, #10
 80038ea:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80038ee:	9311      	str	r3, [sp, #68]	; 0x44
 80038f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	930a      	str	r3, [sp, #40]	; 0x28
 80038f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038f8:	3301      	adds	r3, #1
 80038fa:	930e      	str	r3, [sp, #56]	; 0x38
 80038fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038fe:	3b20      	subs	r3, #32
 8003900:	2b5a      	cmp	r3, #90	; 0x5a
 8003902:	f200 8627 	bhi.w	8004554 <_vfprintf_r+0xdb0>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <_vfprintf_r+0x168>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003b0f 	.word	0x08003b0f
 8003910:	08004555 	.word	0x08004555
 8003914:	08004555 	.word	0x08004555
 8003918:	08003b21 	.word	0x08003b21
 800391c:	08004555 	.word	0x08004555
 8003920:	08004555 	.word	0x08004555
 8003924:	08004555 	.word	0x08004555
 8003928:	08003ad5 	.word	0x08003ad5
 800392c:	08004555 	.word	0x08004555
 8003930:	08004555 	.word	0x08004555
 8003934:	08003b27 	.word	0x08003b27
 8003938:	08003b3d 	.word	0x08003b3d
 800393c:	08004555 	.word	0x08004555
 8003940:	08003b37 	.word	0x08003b37
 8003944:	08003b41 	.word	0x08003b41
 8003948:	08004555 	.word	0x08004555
 800394c:	08003b73 	.word	0x08003b73
 8003950:	08003b79 	.word	0x08003b79
 8003954:	08003b79 	.word	0x08003b79
 8003958:	08003b79 	.word	0x08003b79
 800395c:	08003b79 	.word	0x08003b79
 8003960:	08003b79 	.word	0x08003b79
 8003964:	08003b79 	.word	0x08003b79
 8003968:	08003b79 	.word	0x08003b79
 800396c:	08003b79 	.word	0x08003b79
 8003970:	08003b79 	.word	0x08003b79
 8003974:	08004555 	.word	0x08004555
 8003978:	08004555 	.word	0x08004555
 800397c:	08004555 	.word	0x08004555
 8003980:	08004555 	.word	0x08004555
 8003984:	08004555 	.word	0x08004555
 8003988:	08004555 	.word	0x08004555
 800398c:	08004555 	.word	0x08004555
 8003990:	08003c65 	.word	0x08003c65
 8003994:	08004555 	.word	0x08004555
 8003998:	08003bd3 	.word	0x08003bd3
 800399c:	08003bf5 	.word	0x08003bf5
 80039a0:	08003c65 	.word	0x08003c65
 80039a4:	08003c65 	.word	0x08003c65
 80039a8:	08003c65 	.word	0x08003c65
 80039ac:	08004555 	.word	0x08004555
 80039b0:	08004555 	.word	0x08004555
 80039b4:	08004555 	.word	0x08004555
 80039b8:	08004555 	.word	0x08004555
 80039bc:	08003b99 	.word	0x08003b99
 80039c0:	08004555 	.word	0x08004555
 80039c4:	08004555 	.word	0x08004555
 80039c8:	08004149 	.word	0x08004149
 80039cc:	08004555 	.word	0x08004555
 80039d0:	08004555 	.word	0x08004555
 80039d4:	08004555 	.word	0x08004555
 80039d8:	080041d5 	.word	0x080041d5
 80039dc:	08004555 	.word	0x08004555
 80039e0:	080043b5 	.word	0x080043b5
 80039e4:	08004555 	.word	0x08004555
 80039e8:	08004555 	.word	0x08004555
 80039ec:	08003a95 	.word	0x08003a95
 80039f0:	08004555 	.word	0x08004555
 80039f4:	08004555 	.word	0x08004555
 80039f8:	08004555 	.word	0x08004555
 80039fc:	08004555 	.word	0x08004555
 8003a00:	08004555 	.word	0x08004555
 8003a04:	08004555 	.word	0x08004555
 8003a08:	08004555 	.word	0x08004555
 8003a0c:	08004555 	.word	0x08004555
 8003a10:	08003c65 	.word	0x08003c65
 8003a14:	08004555 	.word	0x08004555
 8003a18:	08003bd3 	.word	0x08003bd3
 8003a1c:	08003bf9 	.word	0x08003bf9
 8003a20:	08003c65 	.word	0x08003c65
 8003a24:	08003c65 	.word	0x08003c65
 8003a28:	08003c65 	.word	0x08003c65
 8003a2c:	08003b9f 	.word	0x08003b9f
 8003a30:	08003bf9 	.word	0x08003bf9
 8003a34:	08003bc7 	.word	0x08003bc7
 8003a38:	08004555 	.word	0x08004555
 8003a3c:	08003bb9 	.word	0x08003bb9
 8003a40:	08004555 	.word	0x08004555
 8003a44:	08004103 	.word	0x08004103
 8003a48:	0800414d 	.word	0x0800414d
 8003a4c:	080041b5 	.word	0x080041b5
 8003a50:	08003bc7 	.word	0x08003bc7
 8003a54:	08004555 	.word	0x08004555
 8003a58:	080041d5 	.word	0x080041d5
 8003a5c:	080038f1 	.word	0x080038f1
 8003a60:	080043b9 	.word	0x080043b9
 8003a64:	08004555 	.word	0x08004555
 8003a68:	08004555 	.word	0x08004555
 8003a6c:	080043f7 	.word	0x080043f7
 8003a70:	08004555 	.word	0x08004555
 8003a74:	080038f1 	.word	0x080038f1
 8003a78:	461d      	mov	r5, r3
 8003a7a:	e712      	b.n	80038a2 <_vfprintf_r+0xfe>
 8003a7c:	aa28      	add	r2, sp, #160	; 0xa0
 8003a7e:	4649      	mov	r1, r9
 8003a80:	4658      	mov	r0, fp
 8003a82:	f003 f862 	bl	8006b4a <__sprint_r>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	f040 8157 	bne.w	8003d3a <_vfprintf_r+0x596>
 8003a8c:	ac2b      	add	r4, sp, #172	; 0xac
 8003a8e:	e71e      	b.n	80038ce <_vfprintf_r+0x12a>
 8003a90:	461e      	mov	r6, r3
 8003a92:	e72d      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003a94:	4bb2      	ldr	r3, [pc, #712]	; (8003d60 <_vfprintf_r+0x5bc>)
 8003a96:	f01a 0f20 	tst.w	sl, #32
 8003a9a:	931c      	str	r3, [sp, #112]	; 0x70
 8003a9c:	f000 84ae 	beq.w	80043fc <_vfprintf_r+0xc58>
 8003aa0:	3607      	adds	r6, #7
 8003aa2:	f026 0607 	bic.w	r6, r6, #7
 8003aa6:	f106 0308 	add.w	r3, r6, #8
 8003aaa:	930d      	str	r3, [sp, #52]	; 0x34
 8003aac:	e9d6 6700 	ldrd	r6, r7, [r6]
 8003ab0:	f01a 0f01 	tst.w	sl, #1
 8003ab4:	d00a      	beq.n	8003acc <_vfprintf_r+0x328>
 8003ab6:	ea56 0307 	orrs.w	r3, r6, r7
 8003aba:	d007      	beq.n	8003acc <_vfprintf_r+0x328>
 8003abc:	2330      	movs	r3, #48	; 0x30
 8003abe:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8003ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ac4:	f04a 0a02 	orr.w	sl, sl, #2
 8003ac8:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8003acc:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e349      	b.n	8004168 <_vfprintf_r+0x9c4>
 8003ad4:	4658      	mov	r0, fp
 8003ad6:	f002 fa05 	bl	8005ee4 <_localeconv_r>
 8003ada:	6843      	ldr	r3, [r0, #4]
 8003adc:	4618      	mov	r0, r3
 8003ade:	931d      	str	r3, [sp, #116]	; 0x74
 8003ae0:	f7fc fb36 	bl	8000150 <strlen>
 8003ae4:	9016      	str	r0, [sp, #88]	; 0x58
 8003ae6:	4658      	mov	r0, fp
 8003ae8:	f002 f9fc 	bl	8005ee4 <_localeconv_r>
 8003aec:	6883      	ldr	r3, [r0, #8]
 8003aee:	930c      	str	r3, [sp, #48]	; 0x30
 8003af0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f43f aefc 	beq.w	80038f0 <_vfprintf_r+0x14c>
 8003af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f43f aef8 	beq.w	80038f0 <_vfprintf_r+0x14c>
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f43f aef4 	beq.w	80038f0 <_vfprintf_r+0x14c>
 8003b08:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8003b0c:	e6f0      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003b0e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f47f aeec 	bne.w	80038f0 <_vfprintf_r+0x14c>
 8003b18:	2320      	movs	r3, #32
 8003b1a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8003b1e:	e6e7      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003b20:	f04a 0a01 	orr.w	sl, sl, #1
 8003b24:	e6e4      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003b26:	6832      	ldr	r2, [r6, #0]
 8003b28:	1d33      	adds	r3, r6, #4
 8003b2a:	2a00      	cmp	r2, #0
 8003b2c:	9211      	str	r2, [sp, #68]	; 0x44
 8003b2e:	daaf      	bge.n	8003a90 <_vfprintf_r+0x2ec>
 8003b30:	461e      	mov	r6, r3
 8003b32:	4252      	negs	r2, r2
 8003b34:	9211      	str	r2, [sp, #68]	; 0x44
 8003b36:	f04a 0a04 	orr.w	sl, sl, #4
 8003b3a:	e6d9      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003b3c:	232b      	movs	r3, #43	; 0x2b
 8003b3e:	e7ec      	b.n	8003b1a <_vfprintf_r+0x376>
 8003b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	3301      	adds	r3, #1
 8003b48:	2a2a      	cmp	r2, #42	; 0x2a
 8003b4a:	920a      	str	r2, [sp, #40]	; 0x28
 8003b4c:	d10f      	bne.n	8003b6e <_vfprintf_r+0x3ca>
 8003b4e:	6835      	ldr	r5, [r6, #0]
 8003b50:	930e      	str	r3, [sp, #56]	; 0x38
 8003b52:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8003b56:	3604      	adds	r6, #4
 8003b58:	e6ca      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003b5a:	fb07 2505 	mla	r5, r7, r5, r2
 8003b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b62:	920a      	str	r2, [sp, #40]	; 0x28
 8003b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b66:	3a30      	subs	r2, #48	; 0x30
 8003b68:	2a09      	cmp	r2, #9
 8003b6a:	d9f6      	bls.n	8003b5a <_vfprintf_r+0x3b6>
 8003b6c:	e6c5      	b.n	80038fa <_vfprintf_r+0x156>
 8003b6e:	2500      	movs	r5, #0
 8003b70:	e7f8      	b.n	8003b64 <_vfprintf_r+0x3c0>
 8003b72:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8003b76:	e6bb      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003b78:	2200      	movs	r2, #0
 8003b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b7c:	9211      	str	r2, [sp, #68]	; 0x44
 8003b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b80:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003b82:	3a30      	subs	r2, #48	; 0x30
 8003b84:	fb07 2201 	mla	r2, r7, r1, r2
 8003b88:	9211      	str	r2, [sp, #68]	; 0x44
 8003b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b8e:	920a      	str	r2, [sp, #40]	; 0x28
 8003b90:	3a30      	subs	r2, #48	; 0x30
 8003b92:	2a09      	cmp	r2, #9
 8003b94:	d9f3      	bls.n	8003b7e <_vfprintf_r+0x3da>
 8003b96:	e6b0      	b.n	80038fa <_vfprintf_r+0x156>
 8003b98:	f04a 0a08 	orr.w	sl, sl, #8
 8003b9c:	e6a8      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b68      	cmp	r3, #104	; 0x68
 8003ba4:	bf01      	itttt	eq
 8003ba6:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8003ba8:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8003bac:	3301      	addeq	r3, #1
 8003bae:	930e      	streq	r3, [sp, #56]	; 0x38
 8003bb0:	bf18      	it	ne
 8003bb2:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8003bb6:	e69b      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b6c      	cmp	r3, #108	; 0x6c
 8003bbe:	d105      	bne.n	8003bcc <_vfprintf_r+0x428>
 8003bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8003bc6:	f04a 0a20 	orr.w	sl, sl, #32
 8003bca:	e691      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003bcc:	f04a 0a10 	orr.w	sl, sl, #16
 8003bd0:	e68e      	b.n	80038f0 <_vfprintf_r+0x14c>
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	1d33      	adds	r3, r6, #4
 8003bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8003bd8:	6833      	ldr	r3, [r6, #0]
 8003bda:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8003bde:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8003be2:	ab3b      	add	r3, sp, #236	; 0xec
 8003be4:	4680      	mov	r8, r0
 8003be6:	2501      	movs	r5, #1
 8003be8:	9012      	str	r0, [sp, #72]	; 0x48
 8003bea:	4607      	mov	r7, r0
 8003bec:	900b      	str	r0, [sp, #44]	; 0x2c
 8003bee:	4606      	mov	r6, r0
 8003bf0:	9307      	str	r3, [sp, #28]
 8003bf2:	e308      	b.n	8004206 <_vfprintf_r+0xa62>
 8003bf4:	f04a 0a10 	orr.w	sl, sl, #16
 8003bf8:	f01a 0f20 	tst.w	sl, #32
 8003bfc:	d01f      	beq.n	8003c3e <_vfprintf_r+0x49a>
 8003bfe:	3607      	adds	r6, #7
 8003c00:	f026 0607 	bic.w	r6, r6, #7
 8003c04:	f106 0308 	add.w	r3, r6, #8
 8003c08:	930d      	str	r3, [sp, #52]	; 0x34
 8003c0a:	e9d6 6700 	ldrd	r6, r7, [r6]
 8003c0e:	2e00      	cmp	r6, #0
 8003c10:	f177 0300 	sbcs.w	r3, r7, #0
 8003c14:	da05      	bge.n	8003c22 <_vfprintf_r+0x47e>
 8003c16:	232d      	movs	r3, #45	; 0x2d
 8003c18:	4276      	negs	r6, r6
 8003c1a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003c1e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8003c22:	1c6b      	adds	r3, r5, #1
 8003c24:	f040 83fd 	bne.w	8004422 <_vfprintf_r+0xc7e>
 8003c28:	2f00      	cmp	r7, #0
 8003c2a:	bf08      	it	eq
 8003c2c:	2e0a      	cmpeq	r6, #10
 8003c2e:	f080 8425 	bcs.w	800447c <_vfprintf_r+0xcd8>
 8003c32:	3630      	adds	r6, #48	; 0x30
 8003c34:	ab54      	add	r3, sp, #336	; 0x150
 8003c36:	f803 6d01 	strb.w	r6, [r3, #-1]!
 8003c3a:	f000 bc15 	b.w	8004468 <_vfprintf_r+0xcc4>
 8003c3e:	1d33      	adds	r3, r6, #4
 8003c40:	f01a 0f10 	tst.w	sl, #16
 8003c44:	930d      	str	r3, [sp, #52]	; 0x34
 8003c46:	d002      	beq.n	8003c4e <_vfprintf_r+0x4aa>
 8003c48:	6836      	ldr	r6, [r6, #0]
 8003c4a:	17f7      	asrs	r7, r6, #31
 8003c4c:	e7df      	b.n	8003c0e <_vfprintf_r+0x46a>
 8003c4e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8003c52:	6836      	ldr	r6, [r6, #0]
 8003c54:	d001      	beq.n	8003c5a <_vfprintf_r+0x4b6>
 8003c56:	b236      	sxth	r6, r6
 8003c58:	e7f7      	b.n	8003c4a <_vfprintf_r+0x4a6>
 8003c5a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003c5e:	bf18      	it	ne
 8003c60:	b276      	sxtbne	r6, r6
 8003c62:	e7f2      	b.n	8003c4a <_vfprintf_r+0x4a6>
 8003c64:	3607      	adds	r6, #7
 8003c66:	f026 0607 	bic.w	r6, r6, #7
 8003c6a:	f106 0308 	add.w	r3, r6, #8
 8003c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8003c70:	6833      	ldr	r3, [r6, #0]
 8003c72:	f04f 32ff 	mov.w	r2, #4294967295
 8003c76:	9314      	str	r3, [sp, #80]	; 0x50
 8003c78:	6873      	ldr	r3, [r6, #4]
 8003c7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003c7c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8003c80:	9313      	str	r3, [sp, #76]	; 0x4c
 8003c82:	4638      	mov	r0, r7
 8003c84:	4b37      	ldr	r3, [pc, #220]	; (8003d64 <_vfprintf_r+0x5c0>)
 8003c86:	4631      	mov	r1, r6
 8003c88:	f7fc fec0 	bl	8000a0c <__aeabi_dcmpun>
 8003c8c:	bb08      	cbnz	r0, 8003cd2 <_vfprintf_r+0x52e>
 8003c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c92:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <_vfprintf_r+0x5c0>)
 8003c94:	4638      	mov	r0, r7
 8003c96:	4631      	mov	r1, r6
 8003c98:	f7fc fe9a 	bl	80009d0 <__aeabi_dcmple>
 8003c9c:	b9c8      	cbnz	r0, 8003cd2 <_vfprintf_r+0x52e>
 8003c9e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8003ca2:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8003ca6:	f7fc fe89 	bl	80009bc <__aeabi_dcmplt>
 8003caa:	b110      	cbz	r0, 8003cb2 <_vfprintf_r+0x50e>
 8003cac:	232d      	movs	r3, #45	; 0x2d
 8003cae:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8003cb2:	4a2d      	ldr	r2, [pc, #180]	; (8003d68 <_vfprintf_r+0x5c4>)
 8003cb4:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <_vfprintf_r+0x5c8>)
 8003cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003cb8:	f04f 0800 	mov.w	r8, #0
 8003cbc:	2947      	cmp	r1, #71	; 0x47
 8003cbe:	bfd8      	it	le
 8003cc0:	461a      	movle	r2, r3
 8003cc2:	2503      	movs	r5, #3
 8003cc4:	9207      	str	r2, [sp, #28]
 8003cc6:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8003cca:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8003cce:	f000 bc19 	b.w	8004504 <_vfprintf_r+0xd60>
 8003cd2:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8003cd6:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8003cda:	f7fc fe97 	bl	8000a0c <__aeabi_dcmpun>
 8003cde:	4680      	mov	r8, r0
 8003ce0:	b140      	cbz	r0, 8003cf4 <_vfprintf_r+0x550>
 8003ce2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003ce4:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <_vfprintf_r+0x5cc>)
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bfbc      	itt	lt
 8003cea:	232d      	movlt	r3, #45	; 0x2d
 8003cec:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8003cf0:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <_vfprintf_r+0x5d0>)
 8003cf2:	e7e0      	b.n	8003cb6 <_vfprintf_r+0x512>
 8003cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cf6:	f023 0320 	bic.w	r3, r3, #32
 8003cfa:	2b41      	cmp	r3, #65	; 0x41
 8003cfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cfe:	d13b      	bne.n	8003d78 <_vfprintf_r+0x5d4>
 8003d00:	2330      	movs	r3, #48	; 0x30
 8003d02:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8003d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d08:	f04a 0a02 	orr.w	sl, sl, #2
 8003d0c:	2b61      	cmp	r3, #97	; 0x61
 8003d0e:	bf14      	ite	ne
 8003d10:	2358      	movne	r3, #88	; 0x58
 8003d12:	2378      	moveq	r3, #120	; 0x78
 8003d14:	2d63      	cmp	r5, #99	; 0x63
 8003d16:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8003d1a:	f340 811b 	ble.w	8003f54 <_vfprintf_r+0x7b0>
 8003d1e:	1c69      	adds	r1, r5, #1
 8003d20:	4658      	mov	r0, fp
 8003d22:	f002 f95d 	bl	8005fe0 <_malloc_r>
 8003d26:	9007      	str	r0, [sp, #28]
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	f040 8116 	bne.w	8003f5a <_vfprintf_r+0x7b6>
 8003d2e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d36:	f8a9 300c 	strh.w	r3, [r9, #12]
 8003d3a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8003d3e:	07d8      	lsls	r0, r3, #31
 8003d40:	d407      	bmi.n	8003d52 <_vfprintf_r+0x5ae>
 8003d42:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d46:	0599      	lsls	r1, r3, #22
 8003d48:	d403      	bmi.n	8003d52 <_vfprintf_r+0x5ae>
 8003d4a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8003d4e:	f002 f8da 	bl	8005f06 <__retarget_lock_release_recursive>
 8003d52:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d56:	065a      	lsls	r2, r3, #25
 8003d58:	f57f ad8e 	bpl.w	8003878 <_vfprintf_r+0xd4>
 8003d5c:	e56d      	b.n	800383a <_vfprintf_r+0x96>
 8003d5e:	bf00      	nop
 8003d60:	08007759 	.word	0x08007759
 8003d64:	7fefffff 	.word	0x7fefffff
 8003d68:	0800773c 	.word	0x0800773c
 8003d6c:	08007738 	.word	0x08007738
 8003d70:	08007744 	.word	0x08007744
 8003d74:	08007740 	.word	0x08007740
 8003d78:	1c6a      	adds	r2, r5, #1
 8003d7a:	f000 80f1 	beq.w	8003f60 <_vfprintf_r+0x7bc>
 8003d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d80:	2b47      	cmp	r3, #71	; 0x47
 8003d82:	d102      	bne.n	8003d8a <_vfprintf_r+0x5e6>
 8003d84:	2d00      	cmp	r5, #0
 8003d86:	f000 80ed 	beq.w	8003f64 <_vfprintf_r+0x7c0>
 8003d8a:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8003d8e:	9315      	str	r3, [sp, #84]	; 0x54
 8003d90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d92:	1e1e      	subs	r6, r3, #0
 8003d94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003d96:	9308      	str	r3, [sp, #32]
 8003d98:	bfb7      	itett	lt
 8003d9a:	4633      	movlt	r3, r6
 8003d9c:	2300      	movge	r3, #0
 8003d9e:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 8003da2:	232d      	movlt	r3, #45	; 0x2d
 8003da4:	9319      	str	r3, [sp, #100]	; 0x64
 8003da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003da8:	2b41      	cmp	r3, #65	; 0x41
 8003daa:	f040 80ec 	bne.w	8003f86 <_vfprintf_r+0x7e2>
 8003dae:	aa22      	add	r2, sp, #136	; 0x88
 8003db0:	9808      	ldr	r0, [sp, #32]
 8003db2:	4631      	mov	r1, r6
 8003db4:	f002 fe22 	bl	80069fc <frexp>
 8003db8:	2200      	movs	r2, #0
 8003dba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003dbe:	f7fc fb8b 	bl	80004d8 <__aeabi_dmul>
 8003dc2:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8003dc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003dca:	f7fc fded 	bl	80009a8 <__aeabi_dcmpeq>
 8003dce:	b108      	cbz	r0, 8003dd4 <_vfprintf_r+0x630>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	9322      	str	r3, [sp, #136]	; 0x88
 8003dd4:	4fa7      	ldr	r7, [pc, #668]	; (8004074 <_vfprintf_r+0x8d0>)
 8003dd6:	4ba8      	ldr	r3, [pc, #672]	; (8004078 <_vfprintf_r+0x8d4>)
 8003dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dda:	9e07      	ldr	r6, [sp, #28]
 8003ddc:	2a61      	cmp	r2, #97	; 0x61
 8003dde:	bf08      	it	eq
 8003de0:	461f      	moveq	r7, r3
 8003de2:	9712      	str	r7, [sp, #72]	; 0x48
 8003de4:	1e6f      	subs	r7, r5, #1
 8003de6:	2200      	movs	r2, #0
 8003de8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003dec:	4ba3      	ldr	r3, [pc, #652]	; (800407c <_vfprintf_r+0x8d8>)
 8003dee:	f7fc fb73 	bl	80004d8 <__aeabi_dmul>
 8003df2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003df6:	f7fc fe1f 	bl	8000a38 <__aeabi_d2iz>
 8003dfa:	901e      	str	r0, [sp, #120]	; 0x78
 8003dfc:	f7fc fb02 	bl	8000404 <__aeabi_i2d>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e08:	f7fc f9ae 	bl	8000168 <__aeabi_dsub>
 8003e0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003e10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003e14:	5c9b      	ldrb	r3, [r3, r2]
 8003e16:	971f      	str	r7, [sp, #124]	; 0x7c
 8003e18:	f806 3b01 	strb.w	r3, [r6], #1
 8003e1c:	1c7b      	adds	r3, r7, #1
 8003e1e:	d006      	beq.n	8003e2e <_vfprintf_r+0x68a>
 8003e20:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8003e24:	3f01      	subs	r7, #1
 8003e26:	f7fc fdbf 	bl	80009a8 <__aeabi_dcmpeq>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d0db      	beq.n	8003de6 <_vfprintf_r+0x642>
 8003e2e:	2200      	movs	r2, #0
 8003e30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e34:	4b92      	ldr	r3, [pc, #584]	; (8004080 <_vfprintf_r+0x8dc>)
 8003e36:	f7fc fddf 	bl	80009f8 <__aeabi_dcmpgt>
 8003e3a:	b960      	cbnz	r0, 8003e56 <_vfprintf_r+0x6b2>
 8003e3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e40:	2200      	movs	r2, #0
 8003e42:	4b8f      	ldr	r3, [pc, #572]	; (8004080 <_vfprintf_r+0x8dc>)
 8003e44:	f7fc fdb0 	bl	80009a8 <__aeabi_dcmpeq>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	f000 8097 	beq.w	8003f7c <_vfprintf_r+0x7d8>
 8003e4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003e50:	07df      	lsls	r7, r3, #31
 8003e52:	f140 8093 	bpl.w	8003f7c <_vfprintf_r+0x7d8>
 8003e56:	2030      	movs	r0, #48	; 0x30
 8003e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e5a:	9626      	str	r6, [sp, #152]	; 0x98
 8003e5c:	7bd9      	ldrb	r1, [r3, #15]
 8003e5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003e60:	1e53      	subs	r3, r2, #1
 8003e62:	9326      	str	r3, [sp, #152]	; 0x98
 8003e64:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8003e68:	428b      	cmp	r3, r1
 8003e6a:	d07e      	beq.n	8003f6a <_vfprintf_r+0x7c6>
 8003e6c:	2b39      	cmp	r3, #57	; 0x39
 8003e6e:	bf0b      	itete	eq
 8003e70:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 8003e72:	3301      	addne	r3, #1
 8003e74:	7a9b      	ldrbeq	r3, [r3, #10]
 8003e76:	b2db      	uxtbne	r3, r3
 8003e78:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003e7c:	4633      	mov	r3, r6
 8003e7e:	9a07      	ldr	r2, [sp, #28]
 8003e80:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	9308      	str	r3, [sp, #32]
 8003e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e88:	2b47      	cmp	r3, #71	; 0x47
 8003e8a:	f040 80c8 	bne.w	800401e <_vfprintf_r+0x87a>
 8003e8e:	1cf0      	adds	r0, r6, #3
 8003e90:	db02      	blt.n	8003e98 <_vfprintf_r+0x6f4>
 8003e92:	42b5      	cmp	r5, r6
 8003e94:	f280 80f6 	bge.w	8004084 <_vfprintf_r+0x8e0>
 8003e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e9a:	3b02      	subs	r3, #2
 8003e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8003e9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003ea0:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8003ea4:	f021 0120 	bic.w	r1, r1, #32
 8003ea8:	2941      	cmp	r1, #65	; 0x41
 8003eaa:	bf08      	it	eq
 8003eac:	320f      	addeq	r2, #15
 8003eae:	f106 33ff 	add.w	r3, r6, #4294967295
 8003eb2:	bf06      	itte	eq
 8003eb4:	b2d2      	uxtbeq	r2, r2
 8003eb6:	2101      	moveq	r1, #1
 8003eb8:	2100      	movne	r1, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8003ec0:	bfb4      	ite	lt
 8003ec2:	222d      	movlt	r2, #45	; 0x2d
 8003ec4:	222b      	movge	r2, #43	; 0x2b
 8003ec6:	9322      	str	r3, [sp, #136]	; 0x88
 8003ec8:	bfb8      	it	lt
 8003eca:	f1c6 0301 	rsblt	r3, r6, #1
 8003ece:	2b09      	cmp	r3, #9
 8003ed0:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8003ed4:	f340 80ba 	ble.w	800404c <_vfprintf_r+0x8a8>
 8003ed8:	250a      	movs	r5, #10
 8003eda:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8003ede:	fb93 f0f5 	sdiv	r0, r3, r5
 8003ee2:	fb05 3310 	mls	r3, r5, r0, r3
 8003ee6:	2809      	cmp	r0, #9
 8003ee8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003eec:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003ef0:	f102 31ff 	add.w	r1, r2, #4294967295
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f300 80a2 	bgt.w	800403e <_vfprintf_r+0x89a>
 8003efa:	3330      	adds	r3, #48	; 0x30
 8003efc:	f801 3c01 	strb.w	r3, [r1, #-1]
 8003f00:	3a02      	subs	r2, #2
 8003f02:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8003f06:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8003f0a:	4282      	cmp	r2, r0
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f0c0 8098 	bcc.w	8004042 <_vfprintf_r+0x89e>
 8003f12:	9a08      	ldr	r2, [sp, #32]
 8003f14:	ab24      	add	r3, sp, #144	; 0x90
 8003f16:	1acb      	subs	r3, r1, r3
 8003f18:	2a01      	cmp	r2, #1
 8003f1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f1c:	eb03 0502 	add.w	r5, r3, r2
 8003f20:	dc02      	bgt.n	8003f28 <_vfprintf_r+0x784>
 8003f22:	f01a 0f01 	tst.w	sl, #1
 8003f26:	d001      	beq.n	8003f2c <_vfprintf_r+0x788>
 8003f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f2a:	441d      	add	r5, r3
 8003f2c:	2700      	movs	r7, #0
 8003f2e:	463e      	mov	r6, r7
 8003f30:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	9315      	str	r3, [sp, #84]	; 0x54
 8003f3a:	970b      	str	r7, [sp, #44]	; 0x2c
 8003f3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8314 	beq.w	800456c <_vfprintf_r+0xdc8>
 8003f44:	232d      	movs	r3, #45	; 0x2d
 8003f46:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8003f50:	9312      	str	r3, [sp, #72]	; 0x48
 8003f52:	e158      	b.n	8004206 <_vfprintf_r+0xa62>
 8003f54:	ab3b      	add	r3, sp, #236	; 0xec
 8003f56:	9307      	str	r3, [sp, #28]
 8003f58:	e717      	b.n	8003d8a <_vfprintf_r+0x5e6>
 8003f5a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003f5e:	e714      	b.n	8003d8a <_vfprintf_r+0x5e6>
 8003f60:	2506      	movs	r5, #6
 8003f62:	e712      	b.n	8003d8a <_vfprintf_r+0x5e6>
 8003f64:	46a8      	mov	r8, r5
 8003f66:	2501      	movs	r5, #1
 8003f68:	e70f      	b.n	8003d8a <_vfprintf_r+0x5e6>
 8003f6a:	f802 0c01 	strb.w	r0, [r2, #-1]
 8003f6e:	e776      	b.n	8003e5e <_vfprintf_r+0x6ba>
 8003f70:	f803 1b01 	strb.w	r1, [r3], #1
 8003f74:	1af2      	subs	r2, r6, r3
 8003f76:	2a00      	cmp	r2, #0
 8003f78:	dafa      	bge.n	8003f70 <_vfprintf_r+0x7cc>
 8003f7a:	e780      	b.n	8003e7e <_vfprintf_r+0x6da>
 8003f7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003f7e:	4633      	mov	r3, r6
 8003f80:	2130      	movs	r1, #48	; 0x30
 8003f82:	4416      	add	r6, r2
 8003f84:	e7f6      	b.n	8003f74 <_vfprintf_r+0x7d0>
 8003f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f88:	2b46      	cmp	r3, #70	; 0x46
 8003f8a:	d004      	beq.n	8003f96 <_vfprintf_r+0x7f2>
 8003f8c:	2b45      	cmp	r3, #69	; 0x45
 8003f8e:	d140      	bne.n	8004012 <_vfprintf_r+0x86e>
 8003f90:	1c6f      	adds	r7, r5, #1
 8003f92:	2302      	movs	r3, #2
 8003f94:	e001      	b.n	8003f9a <_vfprintf_r+0x7f6>
 8003f96:	462f      	mov	r7, r5
 8003f98:	2303      	movs	r3, #3
 8003f9a:	aa26      	add	r2, sp, #152	; 0x98
 8003f9c:	9204      	str	r2, [sp, #16]
 8003f9e:	aa23      	add	r2, sp, #140	; 0x8c
 8003fa0:	9203      	str	r2, [sp, #12]
 8003fa2:	aa22      	add	r2, sp, #136	; 0x88
 8003fa4:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	9a08      	ldr	r2, [sp, #32]
 8003fac:	4633      	mov	r3, r6
 8003fae:	4658      	mov	r0, fp
 8003fb0:	f000 ff92 	bl	8004ed8 <_dtoa_r>
 8003fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fb6:	9007      	str	r0, [sp, #28]
 8003fb8:	2b47      	cmp	r3, #71	; 0x47
 8003fba:	d102      	bne.n	8003fc2 <_vfprintf_r+0x81e>
 8003fbc:	f01a 0f01 	tst.w	sl, #1
 8003fc0:	d02b      	beq.n	800401a <_vfprintf_r+0x876>
 8003fc2:	9b07      	ldr	r3, [sp, #28]
 8003fc4:	443b      	add	r3, r7
 8003fc6:	9312      	str	r3, [sp, #72]	; 0x48
 8003fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fca:	2b46      	cmp	r3, #70	; 0x46
 8003fcc:	d111      	bne.n	8003ff2 <_vfprintf_r+0x84e>
 8003fce:	9b07      	ldr	r3, [sp, #28]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b30      	cmp	r3, #48	; 0x30
 8003fd4:	d109      	bne.n	8003fea <_vfprintf_r+0x846>
 8003fd6:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8003fda:	9808      	ldr	r0, [sp, #32]
 8003fdc:	4631      	mov	r1, r6
 8003fde:	f7fc fce3 	bl	80009a8 <__aeabi_dcmpeq>
 8003fe2:	b910      	cbnz	r0, 8003fea <_vfprintf_r+0x846>
 8003fe4:	f1c7 0701 	rsb	r7, r7, #1
 8003fe8:	9722      	str	r7, [sp, #136]	; 0x88
 8003fea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fee:	441a      	add	r2, r3
 8003ff0:	9212      	str	r2, [sp, #72]	; 0x48
 8003ff2:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8003ff6:	9808      	ldr	r0, [sp, #32]
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	f7fc fcd5 	bl	80009a8 <__aeabi_dcmpeq>
 8003ffe:	b950      	cbnz	r0, 8004016 <_vfprintf_r+0x872>
 8004000:	2230      	movs	r2, #48	; 0x30
 8004002:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004004:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004006:	4299      	cmp	r1, r3
 8004008:	d907      	bls.n	800401a <_vfprintf_r+0x876>
 800400a:	1c59      	adds	r1, r3, #1
 800400c:	9126      	str	r1, [sp, #152]	; 0x98
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	e7f7      	b.n	8004002 <_vfprintf_r+0x85e>
 8004012:	462f      	mov	r7, r5
 8004014:	e7bd      	b.n	8003f92 <_vfprintf_r+0x7ee>
 8004016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004018:	9326      	str	r3, [sp, #152]	; 0x98
 800401a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800401c:	e72f      	b.n	8003e7e <_vfprintf_r+0x6da>
 800401e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004020:	2b46      	cmp	r3, #70	; 0x46
 8004022:	f47f af3c 	bne.w	8003e9e <_vfprintf_r+0x6fa>
 8004026:	2e00      	cmp	r6, #0
 8004028:	dd1d      	ble.n	8004066 <_vfprintf_r+0x8c2>
 800402a:	b915      	cbnz	r5, 8004032 <_vfprintf_r+0x88e>
 800402c:	f01a 0f01 	tst.w	sl, #1
 8004030:	d03c      	beq.n	80040ac <_vfprintf_r+0x908>
 8004032:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004034:	18f3      	adds	r3, r6, r3
 8004036:	441d      	add	r5, r3
 8004038:	2366      	movs	r3, #102	; 0x66
 800403a:	930a      	str	r3, [sp, #40]	; 0x28
 800403c:	e03b      	b.n	80040b6 <_vfprintf_r+0x912>
 800403e:	460a      	mov	r2, r1
 8004040:	e74d      	b.n	8003ede <_vfprintf_r+0x73a>
 8004042:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004046:	f803 1b01 	strb.w	r1, [r3], #1
 800404a:	e75e      	b.n	8003f0a <_vfprintf_r+0x766>
 800404c:	b941      	cbnz	r1, 8004060 <_vfprintf_r+0x8bc>
 800404e:	2230      	movs	r2, #48	; 0x30
 8004050:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 8004054:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 8004058:	3330      	adds	r3, #48	; 0x30
 800405a:	1c51      	adds	r1, r2, #1
 800405c:	7013      	strb	r3, [r2, #0]
 800405e:	e758      	b.n	8003f12 <_vfprintf_r+0x76e>
 8004060:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8004064:	e7f8      	b.n	8004058 <_vfprintf_r+0x8b4>
 8004066:	b915      	cbnz	r5, 800406e <_vfprintf_r+0x8ca>
 8004068:	f01a 0f01 	tst.w	sl, #1
 800406c:	d020      	beq.n	80040b0 <_vfprintf_r+0x90c>
 800406e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004070:	3301      	adds	r3, #1
 8004072:	e7e0      	b.n	8004036 <_vfprintf_r+0x892>
 8004074:	08007759 	.word	0x08007759
 8004078:	08007748 	.word	0x08007748
 800407c:	40300000 	.word	0x40300000
 8004080:	3fe00000 	.word	0x3fe00000
 8004084:	9b08      	ldr	r3, [sp, #32]
 8004086:	42b3      	cmp	r3, r6
 8004088:	dc06      	bgt.n	8004098 <_vfprintf_r+0x8f4>
 800408a:	f01a 0f01 	tst.w	sl, #1
 800408e:	d025      	beq.n	80040dc <_vfprintf_r+0x938>
 8004090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004092:	18f5      	adds	r5, r6, r3
 8004094:	2367      	movs	r3, #103	; 0x67
 8004096:	e7d0      	b.n	800403a <_vfprintf_r+0x896>
 8004098:	9b08      	ldr	r3, [sp, #32]
 800409a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800409c:	2e00      	cmp	r6, #0
 800409e:	eb03 0502 	add.w	r5, r3, r2
 80040a2:	dcf7      	bgt.n	8004094 <_vfprintf_r+0x8f0>
 80040a4:	f1c6 0301 	rsb	r3, r6, #1
 80040a8:	441d      	add	r5, r3
 80040aa:	e7f3      	b.n	8004094 <_vfprintf_r+0x8f0>
 80040ac:	4635      	mov	r5, r6
 80040ae:	e7c3      	b.n	8004038 <_vfprintf_r+0x894>
 80040b0:	2366      	movs	r3, #102	; 0x66
 80040b2:	2501      	movs	r5, #1
 80040b4:	930a      	str	r3, [sp, #40]	; 0x28
 80040b6:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 80040ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80040bc:	d01f      	beq.n	80040fe <_vfprintf_r+0x95a>
 80040be:	2700      	movs	r7, #0
 80040c0:	2e00      	cmp	r6, #0
 80040c2:	970b      	str	r7, [sp, #44]	; 0x2c
 80040c4:	f77f af3a 	ble.w	8003f3c <_vfprintf_r+0x798>
 80040c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2bff      	cmp	r3, #255	; 0xff
 80040ce:	d107      	bne.n	80040e0 <_vfprintf_r+0x93c>
 80040d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80040d4:	443b      	add	r3, r7
 80040d6:	fb02 5503 	mla	r5, r2, r3, r5
 80040da:	e72f      	b.n	8003f3c <_vfprintf_r+0x798>
 80040dc:	4635      	mov	r5, r6
 80040de:	e7d9      	b.n	8004094 <_vfprintf_r+0x8f0>
 80040e0:	42b3      	cmp	r3, r6
 80040e2:	daf5      	bge.n	80040d0 <_vfprintf_r+0x92c>
 80040e4:	1af6      	subs	r6, r6, r3
 80040e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040e8:	785b      	ldrb	r3, [r3, #1]
 80040ea:	b133      	cbz	r3, 80040fa <_vfprintf_r+0x956>
 80040ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040ee:	3301      	adds	r3, #1
 80040f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80040f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040f4:	3301      	adds	r3, #1
 80040f6:	930c      	str	r3, [sp, #48]	; 0x30
 80040f8:	e7e6      	b.n	80040c8 <_vfprintf_r+0x924>
 80040fa:	3701      	adds	r7, #1
 80040fc:	e7e4      	b.n	80040c8 <_vfprintf_r+0x924>
 80040fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004100:	e71c      	b.n	8003f3c <_vfprintf_r+0x798>
 8004102:	4632      	mov	r2, r6
 8004104:	f852 3b04 	ldr.w	r3, [r2], #4
 8004108:	f01a 0f20 	tst.w	sl, #32
 800410c:	920d      	str	r2, [sp, #52]	; 0x34
 800410e:	d009      	beq.n	8004124 <_vfprintf_r+0x980>
 8004110:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004112:	4610      	mov	r0, r2
 8004114:	17d1      	asrs	r1, r2, #31
 8004116:	e9c3 0100 	strd	r0, r1, [r3]
 800411a:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	; 0x34
 800411e:	9307      	str	r3, [sp, #28]
 8004120:	f7ff bbbe 	b.w	80038a0 <_vfprintf_r+0xfc>
 8004124:	f01a 0f10 	tst.w	sl, #16
 8004128:	d002      	beq.n	8004130 <_vfprintf_r+0x98c>
 800412a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e7f4      	b.n	800411a <_vfprintf_r+0x976>
 8004130:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8004134:	d002      	beq.n	800413c <_vfprintf_r+0x998>
 8004136:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004138:	801a      	strh	r2, [r3, #0]
 800413a:	e7ee      	b.n	800411a <_vfprintf_r+0x976>
 800413c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004140:	d0f3      	beq.n	800412a <_vfprintf_r+0x986>
 8004142:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e7e8      	b.n	800411a <_vfprintf_r+0x976>
 8004148:	f04a 0a10 	orr.w	sl, sl, #16
 800414c:	f01a 0f20 	tst.w	sl, #32
 8004150:	d01e      	beq.n	8004190 <_vfprintf_r+0x9ec>
 8004152:	3607      	adds	r6, #7
 8004154:	f026 0607 	bic.w	r6, r6, #7
 8004158:	f106 0308 	add.w	r3, r6, #8
 800415c:	930d      	str	r3, [sp, #52]	; 0x34
 800415e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8004162:	2300      	movs	r3, #0
 8004164:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8004168:	2200      	movs	r2, #0
 800416a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 800416e:	1c6a      	adds	r2, r5, #1
 8004170:	f000 815a 	beq.w	8004428 <_vfprintf_r+0xc84>
 8004174:	4652      	mov	r2, sl
 8004176:	ea56 0107 	orrs.w	r1, r6, r7
 800417a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800417e:	f040 8153 	bne.w	8004428 <_vfprintf_r+0xc84>
 8004182:	2d00      	cmp	r5, #0
 8004184:	f000 81d9 	beq.w	800453a <_vfprintf_r+0xd96>
 8004188:	2b01      	cmp	r3, #1
 800418a:	f040 8150 	bne.w	800442e <_vfprintf_r+0xc8a>
 800418e:	e550      	b.n	8003c32 <_vfprintf_r+0x48e>
 8004190:	1d33      	adds	r3, r6, #4
 8004192:	f01a 0f10 	tst.w	sl, #16
 8004196:	930d      	str	r3, [sp, #52]	; 0x34
 8004198:	d001      	beq.n	800419e <_vfprintf_r+0x9fa>
 800419a:	6836      	ldr	r6, [r6, #0]
 800419c:	e003      	b.n	80041a6 <_vfprintf_r+0xa02>
 800419e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80041a2:	d002      	beq.n	80041aa <_vfprintf_r+0xa06>
 80041a4:	8836      	ldrh	r6, [r6, #0]
 80041a6:	2700      	movs	r7, #0
 80041a8:	e7db      	b.n	8004162 <_vfprintf_r+0x9be>
 80041aa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80041ae:	d0f4      	beq.n	800419a <_vfprintf_r+0x9f6>
 80041b0:	7836      	ldrb	r6, [r6, #0]
 80041b2:	e7f8      	b.n	80041a6 <_vfprintf_r+0xa02>
 80041b4:	1d33      	adds	r3, r6, #4
 80041b6:	930d      	str	r3, [sp, #52]	; 0x34
 80041b8:	f647 0330 	movw	r3, #30768	; 0x7830
 80041bc:	2278      	movs	r2, #120	; 0x78
 80041be:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 80041c2:	4bab      	ldr	r3, [pc, #684]	; (8004470 <_vfprintf_r+0xccc>)
 80041c4:	6836      	ldr	r6, [r6, #0]
 80041c6:	931c      	str	r3, [sp, #112]	; 0x70
 80041c8:	2700      	movs	r7, #0
 80041ca:	f04a 0a02 	orr.w	sl, sl, #2
 80041ce:	2302      	movs	r3, #2
 80041d0:	920a      	str	r2, [sp, #40]	; 0x28
 80041d2:	e7c9      	b.n	8004168 <_vfprintf_r+0x9c4>
 80041d4:	1d33      	adds	r3, r6, #4
 80041d6:	930d      	str	r3, [sp, #52]	; 0x34
 80041d8:	6833      	ldr	r3, [r6, #0]
 80041da:	2600      	movs	r6, #0
 80041dc:	1c69      	adds	r1, r5, #1
 80041de:	9307      	str	r3, [sp, #28]
 80041e0:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 80041e4:	f000 80e0 	beq.w	80043a8 <_vfprintf_r+0xc04>
 80041e8:	462a      	mov	r2, r5
 80041ea:	4631      	mov	r1, r6
 80041ec:	4618      	mov	r0, r3
 80041ee:	f002 f92d 	bl	800644c <memchr>
 80041f2:	4680      	mov	r8, r0
 80041f4:	2800      	cmp	r0, #0
 80041f6:	f43f ad68 	beq.w	8003cca <_vfprintf_r+0x526>
 80041fa:	46b0      	mov	r8, r6
 80041fc:	4637      	mov	r7, r6
 80041fe:	9b07      	ldr	r3, [sp, #28]
 8004200:	9612      	str	r6, [sp, #72]	; 0x48
 8004202:	1ac5      	subs	r5, r0, r3
 8004204:	960b      	str	r6, [sp, #44]	; 0x2c
 8004206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004208:	42ab      	cmp	r3, r5
 800420a:	bfb8      	it	lt
 800420c:	462b      	movlt	r3, r5
 800420e:	9315      	str	r3, [sp, #84]	; 0x54
 8004210:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8004214:	b113      	cbz	r3, 800421c <_vfprintf_r+0xa78>
 8004216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004218:	3301      	adds	r3, #1
 800421a:	9315      	str	r3, [sp, #84]	; 0x54
 800421c:	f01a 0302 	ands.w	r3, sl, #2
 8004220:	931e      	str	r3, [sp, #120]	; 0x78
 8004222:	bf1e      	ittt	ne
 8004224:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8004226:	3302      	addne	r3, #2
 8004228:	9315      	strne	r3, [sp, #84]	; 0x54
 800422a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800422e:	931f      	str	r3, [sp, #124]	; 0x7c
 8004230:	d121      	bne.n	8004276 <_vfprintf_r+0xad2>
 8004232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004234:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	9319      	str	r3, [sp, #100]	; 0x64
 800423c:	dd1b      	ble.n	8004276 <_vfprintf_r+0xad2>
 800423e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8004242:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004244:	3201      	adds	r2, #1
 8004246:	2810      	cmp	r0, #16
 8004248:	488a      	ldr	r0, [pc, #552]	; (8004474 <_vfprintf_r+0xcd0>)
 800424a:	f104 0108 	add.w	r1, r4, #8
 800424e:	6020      	str	r0, [r4, #0]
 8004250:	f300 8190 	bgt.w	8004574 <_vfprintf_r+0xdd0>
 8004254:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004256:	2a07      	cmp	r2, #7
 8004258:	4403      	add	r3, r0
 800425a:	6060      	str	r0, [r4, #4]
 800425c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004260:	f340 819d 	ble.w	800459e <_vfprintf_r+0xdfa>
 8004264:	aa28      	add	r2, sp, #160	; 0xa0
 8004266:	4649      	mov	r1, r9
 8004268:	4658      	mov	r0, fp
 800426a:	f002 fc6e 	bl	8006b4a <__sprint_r>
 800426e:	2800      	cmp	r0, #0
 8004270:	f040 84c7 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004274:	ac2b      	add	r4, sp, #172	; 0xac
 8004276:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 800427a:	b173      	cbz	r3, 800429a <_vfprintf_r+0xaf6>
 800427c:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	2301      	movs	r3, #1
 8004284:	6063      	str	r3, [r4, #4]
 8004286:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004288:	3301      	adds	r3, #1
 800428a:	932a      	str	r3, [sp, #168]	; 0xa8
 800428c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800428e:	3301      	adds	r3, #1
 8004290:	2b07      	cmp	r3, #7
 8004292:	9329      	str	r3, [sp, #164]	; 0xa4
 8004294:	f300 8185 	bgt.w	80045a2 <_vfprintf_r+0xdfe>
 8004298:	3408      	adds	r4, #8
 800429a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800429c:	b16b      	cbz	r3, 80042ba <_vfprintf_r+0xb16>
 800429e:	ab21      	add	r3, sp, #132	; 0x84
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	2302      	movs	r3, #2
 80042a4:	6063      	str	r3, [r4, #4]
 80042a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80042a8:	3302      	adds	r3, #2
 80042aa:	932a      	str	r3, [sp, #168]	; 0xa8
 80042ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80042ae:	3301      	adds	r3, #1
 80042b0:	2b07      	cmp	r3, #7
 80042b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80042b4:	f300 817f 	bgt.w	80045b6 <_vfprintf_r+0xe12>
 80042b8:	3408      	adds	r4, #8
 80042ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80042bc:	2b80      	cmp	r3, #128	; 0x80
 80042be:	d121      	bne.n	8004304 <_vfprintf_r+0xb60>
 80042c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	9319      	str	r3, [sp, #100]	; 0x64
 80042ca:	dd1b      	ble.n	8004304 <_vfprintf_r+0xb60>
 80042cc:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80042d0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80042d2:	3201      	adds	r2, #1
 80042d4:	2810      	cmp	r0, #16
 80042d6:	4868      	ldr	r0, [pc, #416]	; (8004478 <_vfprintf_r+0xcd4>)
 80042d8:	f104 0108 	add.w	r1, r4, #8
 80042dc:	6020      	str	r0, [r4, #0]
 80042de:	f300 8174 	bgt.w	80045ca <_vfprintf_r+0xe26>
 80042e2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80042e4:	2a07      	cmp	r2, #7
 80042e6:	4403      	add	r3, r0
 80042e8:	6060      	str	r0, [r4, #4]
 80042ea:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80042ee:	f340 8181 	ble.w	80045f4 <_vfprintf_r+0xe50>
 80042f2:	aa28      	add	r2, sp, #160	; 0xa0
 80042f4:	4649      	mov	r1, r9
 80042f6:	4658      	mov	r0, fp
 80042f8:	f002 fc27 	bl	8006b4a <__sprint_r>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	f040 8480 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004302:	ac2b      	add	r4, sp, #172	; 0xac
 8004304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004306:	1b5b      	subs	r3, r3, r5
 8004308:	2b00      	cmp	r3, #0
 800430a:	9312      	str	r3, [sp, #72]	; 0x48
 800430c:	dd1b      	ble.n	8004346 <_vfprintf_r+0xba2>
 800430e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8004312:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004314:	3201      	adds	r2, #1
 8004316:	2810      	cmp	r0, #16
 8004318:	4857      	ldr	r0, [pc, #348]	; (8004478 <_vfprintf_r+0xcd4>)
 800431a:	f104 0108 	add.w	r1, r4, #8
 800431e:	6020      	str	r0, [r4, #0]
 8004320:	f300 816a 	bgt.w	80045f8 <_vfprintf_r+0xe54>
 8004324:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004326:	2a07      	cmp	r2, #7
 8004328:	4403      	add	r3, r0
 800432a:	6060      	str	r0, [r4, #4]
 800432c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004330:	f340 8177 	ble.w	8004622 <_vfprintf_r+0xe7e>
 8004334:	aa28      	add	r2, sp, #160	; 0xa0
 8004336:	4649      	mov	r1, r9
 8004338:	4658      	mov	r0, fp
 800433a:	f002 fc06 	bl	8006b4a <__sprint_r>
 800433e:	2800      	cmp	r0, #0
 8004340:	f040 845f 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004344:	ac2b      	add	r4, sp, #172	; 0xac
 8004346:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004348:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800434c:	9312      	str	r3, [sp, #72]	; 0x48
 800434e:	f040 816a 	bne.w	8004626 <_vfprintf_r+0xe82>
 8004352:	9b07      	ldr	r3, [sp, #28]
 8004354:	e9c4 3500 	strd	r3, r5, [r4]
 8004358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800435a:	441d      	add	r5, r3
 800435c:	952a      	str	r5, [sp, #168]	; 0xa8
 800435e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004360:	3301      	adds	r3, #1
 8004362:	2b07      	cmp	r3, #7
 8004364:	9329      	str	r3, [sp, #164]	; 0xa4
 8004366:	f300 81a4 	bgt.w	80046b2 <_vfprintf_r+0xf0e>
 800436a:	3408      	adds	r4, #8
 800436c:	f01a 0f04 	tst.w	sl, #4
 8004370:	f040 8429 	bne.w	8004bc6 <_vfprintf_r+0x1422>
 8004374:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8004378:	9915      	ldr	r1, [sp, #84]	; 0x54
 800437a:	428a      	cmp	r2, r1
 800437c:	bfac      	ite	ge
 800437e:	189b      	addge	r3, r3, r2
 8004380:	185b      	addlt	r3, r3, r1
 8004382:	9310      	str	r3, [sp, #64]	; 0x40
 8004384:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004386:	b13b      	cbz	r3, 8004398 <_vfprintf_r+0xbf4>
 8004388:	aa28      	add	r2, sp, #160	; 0xa0
 800438a:	4649      	mov	r1, r9
 800438c:	4658      	mov	r0, fp
 800438e:	f002 fbdc 	bl	8006b4a <__sprint_r>
 8004392:	2800      	cmp	r0, #0
 8004394:	f040 8435 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004398:	2300      	movs	r3, #0
 800439a:	9329      	str	r3, [sp, #164]	; 0xa4
 800439c:	f1b8 0f00 	cmp.w	r8, #0
 80043a0:	f040 844b 	bne.w	8004c3a <_vfprintf_r+0x1496>
 80043a4:	ac2b      	add	r4, sp, #172	; 0xac
 80043a6:	e6b8      	b.n	800411a <_vfprintf_r+0x976>
 80043a8:	9807      	ldr	r0, [sp, #28]
 80043aa:	f7fb fed1 	bl	8000150 <strlen>
 80043ae:	46b0      	mov	r8, r6
 80043b0:	4605      	mov	r5, r0
 80043b2:	e48a      	b.n	8003cca <_vfprintf_r+0x526>
 80043b4:	f04a 0a10 	orr.w	sl, sl, #16
 80043b8:	f01a 0f20 	tst.w	sl, #32
 80043bc:	d009      	beq.n	80043d2 <_vfprintf_r+0xc2e>
 80043be:	3607      	adds	r6, #7
 80043c0:	f026 0607 	bic.w	r6, r6, #7
 80043c4:	f106 0308 	add.w	r3, r6, #8
 80043c8:	930d      	str	r3, [sp, #52]	; 0x34
 80043ca:	e9d6 6700 	ldrd	r6, r7, [r6]
 80043ce:	2301      	movs	r3, #1
 80043d0:	e6ca      	b.n	8004168 <_vfprintf_r+0x9c4>
 80043d2:	1d33      	adds	r3, r6, #4
 80043d4:	f01a 0f10 	tst.w	sl, #16
 80043d8:	930d      	str	r3, [sp, #52]	; 0x34
 80043da:	d001      	beq.n	80043e0 <_vfprintf_r+0xc3c>
 80043dc:	6836      	ldr	r6, [r6, #0]
 80043de:	e003      	b.n	80043e8 <_vfprintf_r+0xc44>
 80043e0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80043e4:	d002      	beq.n	80043ec <_vfprintf_r+0xc48>
 80043e6:	8836      	ldrh	r6, [r6, #0]
 80043e8:	2700      	movs	r7, #0
 80043ea:	e7f0      	b.n	80043ce <_vfprintf_r+0xc2a>
 80043ec:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80043f0:	d0f4      	beq.n	80043dc <_vfprintf_r+0xc38>
 80043f2:	7836      	ldrb	r6, [r6, #0]
 80043f4:	e7f8      	b.n	80043e8 <_vfprintf_r+0xc44>
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <_vfprintf_r+0xccc>)
 80043f8:	f7ff bb4d 	b.w	8003a96 <_vfprintf_r+0x2f2>
 80043fc:	1d33      	adds	r3, r6, #4
 80043fe:	f01a 0f10 	tst.w	sl, #16
 8004402:	930d      	str	r3, [sp, #52]	; 0x34
 8004404:	d001      	beq.n	800440a <_vfprintf_r+0xc66>
 8004406:	6836      	ldr	r6, [r6, #0]
 8004408:	e003      	b.n	8004412 <_vfprintf_r+0xc6e>
 800440a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800440e:	d003      	beq.n	8004418 <_vfprintf_r+0xc74>
 8004410:	8836      	ldrh	r6, [r6, #0]
 8004412:	2700      	movs	r7, #0
 8004414:	f7ff bb4c 	b.w	8003ab0 <_vfprintf_r+0x30c>
 8004418:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800441c:	d0f3      	beq.n	8004406 <_vfprintf_r+0xc62>
 800441e:	7836      	ldrb	r6, [r6, #0]
 8004420:	e7f7      	b.n	8004412 <_vfprintf_r+0xc6e>
 8004422:	4652      	mov	r2, sl
 8004424:	2301      	movs	r3, #1
 8004426:	e6a6      	b.n	8004176 <_vfprintf_r+0x9d2>
 8004428:	2b01      	cmp	r3, #1
 800442a:	f43f abfd 	beq.w	8003c28 <_vfprintf_r+0x484>
 800442e:	2b02      	cmp	r3, #2
 8004430:	ab54      	add	r3, sp, #336	; 0x150
 8004432:	d06f      	beq.n	8004514 <_vfprintf_r+0xd70>
 8004434:	08f1      	lsrs	r1, r6, #3
 8004436:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	08f8      	lsrs	r0, r7, #3
 800443e:	9207      	str	r2, [sp, #28]
 8004440:	4607      	mov	r7, r0
 8004442:	f006 0207 	and.w	r2, r6, #7
 8004446:	460e      	mov	r6, r1
 8004448:	3230      	adds	r2, #48	; 0x30
 800444a:	ea56 0107 	orrs.w	r1, r6, r7
 800444e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004452:	d10b      	bne.n	800446c <_vfprintf_r+0xcc8>
 8004454:	f01a 0f01 	tst.w	sl, #1
 8004458:	d04e      	beq.n	80044f8 <_vfprintf_r+0xd54>
 800445a:	2a30      	cmp	r2, #48	; 0x30
 800445c:	d04c      	beq.n	80044f8 <_vfprintf_r+0xd54>
 800445e:	2230      	movs	r2, #48	; 0x30
 8004460:	9907      	ldr	r1, [sp, #28]
 8004462:	3b02      	subs	r3, #2
 8004464:	f801 2c01 	strb.w	r2, [r1, #-1]
 8004468:	9307      	str	r3, [sp, #28]
 800446a:	e045      	b.n	80044f8 <_vfprintf_r+0xd54>
 800446c:	9b07      	ldr	r3, [sp, #28]
 800446e:	e7e1      	b.n	8004434 <_vfprintf_r+0xc90>
 8004470:	08007748 	.word	0x08007748
 8004474:	0800776c 	.word	0x0800776c
 8004478:	0800777c 	.word	0x0800777c
 800447c:	2300      	movs	r3, #0
 800447e:	9308      	str	r3, [sp, #32]
 8004480:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8004484:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8004488:	930b      	str	r3, [sp, #44]	; 0x2c
 800448a:	f108 33ff 	add.w	r3, r8, #4294967295
 800448e:	9307      	str	r3, [sp, #28]
 8004490:	220a      	movs	r2, #10
 8004492:	2300      	movs	r3, #0
 8004494:	4630      	mov	r0, r6
 8004496:	4639      	mov	r1, r7
 8004498:	f7fc fd54 	bl	8000f44 <__aeabi_uldivmod>
 800449c:	9b08      	ldr	r3, [sp, #32]
 800449e:	3230      	adds	r2, #48	; 0x30
 80044a0:	3301      	adds	r3, #1
 80044a2:	9308      	str	r3, [sp, #32]
 80044a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044a6:	f808 2c01 	strb.w	r2, [r8, #-1]
 80044aa:	b1d3      	cbz	r3, 80044e2 <_vfprintf_r+0xd3e>
 80044ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044ae:	9a08      	ldr	r2, [sp, #32]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d115      	bne.n	80044e2 <_vfprintf_r+0xd3e>
 80044b6:	2aff      	cmp	r2, #255	; 0xff
 80044b8:	d013      	beq.n	80044e2 <_vfprintf_r+0xd3e>
 80044ba:	2f00      	cmp	r7, #0
 80044bc:	bf08      	it	eq
 80044be:	2e0a      	cmpeq	r6, #10
 80044c0:	d30f      	bcc.n	80044e2 <_vfprintf_r+0xd3e>
 80044c2:	9b07      	ldr	r3, [sp, #28]
 80044c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80044c6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	9307      	str	r3, [sp, #28]
 80044ce:	f002 fb1a 	bl	8006b06 <strncpy>
 80044d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044d4:	785b      	ldrb	r3, [r3, #1]
 80044d6:	b11b      	cbz	r3, 80044e0 <_vfprintf_r+0xd3c>
 80044d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044da:	3301      	adds	r3, #1
 80044dc:	930c      	str	r3, [sp, #48]	; 0x30
 80044de:	2300      	movs	r3, #0
 80044e0:	9308      	str	r3, [sp, #32]
 80044e2:	2300      	movs	r3, #0
 80044e4:	4630      	mov	r0, r6
 80044e6:	4639      	mov	r1, r7
 80044e8:	220a      	movs	r2, #10
 80044ea:	f7fc fd2b 	bl	8000f44 <__aeabi_uldivmod>
 80044ee:	4606      	mov	r6, r0
 80044f0:	460f      	mov	r7, r1
 80044f2:	ea56 0307 	orrs.w	r3, r6, r7
 80044f6:	d10a      	bne.n	800450e <_vfprintf_r+0xd6a>
 80044f8:	f04f 0800 	mov.w	r8, #0
 80044fc:	9a07      	ldr	r2, [sp, #28]
 80044fe:	ab54      	add	r3, sp, #336	; 0x150
 8004500:	9512      	str	r5, [sp, #72]	; 0x48
 8004502:	1a9d      	subs	r5, r3, r2
 8004504:	4647      	mov	r7, r8
 8004506:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800450a:	4646      	mov	r6, r8
 800450c:	e67b      	b.n	8004206 <_vfprintf_r+0xa62>
 800450e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004512:	e7ba      	b.n	800448a <_vfprintf_r+0xce6>
 8004514:	9307      	str	r3, [sp, #28]
 8004516:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004518:	f006 030f 	and.w	r3, r6, #15
 800451c:	5cd3      	ldrb	r3, [r2, r3]
 800451e:	9a07      	ldr	r2, [sp, #28]
 8004520:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8004524:	0933      	lsrs	r3, r6, #4
 8004526:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800452a:	9207      	str	r2, [sp, #28]
 800452c:	093a      	lsrs	r2, r7, #4
 800452e:	461e      	mov	r6, r3
 8004530:	4617      	mov	r7, r2
 8004532:	ea56 0307 	orrs.w	r3, r6, r7
 8004536:	d1ee      	bne.n	8004516 <_vfprintf_r+0xd72>
 8004538:	e7de      	b.n	80044f8 <_vfprintf_r+0xd54>
 800453a:	b94b      	cbnz	r3, 8004550 <_vfprintf_r+0xdac>
 800453c:	ab54      	add	r3, sp, #336	; 0x150
 800453e:	07d6      	lsls	r6, r2, #31
 8004540:	9307      	str	r3, [sp, #28]
 8004542:	d5d9      	bpl.n	80044f8 <_vfprintf_r+0xd54>
 8004544:	2330      	movs	r3, #48	; 0x30
 8004546:	9a07      	ldr	r2, [sp, #28]
 8004548:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800454c:	4613      	mov	r3, r2
 800454e:	e78b      	b.n	8004468 <_vfprintf_r+0xcc4>
 8004550:	ab54      	add	r3, sp, #336	; 0x150
 8004552:	e789      	b.n	8004468 <_vfprintf_r+0xcc4>
 8004554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8375 	beq.w	8004c46 <_vfprintf_r+0x14a2>
 800455c:	2000      	movs	r0, #0
 800455e:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8004562:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8004566:	960d      	str	r6, [sp, #52]	; 0x34
 8004568:	f7ff bb3b 	b.w	8003be2 <_vfprintf_r+0x43e>
 800456c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8004570:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004572:	e4ed      	b.n	8003f50 <_vfprintf_r+0x7ac>
 8004574:	2010      	movs	r0, #16
 8004576:	2a07      	cmp	r2, #7
 8004578:	4403      	add	r3, r0
 800457a:	6060      	str	r0, [r4, #4]
 800457c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004580:	dd08      	ble.n	8004594 <_vfprintf_r+0xdf0>
 8004582:	aa28      	add	r2, sp, #160	; 0xa0
 8004584:	4649      	mov	r1, r9
 8004586:	4658      	mov	r0, fp
 8004588:	f002 fadf 	bl	8006b4a <__sprint_r>
 800458c:	2800      	cmp	r0, #0
 800458e:	f040 8338 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004592:	a92b      	add	r1, sp, #172	; 0xac
 8004594:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004596:	460c      	mov	r4, r1
 8004598:	3b10      	subs	r3, #16
 800459a:	9319      	str	r3, [sp, #100]	; 0x64
 800459c:	e64f      	b.n	800423e <_vfprintf_r+0xa9a>
 800459e:	460c      	mov	r4, r1
 80045a0:	e669      	b.n	8004276 <_vfprintf_r+0xad2>
 80045a2:	aa28      	add	r2, sp, #160	; 0xa0
 80045a4:	4649      	mov	r1, r9
 80045a6:	4658      	mov	r0, fp
 80045a8:	f002 facf 	bl	8006b4a <__sprint_r>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	f040 8328 	bne.w	8004c02 <_vfprintf_r+0x145e>
 80045b2:	ac2b      	add	r4, sp, #172	; 0xac
 80045b4:	e671      	b.n	800429a <_vfprintf_r+0xaf6>
 80045b6:	aa28      	add	r2, sp, #160	; 0xa0
 80045b8:	4649      	mov	r1, r9
 80045ba:	4658      	mov	r0, fp
 80045bc:	f002 fac5 	bl	8006b4a <__sprint_r>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	f040 831e 	bne.w	8004c02 <_vfprintf_r+0x145e>
 80045c6:	ac2b      	add	r4, sp, #172	; 0xac
 80045c8:	e677      	b.n	80042ba <_vfprintf_r+0xb16>
 80045ca:	2010      	movs	r0, #16
 80045cc:	2a07      	cmp	r2, #7
 80045ce:	4403      	add	r3, r0
 80045d0:	6060      	str	r0, [r4, #4]
 80045d2:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80045d6:	dd08      	ble.n	80045ea <_vfprintf_r+0xe46>
 80045d8:	aa28      	add	r2, sp, #160	; 0xa0
 80045da:	4649      	mov	r1, r9
 80045dc:	4658      	mov	r0, fp
 80045de:	f002 fab4 	bl	8006b4a <__sprint_r>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	f040 830d 	bne.w	8004c02 <_vfprintf_r+0x145e>
 80045e8:	a92b      	add	r1, sp, #172	; 0xac
 80045ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045ec:	460c      	mov	r4, r1
 80045ee:	3b10      	subs	r3, #16
 80045f0:	9319      	str	r3, [sp, #100]	; 0x64
 80045f2:	e66b      	b.n	80042cc <_vfprintf_r+0xb28>
 80045f4:	460c      	mov	r4, r1
 80045f6:	e685      	b.n	8004304 <_vfprintf_r+0xb60>
 80045f8:	2010      	movs	r0, #16
 80045fa:	2a07      	cmp	r2, #7
 80045fc:	4403      	add	r3, r0
 80045fe:	6060      	str	r0, [r4, #4]
 8004600:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004604:	dd08      	ble.n	8004618 <_vfprintf_r+0xe74>
 8004606:	aa28      	add	r2, sp, #160	; 0xa0
 8004608:	4649      	mov	r1, r9
 800460a:	4658      	mov	r0, fp
 800460c:	f002 fa9d 	bl	8006b4a <__sprint_r>
 8004610:	2800      	cmp	r0, #0
 8004612:	f040 82f6 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004616:	a92b      	add	r1, sp, #172	; 0xac
 8004618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800461a:	460c      	mov	r4, r1
 800461c:	3b10      	subs	r3, #16
 800461e:	9312      	str	r3, [sp, #72]	; 0x48
 8004620:	e675      	b.n	800430e <_vfprintf_r+0xb6a>
 8004622:	460c      	mov	r4, r1
 8004624:	e68f      	b.n	8004346 <_vfprintf_r+0xba2>
 8004626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004628:	2b65      	cmp	r3, #101	; 0x65
 800462a:	f340 8237 	ble.w	8004a9c <_vfprintf_r+0x12f8>
 800462e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8004632:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8004636:	f7fc f9b7 	bl	80009a8 <__aeabi_dcmpeq>
 800463a:	2800      	cmp	r0, #0
 800463c:	d069      	beq.n	8004712 <_vfprintf_r+0xf6e>
 800463e:	4b6f      	ldr	r3, [pc, #444]	; (80047fc <_vfprintf_r+0x1058>)
 8004640:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004642:	6023      	str	r3, [r4, #0]
 8004644:	2301      	movs	r3, #1
 8004646:	441d      	add	r5, r3
 8004648:	6063      	str	r3, [r4, #4]
 800464a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800464c:	952a      	str	r5, [sp, #168]	; 0xa8
 800464e:	3301      	adds	r3, #1
 8004650:	2b07      	cmp	r3, #7
 8004652:	9329      	str	r3, [sp, #164]	; 0xa4
 8004654:	dc37      	bgt.n	80046c6 <_vfprintf_r+0xf22>
 8004656:	3408      	adds	r4, #8
 8004658:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800465a:	9a08      	ldr	r2, [sp, #32]
 800465c:	4293      	cmp	r3, r2
 800465e:	db03      	blt.n	8004668 <_vfprintf_r+0xec4>
 8004660:	f01a 0f01 	tst.w	sl, #1
 8004664:	f43f ae82 	beq.w	800436c <_vfprintf_r+0xbc8>
 8004668:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800466a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004670:	6063      	str	r3, [r4, #4]
 8004672:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004674:	4413      	add	r3, r2
 8004676:	932a      	str	r3, [sp, #168]	; 0xa8
 8004678:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800467a:	3301      	adds	r3, #1
 800467c:	2b07      	cmp	r3, #7
 800467e:	9329      	str	r3, [sp, #164]	; 0xa4
 8004680:	dc2b      	bgt.n	80046da <_vfprintf_r+0xf36>
 8004682:	3408      	adds	r4, #8
 8004684:	9b08      	ldr	r3, [sp, #32]
 8004686:	1e5d      	subs	r5, r3, #1
 8004688:	2d00      	cmp	r5, #0
 800468a:	f77f ae6f 	ble.w	800436c <_vfprintf_r+0xbc8>
 800468e:	2710      	movs	r7, #16
 8004690:	4e5b      	ldr	r6, [pc, #364]	; (8004800 <_vfprintf_r+0x105c>)
 8004692:	2d10      	cmp	r5, #16
 8004694:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8004698:	f104 0108 	add.w	r1, r4, #8
 800469c:	f103 0301 	add.w	r3, r3, #1
 80046a0:	6026      	str	r6, [r4, #0]
 80046a2:	dc24      	bgt.n	80046ee <_vfprintf_r+0xf4a>
 80046a4:	6065      	str	r5, [r4, #4]
 80046a6:	2b07      	cmp	r3, #7
 80046a8:	4415      	add	r5, r2
 80046aa:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80046ae:	f340 8287 	ble.w	8004bc0 <_vfprintf_r+0x141c>
 80046b2:	aa28      	add	r2, sp, #160	; 0xa0
 80046b4:	4649      	mov	r1, r9
 80046b6:	4658      	mov	r0, fp
 80046b8:	f002 fa47 	bl	8006b4a <__sprint_r>
 80046bc:	2800      	cmp	r0, #0
 80046be:	f040 82a0 	bne.w	8004c02 <_vfprintf_r+0x145e>
 80046c2:	ac2b      	add	r4, sp, #172	; 0xac
 80046c4:	e652      	b.n	800436c <_vfprintf_r+0xbc8>
 80046c6:	aa28      	add	r2, sp, #160	; 0xa0
 80046c8:	4649      	mov	r1, r9
 80046ca:	4658      	mov	r0, fp
 80046cc:	f002 fa3d 	bl	8006b4a <__sprint_r>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	f040 8296 	bne.w	8004c02 <_vfprintf_r+0x145e>
 80046d6:	ac2b      	add	r4, sp, #172	; 0xac
 80046d8:	e7be      	b.n	8004658 <_vfprintf_r+0xeb4>
 80046da:	aa28      	add	r2, sp, #160	; 0xa0
 80046dc:	4649      	mov	r1, r9
 80046de:	4658      	mov	r0, fp
 80046e0:	f002 fa33 	bl	8006b4a <__sprint_r>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	f040 828c 	bne.w	8004c02 <_vfprintf_r+0x145e>
 80046ea:	ac2b      	add	r4, sp, #172	; 0xac
 80046ec:	e7ca      	b.n	8004684 <_vfprintf_r+0xee0>
 80046ee:	3210      	adds	r2, #16
 80046f0:	2b07      	cmp	r3, #7
 80046f2:	6067      	str	r7, [r4, #4]
 80046f4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80046f8:	dd08      	ble.n	800470c <_vfprintf_r+0xf68>
 80046fa:	aa28      	add	r2, sp, #160	; 0xa0
 80046fc:	4649      	mov	r1, r9
 80046fe:	4658      	mov	r0, fp
 8004700:	f002 fa23 	bl	8006b4a <__sprint_r>
 8004704:	2800      	cmp	r0, #0
 8004706:	f040 827c 	bne.w	8004c02 <_vfprintf_r+0x145e>
 800470a:	a92b      	add	r1, sp, #172	; 0xac
 800470c:	3d10      	subs	r5, #16
 800470e:	460c      	mov	r4, r1
 8004710:	e7bf      	b.n	8004692 <_vfprintf_r+0xeee>
 8004712:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004714:	2b00      	cmp	r3, #0
 8004716:	dc75      	bgt.n	8004804 <_vfprintf_r+0x1060>
 8004718:	4b38      	ldr	r3, [pc, #224]	; (80047fc <_vfprintf_r+0x1058>)
 800471a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	2301      	movs	r3, #1
 8004720:	441d      	add	r5, r3
 8004722:	6063      	str	r3, [r4, #4]
 8004724:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004726:	952a      	str	r5, [sp, #168]	; 0xa8
 8004728:	3301      	adds	r3, #1
 800472a:	2b07      	cmp	r3, #7
 800472c:	9329      	str	r3, [sp, #164]	; 0xa4
 800472e:	dc3e      	bgt.n	80047ae <_vfprintf_r+0x100a>
 8004730:	3408      	adds	r4, #8
 8004732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004734:	b92b      	cbnz	r3, 8004742 <_vfprintf_r+0xf9e>
 8004736:	9b08      	ldr	r3, [sp, #32]
 8004738:	b91b      	cbnz	r3, 8004742 <_vfprintf_r+0xf9e>
 800473a:	f01a 0f01 	tst.w	sl, #1
 800473e:	f43f ae15 	beq.w	800436c <_vfprintf_r+0xbc8>
 8004742:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004744:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800474a:	6063      	str	r3, [r4, #4]
 800474c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800474e:	4413      	add	r3, r2
 8004750:	932a      	str	r3, [sp, #168]	; 0xa8
 8004752:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004754:	3301      	adds	r3, #1
 8004756:	2b07      	cmp	r3, #7
 8004758:	9329      	str	r3, [sp, #164]	; 0xa4
 800475a:	dc32      	bgt.n	80047c2 <_vfprintf_r+0x101e>
 800475c:	3408      	adds	r4, #8
 800475e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8004760:	2d00      	cmp	r5, #0
 8004762:	da1b      	bge.n	800479c <_vfprintf_r+0xff8>
 8004764:	4623      	mov	r3, r4
 8004766:	2710      	movs	r7, #16
 8004768:	4e25      	ldr	r6, [pc, #148]	; (8004800 <_vfprintf_r+0x105c>)
 800476a:	426d      	negs	r5, r5
 800476c:	2d10      	cmp	r5, #16
 800476e:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8004772:	f104 0408 	add.w	r4, r4, #8
 8004776:	f102 0201 	add.w	r2, r2, #1
 800477a:	601e      	str	r6, [r3, #0]
 800477c:	dc2b      	bgt.n	80047d6 <_vfprintf_r+0x1032>
 800477e:	605d      	str	r5, [r3, #4]
 8004780:	2a07      	cmp	r2, #7
 8004782:	440d      	add	r5, r1
 8004784:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 8004788:	dd08      	ble.n	800479c <_vfprintf_r+0xff8>
 800478a:	aa28      	add	r2, sp, #160	; 0xa0
 800478c:	4649      	mov	r1, r9
 800478e:	4658      	mov	r0, fp
 8004790:	f002 f9db 	bl	8006b4a <__sprint_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	f040 8234 	bne.w	8004c02 <_vfprintf_r+0x145e>
 800479a:	ac2b      	add	r4, sp, #172	; 0xac
 800479c:	9b07      	ldr	r3, [sp, #28]
 800479e:	9a08      	ldr	r2, [sp, #32]
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	9b08      	ldr	r3, [sp, #32]
 80047a4:	6063      	str	r3, [r4, #4]
 80047a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80047a8:	4413      	add	r3, r2
 80047aa:	932a      	str	r3, [sp, #168]	; 0xa8
 80047ac:	e5d7      	b.n	800435e <_vfprintf_r+0xbba>
 80047ae:	aa28      	add	r2, sp, #160	; 0xa0
 80047b0:	4649      	mov	r1, r9
 80047b2:	4658      	mov	r0, fp
 80047b4:	f002 f9c9 	bl	8006b4a <__sprint_r>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	f040 8222 	bne.w	8004c02 <_vfprintf_r+0x145e>
 80047be:	ac2b      	add	r4, sp, #172	; 0xac
 80047c0:	e7b7      	b.n	8004732 <_vfprintf_r+0xf8e>
 80047c2:	aa28      	add	r2, sp, #160	; 0xa0
 80047c4:	4649      	mov	r1, r9
 80047c6:	4658      	mov	r0, fp
 80047c8:	f002 f9bf 	bl	8006b4a <__sprint_r>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	f040 8218 	bne.w	8004c02 <_vfprintf_r+0x145e>
 80047d2:	ac2b      	add	r4, sp, #172	; 0xac
 80047d4:	e7c3      	b.n	800475e <_vfprintf_r+0xfba>
 80047d6:	3110      	adds	r1, #16
 80047d8:	2a07      	cmp	r2, #7
 80047da:	605f      	str	r7, [r3, #4]
 80047dc:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 80047e0:	dd08      	ble.n	80047f4 <_vfprintf_r+0x1050>
 80047e2:	aa28      	add	r2, sp, #160	; 0xa0
 80047e4:	4649      	mov	r1, r9
 80047e6:	4658      	mov	r0, fp
 80047e8:	f002 f9af 	bl	8006b4a <__sprint_r>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	f040 8208 	bne.w	8004c02 <_vfprintf_r+0x145e>
 80047f2:	ac2b      	add	r4, sp, #172	; 0xac
 80047f4:	3d10      	subs	r5, #16
 80047f6:	4623      	mov	r3, r4
 80047f8:	e7b8      	b.n	800476c <_vfprintf_r+0xfc8>
 80047fa:	bf00      	nop
 80047fc:	0800776a 	.word	0x0800776a
 8004800:	0800777c 	.word	0x0800777c
 8004804:	9b08      	ldr	r3, [sp, #32]
 8004806:	42b3      	cmp	r3, r6
 8004808:	bfa8      	it	ge
 800480a:	4633      	movge	r3, r6
 800480c:	2b00      	cmp	r3, #0
 800480e:	461d      	mov	r5, r3
 8004810:	dd0c      	ble.n	800482c <_vfprintf_r+0x1088>
 8004812:	9b07      	ldr	r3, [sp, #28]
 8004814:	e9c4 3500 	strd	r3, r5, [r4]
 8004818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800481a:	442b      	add	r3, r5
 800481c:	932a      	str	r3, [sp, #168]	; 0xa8
 800481e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004820:	3301      	adds	r3, #1
 8004822:	2b07      	cmp	r3, #7
 8004824:	9329      	str	r3, [sp, #164]	; 0xa4
 8004826:	f300 8087 	bgt.w	8004938 <_vfprintf_r+0x1194>
 800482a:	3408      	adds	r4, #8
 800482c:	2d00      	cmp	r5, #0
 800482e:	bfb4      	ite	lt
 8004830:	4635      	movlt	r5, r6
 8004832:	1b75      	subge	r5, r6, r5
 8004834:	2d00      	cmp	r5, #0
 8004836:	dd19      	ble.n	800486c <_vfprintf_r+0x10c8>
 8004838:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800483c:	4896      	ldr	r0, [pc, #600]	; (8004a98 <_vfprintf_r+0x12f4>)
 800483e:	2d10      	cmp	r5, #16
 8004840:	f103 0301 	add.w	r3, r3, #1
 8004844:	f104 0108 	add.w	r1, r4, #8
 8004848:	6020      	str	r0, [r4, #0]
 800484a:	dc7f      	bgt.n	800494c <_vfprintf_r+0x11a8>
 800484c:	6065      	str	r5, [r4, #4]
 800484e:	2b07      	cmp	r3, #7
 8004850:	4415      	add	r5, r2
 8004852:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8004856:	f340 808c 	ble.w	8004972 <_vfprintf_r+0x11ce>
 800485a:	aa28      	add	r2, sp, #160	; 0xa0
 800485c:	4649      	mov	r1, r9
 800485e:	4658      	mov	r0, fp
 8004860:	f002 f973 	bl	8006b4a <__sprint_r>
 8004864:	2800      	cmp	r0, #0
 8004866:	f040 81cc 	bne.w	8004c02 <_vfprintf_r+0x145e>
 800486a:	ac2b      	add	r4, sp, #172	; 0xac
 800486c:	9b07      	ldr	r3, [sp, #28]
 800486e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004872:	441e      	add	r6, r3
 8004874:	d00a      	beq.n	800488c <_vfprintf_r+0x10e8>
 8004876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d17c      	bne.n	8004976 <_vfprintf_r+0x11d2>
 800487c:	2f00      	cmp	r7, #0
 800487e:	d17c      	bne.n	800497a <_vfprintf_r+0x11d6>
 8004880:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004884:	4413      	add	r3, r2
 8004886:	429e      	cmp	r6, r3
 8004888:	bf28      	it	cs
 800488a:	461e      	movcs	r6, r3
 800488c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800488e:	9a08      	ldr	r2, [sp, #32]
 8004890:	4293      	cmp	r3, r2
 8004892:	db02      	blt.n	800489a <_vfprintf_r+0x10f6>
 8004894:	f01a 0f01 	tst.w	sl, #1
 8004898:	d00e      	beq.n	80048b8 <_vfprintf_r+0x1114>
 800489a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800489c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048a2:	6063      	str	r3, [r4, #4]
 80048a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80048a6:	4413      	add	r3, r2
 80048a8:	932a      	str	r3, [sp, #168]	; 0xa8
 80048aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80048ac:	3301      	adds	r3, #1
 80048ae:	2b07      	cmp	r3, #7
 80048b0:	9329      	str	r3, [sp, #164]	; 0xa4
 80048b2:	f300 80dd 	bgt.w	8004a70 <_vfprintf_r+0x12cc>
 80048b6:	3408      	adds	r4, #8
 80048b8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80048ba:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	1b55      	subs	r5, r2, r5
 80048c2:	1b9b      	subs	r3, r3, r6
 80048c4:	429d      	cmp	r5, r3
 80048c6:	bfa8      	it	ge
 80048c8:	461d      	movge	r5, r3
 80048ca:	2d00      	cmp	r5, #0
 80048cc:	dd0b      	ble.n	80048e6 <_vfprintf_r+0x1142>
 80048ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80048d0:	e9c4 6500 	strd	r6, r5, [r4]
 80048d4:	442b      	add	r3, r5
 80048d6:	932a      	str	r3, [sp, #168]	; 0xa8
 80048d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80048da:	3301      	adds	r3, #1
 80048dc:	2b07      	cmp	r3, #7
 80048de:	9329      	str	r3, [sp, #164]	; 0xa4
 80048e0:	f300 80d0 	bgt.w	8004a84 <_vfprintf_r+0x12e0>
 80048e4:	3408      	adds	r4, #8
 80048e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048e8:	9a08      	ldr	r2, [sp, #32]
 80048ea:	2d00      	cmp	r5, #0
 80048ec:	eba2 0303 	sub.w	r3, r2, r3
 80048f0:	bfb4      	ite	lt
 80048f2:	461d      	movlt	r5, r3
 80048f4:	1b5d      	subge	r5, r3, r5
 80048f6:	2d00      	cmp	r5, #0
 80048f8:	f77f ad38 	ble.w	800436c <_vfprintf_r+0xbc8>
 80048fc:	2710      	movs	r7, #16
 80048fe:	4e66      	ldr	r6, [pc, #408]	; (8004a98 <_vfprintf_r+0x12f4>)
 8004900:	2d10      	cmp	r5, #16
 8004902:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8004906:	f104 0108 	add.w	r1, r4, #8
 800490a:	f103 0301 	add.w	r3, r3, #1
 800490e:	6026      	str	r6, [r4, #0]
 8004910:	f77f aec8 	ble.w	80046a4 <_vfprintf_r+0xf00>
 8004914:	3210      	adds	r2, #16
 8004916:	2b07      	cmp	r3, #7
 8004918:	6067      	str	r7, [r4, #4]
 800491a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800491e:	dd08      	ble.n	8004932 <_vfprintf_r+0x118e>
 8004920:	aa28      	add	r2, sp, #160	; 0xa0
 8004922:	4649      	mov	r1, r9
 8004924:	4658      	mov	r0, fp
 8004926:	f002 f910 	bl	8006b4a <__sprint_r>
 800492a:	2800      	cmp	r0, #0
 800492c:	f040 8169 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004930:	a92b      	add	r1, sp, #172	; 0xac
 8004932:	3d10      	subs	r5, #16
 8004934:	460c      	mov	r4, r1
 8004936:	e7e3      	b.n	8004900 <_vfprintf_r+0x115c>
 8004938:	aa28      	add	r2, sp, #160	; 0xa0
 800493a:	4649      	mov	r1, r9
 800493c:	4658      	mov	r0, fp
 800493e:	f002 f904 	bl	8006b4a <__sprint_r>
 8004942:	2800      	cmp	r0, #0
 8004944:	f040 815d 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004948:	ac2b      	add	r4, sp, #172	; 0xac
 800494a:	e76f      	b.n	800482c <_vfprintf_r+0x1088>
 800494c:	2010      	movs	r0, #16
 800494e:	2b07      	cmp	r3, #7
 8004950:	4402      	add	r2, r0
 8004952:	6060      	str	r0, [r4, #4]
 8004954:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8004958:	dd08      	ble.n	800496c <_vfprintf_r+0x11c8>
 800495a:	aa28      	add	r2, sp, #160	; 0xa0
 800495c:	4649      	mov	r1, r9
 800495e:	4658      	mov	r0, fp
 8004960:	f002 f8f3 	bl	8006b4a <__sprint_r>
 8004964:	2800      	cmp	r0, #0
 8004966:	f040 814c 	bne.w	8004c02 <_vfprintf_r+0x145e>
 800496a:	a92b      	add	r1, sp, #172	; 0xac
 800496c:	3d10      	subs	r5, #16
 800496e:	460c      	mov	r4, r1
 8004970:	e762      	b.n	8004838 <_vfprintf_r+0x1094>
 8004972:	460c      	mov	r4, r1
 8004974:	e77a      	b.n	800486c <_vfprintf_r+0x10c8>
 8004976:	2f00      	cmp	r7, #0
 8004978:	d04a      	beq.n	8004a10 <_vfprintf_r+0x126c>
 800497a:	3f01      	subs	r7, #1
 800497c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800497e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004984:	6063      	str	r3, [r4, #4]
 8004986:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004988:	4413      	add	r3, r2
 800498a:	932a      	str	r3, [sp, #168]	; 0xa8
 800498c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800498e:	3301      	adds	r3, #1
 8004990:	2b07      	cmp	r3, #7
 8004992:	9329      	str	r3, [sp, #164]	; 0xa4
 8004994:	dc43      	bgt.n	8004a1e <_vfprintf_r+0x127a>
 8004996:	3408      	adds	r4, #8
 8004998:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800499c:	4413      	add	r3, r2
 800499e:	1b9a      	subs	r2, r3, r6
 80049a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	4293      	cmp	r3, r2
 80049a6:	bfa8      	it	ge
 80049a8:	4613      	movge	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	461d      	mov	r5, r3
 80049ae:	dd0a      	ble.n	80049c6 <_vfprintf_r+0x1222>
 80049b0:	e9c4 6300 	strd	r6, r3, [r4]
 80049b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80049b6:	442b      	add	r3, r5
 80049b8:	932a      	str	r3, [sp, #168]	; 0xa8
 80049ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80049bc:	3301      	adds	r3, #1
 80049be:	2b07      	cmp	r3, #7
 80049c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80049c2:	dc36      	bgt.n	8004a32 <_vfprintf_r+0x128e>
 80049c4:	3408      	adds	r4, #8
 80049c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049c8:	2d00      	cmp	r5, #0
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	bfb4      	ite	lt
 80049ce:	461d      	movlt	r5, r3
 80049d0:	1b5d      	subge	r5, r3, r5
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	dd18      	ble.n	8004a08 <_vfprintf_r+0x1264>
 80049d6:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80049da:	482f      	ldr	r0, [pc, #188]	; (8004a98 <_vfprintf_r+0x12f4>)
 80049dc:	2d10      	cmp	r5, #16
 80049de:	f102 0201 	add.w	r2, r2, #1
 80049e2:	f104 0108 	add.w	r1, r4, #8
 80049e6:	6020      	str	r0, [r4, #0]
 80049e8:	dc2d      	bgt.n	8004a46 <_vfprintf_r+0x12a2>
 80049ea:	442b      	add	r3, r5
 80049ec:	2a07      	cmp	r2, #7
 80049ee:	6065      	str	r5, [r4, #4]
 80049f0:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80049f4:	dd3a      	ble.n	8004a6c <_vfprintf_r+0x12c8>
 80049f6:	aa28      	add	r2, sp, #160	; 0xa0
 80049f8:	4649      	mov	r1, r9
 80049fa:	4658      	mov	r0, fp
 80049fc:	f002 f8a5 	bl	8006b4a <__sprint_r>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	f040 80fe 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004a06:	ac2b      	add	r4, sp, #172	; 0xac
 8004a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	441e      	add	r6, r3
 8004a0e:	e732      	b.n	8004876 <_vfprintf_r+0x10d2>
 8004a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a12:	3b01      	subs	r3, #1
 8004a14:	930c      	str	r3, [sp, #48]	; 0x30
 8004a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a1c:	e7ae      	b.n	800497c <_vfprintf_r+0x11d8>
 8004a1e:	aa28      	add	r2, sp, #160	; 0xa0
 8004a20:	4649      	mov	r1, r9
 8004a22:	4658      	mov	r0, fp
 8004a24:	f002 f891 	bl	8006b4a <__sprint_r>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	f040 80ea 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004a2e:	ac2b      	add	r4, sp, #172	; 0xac
 8004a30:	e7b2      	b.n	8004998 <_vfprintf_r+0x11f4>
 8004a32:	aa28      	add	r2, sp, #160	; 0xa0
 8004a34:	4649      	mov	r1, r9
 8004a36:	4658      	mov	r0, fp
 8004a38:	f002 f887 	bl	8006b4a <__sprint_r>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	f040 80e0 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004a42:	ac2b      	add	r4, sp, #172	; 0xac
 8004a44:	e7bf      	b.n	80049c6 <_vfprintf_r+0x1222>
 8004a46:	2010      	movs	r0, #16
 8004a48:	2a07      	cmp	r2, #7
 8004a4a:	4403      	add	r3, r0
 8004a4c:	6060      	str	r0, [r4, #4]
 8004a4e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004a52:	dd08      	ble.n	8004a66 <_vfprintf_r+0x12c2>
 8004a54:	aa28      	add	r2, sp, #160	; 0xa0
 8004a56:	4649      	mov	r1, r9
 8004a58:	4658      	mov	r0, fp
 8004a5a:	f002 f876 	bl	8006b4a <__sprint_r>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	f040 80cf 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004a64:	a92b      	add	r1, sp, #172	; 0xac
 8004a66:	3d10      	subs	r5, #16
 8004a68:	460c      	mov	r4, r1
 8004a6a:	e7b4      	b.n	80049d6 <_vfprintf_r+0x1232>
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	e7cb      	b.n	8004a08 <_vfprintf_r+0x1264>
 8004a70:	aa28      	add	r2, sp, #160	; 0xa0
 8004a72:	4649      	mov	r1, r9
 8004a74:	4658      	mov	r0, fp
 8004a76:	f002 f868 	bl	8006b4a <__sprint_r>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	f040 80c1 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004a80:	ac2b      	add	r4, sp, #172	; 0xac
 8004a82:	e719      	b.n	80048b8 <_vfprintf_r+0x1114>
 8004a84:	aa28      	add	r2, sp, #160	; 0xa0
 8004a86:	4649      	mov	r1, r9
 8004a88:	4658      	mov	r0, fp
 8004a8a:	f002 f85e 	bl	8006b4a <__sprint_r>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	f040 80b7 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004a94:	ac2b      	add	r4, sp, #172	; 0xac
 8004a96:	e726      	b.n	80048e6 <_vfprintf_r+0x1142>
 8004a98:	0800777c 	.word	0x0800777c
 8004a9c:	9a08      	ldr	r2, [sp, #32]
 8004a9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004aa0:	2a01      	cmp	r2, #1
 8004aa2:	9a07      	ldr	r2, [sp, #28]
 8004aa4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004aa6:	6022      	str	r2, [r4, #0]
 8004aa8:	f04f 0201 	mov.w	r2, #1
 8004aac:	f105 0501 	add.w	r5, r5, #1
 8004ab0:	f103 0301 	add.w	r3, r3, #1
 8004ab4:	f104 0608 	add.w	r6, r4, #8
 8004ab8:	6062      	str	r2, [r4, #4]
 8004aba:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8004abe:	dc02      	bgt.n	8004ac6 <_vfprintf_r+0x1322>
 8004ac0:	f01a 0f01 	tst.w	sl, #1
 8004ac4:	d077      	beq.n	8004bb6 <_vfprintf_r+0x1412>
 8004ac6:	2b07      	cmp	r3, #7
 8004ac8:	dd08      	ble.n	8004adc <_vfprintf_r+0x1338>
 8004aca:	aa28      	add	r2, sp, #160	; 0xa0
 8004acc:	4649      	mov	r1, r9
 8004ace:	4658      	mov	r0, fp
 8004ad0:	f002 f83b 	bl	8006b4a <__sprint_r>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	f040 8094 	bne.w	8004c02 <_vfprintf_r+0x145e>
 8004ada:	ae2b      	add	r6, sp, #172	; 0xac
 8004adc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004ade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ae4:	6073      	str	r3, [r6, #4]
 8004ae6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004ae8:	4413      	add	r3, r2
 8004aea:	932a      	str	r3, [sp, #168]	; 0xa8
 8004aec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004aee:	3301      	adds	r3, #1
 8004af0:	2b07      	cmp	r3, #7
 8004af2:	9329      	str	r3, [sp, #164]	; 0xa4
 8004af4:	dc31      	bgt.n	8004b5a <_vfprintf_r+0x13b6>
 8004af6:	3608      	adds	r6, #8
 8004af8:	9b08      	ldr	r3, [sp, #32]
 8004afa:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8004afe:	1e5c      	subs	r4, r3, #1
 8004b00:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8004b04:	f7fb ff50 	bl	80009a8 <__aeabi_dcmpeq>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d12f      	bne.n	8004b6c <_vfprintf_r+0x13c8>
 8004b0c:	9b07      	ldr	r3, [sp, #28]
 8004b0e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004b10:	3301      	adds	r3, #1
 8004b12:	e9c6 3400 	strd	r3, r4, [r6]
 8004b16:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004b18:	9908      	ldr	r1, [sp, #32]
 8004b1a:	3201      	adds	r2, #1
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	440b      	add	r3, r1
 8004b20:	2a07      	cmp	r2, #7
 8004b22:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8004b26:	dd49      	ble.n	8004bbc <_vfprintf_r+0x1418>
 8004b28:	aa28      	add	r2, sp, #160	; 0xa0
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4658      	mov	r0, fp
 8004b2e:	f002 f80c 	bl	8006b4a <__sprint_r>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d165      	bne.n	8004c02 <_vfprintf_r+0x145e>
 8004b36:	ae2b      	add	r6, sp, #172	; 0xac
 8004b38:	ab24      	add	r3, sp, #144	; 0x90
 8004b3a:	6033      	str	r3, [r6, #0]
 8004b3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004b40:	6073      	str	r3, [r6, #4]
 8004b42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004b44:	4413      	add	r3, r2
 8004b46:	932a      	str	r3, [sp, #168]	; 0xa8
 8004b48:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	2b07      	cmp	r3, #7
 8004b4e:	9329      	str	r3, [sp, #164]	; 0xa4
 8004b50:	f73f adaf 	bgt.w	80046b2 <_vfprintf_r+0xf0e>
 8004b54:	f106 0408 	add.w	r4, r6, #8
 8004b58:	e408      	b.n	800436c <_vfprintf_r+0xbc8>
 8004b5a:	aa28      	add	r2, sp, #160	; 0xa0
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	4658      	mov	r0, fp
 8004b60:	f001 fff3 	bl	8006b4a <__sprint_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d14c      	bne.n	8004c02 <_vfprintf_r+0x145e>
 8004b68:	ae2b      	add	r6, sp, #172	; 0xac
 8004b6a:	e7c5      	b.n	8004af8 <_vfprintf_r+0x1354>
 8004b6c:	2c00      	cmp	r4, #0
 8004b6e:	dde3      	ble.n	8004b38 <_vfprintf_r+0x1394>
 8004b70:	2710      	movs	r7, #16
 8004b72:	4d3c      	ldr	r5, [pc, #240]	; (8004c64 <_vfprintf_r+0x14c0>)
 8004b74:	2c10      	cmp	r4, #16
 8004b76:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8004b7a:	f106 0108 	add.w	r1, r6, #8
 8004b7e:	f103 0301 	add.w	r3, r3, #1
 8004b82:	6035      	str	r5, [r6, #0]
 8004b84:	dc07      	bgt.n	8004b96 <_vfprintf_r+0x13f2>
 8004b86:	6074      	str	r4, [r6, #4]
 8004b88:	2b07      	cmp	r3, #7
 8004b8a:	4414      	add	r4, r2
 8004b8c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8004b90:	dcca      	bgt.n	8004b28 <_vfprintf_r+0x1384>
 8004b92:	460e      	mov	r6, r1
 8004b94:	e7d0      	b.n	8004b38 <_vfprintf_r+0x1394>
 8004b96:	3210      	adds	r2, #16
 8004b98:	2b07      	cmp	r3, #7
 8004b9a:	6077      	str	r7, [r6, #4]
 8004b9c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8004ba0:	dd06      	ble.n	8004bb0 <_vfprintf_r+0x140c>
 8004ba2:	aa28      	add	r2, sp, #160	; 0xa0
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	4658      	mov	r0, fp
 8004ba8:	f001 ffcf 	bl	8006b4a <__sprint_r>
 8004bac:	bb48      	cbnz	r0, 8004c02 <_vfprintf_r+0x145e>
 8004bae:	a92b      	add	r1, sp, #172	; 0xac
 8004bb0:	3c10      	subs	r4, #16
 8004bb2:	460e      	mov	r6, r1
 8004bb4:	e7de      	b.n	8004b74 <_vfprintf_r+0x13d0>
 8004bb6:	2b07      	cmp	r3, #7
 8004bb8:	ddbe      	ble.n	8004b38 <_vfprintf_r+0x1394>
 8004bba:	e7b5      	b.n	8004b28 <_vfprintf_r+0x1384>
 8004bbc:	3608      	adds	r6, #8
 8004bbe:	e7bb      	b.n	8004b38 <_vfprintf_r+0x1394>
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	f7ff bbd3 	b.w	800436c <_vfprintf_r+0xbc8>
 8004bc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004bca:	1a9d      	subs	r5, r3, r2
 8004bcc:	2d00      	cmp	r5, #0
 8004bce:	f77f abd1 	ble.w	8004374 <_vfprintf_r+0xbd0>
 8004bd2:	2710      	movs	r7, #16
 8004bd4:	4e24      	ldr	r6, [pc, #144]	; (8004c68 <_vfprintf_r+0x14c4>)
 8004bd6:	2d10      	cmp	r5, #16
 8004bd8:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8004bdc:	6026      	str	r6, [r4, #0]
 8004bde:	f103 0301 	add.w	r3, r3, #1
 8004be2:	dc18      	bgt.n	8004c16 <_vfprintf_r+0x1472>
 8004be4:	6065      	str	r5, [r4, #4]
 8004be6:	2b07      	cmp	r3, #7
 8004be8:	4415      	add	r5, r2
 8004bea:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8004bee:	f77f abc1 	ble.w	8004374 <_vfprintf_r+0xbd0>
 8004bf2:	aa28      	add	r2, sp, #160	; 0xa0
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	4658      	mov	r0, fp
 8004bf8:	f001 ffa7 	bl	8006b4a <__sprint_r>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	f43f abb9 	beq.w	8004374 <_vfprintf_r+0xbd0>
 8004c02:	f1b8 0f00 	cmp.w	r8, #0
 8004c06:	f43f a898 	beq.w	8003d3a <_vfprintf_r+0x596>
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	4658      	mov	r0, fp
 8004c0e:	f001 f88f 	bl	8005d30 <_free_r>
 8004c12:	f7ff b892 	b.w	8003d3a <_vfprintf_r+0x596>
 8004c16:	3210      	adds	r2, #16
 8004c18:	2b07      	cmp	r3, #7
 8004c1a:	6067      	str	r7, [r4, #4]
 8004c1c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8004c20:	dc02      	bgt.n	8004c28 <_vfprintf_r+0x1484>
 8004c22:	3408      	adds	r4, #8
 8004c24:	3d10      	subs	r5, #16
 8004c26:	e7d6      	b.n	8004bd6 <_vfprintf_r+0x1432>
 8004c28:	aa28      	add	r2, sp, #160	; 0xa0
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	4658      	mov	r0, fp
 8004c2e:	f001 ff8c 	bl	8006b4a <__sprint_r>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d1e5      	bne.n	8004c02 <_vfprintf_r+0x145e>
 8004c36:	ac2b      	add	r4, sp, #172	; 0xac
 8004c38:	e7f4      	b.n	8004c24 <_vfprintf_r+0x1480>
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	4658      	mov	r0, fp
 8004c3e:	f001 f877 	bl	8005d30 <_free_r>
 8004c42:	f7ff bbaf 	b.w	80043a4 <_vfprintf_r+0xc00>
 8004c46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004c48:	b91b      	cbnz	r3, 8004c52 <_vfprintf_r+0x14ae>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9329      	str	r3, [sp, #164]	; 0xa4
 8004c4e:	f7ff b874 	b.w	8003d3a <_vfprintf_r+0x596>
 8004c52:	aa28      	add	r2, sp, #160	; 0xa0
 8004c54:	4649      	mov	r1, r9
 8004c56:	4658      	mov	r0, fp
 8004c58:	f001 ff77 	bl	8006b4a <__sprint_r>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	f47f a86c 	bne.w	8003d3a <_vfprintf_r+0x596>
 8004c62:	e7f2      	b.n	8004c4a <_vfprintf_r+0x14a6>
 8004c64:	0800777c 	.word	0x0800777c
 8004c68:	0800776c 	.word	0x0800776c

08004c6c <__sbprintf>:
 8004c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6e:	460c      	mov	r4, r1
 8004c70:	461f      	mov	r7, r3
 8004c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c74:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8004c78:	9319      	str	r3, [sp, #100]	; 0x64
 8004c7a:	89e3      	ldrh	r3, [r4, #14]
 8004c7c:	8989      	ldrh	r1, [r1, #12]
 8004c7e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004c82:	69e3      	ldr	r3, [r4, #28]
 8004c84:	f021 0102 	bic.w	r1, r1, #2
 8004c88:	9307      	str	r3, [sp, #28]
 8004c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c8c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8004c90:	a91a      	add	r1, sp, #104	; 0x68
 8004c92:	4615      	mov	r5, r2
 8004c94:	4606      	mov	r6, r0
 8004c96:	9309      	str	r3, [sp, #36]	; 0x24
 8004c98:	9100      	str	r1, [sp, #0]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9104      	str	r1, [sp, #16]
 8004c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ca2:	a816      	add	r0, sp, #88	; 0x58
 8004ca4:	9102      	str	r1, [sp, #8]
 8004ca6:	9105      	str	r1, [sp, #20]
 8004ca8:	9306      	str	r3, [sp, #24]
 8004caa:	f001 f929 	bl	8005f00 <__retarget_lock_init_recursive>
 8004cae:	462a      	mov	r2, r5
 8004cb0:	463b      	mov	r3, r7
 8004cb2:	4669      	mov	r1, sp
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f7fe fd75 	bl	80037a4 <_vfprintf_r>
 8004cba:	1e05      	subs	r5, r0, #0
 8004cbc:	db07      	blt.n	8004cce <__sbprintf+0x62>
 8004cbe:	4669      	mov	r1, sp
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	f000 ff39 	bl	8005b38 <_fflush_r>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	bf18      	it	ne
 8004cca:	f04f 35ff 	movne.w	r5, #4294967295
 8004cce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004cd2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004cd4:	065b      	lsls	r3, r3, #25
 8004cd6:	bf42      	ittt	mi
 8004cd8:	89a3      	ldrhmi	r3, [r4, #12]
 8004cda:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8004cde:	81a3      	strhmi	r3, [r4, #12]
 8004ce0:	f001 f90f 	bl	8005f02 <__retarget_lock_close_recursive>
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8004cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cec <__swsetup_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <__swsetup_r+0xac>)
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	b118      	cbz	r0, 8004d00 <__swsetup_r+0x14>
 8004cf8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004cfa:	b90b      	cbnz	r3, 8004d00 <__swsetup_r+0x14>
 8004cfc:	f000 ff88 	bl	8005c10 <__sinit>
 8004d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	0711      	lsls	r1, r2, #28
 8004d08:	d422      	bmi.n	8004d50 <__swsetup_r+0x64>
 8004d0a:	06d0      	lsls	r0, r2, #27
 8004d0c:	d407      	bmi.n	8004d1e <__swsetup_r+0x32>
 8004d0e:	2209      	movs	r2, #9
 8004d10:	602a      	str	r2, [r5, #0]
 8004d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d16:	81a3      	strh	r3, [r4, #12]
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	e034      	b.n	8004d88 <__swsetup_r+0x9c>
 8004d1e:	0751      	lsls	r1, r2, #29
 8004d20:	d512      	bpl.n	8004d48 <__swsetup_r+0x5c>
 8004d22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d24:	b141      	cbz	r1, 8004d38 <__swsetup_r+0x4c>
 8004d26:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8004d2a:	4299      	cmp	r1, r3
 8004d2c:	d002      	beq.n	8004d34 <__swsetup_r+0x48>
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f000 fffe 	bl	8005d30 <_free_r>
 8004d34:	2300      	movs	r3, #0
 8004d36:	6323      	str	r3, [r4, #48]	; 0x30
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d3e:	81a3      	strh	r3, [r4, #12]
 8004d40:	2300      	movs	r3, #0
 8004d42:	6063      	str	r3, [r4, #4]
 8004d44:	6923      	ldr	r3, [r4, #16]
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	f043 0308 	orr.w	r3, r3, #8
 8004d4e:	81a3      	strh	r3, [r4, #12]
 8004d50:	6923      	ldr	r3, [r4, #16]
 8004d52:	b94b      	cbnz	r3, 8004d68 <__swsetup_r+0x7c>
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5e:	d003      	beq.n	8004d68 <__swsetup_r+0x7c>
 8004d60:	4621      	mov	r1, r4
 8004d62:	4628      	mov	r0, r5
 8004d64:	f001 f8fc 	bl	8005f60 <__smakebuf_r>
 8004d68:	89a2      	ldrh	r2, [r4, #12]
 8004d6a:	f012 0301 	ands.w	r3, r2, #1
 8004d6e:	d00c      	beq.n	8004d8a <__swsetup_r+0x9e>
 8004d70:	2300      	movs	r3, #0
 8004d72:	60a3      	str	r3, [r4, #8]
 8004d74:	6963      	ldr	r3, [r4, #20]
 8004d76:	425b      	negs	r3, r3
 8004d78:	61a3      	str	r3, [r4, #24]
 8004d7a:	6923      	ldr	r3, [r4, #16]
 8004d7c:	b953      	cbnz	r3, 8004d94 <__swsetup_r+0xa8>
 8004d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d82:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004d86:	d1c4      	bne.n	8004d12 <__swsetup_r+0x26>
 8004d88:	bd38      	pop	{r3, r4, r5, pc}
 8004d8a:	0792      	lsls	r2, r2, #30
 8004d8c:	bf58      	it	pl
 8004d8e:	6963      	ldrpl	r3, [r4, #20]
 8004d90:	60a3      	str	r3, [r4, #8]
 8004d92:	e7f2      	b.n	8004d7a <__swsetup_r+0x8e>
 8004d94:	2000      	movs	r0, #0
 8004d96:	e7f7      	b.n	8004d88 <__swsetup_r+0x9c>
 8004d98:	20000010 	.word	0x20000010

08004d9c <register_fini>:
 8004d9c:	4b02      	ldr	r3, [pc, #8]	; (8004da8 <register_fini+0xc>)
 8004d9e:	b113      	cbz	r3, 8004da6 <register_fini+0xa>
 8004da0:	4802      	ldr	r0, [pc, #8]	; (8004dac <register_fini+0x10>)
 8004da2:	f000 b805 	b.w	8004db0 <atexit>
 8004da6:	4770      	bx	lr
 8004da8:	00000000 	.word	0x00000000
 8004dac:	08005c61 	.word	0x08005c61

08004db0 <atexit>:
 8004db0:	2300      	movs	r3, #0
 8004db2:	4601      	mov	r1, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	4618      	mov	r0, r3
 8004db8:	f001 bf0c 	b.w	8006bd4 <__register_exitproc>

08004dbc <quorem>:
 8004dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc0:	6903      	ldr	r3, [r0, #16]
 8004dc2:	690c      	ldr	r4, [r1, #16]
 8004dc4:	4680      	mov	r8, r0
 8004dc6:	42a3      	cmp	r3, r4
 8004dc8:	f2c0 8084 	blt.w	8004ed4 <quorem+0x118>
 8004dcc:	3c01      	subs	r4, #1
 8004dce:	f101 0714 	add.w	r7, r1, #20
 8004dd2:	f100 0614 	add.w	r6, r0, #20
 8004dd6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004dda:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004dde:	3501      	adds	r5, #1
 8004de0:	fbb0 f5f5 	udiv	r5, r0, r5
 8004de4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004de8:	eb06 030c 	add.w	r3, r6, ip
 8004dec:	eb07 090c 	add.w	r9, r7, ip
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	b39d      	cbz	r5, 8004e5c <quorem+0xa0>
 8004df4:	f04f 0a00 	mov.w	sl, #0
 8004df8:	4638      	mov	r0, r7
 8004dfa:	46b6      	mov	lr, r6
 8004dfc:	46d3      	mov	fp, sl
 8004dfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e02:	b293      	uxth	r3, r2
 8004e04:	fb05 a303 	mla	r3, r5, r3, sl
 8004e08:	0c12      	lsrs	r2, r2, #16
 8004e0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e0e:	fb05 a202 	mla	r2, r5, r2, sl
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	ebab 0303 	sub.w	r3, fp, r3
 8004e18:	f8de b000 	ldr.w	fp, [lr]
 8004e1c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004e20:	fa1f fb8b 	uxth.w	fp, fp
 8004e24:	445b      	add	r3, fp
 8004e26:	fa1f fb82 	uxth.w	fp, r2
 8004e2a:	f8de 2000 	ldr.w	r2, [lr]
 8004e2e:	4581      	cmp	r9, r0
 8004e30:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e3e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004e42:	f84e 3b04 	str.w	r3, [lr], #4
 8004e46:	d2da      	bcs.n	8004dfe <quorem+0x42>
 8004e48:	f856 300c 	ldr.w	r3, [r6, ip]
 8004e4c:	b933      	cbnz	r3, 8004e5c <quorem+0xa0>
 8004e4e:	9b01      	ldr	r3, [sp, #4]
 8004e50:	3b04      	subs	r3, #4
 8004e52:	429e      	cmp	r6, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	d331      	bcc.n	8004ebc <quorem+0x100>
 8004e58:	f8c8 4010 	str.w	r4, [r8, #16]
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	f001 fd05 	bl	800686c <__mcmp>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	db26      	blt.n	8004eb4 <quorem+0xf8>
 8004e66:	4630      	mov	r0, r6
 8004e68:	f04f 0c00 	mov.w	ip, #0
 8004e6c:	3501      	adds	r5, #1
 8004e6e:	f857 1b04 	ldr.w	r1, [r7], #4
 8004e72:	f8d0 e000 	ldr.w	lr, [r0]
 8004e76:	b28b      	uxth	r3, r1
 8004e78:	ebac 0303 	sub.w	r3, ip, r3
 8004e7c:	fa1f f28e 	uxth.w	r2, lr
 8004e80:	4413      	add	r3, r2
 8004e82:	0c0a      	lsrs	r2, r1, #16
 8004e84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e92:	45b9      	cmp	r9, r7
 8004e94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e98:	f840 3b04 	str.w	r3, [r0], #4
 8004e9c:	d2e7      	bcs.n	8004e6e <quorem+0xb2>
 8004e9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004ea2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004ea6:	b92a      	cbnz	r2, 8004eb4 <quorem+0xf8>
 8004ea8:	3b04      	subs	r3, #4
 8004eaa:	429e      	cmp	r6, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	d30b      	bcc.n	8004ec8 <quorem+0x10c>
 8004eb0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	b003      	add	sp, #12
 8004eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	3b04      	subs	r3, #4
 8004ec0:	2a00      	cmp	r2, #0
 8004ec2:	d1c9      	bne.n	8004e58 <quorem+0x9c>
 8004ec4:	3c01      	subs	r4, #1
 8004ec6:	e7c4      	b.n	8004e52 <quorem+0x96>
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	3b04      	subs	r3, #4
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	d1ef      	bne.n	8004eb0 <quorem+0xf4>
 8004ed0:	3c01      	subs	r4, #1
 8004ed2:	e7ea      	b.n	8004eaa <quorem+0xee>
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	e7ee      	b.n	8004eb6 <quorem+0xfa>

08004ed8 <_dtoa_r>:
 8004ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	4616      	mov	r6, r2
 8004ede:	461f      	mov	r7, r3
 8004ee0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004ee2:	b095      	sub	sp, #84	; 0x54
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8004ee8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004eec:	b141      	cbz	r1, 8004f00 <_dtoa_r+0x28>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ef2:	4093      	lsls	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]
 8004ef6:	604a      	str	r2, [r1, #4]
 8004ef8:	f001 faf3 	bl	80064e2 <_Bfree>
 8004efc:	2300      	movs	r3, #0
 8004efe:	6423      	str	r3, [r4, #64]	; 0x40
 8004f00:	1e3b      	subs	r3, r7, #0
 8004f02:	bfaf      	iteee	ge
 8004f04:	2300      	movge	r3, #0
 8004f06:	2201      	movlt	r2, #1
 8004f08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f0c:	9303      	strlt	r3, [sp, #12]
 8004f0e:	bfa8      	it	ge
 8004f10:	602b      	strge	r3, [r5, #0]
 8004f12:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f16:	4bb0      	ldr	r3, [pc, #704]	; (80051d8 <_dtoa_r+0x300>)
 8004f18:	bfb8      	it	lt
 8004f1a:	602a      	strlt	r2, [r5, #0]
 8004f1c:	ea33 0308 	bics.w	r3, r3, r8
 8004f20:	d116      	bne.n	8004f50 <_dtoa_r+0x78>
 8004f22:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	9b02      	ldr	r3, [sp, #8]
 8004f2c:	b923      	cbnz	r3, 8004f38 <_dtoa_r+0x60>
 8004f2e:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004f32:	2800      	cmp	r0, #0
 8004f34:	f000 853f 	beq.w	80059b6 <_dtoa_r+0xade>
 8004f38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f3a:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 80051ec <_dtoa_r+0x314>
 8004f3e:	b11b      	cbz	r3, 8004f48 <_dtoa_r+0x70>
 8004f40:	f10b 0303 	add.w	r3, fp, #3
 8004f44:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	4658      	mov	r0, fp
 8004f4a:	b015      	add	sp, #84	; 0x54
 8004f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f54:	2200      	movs	r2, #0
 8004f56:	2300      	movs	r3, #0
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb fd24 	bl	80009a8 <__aeabi_dcmpeq>
 8004f60:	4682      	mov	sl, r0
 8004f62:	b160      	cbz	r0, 8004f7e <_dtoa_r+0xa6>
 8004f64:	2301      	movs	r3, #1
 8004f66:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 851e 	beq.w	80059ae <_dtoa_r+0xad6>
 8004f72:	4b9a      	ldr	r3, [pc, #616]	; (80051dc <_dtoa_r+0x304>)
 8004f74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f76:	f103 3bff 	add.w	fp, r3, #4294967295
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	e7e4      	b.n	8004f48 <_dtoa_r+0x70>
 8004f7e:	ab12      	add	r3, sp, #72	; 0x48
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	ab13      	add	r3, sp, #76	; 0x4c
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	4632      	mov	r2, r6
 8004f88:	463b      	mov	r3, r7
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f001 fce6 	bl	800695c <__d2b>
 8004f90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004f94:	9006      	str	r0, [sp, #24]
 8004f96:	2d00      	cmp	r5, #0
 8004f98:	d07d      	beq.n	8005096 <_dtoa_r+0x1be>
 8004f9a:	46b0      	mov	r8, r6
 8004f9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004fa0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004fa4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004fa8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004fac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	4b8b      	ldr	r3, [pc, #556]	; (80051e0 <_dtoa_r+0x308>)
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	f7fb f8d6 	bl	8000168 <__aeabi_dsub>
 8004fbc:	a380      	add	r3, pc, #512	; (adr r3, 80051c0 <_dtoa_r+0x2e8>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb fa89 	bl	80004d8 <__aeabi_dmul>
 8004fc6:	a380      	add	r3, pc, #512	; (adr r3, 80051c8 <_dtoa_r+0x2f0>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb f8ce 	bl	800016c <__adddf3>
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	460f      	mov	r7, r1
 8004fd6:	f7fb fa15 	bl	8000404 <__aeabi_i2d>
 8004fda:	a37d      	add	r3, pc, #500	; (adr r3, 80051d0 <_dtoa_r+0x2f8>)
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f7fb fa7a 	bl	80004d8 <__aeabi_dmul>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4630      	mov	r0, r6
 8004fea:	4639      	mov	r1, r7
 8004fec:	f7fb f8be 	bl	800016c <__adddf3>
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	460f      	mov	r7, r1
 8004ff4:	f7fb fd20 	bl	8000a38 <__aeabi_d2iz>
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4682      	mov	sl, r0
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	4630      	mov	r0, r6
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb fcdb 	bl	80009bc <__aeabi_dcmplt>
 8005006:	b148      	cbz	r0, 800501c <_dtoa_r+0x144>
 8005008:	4650      	mov	r0, sl
 800500a:	f7fb f9fb 	bl	8000404 <__aeabi_i2d>
 800500e:	4632      	mov	r2, r6
 8005010:	463b      	mov	r3, r7
 8005012:	f7fb fcc9 	bl	80009a8 <__aeabi_dcmpeq>
 8005016:	b908      	cbnz	r0, 800501c <_dtoa_r+0x144>
 8005018:	f10a 3aff 	add.w	sl, sl, #4294967295
 800501c:	f1ba 0f16 	cmp.w	sl, #22
 8005020:	d85a      	bhi.n	80050d8 <_dtoa_r+0x200>
 8005022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005026:	496f      	ldr	r1, [pc, #444]	; (80051e4 <_dtoa_r+0x30c>)
 8005028:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800502c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005030:	f7fb fce2 	bl	80009f8 <__aeabi_dcmpgt>
 8005034:	2800      	cmp	r0, #0
 8005036:	d051      	beq.n	80050dc <_dtoa_r+0x204>
 8005038:	2300      	movs	r3, #0
 800503a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800503e:	930d      	str	r3, [sp, #52]	; 0x34
 8005040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005042:	1b5d      	subs	r5, r3, r5
 8005044:	1e6b      	subs	r3, r5, #1
 8005046:	9307      	str	r3, [sp, #28]
 8005048:	bf43      	ittte	mi
 800504a:	2300      	movmi	r3, #0
 800504c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005050:	9307      	strmi	r3, [sp, #28]
 8005052:	f04f 0900 	movpl.w	r9, #0
 8005056:	f1ba 0f00 	cmp.w	sl, #0
 800505a:	db41      	blt.n	80050e0 <_dtoa_r+0x208>
 800505c:	9b07      	ldr	r3, [sp, #28]
 800505e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005062:	4453      	add	r3, sl
 8005064:	9307      	str	r3, [sp, #28]
 8005066:	2300      	movs	r3, #0
 8005068:	9308      	str	r3, [sp, #32]
 800506a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800506c:	2b09      	cmp	r3, #9
 800506e:	f200 808c 	bhi.w	800518a <_dtoa_r+0x2b2>
 8005072:	2b05      	cmp	r3, #5
 8005074:	bfc4      	itt	gt
 8005076:	3b04      	subgt	r3, #4
 8005078:	931e      	strgt	r3, [sp, #120]	; 0x78
 800507a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800507c:	bfc8      	it	gt
 800507e:	2500      	movgt	r5, #0
 8005080:	f1a3 0302 	sub.w	r3, r3, #2
 8005084:	bfd8      	it	le
 8005086:	2501      	movle	r5, #1
 8005088:	2b03      	cmp	r3, #3
 800508a:	f200 808a 	bhi.w	80051a2 <_dtoa_r+0x2ca>
 800508e:	e8df f003 	tbb	[pc, r3]
 8005092:	7a78      	.short	0x7a78
 8005094:	6c2f      	.short	0x6c2f
 8005096:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800509a:	441d      	add	r5, r3
 800509c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80050a0:	2820      	cmp	r0, #32
 80050a2:	dd13      	ble.n	80050cc <_dtoa_r+0x1f4>
 80050a4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80050a8:	9b02      	ldr	r3, [sp, #8]
 80050aa:	fa08 f800 	lsl.w	r8, r8, r0
 80050ae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80050b2:	fa23 f000 	lsr.w	r0, r3, r0
 80050b6:	ea48 0000 	orr.w	r0, r8, r0
 80050ba:	f7fb f993 	bl	80003e4 <__aeabi_ui2d>
 80050be:	2301      	movs	r3, #1
 80050c0:	4680      	mov	r8, r0
 80050c2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80050c6:	3d01      	subs	r5, #1
 80050c8:	9310      	str	r3, [sp, #64]	; 0x40
 80050ca:	e771      	b.n	8004fb0 <_dtoa_r+0xd8>
 80050cc:	9b02      	ldr	r3, [sp, #8]
 80050ce:	f1c0 0020 	rsb	r0, r0, #32
 80050d2:	fa03 f000 	lsl.w	r0, r3, r0
 80050d6:	e7f0      	b.n	80050ba <_dtoa_r+0x1e2>
 80050d8:	2301      	movs	r3, #1
 80050da:	e7b0      	b.n	800503e <_dtoa_r+0x166>
 80050dc:	900d      	str	r0, [sp, #52]	; 0x34
 80050de:	e7af      	b.n	8005040 <_dtoa_r+0x168>
 80050e0:	f1ca 0300 	rsb	r3, sl, #0
 80050e4:	9308      	str	r3, [sp, #32]
 80050e6:	2300      	movs	r3, #0
 80050e8:	eba9 090a 	sub.w	r9, r9, sl
 80050ec:	930c      	str	r3, [sp, #48]	; 0x30
 80050ee:	e7bc      	b.n	800506a <_dtoa_r+0x192>
 80050f0:	2301      	movs	r3, #1
 80050f2:	9309      	str	r3, [sp, #36]	; 0x24
 80050f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	dd56      	ble.n	80051a8 <_dtoa_r+0x2d0>
 80050fa:	4698      	mov	r8, r3
 80050fc:	9304      	str	r3, [sp, #16]
 80050fe:	2200      	movs	r2, #0
 8005100:	6462      	str	r2, [r4, #68]	; 0x44
 8005102:	2204      	movs	r2, #4
 8005104:	f102 0014 	add.w	r0, r2, #20
 8005108:	4298      	cmp	r0, r3
 800510a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800510c:	d951      	bls.n	80051b2 <_dtoa_r+0x2da>
 800510e:	4620      	mov	r0, r4
 8005110:	f001 f9c2 	bl	8006498 <_Balloc>
 8005114:	f1b8 0f0e 	cmp.w	r8, #14
 8005118:	4683      	mov	fp, r0
 800511a:	6420      	str	r0, [r4, #64]	; 0x40
 800511c:	f200 80ed 	bhi.w	80052fa <_dtoa_r+0x422>
 8005120:	2d00      	cmp	r5, #0
 8005122:	f000 80ea 	beq.w	80052fa <_dtoa_r+0x422>
 8005126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800512a:	f1ba 0f00 	cmp.w	sl, #0
 800512e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005132:	dd77      	ble.n	8005224 <_dtoa_r+0x34c>
 8005134:	4a2b      	ldr	r2, [pc, #172]	; (80051e4 <_dtoa_r+0x30c>)
 8005136:	f00a 030f 	and.w	r3, sl, #15
 800513a:	ea4f 162a 	mov.w	r6, sl, asr #4
 800513e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005142:	06f0      	lsls	r0, r6, #27
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800514c:	d568      	bpl.n	8005220 <_dtoa_r+0x348>
 800514e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005152:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <_dtoa_r+0x310>)
 8005154:	2503      	movs	r5, #3
 8005156:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800515a:	f7fb fae7 	bl	800072c <__aeabi_ddiv>
 800515e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005162:	f006 060f 	and.w	r6, r6, #15
 8005166:	4f20      	ldr	r7, [pc, #128]	; (80051e8 <_dtoa_r+0x310>)
 8005168:	e04f      	b.n	800520a <_dtoa_r+0x332>
 800516a:	2301      	movs	r3, #1
 800516c:	9309      	str	r3, [sp, #36]	; 0x24
 800516e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005170:	4453      	add	r3, sl
 8005172:	f103 0801 	add.w	r8, r3, #1
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	4643      	mov	r3, r8
 800517a:	2b01      	cmp	r3, #1
 800517c:	bfb8      	it	lt
 800517e:	2301      	movlt	r3, #1
 8005180:	e7bd      	b.n	80050fe <_dtoa_r+0x226>
 8005182:	2300      	movs	r3, #0
 8005184:	e7b5      	b.n	80050f2 <_dtoa_r+0x21a>
 8005186:	2300      	movs	r3, #0
 8005188:	e7f0      	b.n	800516c <_dtoa_r+0x294>
 800518a:	2501      	movs	r5, #1
 800518c:	2300      	movs	r3, #0
 800518e:	9509      	str	r5, [sp, #36]	; 0x24
 8005190:	931e      	str	r3, [sp, #120]	; 0x78
 8005192:	f04f 33ff 	mov.w	r3, #4294967295
 8005196:	2200      	movs	r2, #0
 8005198:	9304      	str	r3, [sp, #16]
 800519a:	4698      	mov	r8, r3
 800519c:	2312      	movs	r3, #18
 800519e:	921f      	str	r2, [sp, #124]	; 0x7c
 80051a0:	e7ad      	b.n	80050fe <_dtoa_r+0x226>
 80051a2:	2301      	movs	r3, #1
 80051a4:	9309      	str	r3, [sp, #36]	; 0x24
 80051a6:	e7f4      	b.n	8005192 <_dtoa_r+0x2ba>
 80051a8:	2301      	movs	r3, #1
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	4698      	mov	r8, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	e7f5      	b.n	800519e <_dtoa_r+0x2c6>
 80051b2:	3101      	adds	r1, #1
 80051b4:	6461      	str	r1, [r4, #68]	; 0x44
 80051b6:	0052      	lsls	r2, r2, #1
 80051b8:	e7a4      	b.n	8005104 <_dtoa_r+0x22c>
 80051ba:	bf00      	nop
 80051bc:	f3af 8000 	nop.w
 80051c0:	636f4361 	.word	0x636f4361
 80051c4:	3fd287a7 	.word	0x3fd287a7
 80051c8:	8b60c8b3 	.word	0x8b60c8b3
 80051cc:	3fc68a28 	.word	0x3fc68a28
 80051d0:	509f79fb 	.word	0x509f79fb
 80051d4:	3fd34413 	.word	0x3fd34413
 80051d8:	7ff00000 	.word	0x7ff00000
 80051dc:	0800776b 	.word	0x0800776b
 80051e0:	3ff80000 	.word	0x3ff80000
 80051e4:	080077c8 	.word	0x080077c8
 80051e8:	080077a0 	.word	0x080077a0
 80051ec:	08007795 	.word	0x08007795
 80051f0:	07f1      	lsls	r1, r6, #31
 80051f2:	d508      	bpl.n	8005206 <_dtoa_r+0x32e>
 80051f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051fc:	f7fb f96c 	bl	80004d8 <__aeabi_dmul>
 8005200:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005204:	3501      	adds	r5, #1
 8005206:	1076      	asrs	r6, r6, #1
 8005208:	3708      	adds	r7, #8
 800520a:	2e00      	cmp	r6, #0
 800520c:	d1f0      	bne.n	80051f0 <_dtoa_r+0x318>
 800520e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005216:	f7fb fa89 	bl	800072c <__aeabi_ddiv>
 800521a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800521e:	e01b      	b.n	8005258 <_dtoa_r+0x380>
 8005220:	2502      	movs	r5, #2
 8005222:	e7a0      	b.n	8005166 <_dtoa_r+0x28e>
 8005224:	f000 80a4 	beq.w	8005370 <_dtoa_r+0x498>
 8005228:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800522c:	f1ca 0600 	rsb	r6, sl, #0
 8005230:	4ba0      	ldr	r3, [pc, #640]	; (80054b4 <_dtoa_r+0x5dc>)
 8005232:	f006 020f 	and.w	r2, r6, #15
 8005236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fb f94b 	bl	80004d8 <__aeabi_dmul>
 8005242:	2502      	movs	r5, #2
 8005244:	2300      	movs	r3, #0
 8005246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800524a:	4f9b      	ldr	r7, [pc, #620]	; (80054b8 <_dtoa_r+0x5e0>)
 800524c:	1136      	asrs	r6, r6, #4
 800524e:	2e00      	cmp	r6, #0
 8005250:	f040 8083 	bne.w	800535a <_dtoa_r+0x482>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e0      	bne.n	800521a <_dtoa_r+0x342>
 8005258:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 808a 	beq.w	8005374 <_dtoa_r+0x49c>
 8005260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005264:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800526c:	2200      	movs	r2, #0
 800526e:	4b93      	ldr	r3, [pc, #588]	; (80054bc <_dtoa_r+0x5e4>)
 8005270:	f7fb fba4 	bl	80009bc <__aeabi_dcmplt>
 8005274:	2800      	cmp	r0, #0
 8005276:	d07d      	beq.n	8005374 <_dtoa_r+0x49c>
 8005278:	f1b8 0f00 	cmp.w	r8, #0
 800527c:	d07a      	beq.n	8005374 <_dtoa_r+0x49c>
 800527e:	9b04      	ldr	r3, [sp, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	dd36      	ble.n	80052f2 <_dtoa_r+0x41a>
 8005284:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005288:	2200      	movs	r2, #0
 800528a:	4b8d      	ldr	r3, [pc, #564]	; (80054c0 <_dtoa_r+0x5e8>)
 800528c:	f7fb f924 	bl	80004d8 <__aeabi_dmul>
 8005290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005294:	9e04      	ldr	r6, [sp, #16]
 8005296:	f10a 37ff 	add.w	r7, sl, #4294967295
 800529a:	3501      	adds	r5, #1
 800529c:	4628      	mov	r0, r5
 800529e:	f7fb f8b1 	bl	8000404 <__aeabi_i2d>
 80052a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052a6:	f7fb f917 	bl	80004d8 <__aeabi_dmul>
 80052aa:	2200      	movs	r2, #0
 80052ac:	4b85      	ldr	r3, [pc, #532]	; (80054c4 <_dtoa_r+0x5ec>)
 80052ae:	f7fa ff5d 	bl	800016c <__adddf3>
 80052b2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80052b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052ba:	950b      	str	r5, [sp, #44]	; 0x2c
 80052bc:	2e00      	cmp	r6, #0
 80052be:	d15c      	bne.n	800537a <_dtoa_r+0x4a2>
 80052c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c4:	2200      	movs	r2, #0
 80052c6:	4b80      	ldr	r3, [pc, #512]	; (80054c8 <_dtoa_r+0x5f0>)
 80052c8:	f7fa ff4e 	bl	8000168 <__aeabi_dsub>
 80052cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ce:	462b      	mov	r3, r5
 80052d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d4:	f7fb fb90 	bl	80009f8 <__aeabi_dcmpgt>
 80052d8:	2800      	cmp	r0, #0
 80052da:	f040 8282 	bne.w	80057e2 <_dtoa_r+0x90a>
 80052de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052e4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80052e8:	f7fb fb68 	bl	80009bc <__aeabi_dcmplt>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	f040 8276 	bne.w	80057de <_dtoa_r+0x906>
 80052f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80052f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f2c0 814c 	blt.w	800559a <_dtoa_r+0x6c2>
 8005302:	f1ba 0f0e 	cmp.w	sl, #14
 8005306:	f300 8148 	bgt.w	800559a <_dtoa_r+0x6c2>
 800530a:	4b6a      	ldr	r3, [pc, #424]	; (80054b4 <_dtoa_r+0x5dc>)
 800530c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005318:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800531a:	2b00      	cmp	r3, #0
 800531c:	f280 80d8 	bge.w	80054d0 <_dtoa_r+0x5f8>
 8005320:	f1b8 0f00 	cmp.w	r8, #0
 8005324:	f300 80d4 	bgt.w	80054d0 <_dtoa_r+0x5f8>
 8005328:	f040 8258 	bne.w	80057dc <_dtoa_r+0x904>
 800532c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005330:	2200      	movs	r2, #0
 8005332:	4b65      	ldr	r3, [pc, #404]	; (80054c8 <_dtoa_r+0x5f0>)
 8005334:	f7fb f8d0 	bl	80004d8 <__aeabi_dmul>
 8005338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800533c:	f7fb fb52 	bl	80009e4 <__aeabi_dcmpge>
 8005340:	4646      	mov	r6, r8
 8005342:	4647      	mov	r7, r8
 8005344:	2800      	cmp	r0, #0
 8005346:	f040 822e 	bne.w	80057a6 <_dtoa_r+0x8ce>
 800534a:	2331      	movs	r3, #49	; 0x31
 800534c:	f10b 0501 	add.w	r5, fp, #1
 8005350:	f88b 3000 	strb.w	r3, [fp]
 8005354:	f10a 0a01 	add.w	sl, sl, #1
 8005358:	e229      	b.n	80057ae <_dtoa_r+0x8d6>
 800535a:	07f2      	lsls	r2, r6, #31
 800535c:	d505      	bpl.n	800536a <_dtoa_r+0x492>
 800535e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005362:	f7fb f8b9 	bl	80004d8 <__aeabi_dmul>
 8005366:	2301      	movs	r3, #1
 8005368:	3501      	adds	r5, #1
 800536a:	1076      	asrs	r6, r6, #1
 800536c:	3708      	adds	r7, #8
 800536e:	e76e      	b.n	800524e <_dtoa_r+0x376>
 8005370:	2502      	movs	r5, #2
 8005372:	e771      	b.n	8005258 <_dtoa_r+0x380>
 8005374:	4657      	mov	r7, sl
 8005376:	4646      	mov	r6, r8
 8005378:	e790      	b.n	800529c <_dtoa_r+0x3c4>
 800537a:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <_dtoa_r+0x5dc>)
 800537c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005380:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005386:	2b00      	cmp	r3, #0
 8005388:	d048      	beq.n	800541c <_dtoa_r+0x544>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	2000      	movs	r0, #0
 8005390:	494e      	ldr	r1, [pc, #312]	; (80054cc <_dtoa_r+0x5f4>)
 8005392:	f7fb f9cb 	bl	800072c <__aeabi_ddiv>
 8005396:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800539a:	f7fa fee5 	bl	8000168 <__aeabi_dsub>
 800539e:	465d      	mov	r5, fp
 80053a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80053a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053a8:	f7fb fb46 	bl	8000a38 <__aeabi_d2iz>
 80053ac:	9011      	str	r0, [sp, #68]	; 0x44
 80053ae:	f7fb f829 	bl	8000404 <__aeabi_i2d>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ba:	f7fa fed5 	bl	8000168 <__aeabi_dsub>
 80053be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053c4:	3330      	adds	r3, #48	; 0x30
 80053c6:	f805 3b01 	strb.w	r3, [r5], #1
 80053ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80053ce:	f7fb faf5 	bl	80009bc <__aeabi_dcmplt>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d163      	bne.n	800549e <_dtoa_r+0x5c6>
 80053d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053da:	2000      	movs	r0, #0
 80053dc:	4937      	ldr	r1, [pc, #220]	; (80054bc <_dtoa_r+0x5e4>)
 80053de:	f7fa fec3 	bl	8000168 <__aeabi_dsub>
 80053e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80053e6:	f7fb fae9 	bl	80009bc <__aeabi_dcmplt>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	f040 80b6 	bne.w	800555c <_dtoa_r+0x684>
 80053f0:	eba5 030b 	sub.w	r3, r5, fp
 80053f4:	429e      	cmp	r6, r3
 80053f6:	f77f af7c 	ble.w	80052f2 <_dtoa_r+0x41a>
 80053fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053fe:	2200      	movs	r2, #0
 8005400:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <_dtoa_r+0x5e8>)
 8005402:	f7fb f869 	bl	80004d8 <__aeabi_dmul>
 8005406:	2200      	movs	r2, #0
 8005408:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800540c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005410:	4b2b      	ldr	r3, [pc, #172]	; (80054c0 <_dtoa_r+0x5e8>)
 8005412:	f7fb f861 	bl	80004d8 <__aeabi_dmul>
 8005416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800541a:	e7c3      	b.n	80053a4 <_dtoa_r+0x4cc>
 800541c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005420:	f7fb f85a 	bl	80004d8 <__aeabi_dmul>
 8005424:	eb0b 0506 	add.w	r5, fp, r6
 8005428:	465e      	mov	r6, fp
 800542a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800542e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005432:	f7fb fb01 	bl	8000a38 <__aeabi_d2iz>
 8005436:	9011      	str	r0, [sp, #68]	; 0x44
 8005438:	f7fa ffe4 	bl	8000404 <__aeabi_i2d>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005444:	f7fa fe90 	bl	8000168 <__aeabi_dsub>
 8005448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800544a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800544e:	3330      	adds	r3, #48	; 0x30
 8005450:	f806 3b01 	strb.w	r3, [r6], #1
 8005454:	42ae      	cmp	r6, r5
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	d124      	bne.n	80054a6 <_dtoa_r+0x5ce>
 800545c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005460:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <_dtoa_r+0x5f4>)
 8005462:	f7fa fe83 	bl	800016c <__adddf3>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800546e:	f7fb fac3 	bl	80009f8 <__aeabi_dcmpgt>
 8005472:	2800      	cmp	r0, #0
 8005474:	d172      	bne.n	800555c <_dtoa_r+0x684>
 8005476:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800547a:	2000      	movs	r0, #0
 800547c:	4913      	ldr	r1, [pc, #76]	; (80054cc <_dtoa_r+0x5f4>)
 800547e:	f7fa fe73 	bl	8000168 <__aeabi_dsub>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800548a:	f7fb fa97 	bl	80009bc <__aeabi_dcmplt>
 800548e:	2800      	cmp	r0, #0
 8005490:	f43f af2f 	beq.w	80052f2 <_dtoa_r+0x41a>
 8005494:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005498:	1e6a      	subs	r2, r5, #1
 800549a:	2b30      	cmp	r3, #48	; 0x30
 800549c:	d001      	beq.n	80054a2 <_dtoa_r+0x5ca>
 800549e:	46ba      	mov	sl, r7
 80054a0:	e04b      	b.n	800553a <_dtoa_r+0x662>
 80054a2:	4615      	mov	r5, r2
 80054a4:	e7f6      	b.n	8005494 <_dtoa_r+0x5bc>
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <_dtoa_r+0x5e8>)
 80054a8:	f7fb f816 	bl	80004d8 <__aeabi_dmul>
 80054ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b0:	e7bd      	b.n	800542e <_dtoa_r+0x556>
 80054b2:	bf00      	nop
 80054b4:	080077c8 	.word	0x080077c8
 80054b8:	080077a0 	.word	0x080077a0
 80054bc:	3ff00000 	.word	0x3ff00000
 80054c0:	40240000 	.word	0x40240000
 80054c4:	401c0000 	.word	0x401c0000
 80054c8:	40140000 	.word	0x40140000
 80054cc:	3fe00000 	.word	0x3fe00000
 80054d0:	465d      	mov	r5, fp
 80054d2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054da:	4630      	mov	r0, r6
 80054dc:	4639      	mov	r1, r7
 80054de:	f7fb f925 	bl	800072c <__aeabi_ddiv>
 80054e2:	f7fb faa9 	bl	8000a38 <__aeabi_d2iz>
 80054e6:	4681      	mov	r9, r0
 80054e8:	f7fa ff8c 	bl	8000404 <__aeabi_i2d>
 80054ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054f0:	f7fa fff2 	bl	80004d8 <__aeabi_dmul>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4630      	mov	r0, r6
 80054fa:	4639      	mov	r1, r7
 80054fc:	f7fa fe34 	bl	8000168 <__aeabi_dsub>
 8005500:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005504:	f805 6b01 	strb.w	r6, [r5], #1
 8005508:	eba5 060b 	sub.w	r6, r5, fp
 800550c:	45b0      	cmp	r8, r6
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	d135      	bne.n	8005580 <_dtoa_r+0x6a8>
 8005514:	f7fa fe2a 	bl	800016c <__adddf3>
 8005518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800551c:	4606      	mov	r6, r0
 800551e:	460f      	mov	r7, r1
 8005520:	f7fb fa6a 	bl	80009f8 <__aeabi_dcmpgt>
 8005524:	b9c8      	cbnz	r0, 800555a <_dtoa_r+0x682>
 8005526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800552a:	4630      	mov	r0, r6
 800552c:	4639      	mov	r1, r7
 800552e:	f7fb fa3b 	bl	80009a8 <__aeabi_dcmpeq>
 8005532:	b110      	cbz	r0, 800553a <_dtoa_r+0x662>
 8005534:	f019 0f01 	tst.w	r9, #1
 8005538:	d10f      	bne.n	800555a <_dtoa_r+0x682>
 800553a:	9906      	ldr	r1, [sp, #24]
 800553c:	4620      	mov	r0, r4
 800553e:	f000 ffd0 	bl	80064e2 <_Bfree>
 8005542:	2300      	movs	r3, #0
 8005544:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005546:	702b      	strb	r3, [r5, #0]
 8005548:	f10a 0301 	add.w	r3, sl, #1
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005550:	2b00      	cmp	r3, #0
 8005552:	f43f acf9 	beq.w	8004f48 <_dtoa_r+0x70>
 8005556:	601d      	str	r5, [r3, #0]
 8005558:	e4f6      	b.n	8004f48 <_dtoa_r+0x70>
 800555a:	4657      	mov	r7, sl
 800555c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005560:	1e6b      	subs	r3, r5, #1
 8005562:	2a39      	cmp	r2, #57	; 0x39
 8005564:	d106      	bne.n	8005574 <_dtoa_r+0x69c>
 8005566:	459b      	cmp	fp, r3
 8005568:	d108      	bne.n	800557c <_dtoa_r+0x6a4>
 800556a:	2330      	movs	r3, #48	; 0x30
 800556c:	f88b 3000 	strb.w	r3, [fp]
 8005570:	465b      	mov	r3, fp
 8005572:	3701      	adds	r7, #1
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	3201      	adds	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	e790      	b.n	800549e <_dtoa_r+0x5c6>
 800557c:	461d      	mov	r5, r3
 800557e:	e7ed      	b.n	800555c <_dtoa_r+0x684>
 8005580:	2200      	movs	r2, #0
 8005582:	4b99      	ldr	r3, [pc, #612]	; (80057e8 <_dtoa_r+0x910>)
 8005584:	f7fa ffa8 	bl	80004d8 <__aeabi_dmul>
 8005588:	2200      	movs	r2, #0
 800558a:	2300      	movs	r3, #0
 800558c:	4606      	mov	r6, r0
 800558e:	460f      	mov	r7, r1
 8005590:	f7fb fa0a 	bl	80009a8 <__aeabi_dcmpeq>
 8005594:	2800      	cmp	r0, #0
 8005596:	d09e      	beq.n	80054d6 <_dtoa_r+0x5fe>
 8005598:	e7cf      	b.n	800553a <_dtoa_r+0x662>
 800559a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800559c:	2a00      	cmp	r2, #0
 800559e:	f000 8088 	beq.w	80056b2 <_dtoa_r+0x7da>
 80055a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055a4:	2a01      	cmp	r2, #1
 80055a6:	dc6d      	bgt.n	8005684 <_dtoa_r+0x7ac>
 80055a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	d066      	beq.n	800567c <_dtoa_r+0x7a4>
 80055ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055b2:	464d      	mov	r5, r9
 80055b4:	9e08      	ldr	r6, [sp, #32]
 80055b6:	9a07      	ldr	r2, [sp, #28]
 80055b8:	2101      	movs	r1, #1
 80055ba:	441a      	add	r2, r3
 80055bc:	4620      	mov	r0, r4
 80055be:	4499      	add	r9, r3
 80055c0:	9207      	str	r2, [sp, #28]
 80055c2:	f001 f820 	bl	8006606 <__i2b>
 80055c6:	4607      	mov	r7, r0
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	dd0b      	ble.n	80055e4 <_dtoa_r+0x70c>
 80055cc:	9b07      	ldr	r3, [sp, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd08      	ble.n	80055e4 <_dtoa_r+0x70c>
 80055d2:	42ab      	cmp	r3, r5
 80055d4:	bfa8      	it	ge
 80055d6:	462b      	movge	r3, r5
 80055d8:	9a07      	ldr	r2, [sp, #28]
 80055da:	eba9 0903 	sub.w	r9, r9, r3
 80055de:	1aed      	subs	r5, r5, r3
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	9307      	str	r3, [sp, #28]
 80055e4:	9b08      	ldr	r3, [sp, #32]
 80055e6:	b1eb      	cbz	r3, 8005624 <_dtoa_r+0x74c>
 80055e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d065      	beq.n	80056ba <_dtoa_r+0x7e2>
 80055ee:	b18e      	cbz	r6, 8005614 <_dtoa_r+0x73c>
 80055f0:	4639      	mov	r1, r7
 80055f2:	4632      	mov	r2, r6
 80055f4:	4620      	mov	r0, r4
 80055f6:	f001 f8a5 	bl	8006744 <__pow5mult>
 80055fa:	9a06      	ldr	r2, [sp, #24]
 80055fc:	4601      	mov	r1, r0
 80055fe:	4607      	mov	r7, r0
 8005600:	4620      	mov	r0, r4
 8005602:	f001 f809 	bl	8006618 <__multiply>
 8005606:	9906      	ldr	r1, [sp, #24]
 8005608:	900a      	str	r0, [sp, #40]	; 0x28
 800560a:	4620      	mov	r0, r4
 800560c:	f000 ff69 	bl	80064e2 <_Bfree>
 8005610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005612:	9306      	str	r3, [sp, #24]
 8005614:	9b08      	ldr	r3, [sp, #32]
 8005616:	1b9a      	subs	r2, r3, r6
 8005618:	d004      	beq.n	8005624 <_dtoa_r+0x74c>
 800561a:	9906      	ldr	r1, [sp, #24]
 800561c:	4620      	mov	r0, r4
 800561e:	f001 f891 	bl	8006744 <__pow5mult>
 8005622:	9006      	str	r0, [sp, #24]
 8005624:	2101      	movs	r1, #1
 8005626:	4620      	mov	r0, r4
 8005628:	f000 ffed 	bl	8006606 <__i2b>
 800562c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800562e:	4606      	mov	r6, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 81ca 	beq.w	80059ca <_dtoa_r+0xaf2>
 8005636:	461a      	mov	r2, r3
 8005638:	4601      	mov	r1, r0
 800563a:	4620      	mov	r0, r4
 800563c:	f001 f882 	bl	8006744 <__pow5mult>
 8005640:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005642:	4606      	mov	r6, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	dc3e      	bgt.n	80056c6 <_dtoa_r+0x7ee>
 8005648:	9b02      	ldr	r3, [sp, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d137      	bne.n	80056be <_dtoa_r+0x7e6>
 800564e:	9b03      	ldr	r3, [sp, #12]
 8005650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005654:	2b00      	cmp	r3, #0
 8005656:	d134      	bne.n	80056c2 <_dtoa_r+0x7ea>
 8005658:	9b03      	ldr	r3, [sp, #12]
 800565a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800565e:	0d1b      	lsrs	r3, r3, #20
 8005660:	051b      	lsls	r3, r3, #20
 8005662:	b12b      	cbz	r3, 8005670 <_dtoa_r+0x798>
 8005664:	9b07      	ldr	r3, [sp, #28]
 8005666:	f109 0901 	add.w	r9, r9, #1
 800566a:	3301      	adds	r3, #1
 800566c:	9307      	str	r3, [sp, #28]
 800566e:	2301      	movs	r3, #1
 8005670:	9308      	str	r3, [sp, #32]
 8005672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005674:	2b00      	cmp	r3, #0
 8005676:	d128      	bne.n	80056ca <_dtoa_r+0x7f2>
 8005678:	2001      	movs	r0, #1
 800567a:	e02e      	b.n	80056da <_dtoa_r+0x802>
 800567c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800567e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005682:	e796      	b.n	80055b2 <_dtoa_r+0x6da>
 8005684:	9b08      	ldr	r3, [sp, #32]
 8005686:	f108 36ff 	add.w	r6, r8, #4294967295
 800568a:	42b3      	cmp	r3, r6
 800568c:	bfb7      	itett	lt
 800568e:	9b08      	ldrlt	r3, [sp, #32]
 8005690:	1b9e      	subge	r6, r3, r6
 8005692:	1af2      	sublt	r2, r6, r3
 8005694:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005696:	bfbf      	itttt	lt
 8005698:	9608      	strlt	r6, [sp, #32]
 800569a:	189b      	addlt	r3, r3, r2
 800569c:	930c      	strlt	r3, [sp, #48]	; 0x30
 800569e:	2600      	movlt	r6, #0
 80056a0:	f1b8 0f00 	cmp.w	r8, #0
 80056a4:	bfb9      	ittee	lt
 80056a6:	eba9 0508 	sublt.w	r5, r9, r8
 80056aa:	2300      	movlt	r3, #0
 80056ac:	464d      	movge	r5, r9
 80056ae:	4643      	movge	r3, r8
 80056b0:	e781      	b.n	80055b6 <_dtoa_r+0x6de>
 80056b2:	9e08      	ldr	r6, [sp, #32]
 80056b4:	464d      	mov	r5, r9
 80056b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80056b8:	e786      	b.n	80055c8 <_dtoa_r+0x6f0>
 80056ba:	9a08      	ldr	r2, [sp, #32]
 80056bc:	e7ad      	b.n	800561a <_dtoa_r+0x742>
 80056be:	2300      	movs	r3, #0
 80056c0:	e7d6      	b.n	8005670 <_dtoa_r+0x798>
 80056c2:	9b02      	ldr	r3, [sp, #8]
 80056c4:	e7d4      	b.n	8005670 <_dtoa_r+0x798>
 80056c6:	2300      	movs	r3, #0
 80056c8:	9308      	str	r3, [sp, #32]
 80056ca:	6933      	ldr	r3, [r6, #16]
 80056cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80056d0:	6918      	ldr	r0, [r3, #16]
 80056d2:	f000 ff4a 	bl	800656a <__hi0bits>
 80056d6:	f1c0 0020 	rsb	r0, r0, #32
 80056da:	9b07      	ldr	r3, [sp, #28]
 80056dc:	4418      	add	r0, r3
 80056de:	f010 001f 	ands.w	r0, r0, #31
 80056e2:	d047      	beq.n	8005774 <_dtoa_r+0x89c>
 80056e4:	f1c0 0320 	rsb	r3, r0, #32
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	dd3b      	ble.n	8005764 <_dtoa_r+0x88c>
 80056ec:	9b07      	ldr	r3, [sp, #28]
 80056ee:	f1c0 001c 	rsb	r0, r0, #28
 80056f2:	4481      	add	r9, r0
 80056f4:	4405      	add	r5, r0
 80056f6:	4403      	add	r3, r0
 80056f8:	9307      	str	r3, [sp, #28]
 80056fa:	f1b9 0f00 	cmp.w	r9, #0
 80056fe:	dd05      	ble.n	800570c <_dtoa_r+0x834>
 8005700:	464a      	mov	r2, r9
 8005702:	9906      	ldr	r1, [sp, #24]
 8005704:	4620      	mov	r0, r4
 8005706:	f001 f85d 	bl	80067c4 <__lshift>
 800570a:	9006      	str	r0, [sp, #24]
 800570c:	9b07      	ldr	r3, [sp, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	dd05      	ble.n	800571e <_dtoa_r+0x846>
 8005712:	4631      	mov	r1, r6
 8005714:	461a      	mov	r2, r3
 8005716:	4620      	mov	r0, r4
 8005718:	f001 f854 	bl	80067c4 <__lshift>
 800571c:	4606      	mov	r6, r0
 800571e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005720:	b353      	cbz	r3, 8005778 <_dtoa_r+0x8a0>
 8005722:	4631      	mov	r1, r6
 8005724:	9806      	ldr	r0, [sp, #24]
 8005726:	f001 f8a1 	bl	800686c <__mcmp>
 800572a:	2800      	cmp	r0, #0
 800572c:	da24      	bge.n	8005778 <_dtoa_r+0x8a0>
 800572e:	2300      	movs	r3, #0
 8005730:	220a      	movs	r2, #10
 8005732:	9906      	ldr	r1, [sp, #24]
 8005734:	4620      	mov	r0, r4
 8005736:	f000 fedd 	bl	80064f4 <__multadd>
 800573a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005740:	9006      	str	r0, [sp, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8148 	beq.w	80059d8 <_dtoa_r+0xb00>
 8005748:	2300      	movs	r3, #0
 800574a:	4639      	mov	r1, r7
 800574c:	220a      	movs	r2, #10
 800574e:	4620      	mov	r0, r4
 8005750:	f000 fed0 	bl	80064f4 <__multadd>
 8005754:	9b04      	ldr	r3, [sp, #16]
 8005756:	4607      	mov	r7, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	dc4d      	bgt.n	80057f8 <_dtoa_r+0x920>
 800575c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800575e:	2b02      	cmp	r3, #2
 8005760:	dd4a      	ble.n	80057f8 <_dtoa_r+0x920>
 8005762:	e011      	b.n	8005788 <_dtoa_r+0x8b0>
 8005764:	d0c9      	beq.n	80056fa <_dtoa_r+0x822>
 8005766:	9a07      	ldr	r2, [sp, #28]
 8005768:	331c      	adds	r3, #28
 800576a:	441a      	add	r2, r3
 800576c:	4499      	add	r9, r3
 800576e:	441d      	add	r5, r3
 8005770:	4613      	mov	r3, r2
 8005772:	e7c1      	b.n	80056f8 <_dtoa_r+0x820>
 8005774:	4603      	mov	r3, r0
 8005776:	e7f6      	b.n	8005766 <_dtoa_r+0x88e>
 8005778:	f1b8 0f00 	cmp.w	r8, #0
 800577c:	dc36      	bgt.n	80057ec <_dtoa_r+0x914>
 800577e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005780:	2b02      	cmp	r3, #2
 8005782:	dd33      	ble.n	80057ec <_dtoa_r+0x914>
 8005784:	f8cd 8010 	str.w	r8, [sp, #16]
 8005788:	9b04      	ldr	r3, [sp, #16]
 800578a:	b963      	cbnz	r3, 80057a6 <_dtoa_r+0x8ce>
 800578c:	4631      	mov	r1, r6
 800578e:	2205      	movs	r2, #5
 8005790:	4620      	mov	r0, r4
 8005792:	f000 feaf 	bl	80064f4 <__multadd>
 8005796:	4601      	mov	r1, r0
 8005798:	4606      	mov	r6, r0
 800579a:	9806      	ldr	r0, [sp, #24]
 800579c:	f001 f866 	bl	800686c <__mcmp>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	f73f add2 	bgt.w	800534a <_dtoa_r+0x472>
 80057a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80057a8:	465d      	mov	r5, fp
 80057aa:	ea6f 0a03 	mvn.w	sl, r3
 80057ae:	f04f 0900 	mov.w	r9, #0
 80057b2:	4631      	mov	r1, r6
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 fe94 	bl	80064e2 <_Bfree>
 80057ba:	2f00      	cmp	r7, #0
 80057bc:	f43f aebd 	beq.w	800553a <_dtoa_r+0x662>
 80057c0:	f1b9 0f00 	cmp.w	r9, #0
 80057c4:	d005      	beq.n	80057d2 <_dtoa_r+0x8fa>
 80057c6:	45b9      	cmp	r9, r7
 80057c8:	d003      	beq.n	80057d2 <_dtoa_r+0x8fa>
 80057ca:	4649      	mov	r1, r9
 80057cc:	4620      	mov	r0, r4
 80057ce:	f000 fe88 	bl	80064e2 <_Bfree>
 80057d2:	4639      	mov	r1, r7
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 fe84 	bl	80064e2 <_Bfree>
 80057da:	e6ae      	b.n	800553a <_dtoa_r+0x662>
 80057dc:	2600      	movs	r6, #0
 80057de:	4637      	mov	r7, r6
 80057e0:	e7e1      	b.n	80057a6 <_dtoa_r+0x8ce>
 80057e2:	46ba      	mov	sl, r7
 80057e4:	4637      	mov	r7, r6
 80057e6:	e5b0      	b.n	800534a <_dtoa_r+0x472>
 80057e8:	40240000 	.word	0x40240000
 80057ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ee:	f8cd 8010 	str.w	r8, [sp, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80f7 	beq.w	80059e6 <_dtoa_r+0xb0e>
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	dd05      	ble.n	8005808 <_dtoa_r+0x930>
 80057fc:	4639      	mov	r1, r7
 80057fe:	462a      	mov	r2, r5
 8005800:	4620      	mov	r0, r4
 8005802:	f000 ffdf 	bl	80067c4 <__lshift>
 8005806:	4607      	mov	r7, r0
 8005808:	9b08      	ldr	r3, [sp, #32]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d04c      	beq.n	80058a8 <_dtoa_r+0x9d0>
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4620      	mov	r0, r4
 8005812:	f000 fe41 	bl	8006498 <_Balloc>
 8005816:	4605      	mov	r5, r0
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	f107 010c 	add.w	r1, r7, #12
 800581e:	3202      	adds	r2, #2
 8005820:	0092      	lsls	r2, r2, #2
 8005822:	300c      	adds	r0, #12
 8005824:	f000 fe20 	bl	8006468 <memcpy>
 8005828:	2201      	movs	r2, #1
 800582a:	4629      	mov	r1, r5
 800582c:	4620      	mov	r0, r4
 800582e:	f000 ffc9 	bl	80067c4 <__lshift>
 8005832:	46b9      	mov	r9, r7
 8005834:	4607      	mov	r7, r0
 8005836:	9b02      	ldr	r3, [sp, #8]
 8005838:	f8cd b01c 	str.w	fp, [sp, #28]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	9308      	str	r3, [sp, #32]
 8005842:	4631      	mov	r1, r6
 8005844:	9806      	ldr	r0, [sp, #24]
 8005846:	f7ff fab9 	bl	8004dbc <quorem>
 800584a:	4649      	mov	r1, r9
 800584c:	4605      	mov	r5, r0
 800584e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005852:	9806      	ldr	r0, [sp, #24]
 8005854:	f001 f80a 	bl	800686c <__mcmp>
 8005858:	463a      	mov	r2, r7
 800585a:	9002      	str	r0, [sp, #8]
 800585c:	4631      	mov	r1, r6
 800585e:	4620      	mov	r0, r4
 8005860:	f001 f81e 	bl	80068a0 <__mdiff>
 8005864:	68c3      	ldr	r3, [r0, #12]
 8005866:	4602      	mov	r2, r0
 8005868:	bb03      	cbnz	r3, 80058ac <_dtoa_r+0x9d4>
 800586a:	4601      	mov	r1, r0
 800586c:	9009      	str	r0, [sp, #36]	; 0x24
 800586e:	9806      	ldr	r0, [sp, #24]
 8005870:	f000 fffc 	bl	800686c <__mcmp>
 8005874:	4603      	mov	r3, r0
 8005876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005878:	4611      	mov	r1, r2
 800587a:	4620      	mov	r0, r4
 800587c:	9309      	str	r3, [sp, #36]	; 0x24
 800587e:	f000 fe30 	bl	80064e2 <_Bfree>
 8005882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005884:	b9a3      	cbnz	r3, 80058b0 <_dtoa_r+0x9d8>
 8005886:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005888:	b992      	cbnz	r2, 80058b0 <_dtoa_r+0x9d8>
 800588a:	9a08      	ldr	r2, [sp, #32]
 800588c:	b982      	cbnz	r2, 80058b0 <_dtoa_r+0x9d8>
 800588e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005892:	d029      	beq.n	80058e8 <_dtoa_r+0xa10>
 8005894:	9b02      	ldr	r3, [sp, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	dd01      	ble.n	800589e <_dtoa_r+0x9c6>
 800589a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800589e:	9b07      	ldr	r3, [sp, #28]
 80058a0:	1c5d      	adds	r5, r3, #1
 80058a2:	f883 8000 	strb.w	r8, [r3]
 80058a6:	e784      	b.n	80057b2 <_dtoa_r+0x8da>
 80058a8:	4638      	mov	r0, r7
 80058aa:	e7c2      	b.n	8005832 <_dtoa_r+0x95a>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e7e3      	b.n	8005878 <_dtoa_r+0x9a0>
 80058b0:	9a02      	ldr	r2, [sp, #8]
 80058b2:	2a00      	cmp	r2, #0
 80058b4:	db04      	blt.n	80058c0 <_dtoa_r+0x9e8>
 80058b6:	d124      	bne.n	8005902 <_dtoa_r+0xa2a>
 80058b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058ba:	bb12      	cbnz	r2, 8005902 <_dtoa_r+0xa2a>
 80058bc:	9a08      	ldr	r2, [sp, #32]
 80058be:	bb02      	cbnz	r2, 8005902 <_dtoa_r+0xa2a>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	ddec      	ble.n	800589e <_dtoa_r+0x9c6>
 80058c4:	2201      	movs	r2, #1
 80058c6:	9906      	ldr	r1, [sp, #24]
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 ff7b 	bl	80067c4 <__lshift>
 80058ce:	4631      	mov	r1, r6
 80058d0:	9006      	str	r0, [sp, #24]
 80058d2:	f000 ffcb 	bl	800686c <__mcmp>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	dc03      	bgt.n	80058e2 <_dtoa_r+0xa0a>
 80058da:	d1e0      	bne.n	800589e <_dtoa_r+0x9c6>
 80058dc:	f018 0f01 	tst.w	r8, #1
 80058e0:	d0dd      	beq.n	800589e <_dtoa_r+0x9c6>
 80058e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80058e6:	d1d8      	bne.n	800589a <_dtoa_r+0x9c2>
 80058e8:	9b07      	ldr	r3, [sp, #28]
 80058ea:	9a07      	ldr	r2, [sp, #28]
 80058ec:	1c5d      	adds	r5, r3, #1
 80058ee:	2339      	movs	r3, #57	; 0x39
 80058f0:	7013      	strb	r3, [r2, #0]
 80058f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058f6:	1e6a      	subs	r2, r5, #1
 80058f8:	2b39      	cmp	r3, #57	; 0x39
 80058fa:	d04e      	beq.n	800599a <_dtoa_r+0xac2>
 80058fc:	3301      	adds	r3, #1
 80058fe:	7013      	strb	r3, [r2, #0]
 8005900:	e757      	b.n	80057b2 <_dtoa_r+0x8da>
 8005902:	9a07      	ldr	r2, [sp, #28]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f102 0501 	add.w	r5, r2, #1
 800590a:	dd06      	ble.n	800591a <_dtoa_r+0xa42>
 800590c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005910:	d0ea      	beq.n	80058e8 <_dtoa_r+0xa10>
 8005912:	f108 0801 	add.w	r8, r8, #1
 8005916:	9b07      	ldr	r3, [sp, #28]
 8005918:	e7c3      	b.n	80058a2 <_dtoa_r+0x9ca>
 800591a:	9a04      	ldr	r2, [sp, #16]
 800591c:	eba5 030b 	sub.w	r3, r5, fp
 8005920:	4293      	cmp	r3, r2
 8005922:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005926:	d021      	beq.n	800596c <_dtoa_r+0xa94>
 8005928:	2300      	movs	r3, #0
 800592a:	220a      	movs	r2, #10
 800592c:	9906      	ldr	r1, [sp, #24]
 800592e:	4620      	mov	r0, r4
 8005930:	f000 fde0 	bl	80064f4 <__multadd>
 8005934:	45b9      	cmp	r9, r7
 8005936:	9006      	str	r0, [sp, #24]
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	f04f 020a 	mov.w	r2, #10
 8005940:	4649      	mov	r1, r9
 8005942:	4620      	mov	r0, r4
 8005944:	d105      	bne.n	8005952 <_dtoa_r+0xa7a>
 8005946:	f000 fdd5 	bl	80064f4 <__multadd>
 800594a:	4681      	mov	r9, r0
 800594c:	4607      	mov	r7, r0
 800594e:	9507      	str	r5, [sp, #28]
 8005950:	e777      	b.n	8005842 <_dtoa_r+0x96a>
 8005952:	f000 fdcf 	bl	80064f4 <__multadd>
 8005956:	4639      	mov	r1, r7
 8005958:	4681      	mov	r9, r0
 800595a:	2300      	movs	r3, #0
 800595c:	220a      	movs	r2, #10
 800595e:	4620      	mov	r0, r4
 8005960:	f000 fdc8 	bl	80064f4 <__multadd>
 8005964:	4607      	mov	r7, r0
 8005966:	e7f2      	b.n	800594e <_dtoa_r+0xa76>
 8005968:	f04f 0900 	mov.w	r9, #0
 800596c:	2201      	movs	r2, #1
 800596e:	9906      	ldr	r1, [sp, #24]
 8005970:	4620      	mov	r0, r4
 8005972:	f000 ff27 	bl	80067c4 <__lshift>
 8005976:	4631      	mov	r1, r6
 8005978:	9006      	str	r0, [sp, #24]
 800597a:	f000 ff77 	bl	800686c <__mcmp>
 800597e:	2800      	cmp	r0, #0
 8005980:	dcb7      	bgt.n	80058f2 <_dtoa_r+0xa1a>
 8005982:	d102      	bne.n	800598a <_dtoa_r+0xab2>
 8005984:	f018 0f01 	tst.w	r8, #1
 8005988:	d1b3      	bne.n	80058f2 <_dtoa_r+0xa1a>
 800598a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800598e:	1e6a      	subs	r2, r5, #1
 8005990:	2b30      	cmp	r3, #48	; 0x30
 8005992:	f47f af0e 	bne.w	80057b2 <_dtoa_r+0x8da>
 8005996:	4615      	mov	r5, r2
 8005998:	e7f7      	b.n	800598a <_dtoa_r+0xab2>
 800599a:	4593      	cmp	fp, r2
 800599c:	d105      	bne.n	80059aa <_dtoa_r+0xad2>
 800599e:	2331      	movs	r3, #49	; 0x31
 80059a0:	f10a 0a01 	add.w	sl, sl, #1
 80059a4:	f88b 3000 	strb.w	r3, [fp]
 80059a8:	e703      	b.n	80057b2 <_dtoa_r+0x8da>
 80059aa:	4615      	mov	r5, r2
 80059ac:	e7a1      	b.n	80058f2 <_dtoa_r+0xa1a>
 80059ae:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005a14 <_dtoa_r+0xb3c>
 80059b2:	f7ff bac9 	b.w	8004f48 <_dtoa_r+0x70>
 80059b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059b8:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8005a18 <_dtoa_r+0xb40>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f43f aac3 	beq.w	8004f48 <_dtoa_r+0x70>
 80059c2:	f10b 0308 	add.w	r3, fp, #8
 80059c6:	f7ff babd 	b.w	8004f44 <_dtoa_r+0x6c>
 80059ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	f77f ae3b 	ble.w	8005648 <_dtoa_r+0x770>
 80059d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059d4:	9308      	str	r3, [sp, #32]
 80059d6:	e64f      	b.n	8005678 <_dtoa_r+0x7a0>
 80059d8:	9b04      	ldr	r3, [sp, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	dc03      	bgt.n	80059e6 <_dtoa_r+0xb0e>
 80059de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	f73f aed1 	bgt.w	8005788 <_dtoa_r+0x8b0>
 80059e6:	465d      	mov	r5, fp
 80059e8:	4631      	mov	r1, r6
 80059ea:	9806      	ldr	r0, [sp, #24]
 80059ec:	f7ff f9e6 	bl	8004dbc <quorem>
 80059f0:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80059f4:	f805 8b01 	strb.w	r8, [r5], #1
 80059f8:	9a04      	ldr	r2, [sp, #16]
 80059fa:	eba5 030b 	sub.w	r3, r5, fp
 80059fe:	429a      	cmp	r2, r3
 8005a00:	ddb2      	ble.n	8005968 <_dtoa_r+0xa90>
 8005a02:	2300      	movs	r3, #0
 8005a04:	220a      	movs	r2, #10
 8005a06:	9906      	ldr	r1, [sp, #24]
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f000 fd73 	bl	80064f4 <__multadd>
 8005a0e:	9006      	str	r0, [sp, #24]
 8005a10:	e7ea      	b.n	80059e8 <_dtoa_r+0xb10>
 8005a12:	bf00      	nop
 8005a14:	0800776a 	.word	0x0800776a
 8005a18:	0800778c 	.word	0x0800778c

08005a1c <__sflush_r>:
 8005a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	b293      	uxth	r3, r2
 8005a26:	4605      	mov	r5, r0
 8005a28:	0718      	lsls	r0, r3, #28
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	d45f      	bmi.n	8005aee <__sflush_r+0xd2>
 8005a2e:	684b      	ldr	r3, [r1, #4]
 8005a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	818a      	strh	r2, [r1, #12]
 8005a38:	dc05      	bgt.n	8005a46 <__sflush_r+0x2a>
 8005a3a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	dc02      	bgt.n	8005a46 <__sflush_r+0x2a>
 8005a40:	2000      	movs	r0, #0
 8005a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a48:	2e00      	cmp	r6, #0
 8005a4a:	d0f9      	beq.n	8005a40 <__sflush_r+0x24>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a52:	682f      	ldr	r7, [r5, #0]
 8005a54:	69e1      	ldr	r1, [r4, #28]
 8005a56:	602b      	str	r3, [r5, #0]
 8005a58:	d036      	beq.n	8005ac8 <__sflush_r+0xac>
 8005a5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	075a      	lsls	r2, r3, #29
 8005a60:	d505      	bpl.n	8005a6e <__sflush_r+0x52>
 8005a62:	6863      	ldr	r3, [r4, #4]
 8005a64:	1ac0      	subs	r0, r0, r3
 8005a66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a68:	b10b      	cbz	r3, 8005a6e <__sflush_r+0x52>
 8005a6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a6c:	1ac0      	subs	r0, r0, r3
 8005a6e:	2300      	movs	r3, #0
 8005a70:	4602      	mov	r2, r0
 8005a72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a74:	69e1      	ldr	r1, [r4, #28]
 8005a76:	4628      	mov	r0, r5
 8005a78:	47b0      	blx	r6
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	d106      	bne.n	8005a8e <__sflush_r+0x72>
 8005a80:	6829      	ldr	r1, [r5, #0]
 8005a82:	291d      	cmp	r1, #29
 8005a84:	d84c      	bhi.n	8005b20 <__sflush_r+0x104>
 8005a86:	4a2b      	ldr	r2, [pc, #172]	; (8005b34 <__sflush_r+0x118>)
 8005a88:	40ca      	lsrs	r2, r1
 8005a8a:	07d6      	lsls	r6, r2, #31
 8005a8c:	d548      	bpl.n	8005b20 <__sflush_r+0x104>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a94:	b21b      	sxth	r3, r3
 8005a96:	6062      	str	r2, [r4, #4]
 8005a98:	6922      	ldr	r2, [r4, #16]
 8005a9a:	04d9      	lsls	r1, r3, #19
 8005a9c:	81a3      	strh	r3, [r4, #12]
 8005a9e:	6022      	str	r2, [r4, #0]
 8005aa0:	d504      	bpl.n	8005aac <__sflush_r+0x90>
 8005aa2:	1c42      	adds	r2, r0, #1
 8005aa4:	d101      	bne.n	8005aaa <__sflush_r+0x8e>
 8005aa6:	682b      	ldr	r3, [r5, #0]
 8005aa8:	b903      	cbnz	r3, 8005aac <__sflush_r+0x90>
 8005aaa:	6520      	str	r0, [r4, #80]	; 0x50
 8005aac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005aae:	602f      	str	r7, [r5, #0]
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	d0c5      	beq.n	8005a40 <__sflush_r+0x24>
 8005ab4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	d002      	beq.n	8005ac2 <__sflush_r+0xa6>
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 f937 	bl	8005d30 <_free_r>
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	6320      	str	r0, [r4, #48]	; 0x30
 8005ac6:	e7bc      	b.n	8005a42 <__sflush_r+0x26>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b0      	blx	r6
 8005ace:	1c41      	adds	r1, r0, #1
 8005ad0:	d1c4      	bne.n	8005a5c <__sflush_r+0x40>
 8005ad2:	682b      	ldr	r3, [r5, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0c1      	beq.n	8005a5c <__sflush_r+0x40>
 8005ad8:	2b1d      	cmp	r3, #29
 8005ada:	d001      	beq.n	8005ae0 <__sflush_r+0xc4>
 8005adc:	2b16      	cmp	r3, #22
 8005ade:	d101      	bne.n	8005ae4 <__sflush_r+0xc8>
 8005ae0:	602f      	str	r7, [r5, #0]
 8005ae2:	e7ad      	b.n	8005a40 <__sflush_r+0x24>
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aea:	81a3      	strh	r3, [r4, #12]
 8005aec:	e7a9      	b.n	8005a42 <__sflush_r+0x26>
 8005aee:	690f      	ldr	r7, [r1, #16]
 8005af0:	2f00      	cmp	r7, #0
 8005af2:	d0a5      	beq.n	8005a40 <__sflush_r+0x24>
 8005af4:	079b      	lsls	r3, r3, #30
 8005af6:	bf18      	it	ne
 8005af8:	2300      	movne	r3, #0
 8005afa:	680e      	ldr	r6, [r1, #0]
 8005afc:	bf08      	it	eq
 8005afe:	694b      	ldreq	r3, [r1, #20]
 8005b00:	eba6 0807 	sub.w	r8, r6, r7
 8005b04:	600f      	str	r7, [r1, #0]
 8005b06:	608b      	str	r3, [r1, #8]
 8005b08:	f1b8 0f00 	cmp.w	r8, #0
 8005b0c:	dd98      	ble.n	8005a40 <__sflush_r+0x24>
 8005b0e:	4643      	mov	r3, r8
 8005b10:	463a      	mov	r2, r7
 8005b12:	69e1      	ldr	r1, [r4, #28]
 8005b14:	4628      	mov	r0, r5
 8005b16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b18:	47b0      	blx	r6
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	dc06      	bgt.n	8005b2c <__sflush_r+0x110>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2a:	e78a      	b.n	8005a42 <__sflush_r+0x26>
 8005b2c:	4407      	add	r7, r0
 8005b2e:	eba8 0800 	sub.w	r8, r8, r0
 8005b32:	e7e9      	b.n	8005b08 <__sflush_r+0xec>
 8005b34:	20400001 	.word	0x20400001

08005b38 <_fflush_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	b118      	cbz	r0, 8005b48 <_fflush_r+0x10>
 8005b40:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005b42:	b90b      	cbnz	r3, 8005b48 <_fflush_r+0x10>
 8005b44:	f000 f864 	bl	8005c10 <__sinit>
 8005b48:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8005b4c:	b1b8      	cbz	r0, 8005b7e <_fflush_r+0x46>
 8005b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b50:	07db      	lsls	r3, r3, #31
 8005b52:	d404      	bmi.n	8005b5e <_fflush_r+0x26>
 8005b54:	0581      	lsls	r1, r0, #22
 8005b56:	d402      	bmi.n	8005b5e <_fflush_r+0x26>
 8005b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b5a:	f000 f9d3 	bl	8005f04 <__retarget_lock_acquire_recursive>
 8005b5e:	4628      	mov	r0, r5
 8005b60:	4621      	mov	r1, r4
 8005b62:	f7ff ff5b 	bl	8005a1c <__sflush_r>
 8005b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b68:	4605      	mov	r5, r0
 8005b6a:	07da      	lsls	r2, r3, #31
 8005b6c:	d405      	bmi.n	8005b7a <_fflush_r+0x42>
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	059b      	lsls	r3, r3, #22
 8005b72:	d402      	bmi.n	8005b7a <_fflush_r+0x42>
 8005b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b76:	f000 f9c6 	bl	8005f06 <__retarget_lock_release_recursive>
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	bd38      	pop	{r3, r4, r5, pc}
 8005b7e:	4605      	mov	r5, r0
 8005b80:	e7fb      	b.n	8005b7a <_fflush_r+0x42>
	...

08005b84 <std>:
 8005b84:	2300      	movs	r3, #0
 8005b86:	b510      	push	{r4, lr}
 8005b88:	4604      	mov	r4, r0
 8005b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b8e:	6083      	str	r3, [r0, #8]
 8005b90:	8181      	strh	r1, [r0, #12]
 8005b92:	6643      	str	r3, [r0, #100]	; 0x64
 8005b94:	81c2      	strh	r2, [r0, #14]
 8005b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b9a:	6183      	str	r3, [r0, #24]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	305c      	adds	r0, #92	; 0x5c
 8005ba2:	f7fd fde5 	bl	8003770 <memset>
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <std+0x40>)
 8005ba8:	61e4      	str	r4, [r4, #28]
 8005baa:	6223      	str	r3, [r4, #32]
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <std+0x44>)
 8005bae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bb2:	6263      	str	r3, [r4, #36]	; 0x24
 8005bb4:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <std+0x48>)
 8005bb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <std+0x4c>)
 8005bba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc0:	f000 b99e 	b.w	8005f00 <__retarget_lock_init_recursive>
 8005bc4:	08006a81 	.word	0x08006a81
 8005bc8:	08006aa3 	.word	0x08006aa3
 8005bcc:	08006adb 	.word	0x08006adb
 8005bd0:	08006aff 	.word	0x08006aff

08005bd4 <_cleanup_r>:
 8005bd4:	4901      	ldr	r1, [pc, #4]	; (8005bdc <_cleanup_r+0x8>)
 8005bd6:	f000 b967 	b.w	8005ea8 <_fwalk_reent>
 8005bda:	bf00      	nop
 8005bdc:	08006cfd 	.word	0x08006cfd

08005be0 <__sfp_lock_acquire>:
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <__sfp_lock_acquire+0x8>)
 8005be2:	f000 b98f 	b.w	8005f04 <__retarget_lock_acquire_recursive>
 8005be6:	bf00      	nop
 8005be8:	20000b68 	.word	0x20000b68

08005bec <__sfp_lock_release>:
 8005bec:	4801      	ldr	r0, [pc, #4]	; (8005bf4 <__sfp_lock_release+0x8>)
 8005bee:	f000 b98a 	b.w	8005f06 <__retarget_lock_release_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	20000b68 	.word	0x20000b68

08005bf8 <__sinit_lock_acquire>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	; (8005c00 <__sinit_lock_acquire+0x8>)
 8005bfa:	f000 b983 	b.w	8005f04 <__retarget_lock_acquire_recursive>
 8005bfe:	bf00      	nop
 8005c00:	20000b63 	.word	0x20000b63

08005c04 <__sinit_lock_release>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__sinit_lock_release+0x8>)
 8005c06:	f000 b97e 	b.w	8005f06 <__retarget_lock_release_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	20000b63 	.word	0x20000b63

08005c10 <__sinit>:
 8005c10:	b510      	push	{r4, lr}
 8005c12:	4604      	mov	r4, r0
 8005c14:	f7ff fff0 	bl	8005bf8 <__sinit_lock_acquire>
 8005c18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c1a:	b11a      	cbz	r2, 8005c24 <__sinit+0x14>
 8005c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c20:	f7ff bff0 	b.w	8005c04 <__sinit_lock_release>
 8005c24:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <__sinit+0x4c>)
 8005c26:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8005c2a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8005c32:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8005c36:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8005c3a:	2104      	movs	r1, #4
 8005c3c:	6860      	ldr	r0, [r4, #4]
 8005c3e:	f7ff ffa1 	bl	8005b84 <std>
 8005c42:	2201      	movs	r2, #1
 8005c44:	2109      	movs	r1, #9
 8005c46:	68a0      	ldr	r0, [r4, #8]
 8005c48:	f7ff ff9c 	bl	8005b84 <std>
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	2112      	movs	r1, #18
 8005c50:	68e0      	ldr	r0, [r4, #12]
 8005c52:	f7ff ff97 	bl	8005b84 <std>
 8005c56:	2301      	movs	r3, #1
 8005c58:	63a3      	str	r3, [r4, #56]	; 0x38
 8005c5a:	e7df      	b.n	8005c1c <__sinit+0xc>
 8005c5c:	08005bd5 	.word	0x08005bd5

08005c60 <__libc_fini_array>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4d07      	ldr	r5, [pc, #28]	; (8005c80 <__libc_fini_array+0x20>)
 8005c64:	4c07      	ldr	r4, [pc, #28]	; (8005c84 <__libc_fini_array+0x24>)
 8005c66:	1b64      	subs	r4, r4, r5
 8005c68:	10a4      	asrs	r4, r4, #2
 8005c6a:	b91c      	cbnz	r4, 8005c74 <__libc_fini_array+0x14>
 8005c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c70:	f001 bd02 	b.w	8007678 <_fini>
 8005c74:	3c01      	subs	r4, #1
 8005c76:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005c7a:	4798      	blx	r3
 8005c7c:	e7f5      	b.n	8005c6a <__libc_fini_array+0xa>
 8005c7e:	bf00      	nop
 8005c80:	080079b8 	.word	0x080079b8
 8005c84:	080079bc 	.word	0x080079bc

08005c88 <_malloc_trim_r>:
 8005c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	2008      	movs	r0, #8
 8005c90:	460c      	mov	r4, r1
 8005c92:	f000 ff4d 	bl	8006b30 <sysconf>
 8005c96:	4680      	mov	r8, r0
 8005c98:	4f22      	ldr	r7, [pc, #136]	; (8005d24 <_malloc_trim_r+0x9c>)
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 fbf0 	bl	8006480 <__malloc_lock>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	685e      	ldr	r6, [r3, #4]
 8005ca4:	f026 0603 	bic.w	r6, r6, #3
 8005ca8:	1b34      	subs	r4, r6, r4
 8005caa:	3c11      	subs	r4, #17
 8005cac:	4444      	add	r4, r8
 8005cae:	fbb4 f4f8 	udiv	r4, r4, r8
 8005cb2:	3c01      	subs	r4, #1
 8005cb4:	fb08 f404 	mul.w	r4, r8, r4
 8005cb8:	45a0      	cmp	r8, r4
 8005cba:	dd05      	ble.n	8005cc8 <_malloc_trim_r+0x40>
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f000 fbe5 	bl	800648c <__malloc_unlock>
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 fec8 	bl	8006a60 <_sbrk_r>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4433      	add	r3, r6
 8005cd4:	4298      	cmp	r0, r3
 8005cd6:	d1f1      	bne.n	8005cbc <_malloc_trim_r+0x34>
 8005cd8:	4261      	negs	r1, r4
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 fec0 	bl	8006a60 <_sbrk_r>
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d110      	bne.n	8005d06 <_malloc_trim_r+0x7e>
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 feba 	bl	8006a60 <_sbrk_r>
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	1a83      	subs	r3, r0, r2
 8005cf0:	2b0f      	cmp	r3, #15
 8005cf2:	dde3      	ble.n	8005cbc <_malloc_trim_r+0x34>
 8005cf4:	490c      	ldr	r1, [pc, #48]	; (8005d28 <_malloc_trim_r+0xa0>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6809      	ldr	r1, [r1, #0]
 8005cfc:	6053      	str	r3, [r2, #4]
 8005cfe:	1a40      	subs	r0, r0, r1
 8005d00:	490a      	ldr	r1, [pc, #40]	; (8005d2c <_malloc_trim_r+0xa4>)
 8005d02:	6008      	str	r0, [r1, #0]
 8005d04:	e7da      	b.n	8005cbc <_malloc_trim_r+0x34>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <_malloc_trim_r+0xa4>)
 8005d0a:	1b36      	subs	r6, r6, r4
 8005d0c:	f046 0601 	orr.w	r6, r6, #1
 8005d10:	605e      	str	r6, [r3, #4]
 8005d12:	6813      	ldr	r3, [r2, #0]
 8005d14:	4628      	mov	r0, r5
 8005d16:	1b1c      	subs	r4, r3, r4
 8005d18:	6014      	str	r4, [r2, #0]
 8005d1a:	f000 fbb7 	bl	800648c <__malloc_unlock>
 8005d1e:	2001      	movs	r0, #1
 8005d20:	e7d0      	b.n	8005cc4 <_malloc_trim_r+0x3c>
 8005d22:	bf00      	nop
 8005d24:	20000444 	.word	0x20000444
 8005d28:	2000084c 	.word	0x2000084c
 8005d2c:	200009e0 	.word	0x200009e0

08005d30 <_free_r>:
 8005d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d34:	4604      	mov	r4, r0
 8005d36:	4688      	mov	r8, r1
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	f000 80ab 	beq.w	8005e94 <_free_r+0x164>
 8005d3e:	f000 fb9f 	bl	8006480 <__malloc_lock>
 8005d42:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005d46:	4d54      	ldr	r5, [pc, #336]	; (8005e98 <_free_r+0x168>)
 8005d48:	f022 0001 	bic.w	r0, r2, #1
 8005d4c:	f1a8 0308 	sub.w	r3, r8, #8
 8005d50:	181f      	adds	r7, r3, r0
 8005d52:	68a9      	ldr	r1, [r5, #8]
 8005d54:	687e      	ldr	r6, [r7, #4]
 8005d56:	42b9      	cmp	r1, r7
 8005d58:	f026 0603 	bic.w	r6, r6, #3
 8005d5c:	f002 0201 	and.w	r2, r2, #1
 8005d60:	d11b      	bne.n	8005d9a <_free_r+0x6a>
 8005d62:	4430      	add	r0, r6
 8005d64:	b93a      	cbnz	r2, 8005d76 <_free_r+0x46>
 8005d66:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	4410      	add	r0, r2
 8005d6e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8005d72:	60ca      	str	r2, [r1, #12]
 8005d74:	6091      	str	r1, [r2, #8]
 8005d76:	f040 0201 	orr.w	r2, r0, #1
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	60ab      	str	r3, [r5, #8]
 8005d7e:	4b47      	ldr	r3, [pc, #284]	; (8005e9c <_free_r+0x16c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4283      	cmp	r3, r0
 8005d84:	d804      	bhi.n	8005d90 <_free_r+0x60>
 8005d86:	4b46      	ldr	r3, [pc, #280]	; (8005ea0 <_free_r+0x170>)
 8005d88:	4620      	mov	r0, r4
 8005d8a:	6819      	ldr	r1, [r3, #0]
 8005d8c:	f7ff ff7c 	bl	8005c88 <_malloc_trim_r>
 8005d90:	4620      	mov	r0, r4
 8005d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d96:	f000 bb79 	b.w	800648c <__malloc_unlock>
 8005d9a:	607e      	str	r6, [r7, #4]
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	d139      	bne.n	8005e14 <_free_r+0xe4>
 8005da0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005da4:	f105 0c08 	add.w	ip, r5, #8
 8005da8:	1a5b      	subs	r3, r3, r1
 8005daa:	4408      	add	r0, r1
 8005dac:	6899      	ldr	r1, [r3, #8]
 8005dae:	4561      	cmp	r1, ip
 8005db0:	d032      	beq.n	8005e18 <_free_r+0xe8>
 8005db2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005db6:	f8c1 c00c 	str.w	ip, [r1, #12]
 8005dba:	f8cc 1008 	str.w	r1, [ip, #8]
 8005dbe:	19b9      	adds	r1, r7, r6
 8005dc0:	6849      	ldr	r1, [r1, #4]
 8005dc2:	07c9      	lsls	r1, r1, #31
 8005dc4:	d40a      	bmi.n	8005ddc <_free_r+0xac>
 8005dc6:	4430      	add	r0, r6
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	bb3a      	cbnz	r2, 8005e1c <_free_r+0xec>
 8005dcc:	4e35      	ldr	r6, [pc, #212]	; (8005ea4 <_free_r+0x174>)
 8005dce:	42b1      	cmp	r1, r6
 8005dd0:	d124      	bne.n	8005e1c <_free_r+0xec>
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8005dd8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8005ddc:	f040 0101 	orr.w	r1, r0, #1
 8005de0:	6059      	str	r1, [r3, #4]
 8005de2:	5018      	str	r0, [r3, r0]
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	d1d3      	bne.n	8005d90 <_free_r+0x60>
 8005de8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005dec:	d21a      	bcs.n	8005e24 <_free_r+0xf4>
 8005dee:	2201      	movs	r2, #1
 8005df0:	08c0      	lsrs	r0, r0, #3
 8005df2:	1081      	asrs	r1, r0, #2
 8005df4:	408a      	lsls	r2, r1
 8005df6:	6869      	ldr	r1, [r5, #4]
 8005df8:	3001      	adds	r0, #1
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	606a      	str	r2, [r5, #4]
 8005dfe:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005e02:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005e06:	3a08      	subs	r2, #8
 8005e08:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8005e0c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005e10:	60cb      	str	r3, [r1, #12]
 8005e12:	e7bd      	b.n	8005d90 <_free_r+0x60>
 8005e14:	2200      	movs	r2, #0
 8005e16:	e7d2      	b.n	8005dbe <_free_r+0x8e>
 8005e18:	2201      	movs	r2, #1
 8005e1a:	e7d0      	b.n	8005dbe <_free_r+0x8e>
 8005e1c:	68fe      	ldr	r6, [r7, #12]
 8005e1e:	60ce      	str	r6, [r1, #12]
 8005e20:	60b1      	str	r1, [r6, #8]
 8005e22:	e7db      	b.n	8005ddc <_free_r+0xac>
 8005e24:	0a42      	lsrs	r2, r0, #9
 8005e26:	2a04      	cmp	r2, #4
 8005e28:	d813      	bhi.n	8005e52 <_free_r+0x122>
 8005e2a:	0982      	lsrs	r2, r0, #6
 8005e2c:	3238      	adds	r2, #56	; 0x38
 8005e2e:	1c51      	adds	r1, r2, #1
 8005e30:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005e34:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005e38:	428e      	cmp	r6, r1
 8005e3a:	d124      	bne.n	8005e86 <_free_r+0x156>
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	1092      	asrs	r2, r2, #2
 8005e40:	fa00 f202 	lsl.w	r2, r0, r2
 8005e44:	6868      	ldr	r0, [r5, #4]
 8005e46:	4302      	orrs	r2, r0
 8005e48:	606a      	str	r2, [r5, #4]
 8005e4a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8005e4e:	60b3      	str	r3, [r6, #8]
 8005e50:	e7de      	b.n	8005e10 <_free_r+0xe0>
 8005e52:	2a14      	cmp	r2, #20
 8005e54:	d801      	bhi.n	8005e5a <_free_r+0x12a>
 8005e56:	325b      	adds	r2, #91	; 0x5b
 8005e58:	e7e9      	b.n	8005e2e <_free_r+0xfe>
 8005e5a:	2a54      	cmp	r2, #84	; 0x54
 8005e5c:	d802      	bhi.n	8005e64 <_free_r+0x134>
 8005e5e:	0b02      	lsrs	r2, r0, #12
 8005e60:	326e      	adds	r2, #110	; 0x6e
 8005e62:	e7e4      	b.n	8005e2e <_free_r+0xfe>
 8005e64:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005e68:	d802      	bhi.n	8005e70 <_free_r+0x140>
 8005e6a:	0bc2      	lsrs	r2, r0, #15
 8005e6c:	3277      	adds	r2, #119	; 0x77
 8005e6e:	e7de      	b.n	8005e2e <_free_r+0xfe>
 8005e70:	f240 5154 	movw	r1, #1364	; 0x554
 8005e74:	428a      	cmp	r2, r1
 8005e76:	bf9a      	itte	ls
 8005e78:	0c82      	lsrls	r2, r0, #18
 8005e7a:	327c      	addls	r2, #124	; 0x7c
 8005e7c:	227e      	movhi	r2, #126	; 0x7e
 8005e7e:	e7d6      	b.n	8005e2e <_free_r+0xfe>
 8005e80:	6889      	ldr	r1, [r1, #8]
 8005e82:	428e      	cmp	r6, r1
 8005e84:	d004      	beq.n	8005e90 <_free_r+0x160>
 8005e86:	684a      	ldr	r2, [r1, #4]
 8005e88:	f022 0203 	bic.w	r2, r2, #3
 8005e8c:	4282      	cmp	r2, r0
 8005e8e:	d8f7      	bhi.n	8005e80 <_free_r+0x150>
 8005e90:	68ce      	ldr	r6, [r1, #12]
 8005e92:	e7da      	b.n	8005e4a <_free_r+0x11a>
 8005e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e98:	20000444 	.word	0x20000444
 8005e9c:	20000850 	.word	0x20000850
 8005ea0:	20000a10 	.word	0x20000a10
 8005ea4:	2000044c 	.word	0x2000044c

08005ea8 <_fwalk_reent>:
 8005ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eac:	4680      	mov	r8, r0
 8005eae:	4689      	mov	r9, r1
 8005eb0:	2600      	movs	r6, #0
 8005eb2:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8005eb6:	b914      	cbnz	r4, 8005ebe <_fwalk_reent+0x16>
 8005eb8:	4630      	mov	r0, r6
 8005eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ebe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005ec2:	3f01      	subs	r7, #1
 8005ec4:	d501      	bpl.n	8005eca <_fwalk_reent+0x22>
 8005ec6:	6824      	ldr	r4, [r4, #0]
 8005ec8:	e7f5      	b.n	8005eb6 <_fwalk_reent+0xe>
 8005eca:	89ab      	ldrh	r3, [r5, #12]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d907      	bls.n	8005ee0 <_fwalk_reent+0x38>
 8005ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	d003      	beq.n	8005ee0 <_fwalk_reent+0x38>
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4640      	mov	r0, r8
 8005edc:	47c8      	blx	r9
 8005ede:	4306      	orrs	r6, r0
 8005ee0:	3568      	adds	r5, #104	; 0x68
 8005ee2:	e7ee      	b.n	8005ec2 <_fwalk_reent+0x1a>

08005ee4 <_localeconv_r>:
 8005ee4:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <_localeconv_r+0x14>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005eea:	4b04      	ldr	r3, [pc, #16]	; (8005efc <_localeconv_r+0x18>)
 8005eec:	2800      	cmp	r0, #0
 8005eee:	bf08      	it	eq
 8005ef0:	4618      	moveq	r0, r3
 8005ef2:	30f0      	adds	r0, #240	; 0xf0
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20000010 	.word	0x20000010
 8005efc:	20000854 	.word	0x20000854

08005f00 <__retarget_lock_init_recursive>:
 8005f00:	4770      	bx	lr

08005f02 <__retarget_lock_close_recursive>:
 8005f02:	4770      	bx	lr

08005f04 <__retarget_lock_acquire_recursive>:
 8005f04:	4770      	bx	lr

08005f06 <__retarget_lock_release_recursive>:
 8005f06:	4770      	bx	lr

08005f08 <__swhatbuf_r>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	460e      	mov	r6, r1
 8005f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f10:	b096      	sub	sp, #88	; 0x58
 8005f12:	2900      	cmp	r1, #0
 8005f14:	4614      	mov	r4, r2
 8005f16:	461d      	mov	r5, r3
 8005f18:	da09      	bge.n	8005f2e <__swhatbuf_r+0x26>
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	89b3      	ldrh	r3, [r6, #12]
 8005f1e:	602a      	str	r2, [r5, #0]
 8005f20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005f24:	d116      	bne.n	8005f54 <__swhatbuf_r+0x4c>
 8005f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	e015      	b.n	8005f5a <__swhatbuf_r+0x52>
 8005f2e:	466a      	mov	r2, sp
 8005f30:	f000 ffa6 	bl	8006e80 <_fstat_r>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	dbf0      	blt.n	8005f1a <__swhatbuf_r+0x12>
 8005f38:	9a01      	ldr	r2, [sp, #4]
 8005f3a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f46:	425a      	negs	r2, r3
 8005f48:	415a      	adcs	r2, r3
 8005f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f4e:	602a      	str	r2, [r5, #0]
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	e002      	b.n	8005f5a <__swhatbuf_r+0x52>
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	4610      	mov	r0, r2
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	b016      	add	sp, #88	; 0x58
 8005f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f60 <__smakebuf_r>:
 8005f60:	898b      	ldrh	r3, [r1, #12]
 8005f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f64:	079d      	lsls	r5, r3, #30
 8005f66:	4606      	mov	r6, r0
 8005f68:	460c      	mov	r4, r1
 8005f6a:	d507      	bpl.n	8005f7c <__smakebuf_r+0x1c>
 8005f6c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	6123      	str	r3, [r4, #16]
 8005f74:	2301      	movs	r3, #1
 8005f76:	6163      	str	r3, [r4, #20]
 8005f78:	b002      	add	sp, #8
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	ab01      	add	r3, sp, #4
 8005f7e:	466a      	mov	r2, sp
 8005f80:	f7ff ffc2 	bl	8005f08 <__swhatbuf_r>
 8005f84:	9900      	ldr	r1, [sp, #0]
 8005f86:	4605      	mov	r5, r0
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 f829 	bl	8005fe0 <_malloc_r>
 8005f8e:	b948      	cbnz	r0, 8005fa4 <__smakebuf_r+0x44>
 8005f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f94:	059a      	lsls	r2, r3, #22
 8005f96:	d4ef      	bmi.n	8005f78 <__smakebuf_r+0x18>
 8005f98:	f023 0303 	bic.w	r3, r3, #3
 8005f9c:	f043 0302 	orr.w	r3, r3, #2
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	e7e3      	b.n	8005f6c <__smakebuf_r+0xc>
 8005fa4:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <__smakebuf_r+0x7c>)
 8005fa6:	63f3      	str	r3, [r6, #60]	; 0x3c
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	6020      	str	r0, [r4, #0]
 8005fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb0:	81a3      	strh	r3, [r4, #12]
 8005fb2:	9b00      	ldr	r3, [sp, #0]
 8005fb4:	6120      	str	r0, [r4, #16]
 8005fb6:	6163      	str	r3, [r4, #20]
 8005fb8:	9b01      	ldr	r3, [sp, #4]
 8005fba:	b15b      	cbz	r3, 8005fd4 <__smakebuf_r+0x74>
 8005fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f001 f8bd 	bl	8007140 <_isatty_r>
 8005fc6:	b128      	cbz	r0, 8005fd4 <__smakebuf_r+0x74>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	f023 0303 	bic.w	r3, r3, #3
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	81a3      	strh	r3, [r4, #12]
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	431d      	orrs	r5, r3
 8005fd8:	81a5      	strh	r5, [r4, #12]
 8005fda:	e7cd      	b.n	8005f78 <__smakebuf_r+0x18>
 8005fdc:	08005bd5 	.word	0x08005bd5

08005fe0 <_malloc_r>:
 8005fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	f101 050b 	add.w	r5, r1, #11
 8005fe8:	2d16      	cmp	r5, #22
 8005fea:	4606      	mov	r6, r0
 8005fec:	d906      	bls.n	8005ffc <_malloc_r+0x1c>
 8005fee:	f035 0507 	bics.w	r5, r5, #7
 8005ff2:	d504      	bpl.n	8005ffe <_malloc_r+0x1e>
 8005ff4:	230c      	movs	r3, #12
 8005ff6:	6033      	str	r3, [r6, #0]
 8005ff8:	2400      	movs	r4, #0
 8005ffa:	e1a8      	b.n	800634e <_malloc_r+0x36e>
 8005ffc:	2510      	movs	r5, #16
 8005ffe:	428d      	cmp	r5, r1
 8006000:	d3f8      	bcc.n	8005ff4 <_malloc_r+0x14>
 8006002:	4630      	mov	r0, r6
 8006004:	f000 fa3c 	bl	8006480 <__malloc_lock>
 8006008:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800600c:	4fc0      	ldr	r7, [pc, #768]	; (8006310 <_malloc_r+0x330>)
 800600e:	d238      	bcs.n	8006082 <_malloc_r+0xa2>
 8006010:	f105 0208 	add.w	r2, r5, #8
 8006014:	443a      	add	r2, r7
 8006016:	6854      	ldr	r4, [r2, #4]
 8006018:	f1a2 0108 	sub.w	r1, r2, #8
 800601c:	428c      	cmp	r4, r1
 800601e:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8006022:	d102      	bne.n	800602a <_malloc_r+0x4a>
 8006024:	68d4      	ldr	r4, [r2, #12]
 8006026:	42a2      	cmp	r2, r4
 8006028:	d010      	beq.n	800604c <_malloc_r+0x6c>
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006030:	f023 0303 	bic.w	r3, r3, #3
 8006034:	60ca      	str	r2, [r1, #12]
 8006036:	4423      	add	r3, r4
 8006038:	6091      	str	r1, [r2, #8]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	f042 0201 	orr.w	r2, r2, #1
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	4630      	mov	r0, r6
 8006044:	f000 fa22 	bl	800648c <__malloc_unlock>
 8006048:	3408      	adds	r4, #8
 800604a:	e180      	b.n	800634e <_malloc_r+0x36e>
 800604c:	3302      	adds	r3, #2
 800604e:	4ab1      	ldr	r2, [pc, #708]	; (8006314 <_malloc_r+0x334>)
 8006050:	693c      	ldr	r4, [r7, #16]
 8006052:	4611      	mov	r1, r2
 8006054:	4294      	cmp	r4, r2
 8006056:	d075      	beq.n	8006144 <_malloc_r+0x164>
 8006058:	6860      	ldr	r0, [r4, #4]
 800605a:	f020 0c03 	bic.w	ip, r0, #3
 800605e:	ebac 0005 	sub.w	r0, ip, r5
 8006062:	280f      	cmp	r0, #15
 8006064:	dd48      	ble.n	80060f8 <_malloc_r+0x118>
 8006066:	1963      	adds	r3, r4, r5
 8006068:	f045 0501 	orr.w	r5, r5, #1
 800606c:	6065      	str	r5, [r4, #4]
 800606e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8006072:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8006076:	f040 0201 	orr.w	r2, r0, #1
 800607a:	605a      	str	r2, [r3, #4]
 800607c:	f844 000c 	str.w	r0, [r4, ip]
 8006080:	e7df      	b.n	8006042 <_malloc_r+0x62>
 8006082:	0a6b      	lsrs	r3, r5, #9
 8006084:	d02a      	beq.n	80060dc <_malloc_r+0xfc>
 8006086:	2b04      	cmp	r3, #4
 8006088:	d812      	bhi.n	80060b0 <_malloc_r+0xd0>
 800608a:	09ab      	lsrs	r3, r5, #6
 800608c:	3338      	adds	r3, #56	; 0x38
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8006094:	6854      	ldr	r4, [r2, #4]
 8006096:	f1a2 0c08 	sub.w	ip, r2, #8
 800609a:	4564      	cmp	r4, ip
 800609c:	d006      	beq.n	80060ac <_malloc_r+0xcc>
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	f022 0203 	bic.w	r2, r2, #3
 80060a4:	1b50      	subs	r0, r2, r5
 80060a6:	280f      	cmp	r0, #15
 80060a8:	dd1c      	ble.n	80060e4 <_malloc_r+0x104>
 80060aa:	3b01      	subs	r3, #1
 80060ac:	3301      	adds	r3, #1
 80060ae:	e7ce      	b.n	800604e <_malloc_r+0x6e>
 80060b0:	2b14      	cmp	r3, #20
 80060b2:	d801      	bhi.n	80060b8 <_malloc_r+0xd8>
 80060b4:	335b      	adds	r3, #91	; 0x5b
 80060b6:	e7ea      	b.n	800608e <_malloc_r+0xae>
 80060b8:	2b54      	cmp	r3, #84	; 0x54
 80060ba:	d802      	bhi.n	80060c2 <_malloc_r+0xe2>
 80060bc:	0b2b      	lsrs	r3, r5, #12
 80060be:	336e      	adds	r3, #110	; 0x6e
 80060c0:	e7e5      	b.n	800608e <_malloc_r+0xae>
 80060c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80060c6:	d802      	bhi.n	80060ce <_malloc_r+0xee>
 80060c8:	0beb      	lsrs	r3, r5, #15
 80060ca:	3377      	adds	r3, #119	; 0x77
 80060cc:	e7df      	b.n	800608e <_malloc_r+0xae>
 80060ce:	f240 5254 	movw	r2, #1364	; 0x554
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d804      	bhi.n	80060e0 <_malloc_r+0x100>
 80060d6:	0cab      	lsrs	r3, r5, #18
 80060d8:	337c      	adds	r3, #124	; 0x7c
 80060da:	e7d8      	b.n	800608e <_malloc_r+0xae>
 80060dc:	233f      	movs	r3, #63	; 0x3f
 80060de:	e7d6      	b.n	800608e <_malloc_r+0xae>
 80060e0:	237e      	movs	r3, #126	; 0x7e
 80060e2:	e7d4      	b.n	800608e <_malloc_r+0xae>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	68e1      	ldr	r1, [r4, #12]
 80060e8:	db04      	blt.n	80060f4 <_malloc_r+0x114>
 80060ea:	68a3      	ldr	r3, [r4, #8]
 80060ec:	60d9      	str	r1, [r3, #12]
 80060ee:	608b      	str	r3, [r1, #8]
 80060f0:	18a3      	adds	r3, r4, r2
 80060f2:	e7a2      	b.n	800603a <_malloc_r+0x5a>
 80060f4:	460c      	mov	r4, r1
 80060f6:	e7d0      	b.n	800609a <_malloc_r+0xba>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80060fe:	db07      	blt.n	8006110 <_malloc_r+0x130>
 8006100:	44a4      	add	ip, r4
 8006102:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	f8cc 3004 	str.w	r3, [ip, #4]
 800610e:	e798      	b.n	8006042 <_malloc_r+0x62>
 8006110:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f080 8099 	bcs.w	800624c <_malloc_r+0x26c>
 800611a:	2201      	movs	r2, #1
 800611c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8006120:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8006124:	fa02 f20e 	lsl.w	r2, r2, lr
 8006128:	4310      	orrs	r0, r2
 800612a:	f10c 0c01 	add.w	ip, ip, #1
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8006134:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8006138:	3a08      	subs	r2, #8
 800613a:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800613e:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8006142:	60c4      	str	r4, [r0, #12]
 8006144:	2001      	movs	r0, #1
 8006146:	109a      	asrs	r2, r3, #2
 8006148:	fa00 f202 	lsl.w	r2, r0, r2
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4290      	cmp	r0, r2
 8006150:	d326      	bcc.n	80061a0 <_malloc_r+0x1c0>
 8006152:	4210      	tst	r0, r2
 8006154:	d106      	bne.n	8006164 <_malloc_r+0x184>
 8006156:	f023 0303 	bic.w	r3, r3, #3
 800615a:	0052      	lsls	r2, r2, #1
 800615c:	4210      	tst	r0, r2
 800615e:	f103 0304 	add.w	r3, r3, #4
 8006162:	d0fa      	beq.n	800615a <_malloc_r+0x17a>
 8006164:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8006168:	46e1      	mov	r9, ip
 800616a:	4698      	mov	r8, r3
 800616c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8006170:	454c      	cmp	r4, r9
 8006172:	f040 80af 	bne.w	80062d4 <_malloc_r+0x2f4>
 8006176:	f108 0801 	add.w	r8, r8, #1
 800617a:	f018 0f03 	tst.w	r8, #3
 800617e:	f109 0908 	add.w	r9, r9, #8
 8006182:	d1f3      	bne.n	800616c <_malloc_r+0x18c>
 8006184:	0798      	lsls	r0, r3, #30
 8006186:	f040 80e8 	bne.w	800635a <_malloc_r+0x37a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	ea23 0302 	bic.w	r3, r3, r2
 8006190:	607b      	str	r3, [r7, #4]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	0052      	lsls	r2, r2, #1
 8006196:	4290      	cmp	r0, r2
 8006198:	d302      	bcc.n	80061a0 <_malloc_r+0x1c0>
 800619a:	2a00      	cmp	r2, #0
 800619c:	f040 80eb 	bne.w	8006376 <_malloc_r+0x396>
 80061a0:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80061a4:	f8da 4004 	ldr.w	r4, [sl, #4]
 80061a8:	f024 0203 	bic.w	r2, r4, #3
 80061ac:	42aa      	cmp	r2, r5
 80061ae:	d303      	bcc.n	80061b8 <_malloc_r+0x1d8>
 80061b0:	1b53      	subs	r3, r2, r5
 80061b2:	2b0f      	cmp	r3, #15
 80061b4:	f300 813f 	bgt.w	8006436 <_malloc_r+0x456>
 80061b8:	4b57      	ldr	r3, [pc, #348]	; (8006318 <_malloc_r+0x338>)
 80061ba:	2008      	movs	r0, #8
 80061bc:	681c      	ldr	r4, [r3, #0]
 80061be:	9200      	str	r2, [sp, #0]
 80061c0:	f000 fcb6 	bl	8006b30 <sysconf>
 80061c4:	4b55      	ldr	r3, [pc, #340]	; (800631c <_malloc_r+0x33c>)
 80061c6:	3410      	adds	r4, #16
 80061c8:	6819      	ldr	r1, [r3, #0]
 80061ca:	442c      	add	r4, r5
 80061cc:	3101      	adds	r1, #1
 80061ce:	bf1f      	itttt	ne
 80061d0:	f104 34ff 	addne.w	r4, r4, #4294967295
 80061d4:	1824      	addne	r4, r4, r0
 80061d6:	4241      	negne	r1, r0
 80061d8:	400c      	andne	r4, r1
 80061da:	9a00      	ldr	r2, [sp, #0]
 80061dc:	4680      	mov	r8, r0
 80061de:	4621      	mov	r1, r4
 80061e0:	4630      	mov	r0, r6
 80061e2:	e9cd 2300 	strd	r2, r3, [sp]
 80061e6:	f000 fc3b 	bl	8006a60 <_sbrk_r>
 80061ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 80061ee:	4683      	mov	fp, r0
 80061f0:	f000 80fa 	beq.w	80063e8 <_malloc_r+0x408>
 80061f4:	9a00      	ldr	r2, [sp, #0]
 80061f6:	9b01      	ldr	r3, [sp, #4]
 80061f8:	eb0a 0102 	add.w	r1, sl, r2
 80061fc:	4281      	cmp	r1, r0
 80061fe:	d902      	bls.n	8006206 <_malloc_r+0x226>
 8006200:	45ba      	cmp	sl, r7
 8006202:	f040 80f1 	bne.w	80063e8 <_malloc_r+0x408>
 8006206:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8006328 <_malloc_r+0x348>
 800620a:	4559      	cmp	r1, fp
 800620c:	f8d9 0000 	ldr.w	r0, [r9]
 8006210:	f108 3cff 	add.w	ip, r8, #4294967295
 8006214:	eb00 0e04 	add.w	lr, r0, r4
 8006218:	f8c9 e000 	str.w	lr, [r9]
 800621c:	f040 80ad 	bne.w	800637a <_malloc_r+0x39a>
 8006220:	ea11 0f0c 	tst.w	r1, ip
 8006224:	f040 80a9 	bne.w	800637a <_malloc_r+0x39a>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4414      	add	r4, r2
 800622c:	f044 0401 	orr.w	r4, r4, #1
 8006230:	605c      	str	r4, [r3, #4]
 8006232:	4a3b      	ldr	r2, [pc, #236]	; (8006320 <_malloc_r+0x340>)
 8006234:	f8d9 3000 	ldr.w	r3, [r9]
 8006238:	6811      	ldr	r1, [r2, #0]
 800623a:	428b      	cmp	r3, r1
 800623c:	bf88      	it	hi
 800623e:	6013      	strhi	r3, [r2, #0]
 8006240:	4a38      	ldr	r2, [pc, #224]	; (8006324 <_malloc_r+0x344>)
 8006242:	6811      	ldr	r1, [r2, #0]
 8006244:	428b      	cmp	r3, r1
 8006246:	bf88      	it	hi
 8006248:	6013      	strhi	r3, [r2, #0]
 800624a:	e0cd      	b.n	80063e8 <_malloc_r+0x408>
 800624c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8006250:	2a04      	cmp	r2, #4
 8006252:	d818      	bhi.n	8006286 <_malloc_r+0x2a6>
 8006254:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8006258:	3238      	adds	r2, #56	; 0x38
 800625a:	f102 0e01 	add.w	lr, r2, #1
 800625e:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8006262:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8006266:	45f0      	cmp	r8, lr
 8006268:	d12b      	bne.n	80062c2 <_malloc_r+0x2e2>
 800626a:	f04f 0c01 	mov.w	ip, #1
 800626e:	1092      	asrs	r2, r2, #2
 8006270:	fa0c f202 	lsl.w	r2, ip, r2
 8006274:	4310      	orrs	r0, r2
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800627c:	f8c8 4008 	str.w	r4, [r8, #8]
 8006280:	f8ce 400c 	str.w	r4, [lr, #12]
 8006284:	e75e      	b.n	8006144 <_malloc_r+0x164>
 8006286:	2a14      	cmp	r2, #20
 8006288:	d801      	bhi.n	800628e <_malloc_r+0x2ae>
 800628a:	325b      	adds	r2, #91	; 0x5b
 800628c:	e7e5      	b.n	800625a <_malloc_r+0x27a>
 800628e:	2a54      	cmp	r2, #84	; 0x54
 8006290:	d803      	bhi.n	800629a <_malloc_r+0x2ba>
 8006292:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8006296:	326e      	adds	r2, #110	; 0x6e
 8006298:	e7df      	b.n	800625a <_malloc_r+0x27a>
 800629a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800629e:	d803      	bhi.n	80062a8 <_malloc_r+0x2c8>
 80062a0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80062a4:	3277      	adds	r2, #119	; 0x77
 80062a6:	e7d8      	b.n	800625a <_malloc_r+0x27a>
 80062a8:	f240 5e54 	movw	lr, #1364	; 0x554
 80062ac:	4572      	cmp	r2, lr
 80062ae:	bf9a      	itte	ls
 80062b0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80062b4:	327c      	addls	r2, #124	; 0x7c
 80062b6:	227e      	movhi	r2, #126	; 0x7e
 80062b8:	e7cf      	b.n	800625a <_malloc_r+0x27a>
 80062ba:	f8de e008 	ldr.w	lr, [lr, #8]
 80062be:	45f0      	cmp	r8, lr
 80062c0:	d005      	beq.n	80062ce <_malloc_r+0x2ee>
 80062c2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80062c6:	f022 0203 	bic.w	r2, r2, #3
 80062ca:	4562      	cmp	r2, ip
 80062cc:	d8f5      	bhi.n	80062ba <_malloc_r+0x2da>
 80062ce:	f8de 800c 	ldr.w	r8, [lr, #12]
 80062d2:	e7d1      	b.n	8006278 <_malloc_r+0x298>
 80062d4:	6860      	ldr	r0, [r4, #4]
 80062d6:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80062da:	f020 0003 	bic.w	r0, r0, #3
 80062de:	eba0 0a05 	sub.w	sl, r0, r5
 80062e2:	f1ba 0f0f 	cmp.w	sl, #15
 80062e6:	dd21      	ble.n	800632c <_malloc_r+0x34c>
 80062e8:	68a2      	ldr	r2, [r4, #8]
 80062ea:	1963      	adds	r3, r4, r5
 80062ec:	f045 0501 	orr.w	r5, r5, #1
 80062f0:	6065      	str	r5, [r4, #4]
 80062f2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80062f6:	f8ce 2008 	str.w	r2, [lr, #8]
 80062fa:	f04a 0201 	orr.w	r2, sl, #1
 80062fe:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8006302:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006306:	605a      	str	r2, [r3, #4]
 8006308:	f844 a000 	str.w	sl, [r4, r0]
 800630c:	e699      	b.n	8006042 <_malloc_r+0x62>
 800630e:	bf00      	nop
 8006310:	20000444 	.word	0x20000444
 8006314:	2000044c 	.word	0x2000044c
 8006318:	20000a10 	.word	0x20000a10
 800631c:	2000084c 	.word	0x2000084c
 8006320:	20000a08 	.word	0x20000a08
 8006324:	20000a0c 	.word	0x20000a0c
 8006328:	200009e0 	.word	0x200009e0
 800632c:	f1ba 0f00 	cmp.w	sl, #0
 8006330:	db11      	blt.n	8006356 <_malloc_r+0x376>
 8006332:	4420      	add	r0, r4
 8006334:	6843      	ldr	r3, [r0, #4]
 8006336:	f043 0301 	orr.w	r3, r3, #1
 800633a:	6043      	str	r3, [r0, #4]
 800633c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8006340:	4630      	mov	r0, r6
 8006342:	f8c3 e00c 	str.w	lr, [r3, #12]
 8006346:	f8ce 3008 	str.w	r3, [lr, #8]
 800634a:	f000 f89f 	bl	800648c <__malloc_unlock>
 800634e:	4620      	mov	r0, r4
 8006350:	b003      	add	sp, #12
 8006352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006356:	4674      	mov	r4, lr
 8006358:	e70a      	b.n	8006170 <_malloc_r+0x190>
 800635a:	f1ac 0008 	sub.w	r0, ip, #8
 800635e:	f8dc c000 	ldr.w	ip, [ip]
 8006362:	3b01      	subs	r3, #1
 8006364:	4584      	cmp	ip, r0
 8006366:	f43f af0d 	beq.w	8006184 <_malloc_r+0x1a4>
 800636a:	e712      	b.n	8006192 <_malloc_r+0x1b2>
 800636c:	3304      	adds	r3, #4
 800636e:	0052      	lsls	r2, r2, #1
 8006370:	4210      	tst	r0, r2
 8006372:	d0fb      	beq.n	800636c <_malloc_r+0x38c>
 8006374:	e6f6      	b.n	8006164 <_malloc_r+0x184>
 8006376:	4643      	mov	r3, r8
 8006378:	e7fa      	b.n	8006370 <_malloc_r+0x390>
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	9200      	str	r2, [sp, #0]
 800637e:	3001      	adds	r0, #1
 8006380:	bf1b      	ittet	ne
 8006382:	ebab 0101 	subne.w	r1, fp, r1
 8006386:	4471      	addne	r1, lr
 8006388:	f8c3 b000 	streq.w	fp, [r3]
 800638c:	f8c9 1000 	strne.w	r1, [r9]
 8006390:	f01b 0307 	ands.w	r3, fp, #7
 8006394:	bf1c      	itt	ne
 8006396:	f1c3 0308 	rsbne	r3, r3, #8
 800639a:	449b      	addne	fp, r3
 800639c:	445c      	add	r4, fp
 800639e:	4498      	add	r8, r3
 80063a0:	ea04 030c 	and.w	r3, r4, ip
 80063a4:	eba8 0803 	sub.w	r8, r8, r3
 80063a8:	4641      	mov	r1, r8
 80063aa:	4630      	mov	r0, r6
 80063ac:	f000 fb58 	bl	8006a60 <_sbrk_r>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	bf04      	itt	eq
 80063b4:	4658      	moveq	r0, fp
 80063b6:	f04f 0800 	moveq.w	r8, #0
 80063ba:	f8d9 3000 	ldr.w	r3, [r9]
 80063be:	eba0 000b 	sub.w	r0, r0, fp
 80063c2:	4440      	add	r0, r8
 80063c4:	4443      	add	r3, r8
 80063c6:	f040 0001 	orr.w	r0, r0, #1
 80063ca:	45ba      	cmp	sl, r7
 80063cc:	f8c7 b008 	str.w	fp, [r7, #8]
 80063d0:	9a00      	ldr	r2, [sp, #0]
 80063d2:	f8c9 3000 	str.w	r3, [r9]
 80063d6:	f8cb 0004 	str.w	r0, [fp, #4]
 80063da:	f43f af2a 	beq.w	8006232 <_malloc_r+0x252>
 80063de:	2a0f      	cmp	r2, #15
 80063e0:	d810      	bhi.n	8006404 <_malloc_r+0x424>
 80063e2:	2301      	movs	r3, #1
 80063e4:	f8cb 3004 	str.w	r3, [fp, #4]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	f022 0203 	bic.w	r2, r2, #3
 80063f0:	42aa      	cmp	r2, r5
 80063f2:	eba2 0305 	sub.w	r3, r2, r5
 80063f6:	d301      	bcc.n	80063fc <_malloc_r+0x41c>
 80063f8:	2b0f      	cmp	r3, #15
 80063fa:	dc1c      	bgt.n	8006436 <_malloc_r+0x456>
 80063fc:	4630      	mov	r0, r6
 80063fe:	f000 f845 	bl	800648c <__malloc_unlock>
 8006402:	e5f9      	b.n	8005ff8 <_malloc_r+0x18>
 8006404:	f1a2 040c 	sub.w	r4, r2, #12
 8006408:	2205      	movs	r2, #5
 800640a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800640e:	f024 0407 	bic.w	r4, r4, #7
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	4323      	orrs	r3, r4
 8006418:	f8ca 3004 	str.w	r3, [sl, #4]
 800641c:	2c0f      	cmp	r4, #15
 800641e:	eb0a 0304 	add.w	r3, sl, r4
 8006422:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8006426:	f67f af04 	bls.w	8006232 <_malloc_r+0x252>
 800642a:	f10a 0108 	add.w	r1, sl, #8
 800642e:	4630      	mov	r0, r6
 8006430:	f7ff fc7e 	bl	8005d30 <_free_r>
 8006434:	e6fd      	b.n	8006232 <_malloc_r+0x252>
 8006436:	68bc      	ldr	r4, [r7, #8]
 8006438:	f045 0201 	orr.w	r2, r5, #1
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	4425      	add	r5, r4
 8006442:	6062      	str	r2, [r4, #4]
 8006444:	60bd      	str	r5, [r7, #8]
 8006446:	606b      	str	r3, [r5, #4]
 8006448:	e5fb      	b.n	8006042 <_malloc_r+0x62>
 800644a:	bf00      	nop

0800644c <memchr>:
 800644c:	b510      	push	{r4, lr}
 800644e:	b2c9      	uxtb	r1, r1
 8006450:	4402      	add	r2, r0
 8006452:	4290      	cmp	r0, r2
 8006454:	4603      	mov	r3, r0
 8006456:	d101      	bne.n	800645c <memchr+0x10>
 8006458:	2300      	movs	r3, #0
 800645a:	e003      	b.n	8006464 <memchr+0x18>
 800645c:	781c      	ldrb	r4, [r3, #0]
 800645e:	3001      	adds	r0, #1
 8006460:	428c      	cmp	r4, r1
 8006462:	d1f6      	bne.n	8006452 <memchr+0x6>
 8006464:	4618      	mov	r0, r3
 8006466:	bd10      	pop	{r4, pc}

08006468 <memcpy>:
 8006468:	b510      	push	{r4, lr}
 800646a:	1e43      	subs	r3, r0, #1
 800646c:	440a      	add	r2, r1
 800646e:	4291      	cmp	r1, r2
 8006470:	d100      	bne.n	8006474 <memcpy+0xc>
 8006472:	bd10      	pop	{r4, pc}
 8006474:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800647c:	e7f7      	b.n	800646e <memcpy+0x6>
	...

08006480 <__malloc_lock>:
 8006480:	4801      	ldr	r0, [pc, #4]	; (8006488 <__malloc_lock+0x8>)
 8006482:	f7ff bd3f 	b.w	8005f04 <__retarget_lock_acquire_recursive>
 8006486:	bf00      	nop
 8006488:	20000b64 	.word	0x20000b64

0800648c <__malloc_unlock>:
 800648c:	4801      	ldr	r0, [pc, #4]	; (8006494 <__malloc_unlock+0x8>)
 800648e:	f7ff bd3a 	b.w	8005f06 <__retarget_lock_release_recursive>
 8006492:	bf00      	nop
 8006494:	20000b64 	.word	0x20000b64

08006498 <_Balloc>:
 8006498:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800649a:	b570      	push	{r4, r5, r6, lr}
 800649c:	4605      	mov	r5, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	b17b      	cbz	r3, 80064c2 <_Balloc+0x2a>
 80064a2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80064a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80064a8:	b9a0      	cbnz	r0, 80064d4 <_Balloc+0x3c>
 80064aa:	2101      	movs	r1, #1
 80064ac:	fa01 f604 	lsl.w	r6, r1, r4
 80064b0:	1d72      	adds	r2, r6, #5
 80064b2:	0092      	lsls	r2, r2, #2
 80064b4:	4628      	mov	r0, r5
 80064b6:	f000 fbe3 	bl	8006c80 <_calloc_r>
 80064ba:	b148      	cbz	r0, 80064d0 <_Balloc+0x38>
 80064bc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80064c0:	e00b      	b.n	80064da <_Balloc+0x42>
 80064c2:	2221      	movs	r2, #33	; 0x21
 80064c4:	2104      	movs	r1, #4
 80064c6:	f000 fbdb 	bl	8006c80 <_calloc_r>
 80064ca:	64e8      	str	r0, [r5, #76]	; 0x4c
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d1e8      	bne.n	80064a2 <_Balloc+0xa>
 80064d0:	2000      	movs	r0, #0
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	6802      	ldr	r2, [r0, #0]
 80064d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80064da:	2300      	movs	r3, #0
 80064dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064e0:	e7f7      	b.n	80064d2 <_Balloc+0x3a>

080064e2 <_Bfree>:
 80064e2:	b131      	cbz	r1, 80064f2 <_Bfree+0x10>
 80064e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80064e6:	684a      	ldr	r2, [r1, #4]
 80064e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80064ec:	6008      	str	r0, [r1, #0]
 80064ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80064f2:	4770      	bx	lr

080064f4 <__multadd>:
 80064f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f8:	461f      	mov	r7, r3
 80064fa:	4606      	mov	r6, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	2300      	movs	r3, #0
 8006500:	690d      	ldr	r5, [r1, #16]
 8006502:	f101 0c14 	add.w	ip, r1, #20
 8006506:	f8dc 0000 	ldr.w	r0, [ip]
 800650a:	3301      	adds	r3, #1
 800650c:	b281      	uxth	r1, r0
 800650e:	fb02 7101 	mla	r1, r2, r1, r7
 8006512:	0c00      	lsrs	r0, r0, #16
 8006514:	0c0f      	lsrs	r7, r1, #16
 8006516:	fb02 7000 	mla	r0, r2, r0, r7
 800651a:	b289      	uxth	r1, r1
 800651c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006520:	429d      	cmp	r5, r3
 8006522:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006526:	f84c 1b04 	str.w	r1, [ip], #4
 800652a:	dcec      	bgt.n	8006506 <__multadd+0x12>
 800652c:	b1d7      	cbz	r7, 8006564 <__multadd+0x70>
 800652e:	68a3      	ldr	r3, [r4, #8]
 8006530:	42ab      	cmp	r3, r5
 8006532:	dc12      	bgt.n	800655a <__multadd+0x66>
 8006534:	6861      	ldr	r1, [r4, #4]
 8006536:	4630      	mov	r0, r6
 8006538:	3101      	adds	r1, #1
 800653a:	f7ff ffad 	bl	8006498 <_Balloc>
 800653e:	4680      	mov	r8, r0
 8006540:	6922      	ldr	r2, [r4, #16]
 8006542:	f104 010c 	add.w	r1, r4, #12
 8006546:	3202      	adds	r2, #2
 8006548:	0092      	lsls	r2, r2, #2
 800654a:	300c      	adds	r0, #12
 800654c:	f7ff ff8c 	bl	8006468 <memcpy>
 8006550:	4621      	mov	r1, r4
 8006552:	4630      	mov	r0, r6
 8006554:	f7ff ffc5 	bl	80064e2 <_Bfree>
 8006558:	4644      	mov	r4, r8
 800655a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800655e:	3501      	adds	r5, #1
 8006560:	615f      	str	r7, [r3, #20]
 8006562:	6125      	str	r5, [r4, #16]
 8006564:	4620      	mov	r0, r4
 8006566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800656a <__hi0bits>:
 800656a:	0c02      	lsrs	r2, r0, #16
 800656c:	0412      	lsls	r2, r2, #16
 800656e:	4603      	mov	r3, r0
 8006570:	b9b2      	cbnz	r2, 80065a0 <__hi0bits+0x36>
 8006572:	0403      	lsls	r3, r0, #16
 8006574:	2010      	movs	r0, #16
 8006576:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800657a:	bf04      	itt	eq
 800657c:	021b      	lsleq	r3, r3, #8
 800657e:	3008      	addeq	r0, #8
 8006580:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006584:	bf04      	itt	eq
 8006586:	011b      	lsleq	r3, r3, #4
 8006588:	3004      	addeq	r0, #4
 800658a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800658e:	bf04      	itt	eq
 8006590:	009b      	lsleq	r3, r3, #2
 8006592:	3002      	addeq	r0, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	db06      	blt.n	80065a6 <__hi0bits+0x3c>
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	d503      	bpl.n	80065a4 <__hi0bits+0x3a>
 800659c:	3001      	adds	r0, #1
 800659e:	4770      	bx	lr
 80065a0:	2000      	movs	r0, #0
 80065a2:	e7e8      	b.n	8006576 <__hi0bits+0xc>
 80065a4:	2020      	movs	r0, #32
 80065a6:	4770      	bx	lr

080065a8 <__lo0bits>:
 80065a8:	6803      	ldr	r3, [r0, #0]
 80065aa:	4601      	mov	r1, r0
 80065ac:	f013 0207 	ands.w	r2, r3, #7
 80065b0:	d00b      	beq.n	80065ca <__lo0bits+0x22>
 80065b2:	07da      	lsls	r2, r3, #31
 80065b4:	d423      	bmi.n	80065fe <__lo0bits+0x56>
 80065b6:	0798      	lsls	r0, r3, #30
 80065b8:	bf49      	itett	mi
 80065ba:	085b      	lsrmi	r3, r3, #1
 80065bc:	089b      	lsrpl	r3, r3, #2
 80065be:	2001      	movmi	r0, #1
 80065c0:	600b      	strmi	r3, [r1, #0]
 80065c2:	bf5c      	itt	pl
 80065c4:	600b      	strpl	r3, [r1, #0]
 80065c6:	2002      	movpl	r0, #2
 80065c8:	4770      	bx	lr
 80065ca:	b298      	uxth	r0, r3
 80065cc:	b9a8      	cbnz	r0, 80065fa <__lo0bits+0x52>
 80065ce:	2010      	movs	r0, #16
 80065d0:	0c1b      	lsrs	r3, r3, #16
 80065d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80065d6:	bf04      	itt	eq
 80065d8:	0a1b      	lsreq	r3, r3, #8
 80065da:	3008      	addeq	r0, #8
 80065dc:	071a      	lsls	r2, r3, #28
 80065de:	bf04      	itt	eq
 80065e0:	091b      	lsreq	r3, r3, #4
 80065e2:	3004      	addeq	r0, #4
 80065e4:	079a      	lsls	r2, r3, #30
 80065e6:	bf04      	itt	eq
 80065e8:	089b      	lsreq	r3, r3, #2
 80065ea:	3002      	addeq	r0, #2
 80065ec:	07da      	lsls	r2, r3, #31
 80065ee:	d402      	bmi.n	80065f6 <__lo0bits+0x4e>
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	d006      	beq.n	8006602 <__lo0bits+0x5a>
 80065f4:	3001      	adds	r0, #1
 80065f6:	600b      	str	r3, [r1, #0]
 80065f8:	4770      	bx	lr
 80065fa:	4610      	mov	r0, r2
 80065fc:	e7e9      	b.n	80065d2 <__lo0bits+0x2a>
 80065fe:	2000      	movs	r0, #0
 8006600:	4770      	bx	lr
 8006602:	2020      	movs	r0, #32
 8006604:	4770      	bx	lr

08006606 <__i2b>:
 8006606:	b510      	push	{r4, lr}
 8006608:	460c      	mov	r4, r1
 800660a:	2101      	movs	r1, #1
 800660c:	f7ff ff44 	bl	8006498 <_Balloc>
 8006610:	2201      	movs	r2, #1
 8006612:	6144      	str	r4, [r0, #20]
 8006614:	6102      	str	r2, [r0, #16]
 8006616:	bd10      	pop	{r4, pc}

08006618 <__multiply>:
 8006618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	4614      	mov	r4, r2
 800661e:	690a      	ldr	r2, [r1, #16]
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	4688      	mov	r8, r1
 8006624:	429a      	cmp	r2, r3
 8006626:	bfbe      	ittt	lt
 8006628:	460b      	movlt	r3, r1
 800662a:	46a0      	movlt	r8, r4
 800662c:	461c      	movlt	r4, r3
 800662e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006632:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800663a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800663e:	eb07 0609 	add.w	r6, r7, r9
 8006642:	42b3      	cmp	r3, r6
 8006644:	bfb8      	it	lt
 8006646:	3101      	addlt	r1, #1
 8006648:	f7ff ff26 	bl	8006498 <_Balloc>
 800664c:	f100 0514 	add.w	r5, r0, #20
 8006650:	462b      	mov	r3, r5
 8006652:	2200      	movs	r2, #0
 8006654:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006658:	4573      	cmp	r3, lr
 800665a:	d316      	bcc.n	800668a <__multiply+0x72>
 800665c:	f104 0214 	add.w	r2, r4, #20
 8006660:	f108 0114 	add.w	r1, r8, #20
 8006664:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006668:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	9b00      	ldr	r3, [sp, #0]
 8006670:	9201      	str	r2, [sp, #4]
 8006672:	4293      	cmp	r3, r2
 8006674:	d80c      	bhi.n	8006690 <__multiply+0x78>
 8006676:	2e00      	cmp	r6, #0
 8006678:	dd03      	ble.n	8006682 <__multiply+0x6a>
 800667a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800667e:	2b00      	cmp	r3, #0
 8006680:	d05d      	beq.n	800673e <__multiply+0x126>
 8006682:	6106      	str	r6, [r0, #16]
 8006684:	b003      	add	sp, #12
 8006686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668a:	f843 2b04 	str.w	r2, [r3], #4
 800668e:	e7e3      	b.n	8006658 <__multiply+0x40>
 8006690:	f8b2 b000 	ldrh.w	fp, [r2]
 8006694:	f1bb 0f00 	cmp.w	fp, #0
 8006698:	d023      	beq.n	80066e2 <__multiply+0xca>
 800669a:	4689      	mov	r9, r1
 800669c:	46ac      	mov	ip, r5
 800669e:	f04f 0800 	mov.w	r8, #0
 80066a2:	f859 4b04 	ldr.w	r4, [r9], #4
 80066a6:	f8dc a000 	ldr.w	sl, [ip]
 80066aa:	b2a3      	uxth	r3, r4
 80066ac:	fa1f fa8a 	uxth.w	sl, sl
 80066b0:	fb0b a303 	mla	r3, fp, r3, sl
 80066b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80066b8:	f8dc 4000 	ldr.w	r4, [ip]
 80066bc:	4443      	add	r3, r8
 80066be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80066c2:	fb0b 840a 	mla	r4, fp, sl, r8
 80066c6:	46e2      	mov	sl, ip
 80066c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80066d2:	454f      	cmp	r7, r9
 80066d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80066d8:	f84a 3b04 	str.w	r3, [sl], #4
 80066dc:	d82b      	bhi.n	8006736 <__multiply+0x11e>
 80066de:	f8cc 8004 	str.w	r8, [ip, #4]
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	3204      	adds	r2, #4
 80066e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80066ea:	f1ba 0f00 	cmp.w	sl, #0
 80066ee:	d020      	beq.n	8006732 <__multiply+0x11a>
 80066f0:	4689      	mov	r9, r1
 80066f2:	46a8      	mov	r8, r5
 80066f4:	f04f 0b00 	mov.w	fp, #0
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	f8b9 c000 	ldrh.w	ip, [r9]
 80066fe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006702:	b29b      	uxth	r3, r3
 8006704:	fb0a 440c 	mla	r4, sl, ip, r4
 8006708:	46c4      	mov	ip, r8
 800670a:	445c      	add	r4, fp
 800670c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006710:	f84c 3b04 	str.w	r3, [ip], #4
 8006714:	f859 3b04 	ldr.w	r3, [r9], #4
 8006718:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	fb0a b303 	mla	r3, sl, r3, fp
 8006722:	454f      	cmp	r7, r9
 8006724:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006728:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800672c:	d805      	bhi.n	800673a <__multiply+0x122>
 800672e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006732:	3504      	adds	r5, #4
 8006734:	e79b      	b.n	800666e <__multiply+0x56>
 8006736:	46d4      	mov	ip, sl
 8006738:	e7b3      	b.n	80066a2 <__multiply+0x8a>
 800673a:	46e0      	mov	r8, ip
 800673c:	e7dd      	b.n	80066fa <__multiply+0xe2>
 800673e:	3e01      	subs	r6, #1
 8006740:	e799      	b.n	8006676 <__multiply+0x5e>
	...

08006744 <__pow5mult>:
 8006744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006748:	4615      	mov	r5, r2
 800674a:	f012 0203 	ands.w	r2, r2, #3
 800674e:	4606      	mov	r6, r0
 8006750:	460f      	mov	r7, r1
 8006752:	d007      	beq.n	8006764 <__pow5mult+0x20>
 8006754:	4c1a      	ldr	r4, [pc, #104]	; (80067c0 <__pow5mult+0x7c>)
 8006756:	3a01      	subs	r2, #1
 8006758:	2300      	movs	r3, #0
 800675a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800675e:	f7ff fec9 	bl	80064f4 <__multadd>
 8006762:	4607      	mov	r7, r0
 8006764:	10ad      	asrs	r5, r5, #2
 8006766:	d027      	beq.n	80067b8 <__pow5mult+0x74>
 8006768:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800676a:	b944      	cbnz	r4, 800677e <__pow5mult+0x3a>
 800676c:	f240 2171 	movw	r1, #625	; 0x271
 8006770:	4630      	mov	r0, r6
 8006772:	f7ff ff48 	bl	8006606 <__i2b>
 8006776:	2300      	movs	r3, #0
 8006778:	4604      	mov	r4, r0
 800677a:	64b0      	str	r0, [r6, #72]	; 0x48
 800677c:	6003      	str	r3, [r0, #0]
 800677e:	f04f 0800 	mov.w	r8, #0
 8006782:	07eb      	lsls	r3, r5, #31
 8006784:	d50a      	bpl.n	800679c <__pow5mult+0x58>
 8006786:	4639      	mov	r1, r7
 8006788:	4622      	mov	r2, r4
 800678a:	4630      	mov	r0, r6
 800678c:	f7ff ff44 	bl	8006618 <__multiply>
 8006790:	4681      	mov	r9, r0
 8006792:	4639      	mov	r1, r7
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff fea4 	bl	80064e2 <_Bfree>
 800679a:	464f      	mov	r7, r9
 800679c:	106d      	asrs	r5, r5, #1
 800679e:	d00b      	beq.n	80067b8 <__pow5mult+0x74>
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	b938      	cbnz	r0, 80067b4 <__pow5mult+0x70>
 80067a4:	4622      	mov	r2, r4
 80067a6:	4621      	mov	r1, r4
 80067a8:	4630      	mov	r0, r6
 80067aa:	f7ff ff35 	bl	8006618 <__multiply>
 80067ae:	6020      	str	r0, [r4, #0]
 80067b0:	f8c0 8000 	str.w	r8, [r0]
 80067b4:	4604      	mov	r4, r0
 80067b6:	e7e4      	b.n	8006782 <__pow5mult+0x3e>
 80067b8:	4638      	mov	r0, r7
 80067ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067be:	bf00      	nop
 80067c0:	08007890 	.word	0x08007890

080067c4 <__lshift>:
 80067c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c8:	460c      	mov	r4, r1
 80067ca:	4607      	mov	r7, r0
 80067cc:	4616      	mov	r6, r2
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067d4:	eb0a 0903 	add.w	r9, sl, r3
 80067d8:	6849      	ldr	r1, [r1, #4]
 80067da:	68a3      	ldr	r3, [r4, #8]
 80067dc:	f109 0501 	add.w	r5, r9, #1
 80067e0:	42ab      	cmp	r3, r5
 80067e2:	db32      	blt.n	800684a <__lshift+0x86>
 80067e4:	4638      	mov	r0, r7
 80067e6:	f7ff fe57 	bl	8006498 <_Balloc>
 80067ea:	2300      	movs	r3, #0
 80067ec:	4680      	mov	r8, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	f100 0114 	add.w	r1, r0, #20
 80067f4:	4553      	cmp	r3, sl
 80067f6:	db2b      	blt.n	8006850 <__lshift+0x8c>
 80067f8:	6920      	ldr	r0, [r4, #16]
 80067fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067fe:	f104 0314 	add.w	r3, r4, #20
 8006802:	f016 021f 	ands.w	r2, r6, #31
 8006806:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800680a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800680e:	d025      	beq.n	800685c <__lshift+0x98>
 8006810:	2000      	movs	r0, #0
 8006812:	f1c2 0e20 	rsb	lr, r2, #32
 8006816:	468a      	mov	sl, r1
 8006818:	681e      	ldr	r6, [r3, #0]
 800681a:	4096      	lsls	r6, r2
 800681c:	4330      	orrs	r0, r6
 800681e:	f84a 0b04 	str.w	r0, [sl], #4
 8006822:	f853 0b04 	ldr.w	r0, [r3], #4
 8006826:	459c      	cmp	ip, r3
 8006828:	fa20 f00e 	lsr.w	r0, r0, lr
 800682c:	d814      	bhi.n	8006858 <__lshift+0x94>
 800682e:	6048      	str	r0, [r1, #4]
 8006830:	b108      	cbz	r0, 8006836 <__lshift+0x72>
 8006832:	f109 0502 	add.w	r5, r9, #2
 8006836:	3d01      	subs	r5, #1
 8006838:	4638      	mov	r0, r7
 800683a:	f8c8 5010 	str.w	r5, [r8, #16]
 800683e:	4621      	mov	r1, r4
 8006840:	f7ff fe4f 	bl	80064e2 <_Bfree>
 8006844:	4640      	mov	r0, r8
 8006846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684a:	3101      	adds	r1, #1
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	e7c7      	b.n	80067e0 <__lshift+0x1c>
 8006850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006854:	3301      	adds	r3, #1
 8006856:	e7cd      	b.n	80067f4 <__lshift+0x30>
 8006858:	4651      	mov	r1, sl
 800685a:	e7dc      	b.n	8006816 <__lshift+0x52>
 800685c:	3904      	subs	r1, #4
 800685e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006862:	459c      	cmp	ip, r3
 8006864:	f841 2f04 	str.w	r2, [r1, #4]!
 8006868:	d8f9      	bhi.n	800685e <__lshift+0x9a>
 800686a:	e7e4      	b.n	8006836 <__lshift+0x72>

0800686c <__mcmp>:
 800686c:	6903      	ldr	r3, [r0, #16]
 800686e:	690a      	ldr	r2, [r1, #16]
 8006870:	b530      	push	{r4, r5, lr}
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	d10c      	bne.n	8006890 <__mcmp+0x24>
 8006876:	0092      	lsls	r2, r2, #2
 8006878:	3014      	adds	r0, #20
 800687a:	3114      	adds	r1, #20
 800687c:	1884      	adds	r4, r0, r2
 800687e:	4411      	add	r1, r2
 8006880:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006884:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006888:	4295      	cmp	r5, r2
 800688a:	d003      	beq.n	8006894 <__mcmp+0x28>
 800688c:	d305      	bcc.n	800689a <__mcmp+0x2e>
 800688e:	2301      	movs	r3, #1
 8006890:	4618      	mov	r0, r3
 8006892:	bd30      	pop	{r4, r5, pc}
 8006894:	42a0      	cmp	r0, r4
 8006896:	d3f3      	bcc.n	8006880 <__mcmp+0x14>
 8006898:	e7fa      	b.n	8006890 <__mcmp+0x24>
 800689a:	f04f 33ff 	mov.w	r3, #4294967295
 800689e:	e7f7      	b.n	8006890 <__mcmp+0x24>

080068a0 <__mdiff>:
 80068a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a4:	460d      	mov	r5, r1
 80068a6:	4607      	mov	r7, r0
 80068a8:	4611      	mov	r1, r2
 80068aa:	4628      	mov	r0, r5
 80068ac:	4614      	mov	r4, r2
 80068ae:	f7ff ffdd 	bl	800686c <__mcmp>
 80068b2:	1e06      	subs	r6, r0, #0
 80068b4:	d108      	bne.n	80068c8 <__mdiff+0x28>
 80068b6:	4631      	mov	r1, r6
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff fded 	bl	8006498 <_Balloc>
 80068be:	2301      	movs	r3, #1
 80068c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c8:	bfa4      	itt	ge
 80068ca:	4623      	movge	r3, r4
 80068cc:	462c      	movge	r4, r5
 80068ce:	4638      	mov	r0, r7
 80068d0:	6861      	ldr	r1, [r4, #4]
 80068d2:	bfa6      	itte	ge
 80068d4:	461d      	movge	r5, r3
 80068d6:	2600      	movge	r6, #0
 80068d8:	2601      	movlt	r6, #1
 80068da:	f7ff fddd 	bl	8006498 <_Balloc>
 80068de:	f04f 0e00 	mov.w	lr, #0
 80068e2:	60c6      	str	r6, [r0, #12]
 80068e4:	692b      	ldr	r3, [r5, #16]
 80068e6:	6926      	ldr	r6, [r4, #16]
 80068e8:	f104 0214 	add.w	r2, r4, #20
 80068ec:	f105 0914 	add.w	r9, r5, #20
 80068f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80068f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80068f8:	f100 0114 	add.w	r1, r0, #20
 80068fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8006900:	f859 5b04 	ldr.w	r5, [r9], #4
 8006904:	fa1f f38a 	uxth.w	r3, sl
 8006908:	4473      	add	r3, lr
 800690a:	b2ac      	uxth	r4, r5
 800690c:	1b1b      	subs	r3, r3, r4
 800690e:	0c2c      	lsrs	r4, r5, #16
 8006910:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006914:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006918:	b29b      	uxth	r3, r3
 800691a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800691e:	45c8      	cmp	r8, r9
 8006920:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006924:	4694      	mov	ip, r2
 8006926:	f841 4b04 	str.w	r4, [r1], #4
 800692a:	d8e7      	bhi.n	80068fc <__mdiff+0x5c>
 800692c:	45bc      	cmp	ip, r7
 800692e:	d304      	bcc.n	800693a <__mdiff+0x9a>
 8006930:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006934:	b183      	cbz	r3, 8006958 <__mdiff+0xb8>
 8006936:	6106      	str	r6, [r0, #16]
 8006938:	e7c4      	b.n	80068c4 <__mdiff+0x24>
 800693a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800693e:	b2a2      	uxth	r2, r4
 8006940:	4472      	add	r2, lr
 8006942:	1413      	asrs	r3, r2, #16
 8006944:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006948:	b292      	uxth	r2, r2
 800694a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800694e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006952:	f841 2b04 	str.w	r2, [r1], #4
 8006956:	e7e9      	b.n	800692c <__mdiff+0x8c>
 8006958:	3e01      	subs	r6, #1
 800695a:	e7e9      	b.n	8006930 <__mdiff+0x90>

0800695c <__d2b>:
 800695c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006960:	461c      	mov	r4, r3
 8006962:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006966:	2101      	movs	r1, #1
 8006968:	4690      	mov	r8, r2
 800696a:	f7ff fd95 	bl	8006498 <_Balloc>
 800696e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006972:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006976:	4607      	mov	r7, r0
 8006978:	bb34      	cbnz	r4, 80069c8 <__d2b+0x6c>
 800697a:	9201      	str	r2, [sp, #4]
 800697c:	f1b8 0200 	subs.w	r2, r8, #0
 8006980:	d027      	beq.n	80069d2 <__d2b+0x76>
 8006982:	a802      	add	r0, sp, #8
 8006984:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006988:	f7ff fe0e 	bl	80065a8 <__lo0bits>
 800698c:	9900      	ldr	r1, [sp, #0]
 800698e:	b1f0      	cbz	r0, 80069ce <__d2b+0x72>
 8006990:	9a01      	ldr	r2, [sp, #4]
 8006992:	f1c0 0320 	rsb	r3, r0, #32
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	430b      	orrs	r3, r1
 800699c:	40c2      	lsrs	r2, r0
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	9201      	str	r2, [sp, #4]
 80069a2:	9b01      	ldr	r3, [sp, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf14      	ite	ne
 80069a8:	2102      	movne	r1, #2
 80069aa:	2101      	moveq	r1, #1
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	6139      	str	r1, [r7, #16]
 80069b0:	b1c4      	cbz	r4, 80069e4 <__d2b+0x88>
 80069b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80069b6:	4404      	add	r4, r0
 80069b8:	6034      	str	r4, [r6, #0]
 80069ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069be:	6028      	str	r0, [r5, #0]
 80069c0:	4638      	mov	r0, r7
 80069c2:	b002      	add	sp, #8
 80069c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80069cc:	e7d5      	b.n	800697a <__d2b+0x1e>
 80069ce:	6179      	str	r1, [r7, #20]
 80069d0:	e7e7      	b.n	80069a2 <__d2b+0x46>
 80069d2:	a801      	add	r0, sp, #4
 80069d4:	f7ff fde8 	bl	80065a8 <__lo0bits>
 80069d8:	2101      	movs	r1, #1
 80069da:	9b01      	ldr	r3, [sp, #4]
 80069dc:	6139      	str	r1, [r7, #16]
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	3020      	adds	r0, #32
 80069e2:	e7e5      	b.n	80069b0 <__d2b+0x54>
 80069e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80069ec:	6030      	str	r0, [r6, #0]
 80069ee:	6918      	ldr	r0, [r3, #16]
 80069f0:	f7ff fdbb 	bl	800656a <__hi0bits>
 80069f4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80069f8:	e7e1      	b.n	80069be <__d2b+0x62>
	...

080069fc <frexp>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	4616      	mov	r6, r2
 8006a00:	2700      	movs	r7, #0
 8006a02:	6037      	str	r7, [r6, #0]
 8006a04:	4f14      	ldr	r7, [pc, #80]	; (8006a58 <frexp+0x5c>)
 8006a06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a0a:	42bb      	cmp	r3, r7
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	460d      	mov	r5, r1
 8006a10:	460a      	mov	r2, r1
 8006a12:	dc1e      	bgt.n	8006a52 <frexp+0x56>
 8006a14:	4607      	mov	r7, r0
 8006a16:	431f      	orrs	r7, r3
 8006a18:	d01b      	beq.n	8006a52 <frexp+0x56>
 8006a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a1e:	da0a      	bge.n	8006a36 <frexp+0x3a>
 8006a20:	2200      	movs	r2, #0
 8006a22:	4b0e      	ldr	r3, [pc, #56]	; (8006a5c <frexp+0x60>)
 8006a24:	f7f9 fd58 	bl	80004d8 <__aeabi_dmul>
 8006a28:	460a      	mov	r2, r1
 8006a2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a2e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8006a32:	4604      	mov	r4, r0
 8006a34:	6031      	str	r1, [r6, #0]
 8006a36:	6831      	ldr	r1, [r6, #0]
 8006a38:	151b      	asrs	r3, r3, #20
 8006a3a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006a3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006a42:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8006a46:	440b      	add	r3, r1
 8006a48:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a58:	7fefffff 	.word	0x7fefffff
 8006a5c:	43500000 	.word	0x43500000

08006a60 <_sbrk_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	2300      	movs	r3, #0
 8006a64:	4c05      	ldr	r4, [pc, #20]	; (8006a7c <_sbrk_r+0x1c>)
 8006a66:	4605      	mov	r5, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	6023      	str	r3, [r4, #0]
 8006a6c:	f7fb f8f8 	bl	8001c60 <_sbrk>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_sbrk_r+0x1a>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_sbrk_r+0x1a>
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	20000b6c 	.word	0x20000b6c

08006a80 <__sread>:
 8006a80:	b510      	push	{r4, lr}
 8006a82:	460c      	mov	r4, r1
 8006a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a88:	f000 fbb6 	bl	80071f8 <_read_r>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	bfab      	itete	ge
 8006a90:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8006a92:	89a3      	ldrhlt	r3, [r4, #12]
 8006a94:	181b      	addge	r3, r3, r0
 8006a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a9a:	bfac      	ite	ge
 8006a9c:	6523      	strge	r3, [r4, #80]	; 0x50
 8006a9e:	81a3      	strhlt	r3, [r4, #12]
 8006aa0:	bd10      	pop	{r4, pc}

08006aa2 <__swrite>:
 8006aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa6:	461f      	mov	r7, r3
 8006aa8:	898b      	ldrh	r3, [r1, #12]
 8006aaa:	4605      	mov	r5, r0
 8006aac:	05db      	lsls	r3, r3, #23
 8006aae:	460c      	mov	r4, r1
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	d505      	bpl.n	8006ac0 <__swrite+0x1e>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006abc:	f000 fb5e 	bl	800717c <_lseek_r>
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	4632      	mov	r2, r6
 8006ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ace:	463b      	mov	r3, r7
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad6:	f000 b86b 	b.w	8006bb0 <_write_r>

08006ada <__sseek>:
 8006ada:	b510      	push	{r4, lr}
 8006adc:	460c      	mov	r4, r1
 8006ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae2:	f000 fb4b 	bl	800717c <_lseek_r>
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	bf15      	itete	ne
 8006aec:	6520      	strne	r0, [r4, #80]	; 0x50
 8006aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006af6:	81a3      	strheq	r3, [r4, #12]
 8006af8:	bf18      	it	ne
 8006afa:	81a3      	strhne	r3, [r4, #12]
 8006afc:	bd10      	pop	{r4, pc}

08006afe <__sclose>:
 8006afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b02:	f000 b8eb 	b.w	8006cdc <_close_r>

08006b06 <strncpy>:
 8006b06:	b570      	push	{r4, r5, r6, lr}
 8006b08:	4604      	mov	r4, r0
 8006b0a:	3901      	subs	r1, #1
 8006b0c:	b902      	cbnz	r2, 8006b10 <strncpy+0xa>
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	4623      	mov	r3, r4
 8006b12:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006b16:	1e56      	subs	r6, r2, #1
 8006b18:	f803 5b01 	strb.w	r5, [r3], #1
 8006b1c:	b92d      	cbnz	r5, 8006b2a <strncpy+0x24>
 8006b1e:	4414      	add	r4, r2
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	d0f4      	beq.n	8006b0e <strncpy+0x8>
 8006b24:	f803 5b01 	strb.w	r5, [r3], #1
 8006b28:	e7fa      	b.n	8006b20 <strncpy+0x1a>
 8006b2a:	461c      	mov	r4, r3
 8006b2c:	4632      	mov	r2, r6
 8006b2e:	e7ed      	b.n	8006b0c <strncpy+0x6>

08006b30 <sysconf>:
 8006b30:	2808      	cmp	r0, #8
 8006b32:	b508      	push	{r3, lr}
 8006b34:	d006      	beq.n	8006b44 <sysconf+0x14>
 8006b36:	f7fc fdf1 	bl	800371c <__errno>
 8006b3a:	2316      	movs	r3, #22
 8006b3c:	6003      	str	r3, [r0, #0]
 8006b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b42:	bd08      	pop	{r3, pc}
 8006b44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006b48:	e7fb      	b.n	8006b42 <sysconf+0x12>

08006b4a <__sprint_r>:
 8006b4a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4e:	6893      	ldr	r3, [r2, #8]
 8006b50:	4680      	mov	r8, r0
 8006b52:	460f      	mov	r7, r1
 8006b54:	4614      	mov	r4, r2
 8006b56:	b91b      	cbnz	r3, 8006b60 <__sprint_r+0x16>
 8006b58:	4618      	mov	r0, r3
 8006b5a:	6053      	str	r3, [r2, #4]
 8006b5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006b62:	049d      	lsls	r5, r3, #18
 8006b64:	d520      	bpl.n	8006ba8 <__sprint_r+0x5e>
 8006b66:	6815      	ldr	r5, [r2, #0]
 8006b68:	68a0      	ldr	r0, [r4, #8]
 8006b6a:	3508      	adds	r5, #8
 8006b6c:	b918      	cbnz	r0, 8006b76 <__sprint_r+0x2c>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8006b74:	e7f2      	b.n	8006b5c <__sprint_r+0x12>
 8006b76:	f04f 0900 	mov.w	r9, #0
 8006b7a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8006b7e:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8006b82:	45ca      	cmp	sl, r9
 8006b84:	dc05      	bgt.n	8006b92 <__sprint_r+0x48>
 8006b86:	68a3      	ldr	r3, [r4, #8]
 8006b88:	f026 0603 	bic.w	r6, r6, #3
 8006b8c:	1b9e      	subs	r6, r3, r6
 8006b8e:	60a6      	str	r6, [r4, #8]
 8006b90:	e7ea      	b.n	8006b68 <__sprint_r+0x1e>
 8006b92:	463a      	mov	r2, r7
 8006b94:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8006b98:	4640      	mov	r0, r8
 8006b9a:	f000 f947 	bl	8006e2c <_fputwc_r>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d0e5      	beq.n	8006b6e <__sprint_r+0x24>
 8006ba2:	f109 0901 	add.w	r9, r9, #1
 8006ba6:	e7ec      	b.n	8006b82 <__sprint_r+0x38>
 8006ba8:	f000 f97c 	bl	8006ea4 <__sfvwrite_r>
 8006bac:	e7df      	b.n	8006b6e <__sprint_r+0x24>
	...

08006bb0 <_write_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4c05      	ldr	r4, [pc, #20]	; (8006bd0 <_write_r+0x20>)
 8006bbc:	6022      	str	r2, [r4, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7fb f801 	bl	8001bc6 <_write>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_write_r+0x1e>
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_write_r+0x1e>
 8006bcc:	602b      	str	r3, [r5, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	20000b6c 	.word	0x20000b6c

08006bd4 <__register_exitproc>:
 8006bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd8:	4c26      	ldr	r4, [pc, #152]	; (8006c74 <__register_exitproc+0xa0>)
 8006bda:	4606      	mov	r6, r0
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	4698      	mov	r8, r3
 8006be0:	460f      	mov	r7, r1
 8006be2:	4691      	mov	r9, r2
 8006be4:	f7ff f98e 	bl	8005f04 <__retarget_lock_acquire_recursive>
 8006be8:	4b23      	ldr	r3, [pc, #140]	; (8006c78 <__register_exitproc+0xa4>)
 8006bea:	681d      	ldr	r5, [r3, #0]
 8006bec:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8006bf0:	b918      	cbnz	r0, 8006bfa <__register_exitproc+0x26>
 8006bf2:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8006bf6:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8006bfa:	6843      	ldr	r3, [r0, #4]
 8006bfc:	2b1f      	cmp	r3, #31
 8006bfe:	dd19      	ble.n	8006c34 <__register_exitproc+0x60>
 8006c00:	4b1e      	ldr	r3, [pc, #120]	; (8006c7c <__register_exitproc+0xa8>)
 8006c02:	b933      	cbnz	r3, 8006c12 <__register_exitproc+0x3e>
 8006c04:	6820      	ldr	r0, [r4, #0]
 8006c06:	f7ff f97e 	bl	8005f06 <__retarget_lock_release_recursive>
 8006c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c12:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006c16:	f3af 8000 	nop.w
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d0f2      	beq.n	8006c04 <__register_exitproc+0x30>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8006c24:	6042      	str	r2, [r0, #4]
 8006c26:	6003      	str	r3, [r0, #0]
 8006c28:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8006c2c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8006c30:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8006c34:	6843      	ldr	r3, [r0, #4]
 8006c36:	b19e      	cbz	r6, 8006c60 <__register_exitproc+0x8c>
 8006c38:	2201      	movs	r2, #1
 8006c3a:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8006c3e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8006c42:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8006c46:	409a      	lsls	r2, r3
 8006c48:	4311      	orrs	r1, r2
 8006c4a:	2e02      	cmp	r6, #2
 8006c4c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8006c50:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8006c54:	bf02      	ittt	eq
 8006c56:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8006c5a:	430a      	orreq	r2, r1
 8006c5c:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	3302      	adds	r3, #2
 8006c64:	6042      	str	r2, [r0, #4]
 8006c66:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8006c6a:	6820      	ldr	r0, [r4, #0]
 8006c6c:	f7ff f94b 	bl	8005f06 <__retarget_lock_release_recursive>
 8006c70:	2000      	movs	r0, #0
 8006c72:	e7cc      	b.n	8006c0e <__register_exitproc+0x3a>
 8006c74:	20000440 	.word	0x20000440
 8006c78:	08007734 	.word	0x08007734
 8006c7c:	00000000 	.word	0x00000000

08006c80 <_calloc_r>:
 8006c80:	b510      	push	{r4, lr}
 8006c82:	4351      	muls	r1, r2
 8006c84:	f7ff f9ac 	bl	8005fe0 <_malloc_r>
 8006c88:	4604      	mov	r4, r0
 8006c8a:	b198      	cbz	r0, 8006cb4 <_calloc_r+0x34>
 8006c8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006c90:	f022 0203 	bic.w	r2, r2, #3
 8006c94:	3a04      	subs	r2, #4
 8006c96:	2a24      	cmp	r2, #36	; 0x24
 8006c98:	d81b      	bhi.n	8006cd2 <_calloc_r+0x52>
 8006c9a:	2a13      	cmp	r2, #19
 8006c9c:	d917      	bls.n	8006cce <_calloc_r+0x4e>
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	2a1b      	cmp	r2, #27
 8006ca2:	e9c0 1100 	strd	r1, r1, [r0]
 8006ca6:	d807      	bhi.n	8006cb8 <_calloc_r+0x38>
 8006ca8:	f100 0308 	add.w	r3, r0, #8
 8006cac:	2200      	movs	r2, #0
 8006cae:	e9c3 2200 	strd	r2, r2, [r3]
 8006cb2:	609a      	str	r2, [r3, #8]
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	bd10      	pop	{r4, pc}
 8006cb8:	2a24      	cmp	r2, #36	; 0x24
 8006cba:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8006cbe:	bf11      	iteee	ne
 8006cc0:	f100 0310 	addne.w	r3, r0, #16
 8006cc4:	6101      	streq	r1, [r0, #16]
 8006cc6:	f100 0318 	addeq.w	r3, r0, #24
 8006cca:	6141      	streq	r1, [r0, #20]
 8006ccc:	e7ee      	b.n	8006cac <_calloc_r+0x2c>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	e7ec      	b.n	8006cac <_calloc_r+0x2c>
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	f7fc fd4c 	bl	8003770 <memset>
 8006cd8:	e7ec      	b.n	8006cb4 <_calloc_r+0x34>
	...

08006cdc <_close_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	2300      	movs	r3, #0
 8006ce0:	4c05      	ldr	r4, [pc, #20]	; (8006cf8 <_close_r+0x1c>)
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	f7fa ff89 	bl	8001bfe <_close>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_close_r+0x1a>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_close_r+0x1a>
 8006cf4:	602b      	str	r3, [r5, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	20000b6c 	.word	0x20000b6c

08006cfc <_fclose_r>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	b911      	cbnz	r1, 8006d0a <_fclose_r+0xe>
 8006d04:	2500      	movs	r5, #0
 8006d06:	4628      	mov	r0, r5
 8006d08:	bd70      	pop	{r4, r5, r6, pc}
 8006d0a:	b118      	cbz	r0, 8006d14 <_fclose_r+0x18>
 8006d0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006d0e:	b90b      	cbnz	r3, 8006d14 <_fclose_r+0x18>
 8006d10:	f7fe ff7e 	bl	8005c10 <__sinit>
 8006d14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d16:	07d8      	lsls	r0, r3, #31
 8006d18:	d405      	bmi.n	8006d26 <_fclose_r+0x2a>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	0599      	lsls	r1, r3, #22
 8006d1e:	d402      	bmi.n	8006d26 <_fclose_r+0x2a>
 8006d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d22:	f7ff f8ef 	bl	8005f04 <__retarget_lock_acquire_recursive>
 8006d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2a:	b93b      	cbnz	r3, 8006d3c <_fclose_r+0x40>
 8006d2c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006d2e:	f015 0501 	ands.w	r5, r5, #1
 8006d32:	d1e7      	bne.n	8006d04 <_fclose_r+0x8>
 8006d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d36:	f7ff f8e6 	bl	8005f06 <__retarget_lock_release_recursive>
 8006d3a:	e7e4      	b.n	8006d06 <_fclose_r+0xa>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f7fe fe6c 	bl	8005a1c <__sflush_r>
 8006d44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d46:	4605      	mov	r5, r0
 8006d48:	b133      	cbz	r3, 8006d58 <_fclose_r+0x5c>
 8006d4a:	69e1      	ldr	r1, [r4, #28]
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	4798      	blx	r3
 8006d50:	2800      	cmp	r0, #0
 8006d52:	bfb8      	it	lt
 8006d54:	f04f 35ff 	movlt.w	r5, #4294967295
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	061a      	lsls	r2, r3, #24
 8006d5c:	d503      	bpl.n	8006d66 <_fclose_r+0x6a>
 8006d5e:	6921      	ldr	r1, [r4, #16]
 8006d60:	4630      	mov	r0, r6
 8006d62:	f7fe ffe5 	bl	8005d30 <_free_r>
 8006d66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d68:	b141      	cbz	r1, 8006d7c <_fclose_r+0x80>
 8006d6a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	d002      	beq.n	8006d78 <_fclose_r+0x7c>
 8006d72:	4630      	mov	r0, r6
 8006d74:	f7fe ffdc 	bl	8005d30 <_free_r>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006d7e:	b121      	cbz	r1, 8006d8a <_fclose_r+0x8e>
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7fe ffd5 	bl	8005d30 <_free_r>
 8006d86:	2300      	movs	r3, #0
 8006d88:	6463      	str	r3, [r4, #68]	; 0x44
 8006d8a:	f7fe ff29 	bl	8005be0 <__sfp_lock_acquire>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d94:	07db      	lsls	r3, r3, #31
 8006d96:	d402      	bmi.n	8006d9e <_fclose_r+0xa2>
 8006d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d9a:	f7ff f8b4 	bl	8005f06 <__retarget_lock_release_recursive>
 8006d9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006da0:	f7ff f8af 	bl	8005f02 <__retarget_lock_close_recursive>
 8006da4:	f7fe ff22 	bl	8005bec <__sfp_lock_release>
 8006da8:	e7ad      	b.n	8006d06 <_fclose_r+0xa>

08006daa <__fputwc>:
 8006daa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006dae:	4680      	mov	r8, r0
 8006db0:	460e      	mov	r6, r1
 8006db2:	4614      	mov	r4, r2
 8006db4:	f000 f9d4 	bl	8007160 <__locale_mb_cur_max>
 8006db8:	2801      	cmp	r0, #1
 8006dba:	d11c      	bne.n	8006df6 <__fputwc+0x4c>
 8006dbc:	1e73      	subs	r3, r6, #1
 8006dbe:	2bfe      	cmp	r3, #254	; 0xfe
 8006dc0:	d819      	bhi.n	8006df6 <__fputwc+0x4c>
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	f88d 6004 	strb.w	r6, [sp, #4]
 8006dc8:	2700      	movs	r7, #0
 8006dca:	f10d 0904 	add.w	r9, sp, #4
 8006dce:	42af      	cmp	r7, r5
 8006dd0:	d020      	beq.n	8006e14 <__fputwc+0x6a>
 8006dd2:	68a3      	ldr	r3, [r4, #8]
 8006dd4:	f817 1009 	ldrb.w	r1, [r7, r9]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	60a3      	str	r3, [r4, #8]
 8006dde:	da04      	bge.n	8006dea <__fputwc+0x40>
 8006de0:	69a2      	ldr	r2, [r4, #24]
 8006de2:	4293      	cmp	r3, r2
 8006de4:	db1a      	blt.n	8006e1c <__fputwc+0x72>
 8006de6:	290a      	cmp	r1, #10
 8006de8:	d018      	beq.n	8006e1c <__fputwc+0x72>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	6022      	str	r2, [r4, #0]
 8006df0:	7019      	strb	r1, [r3, #0]
 8006df2:	3701      	adds	r7, #1
 8006df4:	e7eb      	b.n	8006dce <__fputwc+0x24>
 8006df6:	4632      	mov	r2, r6
 8006df8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006dfc:	a901      	add	r1, sp, #4
 8006dfe:	4640      	mov	r0, r8
 8006e00:	f000 fc02 	bl	8007608 <_wcrtomb_r>
 8006e04:	1c42      	adds	r2, r0, #1
 8006e06:	4605      	mov	r5, r0
 8006e08:	d1de      	bne.n	8006dc8 <__fputwc+0x1e>
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	4630      	mov	r0, r6
 8006e16:	b003      	add	sp, #12
 8006e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	4640      	mov	r0, r8
 8006e20:	f000 fba8 	bl	8007574 <__swbuf_r>
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	d1e4      	bne.n	8006df2 <__fputwc+0x48>
 8006e28:	4606      	mov	r6, r0
 8006e2a:	e7f3      	b.n	8006e14 <__fputwc+0x6a>

08006e2c <_fputwc_r>:
 8006e2c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006e2e:	b570      	push	{r4, r5, r6, lr}
 8006e30:	07db      	lsls	r3, r3, #31
 8006e32:	4605      	mov	r5, r0
 8006e34:	460e      	mov	r6, r1
 8006e36:	4614      	mov	r4, r2
 8006e38:	d405      	bmi.n	8006e46 <_fputwc_r+0x1a>
 8006e3a:	8993      	ldrh	r3, [r2, #12]
 8006e3c:	0598      	lsls	r0, r3, #22
 8006e3e:	d402      	bmi.n	8006e46 <_fputwc_r+0x1a>
 8006e40:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8006e42:	f7ff f85f 	bl	8005f04 <__retarget_lock_acquire_recursive>
 8006e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4a:	0499      	lsls	r1, r3, #18
 8006e4c:	d406      	bmi.n	8006e5c <_fputwc_r+0x30>
 8006e4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e52:	81a3      	strh	r3, [r4, #12]
 8006e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e5a:	6663      	str	r3, [r4, #100]	; 0x64
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	4628      	mov	r0, r5
 8006e60:	4631      	mov	r1, r6
 8006e62:	f7ff ffa2 	bl	8006daa <__fputwc>
 8006e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e68:	4605      	mov	r5, r0
 8006e6a:	07da      	lsls	r2, r3, #31
 8006e6c:	d405      	bmi.n	8006e7a <_fputwc_r+0x4e>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	059b      	lsls	r3, r3, #22
 8006e72:	d402      	bmi.n	8006e7a <_fputwc_r+0x4e>
 8006e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e76:	f7ff f846 	bl	8005f06 <__retarget_lock_release_recursive>
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e80 <_fstat_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	2300      	movs	r3, #0
 8006e84:	4c06      	ldr	r4, [pc, #24]	; (8006ea0 <_fstat_r+0x20>)
 8006e86:	4605      	mov	r5, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	f7fa fec1 	bl	8001c14 <_fstat>
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	d102      	bne.n	8006e9c <_fstat_r+0x1c>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	b103      	cbz	r3, 8006e9c <_fstat_r+0x1c>
 8006e9a:	602b      	str	r3, [r5, #0]
 8006e9c:	bd38      	pop	{r3, r4, r5, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000b6c 	.word	0x20000b6c

08006ea4 <__sfvwrite_r>:
 8006ea4:	6893      	ldr	r3, [r2, #8]
 8006ea6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eaa:	4680      	mov	r8, r0
 8006eac:	460c      	mov	r4, r1
 8006eae:	4691      	mov	r9, r2
 8006eb0:	b91b      	cbnz	r3, 8006eba <__sfvwrite_r+0x16>
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	b003      	add	sp, #12
 8006eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eba:	898b      	ldrh	r3, [r1, #12]
 8006ebc:	0718      	lsls	r0, r3, #28
 8006ebe:	d54f      	bpl.n	8006f60 <__sfvwrite_r+0xbc>
 8006ec0:	690b      	ldr	r3, [r1, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d04c      	beq.n	8006f60 <__sfvwrite_r+0xbc>
 8006ec6:	89a5      	ldrh	r5, [r4, #12]
 8006ec8:	f8d9 6000 	ldr.w	r6, [r9]
 8006ecc:	f015 0702 	ands.w	r7, r5, #2
 8006ed0:	d169      	bne.n	8006fa6 <__sfvwrite_r+0x102>
 8006ed2:	f015 0501 	ands.w	r5, r5, #1
 8006ed6:	f000 809a 	beq.w	800700e <__sfvwrite_r+0x16a>
 8006eda:	4638      	mov	r0, r7
 8006edc:	46ba      	mov	sl, r7
 8006ede:	46bb      	mov	fp, r7
 8006ee0:	f1bb 0f00 	cmp.w	fp, #0
 8006ee4:	f000 8103 	beq.w	80070ee <__sfvwrite_r+0x24a>
 8006ee8:	b950      	cbnz	r0, 8006f00 <__sfvwrite_r+0x5c>
 8006eea:	465a      	mov	r2, fp
 8006eec:	210a      	movs	r1, #10
 8006eee:	4650      	mov	r0, sl
 8006ef0:	f7ff faac 	bl	800644c <memchr>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f000 80ff 	beq.w	80070f8 <__sfvwrite_r+0x254>
 8006efa:	3001      	adds	r0, #1
 8006efc:	eba0 070a 	sub.w	r7, r0, sl
 8006f00:	6820      	ldr	r0, [r4, #0]
 8006f02:	6921      	ldr	r1, [r4, #16]
 8006f04:	455f      	cmp	r7, fp
 8006f06:	463b      	mov	r3, r7
 8006f08:	bf28      	it	cs
 8006f0a:	465b      	movcs	r3, fp
 8006f0c:	4288      	cmp	r0, r1
 8006f0e:	6962      	ldr	r2, [r4, #20]
 8006f10:	f240 80f5 	bls.w	80070fe <__sfvwrite_r+0x25a>
 8006f14:	68a5      	ldr	r5, [r4, #8]
 8006f16:	4415      	add	r5, r2
 8006f18:	42ab      	cmp	r3, r5
 8006f1a:	f340 80f0 	ble.w	80070fe <__sfvwrite_r+0x25a>
 8006f1e:	4651      	mov	r1, sl
 8006f20:	462a      	mov	r2, r5
 8006f22:	f000 f94f 	bl	80071c4 <memmove>
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	4621      	mov	r1, r4
 8006f2a:	442b      	add	r3, r5
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	4640      	mov	r0, r8
 8006f30:	f7fe fe02 	bl	8005b38 <_fflush_r>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d165      	bne.n	8007004 <__sfvwrite_r+0x160>
 8006f38:	1b7f      	subs	r7, r7, r5
 8006f3a:	f040 80fa 	bne.w	8007132 <__sfvwrite_r+0x28e>
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4640      	mov	r0, r8
 8006f42:	f7fe fdf9 	bl	8005b38 <_fflush_r>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d15c      	bne.n	8007004 <__sfvwrite_r+0x160>
 8006f4a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006f4e:	44aa      	add	sl, r5
 8006f50:	ebab 0b05 	sub.w	fp, fp, r5
 8006f54:	1b5d      	subs	r5, r3, r5
 8006f56:	f8c9 5008 	str.w	r5, [r9, #8]
 8006f5a:	2d00      	cmp	r5, #0
 8006f5c:	d1c0      	bne.n	8006ee0 <__sfvwrite_r+0x3c>
 8006f5e:	e7a8      	b.n	8006eb2 <__sfvwrite_r+0xe>
 8006f60:	4621      	mov	r1, r4
 8006f62:	4640      	mov	r0, r8
 8006f64:	f7fd fec2 	bl	8004cec <__swsetup_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d0ac      	beq.n	8006ec6 <__sfvwrite_r+0x22>
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	e7a0      	b.n	8006eb4 <__sfvwrite_r+0x10>
 8006f72:	e9d6 a700 	ldrd	sl, r7, [r6]
 8006f76:	3608      	adds	r6, #8
 8006f78:	2f00      	cmp	r7, #0
 8006f7a:	d0fa      	beq.n	8006f72 <__sfvwrite_r+0xce>
 8006f7c:	455f      	cmp	r7, fp
 8006f7e:	463b      	mov	r3, r7
 8006f80:	4652      	mov	r2, sl
 8006f82:	bf28      	it	cs
 8006f84:	465b      	movcs	r3, fp
 8006f86:	69e1      	ldr	r1, [r4, #28]
 8006f88:	4640      	mov	r0, r8
 8006f8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f8c:	47a8      	blx	r5
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	dd38      	ble.n	8007004 <__sfvwrite_r+0x160>
 8006f92:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006f96:	4482      	add	sl, r0
 8006f98:	1a3f      	subs	r7, r7, r0
 8006f9a:	1a18      	subs	r0, r3, r0
 8006f9c:	f8c9 0008 	str.w	r0, [r9, #8]
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d1e9      	bne.n	8006f78 <__sfvwrite_r+0xd4>
 8006fa4:	e785      	b.n	8006eb2 <__sfvwrite_r+0xe>
 8006fa6:	f04f 0a00 	mov.w	sl, #0
 8006faa:	f8df b190 	ldr.w	fp, [pc, #400]	; 800713c <__sfvwrite_r+0x298>
 8006fae:	4657      	mov	r7, sl
 8006fb0:	e7e2      	b.n	8006f78 <__sfvwrite_r+0xd4>
 8006fb2:	e9d6 5a00 	ldrd	r5, sl, [r6]
 8006fb6:	3608      	adds	r6, #8
 8006fb8:	f1ba 0f00 	cmp.w	sl, #0
 8006fbc:	d0f9      	beq.n	8006fb2 <__sfvwrite_r+0x10e>
 8006fbe:	89a2      	ldrh	r2, [r4, #12]
 8006fc0:	68a3      	ldr	r3, [r4, #8]
 8006fc2:	0591      	lsls	r1, r2, #22
 8006fc4:	6820      	ldr	r0, [r4, #0]
 8006fc6:	d564      	bpl.n	8007092 <__sfvwrite_r+0x1ee>
 8006fc8:	4553      	cmp	r3, sl
 8006fca:	d836      	bhi.n	800703a <__sfvwrite_r+0x196>
 8006fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fd0:	d033      	beq.n	800703a <__sfvwrite_r+0x196>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	6967      	ldr	r7, [r4, #20]
 8006fd6:	6921      	ldr	r1, [r4, #16]
 8006fd8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8006fdc:	fb97 f7f3 	sdiv	r7, r7, r3
 8006fe0:	eba0 0b01 	sub.w	fp, r0, r1
 8006fe4:	f10b 0301 	add.w	r3, fp, #1
 8006fe8:	4453      	add	r3, sl
 8006fea:	429f      	cmp	r7, r3
 8006fec:	bf38      	it	cc
 8006fee:	461f      	movcc	r7, r3
 8006ff0:	0553      	lsls	r3, r2, #21
 8006ff2:	d53e      	bpl.n	8007072 <__sfvwrite_r+0x1ce>
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	f7fe fff2 	bl	8005fe0 <_malloc_r>
 8006ffc:	b948      	cbnz	r0, 8007012 <__sfvwrite_r+0x16e>
 8006ffe:	230c      	movs	r3, #12
 8007000:	f8c8 3000 	str.w	r3, [r8]
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700a:	81a3      	strh	r3, [r4, #12]
 800700c:	e7ae      	b.n	8006f6c <__sfvwrite_r+0xc8>
 800700e:	46aa      	mov	sl, r5
 8007010:	e7d2      	b.n	8006fb8 <__sfvwrite_r+0x114>
 8007012:	465a      	mov	r2, fp
 8007014:	6921      	ldr	r1, [r4, #16]
 8007016:	9001      	str	r0, [sp, #4]
 8007018:	f7ff fa26 	bl	8006468 <memcpy>
 800701c:	89a2      	ldrh	r2, [r4, #12]
 800701e:	9b01      	ldr	r3, [sp, #4]
 8007020:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007024:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007028:	81a2      	strh	r2, [r4, #12]
 800702a:	6123      	str	r3, [r4, #16]
 800702c:	445b      	add	r3, fp
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	4653      	mov	r3, sl
 8007032:	6167      	str	r7, [r4, #20]
 8007034:	eba7 070b 	sub.w	r7, r7, fp
 8007038:	60a7      	str	r7, [r4, #8]
 800703a:	4553      	cmp	r3, sl
 800703c:	bf28      	it	cs
 800703e:	4653      	movcs	r3, sl
 8007040:	4657      	mov	r7, sl
 8007042:	461a      	mov	r2, r3
 8007044:	4629      	mov	r1, r5
 8007046:	6820      	ldr	r0, [r4, #0]
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	f000 f8bb 	bl	80071c4 <memmove>
 800704e:	68a2      	ldr	r2, [r4, #8]
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	1ad2      	subs	r2, r2, r3
 8007054:	60a2      	str	r2, [r4, #8]
 8007056:	6822      	ldr	r2, [r4, #0]
 8007058:	4413      	add	r3, r2
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007060:	443d      	add	r5, r7
 8007062:	ebaa 0a07 	sub.w	sl, sl, r7
 8007066:	1bdf      	subs	r7, r3, r7
 8007068:	f8c9 7008 	str.w	r7, [r9, #8]
 800706c:	2f00      	cmp	r7, #0
 800706e:	d1a3      	bne.n	8006fb8 <__sfvwrite_r+0x114>
 8007070:	e71f      	b.n	8006eb2 <__sfvwrite_r+0xe>
 8007072:	463a      	mov	r2, r7
 8007074:	4640      	mov	r0, r8
 8007076:	f000 f8d1 	bl	800721c <_realloc_r>
 800707a:	4603      	mov	r3, r0
 800707c:	2800      	cmp	r0, #0
 800707e:	d1d4      	bne.n	800702a <__sfvwrite_r+0x186>
 8007080:	6921      	ldr	r1, [r4, #16]
 8007082:	4640      	mov	r0, r8
 8007084:	f7fe fe54 	bl	8005d30 <_free_r>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	e7b5      	b.n	8006ffe <__sfvwrite_r+0x15a>
 8007092:	6922      	ldr	r2, [r4, #16]
 8007094:	4282      	cmp	r2, r0
 8007096:	d302      	bcc.n	800709e <__sfvwrite_r+0x1fa>
 8007098:	6962      	ldr	r2, [r4, #20]
 800709a:	4552      	cmp	r2, sl
 800709c:	d916      	bls.n	80070cc <__sfvwrite_r+0x228>
 800709e:	4553      	cmp	r3, sl
 80070a0:	bf28      	it	cs
 80070a2:	4653      	movcs	r3, sl
 80070a4:	461f      	mov	r7, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	4629      	mov	r1, r5
 80070aa:	f000 f88b 	bl	80071c4 <memmove>
 80070ae:	68a3      	ldr	r3, [r4, #8]
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	1bdb      	subs	r3, r3, r7
 80070b4:	443a      	add	r2, r7
 80070b6:	60a3      	str	r3, [r4, #8]
 80070b8:	6022      	str	r2, [r4, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1ce      	bne.n	800705c <__sfvwrite_r+0x1b8>
 80070be:	4621      	mov	r1, r4
 80070c0:	4640      	mov	r0, r8
 80070c2:	f7fe fd39 	bl	8005b38 <_fflush_r>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d0c8      	beq.n	800705c <__sfvwrite_r+0x1b8>
 80070ca:	e79b      	b.n	8007004 <__sfvwrite_r+0x160>
 80070cc:	4b1a      	ldr	r3, [pc, #104]	; (8007138 <__sfvwrite_r+0x294>)
 80070ce:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80070d0:	459a      	cmp	sl, r3
 80070d2:	bf94      	ite	ls
 80070d4:	4653      	movls	r3, sl
 80070d6:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 80070da:	fb93 f3f2 	sdiv	r3, r3, r2
 80070de:	69e1      	ldr	r1, [r4, #28]
 80070e0:	4353      	muls	r3, r2
 80070e2:	4640      	mov	r0, r8
 80070e4:	462a      	mov	r2, r5
 80070e6:	47b8      	blx	r7
 80070e8:	1e07      	subs	r7, r0, #0
 80070ea:	dcb7      	bgt.n	800705c <__sfvwrite_r+0x1b8>
 80070ec:	e78a      	b.n	8007004 <__sfvwrite_r+0x160>
 80070ee:	e9d6 ab00 	ldrd	sl, fp, [r6]
 80070f2:	2000      	movs	r0, #0
 80070f4:	3608      	adds	r6, #8
 80070f6:	e6f3      	b.n	8006ee0 <__sfvwrite_r+0x3c>
 80070f8:	f10b 0701 	add.w	r7, fp, #1
 80070fc:	e700      	b.n	8006f00 <__sfvwrite_r+0x5c>
 80070fe:	429a      	cmp	r2, r3
 8007100:	dc09      	bgt.n	8007116 <__sfvwrite_r+0x272>
 8007102:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007104:	4613      	mov	r3, r2
 8007106:	69e1      	ldr	r1, [r4, #28]
 8007108:	4652      	mov	r2, sl
 800710a:	4640      	mov	r0, r8
 800710c:	47a8      	blx	r5
 800710e:	1e05      	subs	r5, r0, #0
 8007110:	f73f af12 	bgt.w	8006f38 <__sfvwrite_r+0x94>
 8007114:	e776      	b.n	8007004 <__sfvwrite_r+0x160>
 8007116:	461a      	mov	r2, r3
 8007118:	4651      	mov	r1, sl
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	f000 f852 	bl	80071c4 <memmove>
 8007120:	9b01      	ldr	r3, [sp, #4]
 8007122:	68a2      	ldr	r2, [r4, #8]
 8007124:	461d      	mov	r5, r3
 8007126:	1ad2      	subs	r2, r2, r3
 8007128:	60a2      	str	r2, [r4, #8]
 800712a:	6822      	ldr	r2, [r4, #0]
 800712c:	441a      	add	r2, r3
 800712e:	6022      	str	r2, [r4, #0]
 8007130:	e702      	b.n	8006f38 <__sfvwrite_r+0x94>
 8007132:	2001      	movs	r0, #1
 8007134:	e709      	b.n	8006f4a <__sfvwrite_r+0xa6>
 8007136:	bf00      	nop
 8007138:	7ffffffe 	.word	0x7ffffffe
 800713c:	7ffffc00 	.word	0x7ffffc00

08007140 <_isatty_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	2300      	movs	r3, #0
 8007144:	4c05      	ldr	r4, [pc, #20]	; (800715c <_isatty_r+0x1c>)
 8007146:	4605      	mov	r5, r0
 8007148:	4608      	mov	r0, r1
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	f7fa fd71 	bl	8001c32 <_isatty>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_isatty_r+0x1a>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	b103      	cbz	r3, 800715a <_isatty_r+0x1a>
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	20000b6c 	.word	0x20000b6c

08007160 <__locale_mb_cur_max>:
 8007160:	4b04      	ldr	r3, [pc, #16]	; (8007174 <__locale_mb_cur_max+0x14>)
 8007162:	4a05      	ldr	r2, [pc, #20]	; (8007178 <__locale_mb_cur_max+0x18>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	2b00      	cmp	r3, #0
 800716a:	bf08      	it	eq
 800716c:	4613      	moveq	r3, r2
 800716e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8007172:	4770      	bx	lr
 8007174:	20000010 	.word	0x20000010
 8007178:	20000854 	.word	0x20000854

0800717c <_lseek_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4605      	mov	r5, r0
 8007180:	4608      	mov	r0, r1
 8007182:	4611      	mov	r1, r2
 8007184:	2200      	movs	r2, #0
 8007186:	4c05      	ldr	r4, [pc, #20]	; (800719c <_lseek_r+0x20>)
 8007188:	6022      	str	r2, [r4, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	f7fa fd5b 	bl	8001c46 <_lseek>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_lseek_r+0x1e>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	b103      	cbz	r3, 800719a <_lseek_r+0x1e>
 8007198:	602b      	str	r3, [r5, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20000b6c 	.word	0x20000b6c

080071a0 <__ascii_mbtowc>:
 80071a0:	b082      	sub	sp, #8
 80071a2:	b901      	cbnz	r1, 80071a6 <__ascii_mbtowc+0x6>
 80071a4:	a901      	add	r1, sp, #4
 80071a6:	b142      	cbz	r2, 80071ba <__ascii_mbtowc+0x1a>
 80071a8:	b14b      	cbz	r3, 80071be <__ascii_mbtowc+0x1e>
 80071aa:	7813      	ldrb	r3, [r2, #0]
 80071ac:	600b      	str	r3, [r1, #0]
 80071ae:	7812      	ldrb	r2, [r2, #0]
 80071b0:	1c10      	adds	r0, r2, #0
 80071b2:	bf18      	it	ne
 80071b4:	2001      	movne	r0, #1
 80071b6:	b002      	add	sp, #8
 80071b8:	4770      	bx	lr
 80071ba:	4610      	mov	r0, r2
 80071bc:	e7fb      	b.n	80071b6 <__ascii_mbtowc+0x16>
 80071be:	f06f 0001 	mvn.w	r0, #1
 80071c2:	e7f8      	b.n	80071b6 <__ascii_mbtowc+0x16>

080071c4 <memmove>:
 80071c4:	4288      	cmp	r0, r1
 80071c6:	b510      	push	{r4, lr}
 80071c8:	eb01 0302 	add.w	r3, r1, r2
 80071cc:	d807      	bhi.n	80071de <memmove+0x1a>
 80071ce:	1e42      	subs	r2, r0, #1
 80071d0:	4299      	cmp	r1, r3
 80071d2:	d00a      	beq.n	80071ea <memmove+0x26>
 80071d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80071dc:	e7f8      	b.n	80071d0 <memmove+0xc>
 80071de:	4283      	cmp	r3, r0
 80071e0:	d9f5      	bls.n	80071ce <memmove+0xa>
 80071e2:	1881      	adds	r1, r0, r2
 80071e4:	1ad2      	subs	r2, r2, r3
 80071e6:	42d3      	cmn	r3, r2
 80071e8:	d100      	bne.n	80071ec <memmove+0x28>
 80071ea:	bd10      	pop	{r4, pc}
 80071ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80071f4:	e7f7      	b.n	80071e6 <memmove+0x22>
	...

080071f8 <_read_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4605      	mov	r5, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	2200      	movs	r2, #0
 8007202:	4c05      	ldr	r4, [pc, #20]	; (8007218 <_read_r+0x20>)
 8007204:	6022      	str	r2, [r4, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7fa fcc0 	bl	8001b8c <_read>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_read_r+0x1e>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	b103      	cbz	r3, 8007216 <_read_r+0x1e>
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	20000b6c 	.word	0x20000b6c

0800721c <_realloc_r>:
 800721c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	4682      	mov	sl, r0
 8007222:	460c      	mov	r4, r1
 8007224:	b929      	cbnz	r1, 8007232 <_realloc_r+0x16>
 8007226:	4611      	mov	r1, r2
 8007228:	b003      	add	sp, #12
 800722a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722e:	f7fe bed7 	b.w	8005fe0 <_malloc_r>
 8007232:	9201      	str	r2, [sp, #4]
 8007234:	f7ff f924 	bl	8006480 <__malloc_lock>
 8007238:	9a01      	ldr	r2, [sp, #4]
 800723a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800723e:	f102 080b 	add.w	r8, r2, #11
 8007242:	f1b8 0f16 	cmp.w	r8, #22
 8007246:	f1a4 0908 	sub.w	r9, r4, #8
 800724a:	f025 0603 	bic.w	r6, r5, #3
 800724e:	d90b      	bls.n	8007268 <_realloc_r+0x4c>
 8007250:	f038 0807 	bics.w	r8, r8, #7
 8007254:	d50a      	bpl.n	800726c <_realloc_r+0x50>
 8007256:	230c      	movs	r3, #12
 8007258:	f04f 0b00 	mov.w	fp, #0
 800725c:	f8ca 3000 	str.w	r3, [sl]
 8007260:	4658      	mov	r0, fp
 8007262:	b003      	add	sp, #12
 8007264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007268:	f04f 0810 	mov.w	r8, #16
 800726c:	4590      	cmp	r8, r2
 800726e:	d3f2      	bcc.n	8007256 <_realloc_r+0x3a>
 8007270:	45b0      	cmp	r8, r6
 8007272:	f340 8175 	ble.w	8007560 <_realloc_r+0x344>
 8007276:	49ab      	ldr	r1, [pc, #684]	; (8007524 <_realloc_r+0x308>)
 8007278:	eb09 0306 	add.w	r3, r9, r6
 800727c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007280:	6858      	ldr	r0, [r3, #4]
 8007282:	459c      	cmp	ip, r3
 8007284:	9101      	str	r1, [sp, #4]
 8007286:	d005      	beq.n	8007294 <_realloc_r+0x78>
 8007288:	f020 0101 	bic.w	r1, r0, #1
 800728c:	4419      	add	r1, r3
 800728e:	6849      	ldr	r1, [r1, #4]
 8007290:	07cf      	lsls	r7, r1, #31
 8007292:	d447      	bmi.n	8007324 <_realloc_r+0x108>
 8007294:	f020 0003 	bic.w	r0, r0, #3
 8007298:	459c      	cmp	ip, r3
 800729a:	eb06 0700 	add.w	r7, r6, r0
 800729e:	d119      	bne.n	80072d4 <_realloc_r+0xb8>
 80072a0:	f108 0110 	add.w	r1, r8, #16
 80072a4:	42b9      	cmp	r1, r7
 80072a6:	dc3f      	bgt.n	8007328 <_realloc_r+0x10c>
 80072a8:	9a01      	ldr	r2, [sp, #4]
 80072aa:	eba7 0708 	sub.w	r7, r7, r8
 80072ae:	eb09 0308 	add.w	r3, r9, r8
 80072b2:	f047 0701 	orr.w	r7, r7, #1
 80072b6:	6093      	str	r3, [r2, #8]
 80072b8:	605f      	str	r7, [r3, #4]
 80072ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80072be:	4650      	mov	r0, sl
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	ea43 0308 	orr.w	r3, r3, r8
 80072c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80072cc:	f7ff f8de 	bl	800648c <__malloc_unlock>
 80072d0:	46a3      	mov	fp, r4
 80072d2:	e7c5      	b.n	8007260 <_realloc_r+0x44>
 80072d4:	45b8      	cmp	r8, r7
 80072d6:	dc27      	bgt.n	8007328 <_realloc_r+0x10c>
 80072d8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80072dc:	60da      	str	r2, [r3, #12]
 80072de:	6093      	str	r3, [r2, #8]
 80072e0:	eba7 0008 	sub.w	r0, r7, r8
 80072e4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80072e8:	280f      	cmp	r0, #15
 80072ea:	f002 0201 	and.w	r2, r2, #1
 80072ee:	eb09 0307 	add.w	r3, r9, r7
 80072f2:	f240 8137 	bls.w	8007564 <_realloc_r+0x348>
 80072f6:	eb09 0108 	add.w	r1, r9, r8
 80072fa:	ea48 0202 	orr.w	r2, r8, r2
 80072fe:	f040 0001 	orr.w	r0, r0, #1
 8007302:	f8c9 2004 	str.w	r2, [r9, #4]
 8007306:	6048      	str	r0, [r1, #4]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	3108      	adds	r1, #8
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	605a      	str	r2, [r3, #4]
 8007312:	4650      	mov	r0, sl
 8007314:	f7fe fd0c 	bl	8005d30 <_free_r>
 8007318:	4650      	mov	r0, sl
 800731a:	f7ff f8b7 	bl	800648c <__malloc_unlock>
 800731e:	f109 0b08 	add.w	fp, r9, #8
 8007322:	e79d      	b.n	8007260 <_realloc_r+0x44>
 8007324:	2000      	movs	r0, #0
 8007326:	4603      	mov	r3, r0
 8007328:	07e9      	lsls	r1, r5, #31
 800732a:	f100 80c9 	bmi.w	80074c0 <_realloc_r+0x2a4>
 800732e:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007332:	eba9 0505 	sub.w	r5, r9, r5
 8007336:	6869      	ldr	r1, [r5, #4]
 8007338:	f021 0103 	bic.w	r1, r1, #3
 800733c:	eb01 0b06 	add.w	fp, r1, r6
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 8088 	beq.w	8007456 <_realloc_r+0x23a>
 8007346:	459c      	cmp	ip, r3
 8007348:	eb00 070b 	add.w	r7, r0, fp
 800734c:	d14a      	bne.n	80073e4 <_realloc_r+0x1c8>
 800734e:	f108 0310 	add.w	r3, r8, #16
 8007352:	42bb      	cmp	r3, r7
 8007354:	dc7f      	bgt.n	8007456 <_realloc_r+0x23a>
 8007356:	46ab      	mov	fp, r5
 8007358:	68eb      	ldr	r3, [r5, #12]
 800735a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800735e:	60d3      	str	r3, [r2, #12]
 8007360:	609a      	str	r2, [r3, #8]
 8007362:	1f32      	subs	r2, r6, #4
 8007364:	2a24      	cmp	r2, #36	; 0x24
 8007366:	d838      	bhi.n	80073da <_realloc_r+0x1be>
 8007368:	2a13      	cmp	r2, #19
 800736a:	d934      	bls.n	80073d6 <_realloc_r+0x1ba>
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	2a1b      	cmp	r2, #27
 8007370:	60ab      	str	r3, [r5, #8]
 8007372:	6863      	ldr	r3, [r4, #4]
 8007374:	60eb      	str	r3, [r5, #12]
 8007376:	d81b      	bhi.n	80073b0 <_realloc_r+0x194>
 8007378:	3408      	adds	r4, #8
 800737a:	f105 0310 	add.w	r3, r5, #16
 800737e:	6822      	ldr	r2, [r4, #0]
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	6862      	ldr	r2, [r4, #4]
 8007384:	605a      	str	r2, [r3, #4]
 8007386:	68a2      	ldr	r2, [r4, #8]
 8007388:	609a      	str	r2, [r3, #8]
 800738a:	9a01      	ldr	r2, [sp, #4]
 800738c:	eba7 0708 	sub.w	r7, r7, r8
 8007390:	eb05 0308 	add.w	r3, r5, r8
 8007394:	f047 0701 	orr.w	r7, r7, #1
 8007398:	6093      	str	r3, [r2, #8]
 800739a:	605f      	str	r7, [r3, #4]
 800739c:	686b      	ldr	r3, [r5, #4]
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	ea43 0308 	orr.w	r3, r3, r8
 80073a6:	606b      	str	r3, [r5, #4]
 80073a8:	4650      	mov	r0, sl
 80073aa:	f7ff f86f 	bl	800648c <__malloc_unlock>
 80073ae:	e757      	b.n	8007260 <_realloc_r+0x44>
 80073b0:	68a3      	ldr	r3, [r4, #8]
 80073b2:	2a24      	cmp	r2, #36	; 0x24
 80073b4:	612b      	str	r3, [r5, #16]
 80073b6:	68e3      	ldr	r3, [r4, #12]
 80073b8:	bf18      	it	ne
 80073ba:	3410      	addne	r4, #16
 80073bc:	616b      	str	r3, [r5, #20]
 80073be:	bf09      	itett	eq
 80073c0:	6923      	ldreq	r3, [r4, #16]
 80073c2:	f105 0318 	addne.w	r3, r5, #24
 80073c6:	61ab      	streq	r3, [r5, #24]
 80073c8:	6962      	ldreq	r2, [r4, #20]
 80073ca:	bf02      	ittt	eq
 80073cc:	f105 0320 	addeq.w	r3, r5, #32
 80073d0:	61ea      	streq	r2, [r5, #28]
 80073d2:	3418      	addeq	r4, #24
 80073d4:	e7d3      	b.n	800737e <_realloc_r+0x162>
 80073d6:	465b      	mov	r3, fp
 80073d8:	e7d1      	b.n	800737e <_realloc_r+0x162>
 80073da:	4621      	mov	r1, r4
 80073dc:	4658      	mov	r0, fp
 80073de:	f7ff fef1 	bl	80071c4 <memmove>
 80073e2:	e7d2      	b.n	800738a <_realloc_r+0x16e>
 80073e4:	45b8      	cmp	r8, r7
 80073e6:	dc36      	bgt.n	8007456 <_realloc_r+0x23a>
 80073e8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80073ec:	4628      	mov	r0, r5
 80073ee:	60da      	str	r2, [r3, #12]
 80073f0:	6093      	str	r3, [r2, #8]
 80073f2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80073f6:	68eb      	ldr	r3, [r5, #12]
 80073f8:	60d3      	str	r3, [r2, #12]
 80073fa:	609a      	str	r2, [r3, #8]
 80073fc:	1f32      	subs	r2, r6, #4
 80073fe:	2a24      	cmp	r2, #36	; 0x24
 8007400:	d825      	bhi.n	800744e <_realloc_r+0x232>
 8007402:	2a13      	cmp	r2, #19
 8007404:	d908      	bls.n	8007418 <_realloc_r+0x1fc>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	2a1b      	cmp	r2, #27
 800740a:	60ab      	str	r3, [r5, #8]
 800740c:	6863      	ldr	r3, [r4, #4]
 800740e:	60eb      	str	r3, [r5, #12]
 8007410:	d80a      	bhi.n	8007428 <_realloc_r+0x20c>
 8007412:	3408      	adds	r4, #8
 8007414:	f105 0010 	add.w	r0, r5, #16
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	6003      	str	r3, [r0, #0]
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	6043      	str	r3, [r0, #4]
 8007420:	68a3      	ldr	r3, [r4, #8]
 8007422:	6083      	str	r3, [r0, #8]
 8007424:	46a9      	mov	r9, r5
 8007426:	e75b      	b.n	80072e0 <_realloc_r+0xc4>
 8007428:	68a3      	ldr	r3, [r4, #8]
 800742a:	2a24      	cmp	r2, #36	; 0x24
 800742c:	612b      	str	r3, [r5, #16]
 800742e:	68e3      	ldr	r3, [r4, #12]
 8007430:	bf18      	it	ne
 8007432:	f105 0018 	addne.w	r0, r5, #24
 8007436:	616b      	str	r3, [r5, #20]
 8007438:	bf09      	itett	eq
 800743a:	6923      	ldreq	r3, [r4, #16]
 800743c:	3410      	addne	r4, #16
 800743e:	61ab      	streq	r3, [r5, #24]
 8007440:	6963      	ldreq	r3, [r4, #20]
 8007442:	bf02      	ittt	eq
 8007444:	f105 0020 	addeq.w	r0, r5, #32
 8007448:	61eb      	streq	r3, [r5, #28]
 800744a:	3418      	addeq	r4, #24
 800744c:	e7e4      	b.n	8007418 <_realloc_r+0x1fc>
 800744e:	4621      	mov	r1, r4
 8007450:	f7ff feb8 	bl	80071c4 <memmove>
 8007454:	e7e6      	b.n	8007424 <_realloc_r+0x208>
 8007456:	45d8      	cmp	r8, fp
 8007458:	dc32      	bgt.n	80074c0 <_realloc_r+0x2a4>
 800745a:	4628      	mov	r0, r5
 800745c:	68eb      	ldr	r3, [r5, #12]
 800745e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007462:	60d3      	str	r3, [r2, #12]
 8007464:	609a      	str	r2, [r3, #8]
 8007466:	1f32      	subs	r2, r6, #4
 8007468:	2a24      	cmp	r2, #36	; 0x24
 800746a:	d825      	bhi.n	80074b8 <_realloc_r+0x29c>
 800746c:	2a13      	cmp	r2, #19
 800746e:	d908      	bls.n	8007482 <_realloc_r+0x266>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	2a1b      	cmp	r2, #27
 8007474:	60ab      	str	r3, [r5, #8]
 8007476:	6863      	ldr	r3, [r4, #4]
 8007478:	60eb      	str	r3, [r5, #12]
 800747a:	d80a      	bhi.n	8007492 <_realloc_r+0x276>
 800747c:	3408      	adds	r4, #8
 800747e:	f105 0010 	add.w	r0, r5, #16
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	6003      	str	r3, [r0, #0]
 8007486:	6863      	ldr	r3, [r4, #4]
 8007488:	6043      	str	r3, [r0, #4]
 800748a:	68a3      	ldr	r3, [r4, #8]
 800748c:	6083      	str	r3, [r0, #8]
 800748e:	465f      	mov	r7, fp
 8007490:	e7c8      	b.n	8007424 <_realloc_r+0x208>
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	2a24      	cmp	r2, #36	; 0x24
 8007496:	612b      	str	r3, [r5, #16]
 8007498:	68e3      	ldr	r3, [r4, #12]
 800749a:	bf18      	it	ne
 800749c:	f105 0018 	addne.w	r0, r5, #24
 80074a0:	616b      	str	r3, [r5, #20]
 80074a2:	bf09      	itett	eq
 80074a4:	6923      	ldreq	r3, [r4, #16]
 80074a6:	3410      	addne	r4, #16
 80074a8:	61ab      	streq	r3, [r5, #24]
 80074aa:	6963      	ldreq	r3, [r4, #20]
 80074ac:	bf02      	ittt	eq
 80074ae:	f105 0020 	addeq.w	r0, r5, #32
 80074b2:	61eb      	streq	r3, [r5, #28]
 80074b4:	3418      	addeq	r4, #24
 80074b6:	e7e4      	b.n	8007482 <_realloc_r+0x266>
 80074b8:	4621      	mov	r1, r4
 80074ba:	f7ff fe83 	bl	80071c4 <memmove>
 80074be:	e7e6      	b.n	800748e <_realloc_r+0x272>
 80074c0:	4611      	mov	r1, r2
 80074c2:	4650      	mov	r0, sl
 80074c4:	f7fe fd8c 	bl	8005fe0 <_malloc_r>
 80074c8:	4683      	mov	fp, r0
 80074ca:	2800      	cmp	r0, #0
 80074cc:	f43f af6c 	beq.w	80073a8 <_realloc_r+0x18c>
 80074d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80074d4:	f1a0 0208 	sub.w	r2, r0, #8
 80074d8:	f023 0301 	bic.w	r3, r3, #1
 80074dc:	444b      	add	r3, r9
 80074de:	4293      	cmp	r3, r2
 80074e0:	d105      	bne.n	80074ee <_realloc_r+0x2d2>
 80074e2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80074e6:	f027 0703 	bic.w	r7, r7, #3
 80074ea:	4437      	add	r7, r6
 80074ec:	e6f8      	b.n	80072e0 <_realloc_r+0xc4>
 80074ee:	1f32      	subs	r2, r6, #4
 80074f0:	2a24      	cmp	r2, #36	; 0x24
 80074f2:	d831      	bhi.n	8007558 <_realloc_r+0x33c>
 80074f4:	2a13      	cmp	r2, #19
 80074f6:	d92c      	bls.n	8007552 <_realloc_r+0x336>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	2a1b      	cmp	r2, #27
 80074fc:	6003      	str	r3, [r0, #0]
 80074fe:	6863      	ldr	r3, [r4, #4]
 8007500:	6043      	str	r3, [r0, #4]
 8007502:	d811      	bhi.n	8007528 <_realloc_r+0x30c>
 8007504:	f104 0208 	add.w	r2, r4, #8
 8007508:	f100 0308 	add.w	r3, r0, #8
 800750c:	6811      	ldr	r1, [r2, #0]
 800750e:	6019      	str	r1, [r3, #0]
 8007510:	6851      	ldr	r1, [r2, #4]
 8007512:	6059      	str	r1, [r3, #4]
 8007514:	6892      	ldr	r2, [r2, #8]
 8007516:	609a      	str	r2, [r3, #8]
 8007518:	4621      	mov	r1, r4
 800751a:	4650      	mov	r0, sl
 800751c:	f7fe fc08 	bl	8005d30 <_free_r>
 8007520:	e742      	b.n	80073a8 <_realloc_r+0x18c>
 8007522:	bf00      	nop
 8007524:	20000444 	.word	0x20000444
 8007528:	68a3      	ldr	r3, [r4, #8]
 800752a:	2a24      	cmp	r2, #36	; 0x24
 800752c:	6083      	str	r3, [r0, #8]
 800752e:	68e3      	ldr	r3, [r4, #12]
 8007530:	bf18      	it	ne
 8007532:	f104 0210 	addne.w	r2, r4, #16
 8007536:	60c3      	str	r3, [r0, #12]
 8007538:	bf09      	itett	eq
 800753a:	6923      	ldreq	r3, [r4, #16]
 800753c:	f100 0310 	addne.w	r3, r0, #16
 8007540:	6103      	streq	r3, [r0, #16]
 8007542:	6961      	ldreq	r1, [r4, #20]
 8007544:	bf02      	ittt	eq
 8007546:	f104 0218 	addeq.w	r2, r4, #24
 800754a:	f100 0318 	addeq.w	r3, r0, #24
 800754e:	6141      	streq	r1, [r0, #20]
 8007550:	e7dc      	b.n	800750c <_realloc_r+0x2f0>
 8007552:	4603      	mov	r3, r0
 8007554:	4622      	mov	r2, r4
 8007556:	e7d9      	b.n	800750c <_realloc_r+0x2f0>
 8007558:	4621      	mov	r1, r4
 800755a:	f7ff fe33 	bl	80071c4 <memmove>
 800755e:	e7db      	b.n	8007518 <_realloc_r+0x2fc>
 8007560:	4637      	mov	r7, r6
 8007562:	e6bd      	b.n	80072e0 <_realloc_r+0xc4>
 8007564:	4317      	orrs	r7, r2
 8007566:	f8c9 7004 	str.w	r7, [r9, #4]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	f042 0201 	orr.w	r2, r2, #1
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	e6d1      	b.n	8007318 <_realloc_r+0xfc>

08007574 <__swbuf_r>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	460d      	mov	r5, r1
 8007578:	4614      	mov	r4, r2
 800757a:	4606      	mov	r6, r0
 800757c:	b118      	cbz	r0, 8007586 <__swbuf_r+0x12>
 800757e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007580:	b90b      	cbnz	r3, 8007586 <__swbuf_r+0x12>
 8007582:	f7fe fb45 	bl	8005c10 <__sinit>
 8007586:	69a3      	ldr	r3, [r4, #24]
 8007588:	60a3      	str	r3, [r4, #8]
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	0719      	lsls	r1, r3, #28
 800758e:	d528      	bpl.n	80075e2 <__swbuf_r+0x6e>
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	b333      	cbz	r3, 80075e2 <__swbuf_r+0x6e>
 8007594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007598:	b2ed      	uxtb	r5, r5
 800759a:	049a      	lsls	r2, r3, #18
 800759c:	462f      	mov	r7, r5
 800759e:	d52a      	bpl.n	80075f6 <__swbuf_r+0x82>
 80075a0:	6923      	ldr	r3, [r4, #16]
 80075a2:	6820      	ldr	r0, [r4, #0]
 80075a4:	1ac0      	subs	r0, r0, r3
 80075a6:	6963      	ldr	r3, [r4, #20]
 80075a8:	4283      	cmp	r3, r0
 80075aa:	dc04      	bgt.n	80075b6 <__swbuf_r+0x42>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4630      	mov	r0, r6
 80075b0:	f7fe fac2 	bl	8005b38 <_fflush_r>
 80075b4:	b9d8      	cbnz	r0, 80075ee <__swbuf_r+0x7a>
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	3001      	adds	r0, #1
 80075ba:	3b01      	subs	r3, #1
 80075bc:	60a3      	str	r3, [r4, #8]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	6022      	str	r2, [r4, #0]
 80075c4:	701d      	strb	r5, [r3, #0]
 80075c6:	6963      	ldr	r3, [r4, #20]
 80075c8:	4283      	cmp	r3, r0
 80075ca:	d004      	beq.n	80075d6 <__swbuf_r+0x62>
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	07db      	lsls	r3, r3, #31
 80075d0:	d50f      	bpl.n	80075f2 <__swbuf_r+0x7e>
 80075d2:	2d0a      	cmp	r5, #10
 80075d4:	d10d      	bne.n	80075f2 <__swbuf_r+0x7e>
 80075d6:	4621      	mov	r1, r4
 80075d8:	4630      	mov	r0, r6
 80075da:	f7fe faad 	bl	8005b38 <_fflush_r>
 80075de:	b140      	cbz	r0, 80075f2 <__swbuf_r+0x7e>
 80075e0:	e005      	b.n	80075ee <__swbuf_r+0x7a>
 80075e2:	4621      	mov	r1, r4
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7fd fb81 	bl	8004cec <__swsetup_r>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d0d2      	beq.n	8007594 <__swbuf_r+0x20>
 80075ee:	f04f 37ff 	mov.w	r7, #4294967295
 80075f2:	4638      	mov	r0, r7
 80075f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007602:	6663      	str	r3, [r4, #100]	; 0x64
 8007604:	e7cc      	b.n	80075a0 <__swbuf_r+0x2c>
	...

08007608 <_wcrtomb_r>:
 8007608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800760a:	4c0f      	ldr	r4, [pc, #60]	; (8007648 <_wcrtomb_r+0x40>)
 800760c:	b085      	sub	sp, #20
 800760e:	6824      	ldr	r4, [r4, #0]
 8007610:	4605      	mov	r5, r0
 8007612:	461e      	mov	r6, r3
 8007614:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8007616:	b981      	cbnz	r1, 800763a <_wcrtomb_r+0x32>
 8007618:	4a0c      	ldr	r2, [pc, #48]	; (800764c <_wcrtomb_r+0x44>)
 800761a:	2c00      	cmp	r4, #0
 800761c:	bf08      	it	eq
 800761e:	4614      	moveq	r4, r2
 8007620:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8007624:	460a      	mov	r2, r1
 8007626:	a901      	add	r1, sp, #4
 8007628:	47a0      	blx	r4
 800762a:	1c43      	adds	r3, r0, #1
 800762c:	bf01      	itttt	eq
 800762e:	2300      	moveq	r3, #0
 8007630:	6033      	streq	r3, [r6, #0]
 8007632:	238a      	moveq	r3, #138	; 0x8a
 8007634:	602b      	streq	r3, [r5, #0]
 8007636:	b005      	add	sp, #20
 8007638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800763a:	4f04      	ldr	r7, [pc, #16]	; (800764c <_wcrtomb_r+0x44>)
 800763c:	2c00      	cmp	r4, #0
 800763e:	bf08      	it	eq
 8007640:	463c      	moveq	r4, r7
 8007642:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8007646:	e7ef      	b.n	8007628 <_wcrtomb_r+0x20>
 8007648:	20000010 	.word	0x20000010
 800764c:	20000854 	.word	0x20000854

08007650 <__ascii_wctomb>:
 8007650:	b149      	cbz	r1, 8007666 <__ascii_wctomb+0x16>
 8007652:	2aff      	cmp	r2, #255	; 0xff
 8007654:	bf8b      	itete	hi
 8007656:	238a      	movhi	r3, #138	; 0x8a
 8007658:	700a      	strbls	r2, [r1, #0]
 800765a:	6003      	strhi	r3, [r0, #0]
 800765c:	2001      	movls	r0, #1
 800765e:	bf88      	it	hi
 8007660:	f04f 30ff 	movhi.w	r0, #4294967295
 8007664:	4770      	bx	lr
 8007666:	4608      	mov	r0, r1
 8007668:	4770      	bx	lr
	...

0800766c <_init>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr

08007678 <_fini>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr
