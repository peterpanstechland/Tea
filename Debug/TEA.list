
TEA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ccc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08009de0  08009de0  00019de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b0  0800a3b0  000209c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b8  0800a3b8  000209c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3c0  0800a3c0  0001a3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c0  20000000  0800a3c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200009c0  0800ad84  000209c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b70  0800ad84  00020b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d74  00000000  00000000  000209e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025f6  00000000  00000000  0003175d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001178  00000000  00000000  00033d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  00034ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016384  00000000  00000000  00035f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc01  00000000  00000000  0004c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000771a8  00000000  00000000  00058eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d005d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d60  00000000  00000000  000d00d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009c0 	.word	0x200009c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009dc4 	.word	0x08009dc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009c4 	.word	0x200009c4
 800014c:	08009dc4 	.word	0x08009dc4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f58:	f000 b974 	b.w	8001244 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	468c      	mov	ip, r1
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	9e08      	ldr	r6, [sp, #32]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d14b      	bne.n	800101a <__udivmoddi4+0xa6>
 8000f82:	428a      	cmp	r2, r1
 8000f84:	4615      	mov	r5, r2
 8000f86:	d967      	bls.n	8001058 <__udivmoddi4+0xe4>
 8000f88:	fab2 f282 	clz	r2, r2
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0720 	rsb	r7, r2, #32
 8000f92:	fa01 f302 	lsl.w	r3, r1, r2
 8000f96:	fa20 f707 	lsr.w	r7, r0, r7
 8000f9a:	4095      	lsls	r5, r2
 8000f9c:	ea47 0c03 	orr.w	ip, r7, r3
 8000fa0:	4094      	lsls	r4, r2
 8000fa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fa6:	fbbc f7fe 	udiv	r7, ip, lr
 8000faa:	fa1f f885 	uxth.w	r8, r5
 8000fae:	fb0e c317 	mls	r3, lr, r7, ip
 8000fb2:	fb07 f908 	mul.w	r9, r7, r8
 8000fb6:	0c21      	lsrs	r1, r4, #16
 8000fb8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000fbc:	4599      	cmp	r9, r3
 8000fbe:	d909      	bls.n	8000fd4 <__udivmoddi4+0x60>
 8000fc0:	18eb      	adds	r3, r5, r3
 8000fc2:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000fc6:	f080 811c 	bcs.w	8001202 <__udivmoddi4+0x28e>
 8000fca:	4599      	cmp	r9, r3
 8000fcc:	f240 8119 	bls.w	8001202 <__udivmoddi4+0x28e>
 8000fd0:	3f02      	subs	r7, #2
 8000fd2:	442b      	add	r3, r5
 8000fd4:	eba3 0309 	sub.w	r3, r3, r9
 8000fd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fe0:	fb00 f108 	mul.w	r1, r0, r8
 8000fe4:	b2a4      	uxth	r4, r4
 8000fe6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fea:	42a1      	cmp	r1, r4
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0x8e>
 8000fee:	192c      	adds	r4, r5, r4
 8000ff0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ff4:	f080 8107 	bcs.w	8001206 <__udivmoddi4+0x292>
 8000ff8:	42a1      	cmp	r1, r4
 8000ffa:	f240 8104 	bls.w	8001206 <__udivmoddi4+0x292>
 8000ffe:	3802      	subs	r0, #2
 8001000:	442c      	add	r4, r5
 8001002:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001006:	2700      	movs	r7, #0
 8001008:	1a64      	subs	r4, r4, r1
 800100a:	b11e      	cbz	r6, 8001014 <__udivmoddi4+0xa0>
 800100c:	2300      	movs	r3, #0
 800100e:	40d4      	lsrs	r4, r2
 8001010:	e9c6 4300 	strd	r4, r3, [r6]
 8001014:	4639      	mov	r1, r7
 8001016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101a:	428b      	cmp	r3, r1
 800101c:	d909      	bls.n	8001032 <__udivmoddi4+0xbe>
 800101e:	2e00      	cmp	r6, #0
 8001020:	f000 80ec 	beq.w	80011fc <__udivmoddi4+0x288>
 8001024:	2700      	movs	r7, #0
 8001026:	e9c6 0100 	strd	r0, r1, [r6]
 800102a:	4638      	mov	r0, r7
 800102c:	4639      	mov	r1, r7
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	fab3 f783 	clz	r7, r3
 8001036:	2f00      	cmp	r7, #0
 8001038:	d148      	bne.n	80010cc <__udivmoddi4+0x158>
 800103a:	428b      	cmp	r3, r1
 800103c:	d302      	bcc.n	8001044 <__udivmoddi4+0xd0>
 800103e:	4282      	cmp	r2, r0
 8001040:	f200 80fb 	bhi.w	800123a <__udivmoddi4+0x2c6>
 8001044:	1a84      	subs	r4, r0, r2
 8001046:	eb61 0303 	sbc.w	r3, r1, r3
 800104a:	2001      	movs	r0, #1
 800104c:	469c      	mov	ip, r3
 800104e:	2e00      	cmp	r6, #0
 8001050:	d0e0      	beq.n	8001014 <__udivmoddi4+0xa0>
 8001052:	e9c6 4c00 	strd	r4, ip, [r6]
 8001056:	e7dd      	b.n	8001014 <__udivmoddi4+0xa0>
 8001058:	b902      	cbnz	r2, 800105c <__udivmoddi4+0xe8>
 800105a:	deff      	udf	#255	; 0xff
 800105c:	fab2 f282 	clz	r2, r2
 8001060:	2a00      	cmp	r2, #0
 8001062:	f040 808f 	bne.w	8001184 <__udivmoddi4+0x210>
 8001066:	2701      	movs	r7, #1
 8001068:	1b49      	subs	r1, r1, r5
 800106a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800106e:	fa1f f985 	uxth.w	r9, r5
 8001072:	fbb1 fef8 	udiv	lr, r1, r8
 8001076:	fb08 111e 	mls	r1, r8, lr, r1
 800107a:	fb09 f00e 	mul.w	r0, r9, lr
 800107e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001082:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001086:	4298      	cmp	r0, r3
 8001088:	d907      	bls.n	800109a <__udivmoddi4+0x126>
 800108a:	18eb      	adds	r3, r5, r3
 800108c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8001090:	d202      	bcs.n	8001098 <__udivmoddi4+0x124>
 8001092:	4298      	cmp	r0, r3
 8001094:	f200 80cd 	bhi.w	8001232 <__udivmoddi4+0x2be>
 8001098:	468e      	mov	lr, r1
 800109a:	1a1b      	subs	r3, r3, r0
 800109c:	fbb3 f0f8 	udiv	r0, r3, r8
 80010a0:	fb08 3310 	mls	r3, r8, r0, r3
 80010a4:	fb09 f900 	mul.w	r9, r9, r0
 80010a8:	b2a4      	uxth	r4, r4
 80010aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010ae:	45a1      	cmp	r9, r4
 80010b0:	d907      	bls.n	80010c2 <__udivmoddi4+0x14e>
 80010b2:	192c      	adds	r4, r5, r4
 80010b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80010b8:	d202      	bcs.n	80010c0 <__udivmoddi4+0x14c>
 80010ba:	45a1      	cmp	r9, r4
 80010bc:	f200 80b6 	bhi.w	800122c <__udivmoddi4+0x2b8>
 80010c0:	4618      	mov	r0, r3
 80010c2:	eba4 0409 	sub.w	r4, r4, r9
 80010c6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80010ca:	e79e      	b.n	800100a <__udivmoddi4+0x96>
 80010cc:	f1c7 0520 	rsb	r5, r7, #32
 80010d0:	40bb      	lsls	r3, r7
 80010d2:	fa22 fc05 	lsr.w	ip, r2, r5
 80010d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010da:	fa21 f405 	lsr.w	r4, r1, r5
 80010de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010e2:	fbb4 f9fe 	udiv	r9, r4, lr
 80010e6:	fa1f f88c 	uxth.w	r8, ip
 80010ea:	fb0e 4419 	mls	r4, lr, r9, r4
 80010ee:	fa20 f305 	lsr.w	r3, r0, r5
 80010f2:	40b9      	lsls	r1, r7
 80010f4:	fb09 fa08 	mul.w	sl, r9, r8
 80010f8:	4319      	orrs	r1, r3
 80010fa:	0c0b      	lsrs	r3, r1, #16
 80010fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001100:	45a2      	cmp	sl, r4
 8001102:	fa02 f207 	lsl.w	r2, r2, r7
 8001106:	fa00 f307 	lsl.w	r3, r0, r7
 800110a:	d90b      	bls.n	8001124 <__udivmoddi4+0x1b0>
 800110c:	eb1c 0404 	adds.w	r4, ip, r4
 8001110:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001114:	f080 8088 	bcs.w	8001228 <__udivmoddi4+0x2b4>
 8001118:	45a2      	cmp	sl, r4
 800111a:	f240 8085 	bls.w	8001228 <__udivmoddi4+0x2b4>
 800111e:	f1a9 0902 	sub.w	r9, r9, #2
 8001122:	4464      	add	r4, ip
 8001124:	eba4 040a 	sub.w	r4, r4, sl
 8001128:	fbb4 f0fe 	udiv	r0, r4, lr
 800112c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001130:	fb00 fa08 	mul.w	sl, r0, r8
 8001134:	b289      	uxth	r1, r1
 8001136:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800113a:	45a2      	cmp	sl, r4
 800113c:	d908      	bls.n	8001150 <__udivmoddi4+0x1dc>
 800113e:	eb1c 0404 	adds.w	r4, ip, r4
 8001142:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001146:	d26b      	bcs.n	8001220 <__udivmoddi4+0x2ac>
 8001148:	45a2      	cmp	sl, r4
 800114a:	d969      	bls.n	8001220 <__udivmoddi4+0x2ac>
 800114c:	3802      	subs	r0, #2
 800114e:	4464      	add	r4, ip
 8001150:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001154:	fba0 8902 	umull	r8, r9, r0, r2
 8001158:	eba4 040a 	sub.w	r4, r4, sl
 800115c:	454c      	cmp	r4, r9
 800115e:	4641      	mov	r1, r8
 8001160:	46ce      	mov	lr, r9
 8001162:	d354      	bcc.n	800120e <__udivmoddi4+0x29a>
 8001164:	d051      	beq.n	800120a <__udivmoddi4+0x296>
 8001166:	2e00      	cmp	r6, #0
 8001168:	d069      	beq.n	800123e <__udivmoddi4+0x2ca>
 800116a:	1a5a      	subs	r2, r3, r1
 800116c:	eb64 040e 	sbc.w	r4, r4, lr
 8001170:	fa04 f505 	lsl.w	r5, r4, r5
 8001174:	fa22 f307 	lsr.w	r3, r2, r7
 8001178:	40fc      	lsrs	r4, r7
 800117a:	431d      	orrs	r5, r3
 800117c:	e9c6 5400 	strd	r5, r4, [r6]
 8001180:	2700      	movs	r7, #0
 8001182:	e747      	b.n	8001014 <__udivmoddi4+0xa0>
 8001184:	4095      	lsls	r5, r2
 8001186:	f1c2 0320 	rsb	r3, r2, #32
 800118a:	fa21 f003 	lsr.w	r0, r1, r3
 800118e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001192:	fbb0 f7f8 	udiv	r7, r0, r8
 8001196:	fa1f f985 	uxth.w	r9, r5
 800119a:	fb08 0017 	mls	r0, r8, r7, r0
 800119e:	fa24 f303 	lsr.w	r3, r4, r3
 80011a2:	4091      	lsls	r1, r2
 80011a4:	fb07 fc09 	mul.w	ip, r7, r9
 80011a8:	430b      	orrs	r3, r1
 80011aa:	0c19      	lsrs	r1, r3, #16
 80011ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011b0:	458c      	cmp	ip, r1
 80011b2:	fa04 f402 	lsl.w	r4, r4, r2
 80011b6:	d907      	bls.n	80011c8 <__udivmoddi4+0x254>
 80011b8:	1869      	adds	r1, r5, r1
 80011ba:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80011be:	d231      	bcs.n	8001224 <__udivmoddi4+0x2b0>
 80011c0:	458c      	cmp	ip, r1
 80011c2:	d92f      	bls.n	8001224 <__udivmoddi4+0x2b0>
 80011c4:	3f02      	subs	r7, #2
 80011c6:	4429      	add	r1, r5
 80011c8:	eba1 010c 	sub.w	r1, r1, ip
 80011cc:	fbb1 f0f8 	udiv	r0, r1, r8
 80011d0:	fb08 1c10 	mls	ip, r8, r0, r1
 80011d4:	fb00 fe09 	mul.w	lr, r0, r9
 80011d8:	b299      	uxth	r1, r3
 80011da:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80011de:	458e      	cmp	lr, r1
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x27e>
 80011e2:	1869      	adds	r1, r5, r1
 80011e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80011e8:	d218      	bcs.n	800121c <__udivmoddi4+0x2a8>
 80011ea:	458e      	cmp	lr, r1
 80011ec:	d916      	bls.n	800121c <__udivmoddi4+0x2a8>
 80011ee:	3802      	subs	r0, #2
 80011f0:	4429      	add	r1, r5
 80011f2:	eba1 010e 	sub.w	r1, r1, lr
 80011f6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011fa:	e73a      	b.n	8001072 <__udivmoddi4+0xfe>
 80011fc:	4637      	mov	r7, r6
 80011fe:	4630      	mov	r0, r6
 8001200:	e708      	b.n	8001014 <__udivmoddi4+0xa0>
 8001202:	460f      	mov	r7, r1
 8001204:	e6e6      	b.n	8000fd4 <__udivmoddi4+0x60>
 8001206:	4618      	mov	r0, r3
 8001208:	e6fb      	b.n	8001002 <__udivmoddi4+0x8e>
 800120a:	4543      	cmp	r3, r8
 800120c:	d2ab      	bcs.n	8001166 <__udivmoddi4+0x1f2>
 800120e:	ebb8 0102 	subs.w	r1, r8, r2
 8001212:	eb69 020c 	sbc.w	r2, r9, ip
 8001216:	3801      	subs	r0, #1
 8001218:	4696      	mov	lr, r2
 800121a:	e7a4      	b.n	8001166 <__udivmoddi4+0x1f2>
 800121c:	4618      	mov	r0, r3
 800121e:	e7e8      	b.n	80011f2 <__udivmoddi4+0x27e>
 8001220:	4608      	mov	r0, r1
 8001222:	e795      	b.n	8001150 <__udivmoddi4+0x1dc>
 8001224:	4607      	mov	r7, r0
 8001226:	e7cf      	b.n	80011c8 <__udivmoddi4+0x254>
 8001228:	4681      	mov	r9, r0
 800122a:	e77b      	b.n	8001124 <__udivmoddi4+0x1b0>
 800122c:	3802      	subs	r0, #2
 800122e:	442c      	add	r4, r5
 8001230:	e747      	b.n	80010c2 <__udivmoddi4+0x14e>
 8001232:	f1ae 0e02 	sub.w	lr, lr, #2
 8001236:	442b      	add	r3, r5
 8001238:	e72f      	b.n	800109a <__udivmoddi4+0x126>
 800123a:	4638      	mov	r0, r7
 800123c:	e707      	b.n	800104e <__udivmoddi4+0xda>
 800123e:	4637      	mov	r7, r6
 8001240:	e6e8      	b.n	8001014 <__udivmoddi4+0xa0>
 8001242:	bf00      	nop

08001244 <__aeabi_idiv0>:
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af02      	add	r7, sp, #8
 800124e:	4604      	mov	r4, r0
 8001250:	4608      	mov	r0, r1
 8001252:	4611      	mov	r1, r2
 8001254:	461a      	mov	r2, r3
 8001256:	4623      	mov	r3, r4
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	4603      	mov	r3, r0
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	460b      	mov	r3, r1
 8001260:	717b      	strb	r3, [r7, #5]
 8001262:	4613      	mov	r3, r2
 8001264:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	2b1f      	cmp	r3, #31
 800126e:	d802      	bhi.n	8001276 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	e002      	b.n	800127c <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	3b20      	subs	r3, #32
 800127a:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800127c:	2300      	movs	r3, #0
 800127e:	753b      	strb	r3, [r7, #20]
 8001280:	e012      	b.n	80012a8 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001282:	7dfa      	ldrb	r2, [r7, #23]
 8001284:	7d38      	ldrb	r0, [r7, #20]
 8001286:	7d39      	ldrb	r1, [r7, #20]
 8001288:	4c3b      	ldr	r4, [pc, #236]	; (8001378 <ILI9341_Draw_Char+0x130>)
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4423      	add	r3, r4
 8001294:	4403      	add	r3, r0
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	f107 0318 	add.w	r3, r7, #24
 800129c:	440b      	add	r3, r1
 800129e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80012a2:	7d3b      	ldrb	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	753b      	strb	r3, [r7, #20]
 80012a8:	7d3b      	ldrb	r3, [r7, #20]
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d9e9      	bls.n	8001282 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	b298      	uxth	r0, r3
 80012b2:	797b      	ldrb	r3, [r7, #5]
 80012b4:	b299      	uxth	r1, r3
 80012b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012b8:	461a      	mov	r2, r3
 80012ba:	0052      	lsls	r2, r2, #1
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	b29c      	uxth	r4, r3
 80012c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	4623      	mov	r3, r4
 80012ce:	f000 fc3f 	bl	8001b50 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	757b      	strb	r3, [r7, #21]
 80012d6:	e048      	b.n	800136a <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	75bb      	strb	r3, [r7, #22]
 80012dc:	e03f      	b.n	800135e <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 80012de:	7d7b      	ldrb	r3, [r7, #21]
 80012e0:	f107 0218 	add.w	r2, r7, #24
 80012e4:	4413      	add	r3, r2
 80012e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80012ea:	461a      	mov	r2, r3
 80012ec:	7dbb      	ldrb	r3, [r7, #22]
 80012ee:	fa42 f303 	asr.w	r3, r2, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d02e      	beq.n	8001358 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 80012fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d110      	bne.n	8001322 <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	b29a      	uxth	r2, r3
 8001304:	7d7b      	ldrb	r3, [r7, #21]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4413      	add	r3, r2
 800130a:	b298      	uxth	r0, r3
 800130c:	797b      	ldrb	r3, [r7, #5]
 800130e:	b29a      	uxth	r2, r3
 8001310:	7dbb      	ldrb	r3, [r7, #22]
 8001312:	b29b      	uxth	r3, r3
 8001314:	4413      	add	r3, r2
 8001316:	b29b      	uxth	r3, r3
 8001318:	887a      	ldrh	r2, [r7, #2]
 800131a:	4619      	mov	r1, r3
 800131c:	f000 fb4e 	bl	80019bc <ILI9341_Draw_Pixel>
 8001320:	e01a      	b.n	8001358 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	b29a      	uxth	r2, r3
 8001326:	7d7b      	ldrb	r3, [r7, #21]
 8001328:	b29b      	uxth	r3, r3
 800132a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800132c:	fb01 f303 	mul.w	r3, r1, r3
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b298      	uxth	r0, r3
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	b29a      	uxth	r2, r3
 800133a:	7dbb      	ldrb	r3, [r7, #22]
 800133c:	b29b      	uxth	r3, r3
 800133e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001340:	fb01 f303 	mul.w	r3, r1, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	4413      	add	r3, r2
 8001348:	b299      	uxth	r1, r3
 800134a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800134c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	4623      	mov	r3, r4
 8001354:	f000 fbfc 	bl	8001b50 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001358:	7dbb      	ldrb	r3, [r7, #22]
 800135a:	3301      	adds	r3, #1
 800135c:	75bb      	strb	r3, [r7, #22]
 800135e:	7dbb      	ldrb	r3, [r7, #22]
 8001360:	2b07      	cmp	r3, #7
 8001362:	d9bc      	bls.n	80012de <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001364:	7d7b      	ldrb	r3, [r7, #21]
 8001366:	3301      	adds	r3, #1
 8001368:	757b      	strb	r3, [r7, #21]
 800136a:	7d7b      	ldrb	r3, [r7, #21]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d9b3      	bls.n	80012d8 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001370:	bf00      	nop
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	08009ec4 	.word	0x08009ec4

0800137c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b085      	sub	sp, #20
 8001380:	af02      	add	r7, sp, #8
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4603      	mov	r3, r0
 800138c:	70fb      	strb	r3, [r7, #3]
 800138e:	460b      	mov	r3, r1
 8001390:	70bb      	strb	r3, [r7, #2]
 8001392:	4613      	mov	r3, r2
 8001394:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001396:	e017      	b.n	80013c8 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	7818      	ldrb	r0, [r3, #0]
 80013a0:	883c      	ldrh	r4, [r7, #0]
 80013a2:	78ba      	ldrb	r2, [r7, #2]
 80013a4:	78f9      	ldrb	r1, [r7, #3]
 80013a6:	8bbb      	ldrh	r3, [r7, #28]
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	8b3b      	ldrh	r3, [r7, #24]
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	4623      	mov	r3, r4
 80013b0:	f7ff ff4a 	bl	8001248 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80013b4:	8b3b      	ldrh	r3, [r7, #24]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	0052      	lsls	r2, r2, #1
 80013bc:	4413      	add	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	4413      	add	r3, r2
 80013c6:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e3      	bne.n	8001398 <ILI9341_Draw_Text+0x1c>
    }
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}

080013d8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <ILI9341_SPI_Init+0x14>)
 80013e2:	f001 fce2 	bl	8002daa <HAL_GPIO_WritePin>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010800 	.word	0x40010800

080013f0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80013fa:	1df9      	adds	r1, r7, #7
 80013fc:	2301      	movs	r3, #1
 80013fe:	2201      	movs	r2, #1
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <ILI9341_SPI_Send+0x20>)
 8001402:	f002 fc22 	bl	8003c4a <HAL_SPI_Transmit>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000a14 	.word	0x20000a14

08001414 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2110      	movs	r1, #16
 8001422:	480a      	ldr	r0, [pc, #40]	; (800144c <ILI9341_Write_Command+0x38>)
 8001424:	f001 fcc1 	bl	8002daa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001428:	2200      	movs	r2, #0
 800142a:	2102      	movs	r1, #2
 800142c:	4808      	ldr	r0, [pc, #32]	; (8001450 <ILI9341_Write_Command+0x3c>)
 800142e:	f001 fcbc 	bl	8002daa <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ffdb 	bl	80013f0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800143a:	2201      	movs	r2, #1
 800143c:	2110      	movs	r1, #16
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <ILI9341_Write_Command+0x38>)
 8001440:	f001 fcb3 	bl	8002daa <HAL_GPIO_WritePin>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010800 	.word	0x40010800
 8001450:	40010c00 	.word	0x40010c00

08001454 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800145e:	2201      	movs	r2, #1
 8001460:	2102      	movs	r1, #2
 8001462:	480a      	ldr	r0, [pc, #40]	; (800148c <ILI9341_Write_Data+0x38>)
 8001464:	f001 fca1 	bl	8002daa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2110      	movs	r1, #16
 800146c:	4808      	ldr	r0, [pc, #32]	; (8001490 <ILI9341_Write_Data+0x3c>)
 800146e:	f001 fc9c 	bl	8002daa <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ffbb 	bl	80013f0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	2110      	movs	r1, #16
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <ILI9341_Write_Data+0x3c>)
 8001480:	f001 fc93 	bl	8002daa <HAL_GPIO_WritePin>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40010c00 	.word	0x40010c00
 8001490:	40010800 	.word	0x40010800

08001494 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4623      	mov	r3, r4
 80014a4:	80fb      	strh	r3, [r7, #6]
 80014a6:	4603      	mov	r3, r0
 80014a8:	80bb      	strh	r3, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]
 80014ae:	4613      	mov	r3, r2
 80014b0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80014b2:	202a      	movs	r0, #42	; 0x2a
 80014b4:	f7ff ffae 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ffc7 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ffc2 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ffbb 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ffb6 	bl	8001454 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80014e8:	202b      	movs	r0, #43	; 0x2b
 80014ea:	f7ff ff93 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ffac 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ffa7 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001506:	883b      	ldrh	r3, [r7, #0]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	b29b      	uxth	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ffa0 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001514:	883b      	ldrh	r3, [r7, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff9b 	bl	8001454 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800151e:	202c      	movs	r0, #44	; 0x2c
 8001520:	f7ff ff78 	bl	8001414 <ILI9341_Write_Command>
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2101      	movs	r1, #1
 8001534:	480a      	ldr	r0, [pc, #40]	; (8001560 <ILI9341_Reset+0x34>)
 8001536:	f001 fc38 	bl	8002daa <HAL_GPIO_WritePin>
HAL_Delay(200);
 800153a:	20c8      	movs	r0, #200	; 0xc8
 800153c:	f001 f9be 	bl	80028bc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2110      	movs	r1, #16
 8001544:	4807      	ldr	r0, [pc, #28]	; (8001564 <ILI9341_Reset+0x38>)
 8001546:	f001 fc30 	bl	8002daa <HAL_GPIO_WritePin>
HAL_Delay(200);
 800154a:	20c8      	movs	r0, #200	; 0xc8
 800154c:	f001 f9b6 	bl	80028bc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001550:	2201      	movs	r2, #1
 8001552:	2101      	movs	r1, #1
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <ILI9341_Reset+0x34>)
 8001556:	f001 fc28 	bl	8002daa <HAL_GPIO_WritePin>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40010c00 	.word	0x40010c00
 8001564:	40010800 	.word	0x40010800

08001568 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001576:	2036      	movs	r0, #54	; 0x36
 8001578:	f7ff ff4c 	bl	8001414 <ILI9341_Write_Command>
HAL_Delay(1);
 800157c:	2001      	movs	r0, #1
 800157e:	f001 f99d 	bl	80028bc <HAL_Delay>
	
switch(screen_rotation) 
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d837      	bhi.n	80015f8 <ILI9341_Set_Rotation+0x90>
 8001588:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <ILI9341_Set_Rotation+0x28>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	080015a1 	.word	0x080015a1
 8001594:	080015b7 	.word	0x080015b7
 8001598:	080015cd 	.word	0x080015cd
 800159c:	080015e3 	.word	0x080015e3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80015a0:	2048      	movs	r0, #72	; 0x48
 80015a2:	f7ff ff57 	bl	8001454 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <ILI9341_Set_Rotation+0x9c>)
 80015a8:	22f0      	movs	r2, #240	; 0xf0
 80015aa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <ILI9341_Set_Rotation+0xa0>)
 80015ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015b2:	801a      	strh	r2, [r3, #0]
			break;
 80015b4:	e021      	b.n	80015fa <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80015b6:	2028      	movs	r0, #40	; 0x28
 80015b8:	f7ff ff4c 	bl	8001454 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <ILI9341_Set_Rotation+0x9c>)
 80015be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015c2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <ILI9341_Set_Rotation+0xa0>)
 80015c6:	22f0      	movs	r2, #240	; 0xf0
 80015c8:	801a      	strh	r2, [r3, #0]
			break;
 80015ca:	e016      	b.n	80015fa <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80015cc:	2088      	movs	r0, #136	; 0x88
 80015ce:	f7ff ff41 	bl	8001454 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <ILI9341_Set_Rotation+0x9c>)
 80015d4:	22f0      	movs	r2, #240	; 0xf0
 80015d6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <ILI9341_Set_Rotation+0xa0>)
 80015da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015de:	801a      	strh	r2, [r3, #0]
			break;
 80015e0:	e00b      	b.n	80015fa <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80015e2:	20e8      	movs	r0, #232	; 0xe8
 80015e4:	f7ff ff36 	bl	8001454 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <ILI9341_Set_Rotation+0x9c>)
 80015ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015ee:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <ILI9341_Set_Rotation+0xa0>)
 80015f2:	22f0      	movs	r2, #240	; 0xf0
 80015f4:	801a      	strh	r2, [r3, #0]
			break;
 80015f6:	e000      	b.n	80015fa <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80015f8:	bf00      	nop
	}
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000002 	.word	0x20000002
 8001608:	20000000 	.word	0x20000000

0800160c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2101      	movs	r1, #1
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <ILI9341_Enable+0x14>)
 8001616:	f001 fbc8 	bl	8002daa <HAL_GPIO_WritePin>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40010c00 	.word	0x40010c00

08001624 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001628:	f7ff fff0 	bl	800160c <ILI9341_Enable>
ILI9341_SPI_Init();
 800162c:	f7ff fed4 	bl	80013d8 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001630:	f7ff ff7c 	bl	800152c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff feed 	bl	8001414 <ILI9341_Write_Command>
HAL_Delay(1000);
 800163a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800163e:	f001 f93d 	bl	80028bc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001642:	20cb      	movs	r0, #203	; 0xcb
 8001644:	f7ff fee6 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001648:	2039      	movs	r0, #57	; 0x39
 800164a:	f7ff ff03 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800164e:	202c      	movs	r0, #44	; 0x2c
 8001650:	f7ff ff00 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fefd 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800165a:	2034      	movs	r0, #52	; 0x34
 800165c:	f7ff fefa 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001660:	2002      	movs	r0, #2
 8001662:	f7ff fef7 	bl	8001454 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001666:	20cf      	movs	r0, #207	; 0xcf
 8001668:	f7ff fed4 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff fef1 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001672:	20c1      	movs	r0, #193	; 0xc1
 8001674:	f7ff feee 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001678:	2030      	movs	r0, #48	; 0x30
 800167a:	f7ff feeb 	bl	8001454 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800167e:	20e8      	movs	r0, #232	; 0xe8
 8001680:	f7ff fec8 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001684:	2085      	movs	r0, #133	; 0x85
 8001686:	f7ff fee5 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff fee2 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001690:	2078      	movs	r0, #120	; 0x78
 8001692:	f7ff fedf 	bl	8001454 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001696:	20ea      	movs	r0, #234	; 0xea
 8001698:	f7ff febc 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff fed9 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff fed6 	bl	8001454 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80016a8:	20ed      	movs	r0, #237	; 0xed
 80016aa:	f7ff feb3 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80016ae:	2064      	movs	r0, #100	; 0x64
 80016b0:	f7ff fed0 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f7ff fecd 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80016ba:	2012      	movs	r0, #18
 80016bc:	f7ff feca 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80016c0:	2081      	movs	r0, #129	; 0x81
 80016c2:	f7ff fec7 	bl	8001454 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80016c6:	20f7      	movs	r0, #247	; 0xf7
 80016c8:	f7ff fea4 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80016cc:	2020      	movs	r0, #32
 80016ce:	f7ff fec1 	bl	8001454 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80016d2:	20c0      	movs	r0, #192	; 0xc0
 80016d4:	f7ff fe9e 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80016d8:	2023      	movs	r0, #35	; 0x23
 80016da:	f7ff febb 	bl	8001454 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80016de:	20c1      	movs	r0, #193	; 0xc1
 80016e0:	f7ff fe98 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80016e4:	2010      	movs	r0, #16
 80016e6:	f7ff feb5 	bl	8001454 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80016ea:	20c5      	movs	r0, #197	; 0xc5
 80016ec:	f7ff fe92 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80016f0:	203e      	movs	r0, #62	; 0x3e
 80016f2:	f7ff feaf 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80016f6:	2028      	movs	r0, #40	; 0x28
 80016f8:	f7ff feac 	bl	8001454 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80016fc:	20c7      	movs	r0, #199	; 0xc7
 80016fe:	f7ff fe89 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001702:	2086      	movs	r0, #134	; 0x86
 8001704:	f7ff fea6 	bl	8001454 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001708:	2036      	movs	r0, #54	; 0x36
 800170a:	f7ff fe83 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800170e:	2048      	movs	r0, #72	; 0x48
 8001710:	f7ff fea0 	bl	8001454 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001714:	203a      	movs	r0, #58	; 0x3a
 8001716:	f7ff fe7d 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800171a:	2055      	movs	r0, #85	; 0x55
 800171c:	f7ff fe9a 	bl	8001454 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001720:	20b1      	movs	r0, #177	; 0xb1
 8001722:	f7ff fe77 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff fe94 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800172c:	2018      	movs	r0, #24
 800172e:	f7ff fe91 	bl	8001454 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001732:	20b6      	movs	r0, #182	; 0xb6
 8001734:	f7ff fe6e 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001738:	2008      	movs	r0, #8
 800173a:	f7ff fe8b 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800173e:	2082      	movs	r0, #130	; 0x82
 8001740:	f7ff fe88 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001744:	2027      	movs	r0, #39	; 0x27
 8001746:	f7ff fe85 	bl	8001454 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800174a:	20f2      	movs	r0, #242	; 0xf2
 800174c:	f7ff fe62 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff fe7f 	bl	8001454 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001756:	2026      	movs	r0, #38	; 0x26
 8001758:	f7ff fe5c 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff fe79 	bl	8001454 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001762:	20e0      	movs	r0, #224	; 0xe0
 8001764:	f7ff fe56 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001768:	200f      	movs	r0, #15
 800176a:	f7ff fe73 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800176e:	2031      	movs	r0, #49	; 0x31
 8001770:	f7ff fe70 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001774:	202b      	movs	r0, #43	; 0x2b
 8001776:	f7ff fe6d 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800177a:	200c      	movs	r0, #12
 800177c:	f7ff fe6a 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001780:	200e      	movs	r0, #14
 8001782:	f7ff fe67 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001786:	2008      	movs	r0, #8
 8001788:	f7ff fe64 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800178c:	204e      	movs	r0, #78	; 0x4e
 800178e:	f7ff fe61 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001792:	20f1      	movs	r0, #241	; 0xf1
 8001794:	f7ff fe5e 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001798:	2037      	movs	r0, #55	; 0x37
 800179a:	f7ff fe5b 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800179e:	2007      	movs	r0, #7
 80017a0:	f7ff fe58 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80017a4:	2010      	movs	r0, #16
 80017a6:	f7ff fe55 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80017aa:	2003      	movs	r0, #3
 80017ac:	f7ff fe52 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80017b0:	200e      	movs	r0, #14
 80017b2:	f7ff fe4f 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80017b6:	2009      	movs	r0, #9
 80017b8:	f7ff fe4c 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fe49 	bl	8001454 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80017c2:	20e1      	movs	r0, #225	; 0xe1
 80017c4:	f7ff fe26 	bl	8001414 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff fe43 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80017ce:	200e      	movs	r0, #14
 80017d0:	f7ff fe40 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80017d4:	2014      	movs	r0, #20
 80017d6:	f7ff fe3d 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80017da:	2003      	movs	r0, #3
 80017dc:	f7ff fe3a 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80017e0:	2011      	movs	r0, #17
 80017e2:	f7ff fe37 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80017e6:	2007      	movs	r0, #7
 80017e8:	f7ff fe34 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80017ec:	2031      	movs	r0, #49	; 0x31
 80017ee:	f7ff fe31 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80017f2:	20c1      	movs	r0, #193	; 0xc1
 80017f4:	f7ff fe2e 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80017f8:	2048      	movs	r0, #72	; 0x48
 80017fa:	f7ff fe2b 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80017fe:	2008      	movs	r0, #8
 8001800:	f7ff fe28 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001804:	200f      	movs	r0, #15
 8001806:	f7ff fe25 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800180a:	200c      	movs	r0, #12
 800180c:	f7ff fe22 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001810:	2031      	movs	r0, #49	; 0x31
 8001812:	f7ff fe1f 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001816:	2036      	movs	r0, #54	; 0x36
 8001818:	f7ff fe1c 	bl	8001454 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800181c:	200f      	movs	r0, #15
 800181e:	f7ff fe19 	bl	8001454 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001822:	2011      	movs	r0, #17
 8001824:	f7ff fdf6 	bl	8001414 <ILI9341_Write_Command>
HAL_Delay(120);
 8001828:	2078      	movs	r0, #120	; 0x78
 800182a:	f001 f847 	bl	80028bc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800182e:	2029      	movs	r0, #41	; 0x29
 8001830:	f7ff fdf0 	bl	8001414 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fe97 	bl	8001568 <ILI9341_Set_Rotation>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	80fb      	strh	r3, [r7, #6]
 800184c:	466b      	mov	r3, sp
 800184e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800185c:	d202      	bcs.n	8001864 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	e002      	b.n	800186a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001864:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800186a:	2201      	movs	r2, #1
 800186c:	2102      	movs	r1, #2
 800186e:	483d      	ldr	r0, [pc, #244]	; (8001964 <ILI9341_Draw_Colour_Burst+0x124>)
 8001870:	f001 fa9b 	bl	8002daa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2110      	movs	r1, #16
 8001878:	483b      	ldr	r0, [pc, #236]	; (8001968 <ILI9341_Draw_Colour_Burst+0x128>)
 800187a:	f001 fa96 	bl	8002daa <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800188a:	4603      	mov	r3, r0
 800188c:	3b01      	subs	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	4601      	mov	r1, r0
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	f04f 0400 	mov.w	r4, #0
 800189e:	00d4      	lsls	r4, r2, #3
 80018a0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80018a4:	00cb      	lsls	r3, r1, #3
 80018a6:	4601      	mov	r1, r0
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	f04f 0400 	mov.w	r4, #0
 80018b4:	00d4      	lsls	r4, r2, #3
 80018b6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80018ba:	00cb      	lsls	r3, r1, #3
 80018bc:	1dc3      	adds	r3, r0, #7
 80018be:	08db      	lsrs	r3, r3, #3
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	ebad 0d03 	sub.w	sp, sp, r3
 80018c6:	466b      	mov	r3, sp
 80018c8:	3300      	adds	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d0:	e00e      	b.n	80018f0 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	4413      	add	r3, r2
 80018d8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018dc:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80018de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e0:	3301      	adds	r3, #1
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	b2d1      	uxtb	r1, r2
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ec:	3302      	adds	r3, #2
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d3ec      	bcc.n	80018d2 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001912:	fb01 f202 	mul.w	r2, r1, r2
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d010      	beq.n	8001942 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001924:	e009      	b.n	800193a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001926:	69b9      	ldr	r1, [r7, #24]
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	b29a      	uxth	r2, r3
 800192c:	230a      	movs	r3, #10
 800192e:	480f      	ldr	r0, [pc, #60]	; (800196c <ILI9341_Draw_Colour_Burst+0x12c>)
 8001930:	f002 f98b 	bl	8003c4a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	3301      	adds	r3, #1
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3f1      	bcc.n	8001926 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	b29a      	uxth	r2, r3
 8001948:	230a      	movs	r3, #10
 800194a:	4808      	ldr	r0, [pc, #32]	; (800196c <ILI9341_Draw_Colour_Burst+0x12c>)
 800194c:	f002 f97d 	bl	8003c4a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2110      	movs	r1, #16
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <ILI9341_Draw_Colour_Burst+0x128>)
 8001956:	f001 fa28 	bl	8002daa <HAL_GPIO_WritePin>
 800195a:	46ad      	mov	sp, r5
}
 800195c:	bf00      	nop
 800195e:	3730      	adds	r7, #48	; 0x30
 8001960:	46bd      	mov	sp, r7
 8001962:	bdb0      	pop	{r4, r5, r7, pc}
 8001964:	40010c00 	.word	0x40010c00
 8001968:	40010800 	.word	0x40010800
 800196c:	20000a14 	.word	0x20000a14

08001970 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <ILI9341_Fill_Screen+0x44>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <ILI9341_Fill_Screen+0x48>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	2100      	movs	r1, #0
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff fd83 	bl	8001494 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <ILI9341_Fill_Screen+0x44>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <ILI9341_Fill_Screen+0x48>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	fb03 f302 	mul.w	r3, r3, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff4a 	bl	8001840 <ILI9341_Draw_Colour_Burst>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000002 	.word	0x20000002
 80019b8:	20000000 	.word	0x20000000

080019bc <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	80fb      	strh	r3, [r7, #6]
 80019c6:	460b      	mov	r3, r1
 80019c8:	80bb      	strh	r3, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80019ce:	4b5b      	ldr	r3, [pc, #364]	; (8001b3c <ILI9341_Draw_Pixel+0x180>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	88fa      	ldrh	r2, [r7, #6]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	f080 80ac 	bcs.w	8001b34 <ILI9341_Draw_Pixel+0x178>
 80019dc:	4b58      	ldr	r3, [pc, #352]	; (8001b40 <ILI9341_Draw_Pixel+0x184>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	88ba      	ldrh	r2, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f080 80a5 	bcs.w	8001b34 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80019ea:	2200      	movs	r2, #0
 80019ec:	2102      	movs	r1, #2
 80019ee:	4855      	ldr	r0, [pc, #340]	; (8001b44 <ILI9341_Draw_Pixel+0x188>)
 80019f0:	f001 f9db 	bl	8002daa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2110      	movs	r1, #16
 80019f8:	4853      	ldr	r0, [pc, #332]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 80019fa:	f001 f9d6 	bl	8002daa <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80019fe:	202a      	movs	r0, #42	; 0x2a
 8001a00:	f7ff fcf6 	bl	80013f0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001a04:	2201      	movs	r2, #1
 8001a06:	2102      	movs	r1, #2
 8001a08:	484e      	ldr	r0, [pc, #312]	; (8001b44 <ILI9341_Draw_Pixel+0x188>)
 8001a0a:	f001 f9ce 	bl	8002daa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2110      	movs	r1, #16
 8001a12:	484d      	ldr	r0, [pc, #308]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001a14:	f001 f9c9 	bl	8002daa <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	484a      	ldr	r0, [pc, #296]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001a1e:	f001 f9c4 	bl	8002daa <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	753b      	strb	r3, [r7, #20]
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	757b      	strb	r3, [r7, #21]
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	3301      	adds	r3, #1
 8001a36:	121b      	asrs	r3, r3, #8
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	75bb      	strb	r3, [r7, #22]
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001a46:	f107 0114 	add.w	r1, r7, #20
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	483f      	ldr	r0, [pc, #252]	; (8001b4c <ILI9341_Draw_Pixel+0x190>)
 8001a50:	f002 f8fb 	bl	8003c4a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	2110      	movs	r1, #16
 8001a58:	483b      	ldr	r0, [pc, #236]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001a5a:	f001 f9a6 	bl	8002daa <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2102      	movs	r1, #2
 8001a62:	4838      	ldr	r0, [pc, #224]	; (8001b44 <ILI9341_Draw_Pixel+0x188>)
 8001a64:	f001 f9a1 	bl	8002daa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	4836      	ldr	r0, [pc, #216]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001a6e:	f001 f99c 	bl	8002daa <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001a72:	202b      	movs	r0, #43	; 0x2b
 8001a74:	f7ff fcbc 	bl	80013f0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4831      	ldr	r0, [pc, #196]	; (8001b44 <ILI9341_Draw_Pixel+0x188>)
 8001a7e:	f001 f994 	bl	8002daa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001a82:	2201      	movs	r2, #1
 8001a84:	2110      	movs	r1, #16
 8001a86:	4830      	ldr	r0, [pc, #192]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001a88:	f001 f98f 	bl	8002daa <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2110      	movs	r1, #16
 8001a90:	482d      	ldr	r0, [pc, #180]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001a92:	f001 f98a 	bl	8002daa <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001a96:	88bb      	ldrh	r3, [r7, #4]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	743b      	strb	r3, [r7, #16]
 8001aa0:	88bb      	ldrh	r3, [r7, #4]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	747b      	strb	r3, [r7, #17]
 8001aa6:	88bb      	ldrh	r3, [r7, #4]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	121b      	asrs	r3, r3, #8
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	74bb      	strb	r3, [r7, #18]
 8001ab0:	88bb      	ldrh	r3, [r7, #4]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001aba:	f107 0110 	add.w	r1, r7, #16
 8001abe:	2301      	movs	r3, #1
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	4822      	ldr	r0, [pc, #136]	; (8001b4c <ILI9341_Draw_Pixel+0x190>)
 8001ac4:	f002 f8c1 	bl	8003c4a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2110      	movs	r1, #16
 8001acc:	481e      	ldr	r0, [pc, #120]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001ace:	f001 f96c 	bl	8002daa <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	481b      	ldr	r0, [pc, #108]	; (8001b44 <ILI9341_Draw_Pixel+0x188>)
 8001ad8:	f001 f967 	bl	8002daa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001adc:	2200      	movs	r2, #0
 8001ade:	2110      	movs	r1, #16
 8001ae0:	4819      	ldr	r0, [pc, #100]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001ae2:	f001 f962 	bl	8002daa <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001ae6:	202c      	movs	r0, #44	; 0x2c
 8001ae8:	f7ff fc82 	bl	80013f0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001aec:	2201      	movs	r2, #1
 8001aee:	2102      	movs	r1, #2
 8001af0:	4814      	ldr	r0, [pc, #80]	; (8001b44 <ILI9341_Draw_Pixel+0x188>)
 8001af2:	f001 f95a 	bl	8002daa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001af6:	2201      	movs	r2, #1
 8001af8:	2110      	movs	r1, #16
 8001afa:	4813      	ldr	r0, [pc, #76]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001afc:	f001 f955 	bl	8002daa <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2110      	movs	r1, #16
 8001b04:	4810      	ldr	r0, [pc, #64]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001b06:	f001 f950 	bl	8002daa <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	733b      	strb	r3, [r7, #12]
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001b1a:	f107 010c 	add.w	r1, r7, #12
 8001b1e:	2301      	movs	r3, #1
 8001b20:	2202      	movs	r2, #2
 8001b22:	480a      	ldr	r0, [pc, #40]	; (8001b4c <ILI9341_Draw_Pixel+0x190>)
 8001b24:	f002 f891 	bl	8003c4a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	4806      	ldr	r0, [pc, #24]	; (8001b48 <ILI9341_Draw_Pixel+0x18c>)
 8001b2e:	f001 f93c 	bl	8002daa <HAL_GPIO_WritePin>
 8001b32:	e000      	b.n	8001b36 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001b34:	bf00      	nop
	
}
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000002 	.word	0x20000002
 8001b40:	20000000 	.word	0x20000000
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40010800 	.word	0x40010800
 8001b4c:	20000a14 	.word	0x20000a14

08001b50 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4604      	mov	r4, r0
 8001b58:	4608      	mov	r0, r1
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4623      	mov	r3, r4
 8001b60:	80fb      	strh	r3, [r7, #6]
 8001b62:	4603      	mov	r3, r0
 8001b64:	80bb      	strh	r3, [r7, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	807b      	strh	r3, [r7, #2]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <ILI9341_Draw_Rectangle+0xb4>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d23f      	bcs.n	8001bfa <ILI9341_Draw_Rectangle+0xaa>
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <ILI9341_Draw_Rectangle+0xb8>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	88ba      	ldrh	r2, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d239      	bcs.n	8001bfa <ILI9341_Draw_Rectangle+0xaa>
if((X+Width-1)>=LCD_WIDTH)
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <ILI9341_Draw_Rectangle+0xb4>)
 8001b90:	8812      	ldrh	r2, [r2, #0]
 8001b92:	b292      	uxth	r2, r2
 8001b94:	4293      	cmp	r3, r2
 8001b96:	db05      	blt.n	8001ba4 <ILI9341_Draw_Rectangle+0x54>
	{
		Width=LCD_WIDTH-X;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <ILI9341_Draw_Rectangle+0xb4>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001ba4:	88ba      	ldrh	r2, [r7, #4]
 8001ba6:	883b      	ldrh	r3, [r7, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b01      	subs	r3, #1
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <ILI9341_Draw_Rectangle+0xb8>)
 8001bae:	8812      	ldrh	r2, [r2, #0]
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	db05      	blt.n	8001bc2 <ILI9341_Draw_Rectangle+0x72>
	{
		Height=LCD_HEIGHT-Y;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <ILI9341_Draw_Rectangle+0xb8>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29c      	uxth	r4, r3
 8001bce:	88ba      	ldrh	r2, [r7, #4]
 8001bd0:	883b      	ldrh	r3, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	88b9      	ldrh	r1, [r7, #4]
 8001bdc:	88f8      	ldrh	r0, [r7, #6]
 8001bde:	4622      	mov	r2, r4
 8001be0:	f7ff fc58 	bl	8001494 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001be4:	883b      	ldrh	r3, [r7, #0]
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	8b3b      	ldrh	r3, [r7, #24]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fe24 	bl	8001840 <ILI9341_Draw_Colour_Burst>
 8001bf8:	e000      	b.n	8001bfc <ILI9341_Draw_Rectangle+0xac>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001bfa:	bf00      	nop
}
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000002 	.word	0x20000002
 8001c08:	20000000 	.word	0x20000000

08001c0c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <DWT_Delay_Init+0x58>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <DWT_Delay_Init+0x58>)
 8001c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <DWT_Delay_Init+0x58>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <DWT_Delay_Init+0x58>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <DWT_Delay_Init+0x5c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <DWT_Delay_Init+0x5c>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <DWT_Delay_Init+0x5c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <DWT_Delay_Init+0x5c>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <DWT_Delay_Init+0x5c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001c46:	bf00      	nop
     __ASM volatile ("NOP");
 8001c48:	bf00      	nop
  __ASM volatile ("NOP");
 8001c4a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <DWT_Delay_Init+0x5c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001c58:	2301      	movs	r3, #1
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000edf0 	.word	0xe000edf0
 8001c68:	e0001000 	.word	0xe0001000

08001c6c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <DWT_Delay_us+0x3c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001c7a:	f001 ff35 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <DWT_Delay_us+0x40>)
 8001c82:	fba3 2302 	umull	r2, r3, r3, r2
 8001c86:	0c9b      	lsrs	r3, r3, #18
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001c90:	bf00      	nop
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <DWT_Delay_us+0x3c>)
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad2      	subs	r2, r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3f8      	bcc.n	8001c92 <DWT_Delay_us+0x26>
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	e0001000 	.word	0xe0001000
 8001cac:	431bde83 	.word	0x431bde83

08001cb0 <gpio_set_input>:
/* USER CODE BEGIN 0 */
//DS18B20
GPIO_InitTypeDef GPIO_InitStruct;

void gpio_set_input (void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <gpio_set_input+0x24>)
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <gpio_set_input+0x24>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <gpio_set_input+0x24>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	4903      	ldr	r1, [pc, #12]	; (8001cd4 <gpio_set_input+0x24>)
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <gpio_set_input+0x28>)
 8001cca:	f000 fefd 	bl	8002ac8 <HAL_GPIO_Init>
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000b0c 	.word	0x20000b0c
 8001cd8:	40010800 	.word	0x40010800

08001cdc <gpio_set_output>:


void gpio_set_output (void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <gpio_set_output+0x28>)
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <gpio_set_output+0x28>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <gpio_set_output+0x28>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <gpio_set_output+0x28>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	4902      	ldr	r1, [pc, #8]	; (8001d04 <gpio_set_output+0x28>)
 8001cfa:	4803      	ldr	r0, [pc, #12]	; (8001d08 <gpio_set_output+0x2c>)
 8001cfc:	f000 fee4 	bl	8002ac8 <HAL_GPIO_Init>
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000b0c 	.word	0x20000b0c
 8001d08:	40010800 	.word	0x40010800

08001d0c <ds18b20_init>:
uint16_t temp;
float temperature;


uint8_t ds18b20_init (void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	gpio_set_output ();   // set the pin as output
 8001d10:	f7ff ffe4 	bl	8001cdc <gpio_set_output>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin low
 8001d14:	2200      	movs	r2, #0
 8001d16:	2102      	movs	r1, #2
 8001d18:	480f      	ldr	r0, [pc, #60]	; (8001d58 <ds18b20_init+0x4c>)
 8001d1a:	f001 f846 	bl	8002daa <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 8001d1e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001d22:	f7ff ffa3 	bl	8001c6c <DWT_Delay_us>

	gpio_set_input ();    // set the pin as input
 8001d26:	f7ff ffc3 	bl	8001cb0 <gpio_set_input>
	DWT_Delay_us (80);    // delay according to datasheet
 8001d2a:	2050      	movs	r0, #80	; 0x50
 8001d2c:	f7ff ff9e 	bl	8001c6c <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))    // if the pin is low i.e the presence pulse is there
 8001d30:	2102      	movs	r1, #2
 8001d32:	4809      	ldr	r0, [pc, #36]	; (8001d58 <ds18b20_init+0x4c>)
 8001d34:	f001 f822 	bl	8002d7c <HAL_GPIO_ReadPin>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <ds18b20_init+0x3e>
	{
		DWT_Delay_us (400);  // wait for 400 us
 8001d3e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001d42:	f7ff ff93 	bl	8001c6c <DWT_Delay_us>
		return 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e004      	b.n	8001d54 <ds18b20_init+0x48>
	}

	else
	{
		DWT_Delay_us (400);
 8001d4a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001d4e:	f7ff ff8d 	bl	8001c6c <DWT_Delay_us>
		return 1;
 8001d52:	2301      	movs	r3, #1
	}
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40010800 	.word	0x40010800

08001d5c <write>:

void write (uint8_t data)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
	gpio_set_output ();   // set as output
 8001d66:	f7ff ffb9 	bl	8001cdc <gpio_set_output>

	for (int i=0; i<8; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e026      	b.n	8001dbe <write+0x62>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8001d70:	79fa      	ldrb	r2, [r7, #7]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	fa42 f303 	asr.w	r3, r2, r3
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00f      	beq.n	8001da0 <write+0x44>
		{
			// write 1

			gpio_set_output ();  // set as output
 8001d80:	f7ff ffac 	bl	8001cdc <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin LOW
 8001d84:	2200      	movs	r2, #0
 8001d86:	2102      	movs	r1, #2
 8001d88:	4810      	ldr	r0, [pc, #64]	; (8001dcc <write+0x70>)
 8001d8a:	f001 f80e 	bl	8002daa <HAL_GPIO_WritePin>
			DWT_Delay_us (1);  // wait for  us
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f7ff ff6c 	bl	8001c6c <DWT_Delay_us>

			gpio_set_input ();  // set as input
 8001d94:	f7ff ff8c 	bl	8001cb0 <gpio_set_input>
			DWT_Delay_us (60);  // wait for 60 us
 8001d98:	203c      	movs	r0, #60	; 0x3c
 8001d9a:	f7ff ff67 	bl	8001c6c <DWT_Delay_us>
 8001d9e:	e00b      	b.n	8001db8 <write+0x5c>

		else  // if the bit is low
		{
			// write 0

			gpio_set_output ();
 8001da0:	f7ff ff9c 	bl	8001cdc <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin LOW
 8001da4:	2200      	movs	r2, #0
 8001da6:	2102      	movs	r1, #2
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <write+0x70>)
 8001daa:	f000 fffe 	bl	8002daa <HAL_GPIO_WritePin>
			DWT_Delay_us (60);  // wait for 60 us
 8001dae:	203c      	movs	r0, #60	; 0x3c
 8001db0:	f7ff ff5c 	bl	8001c6c <DWT_Delay_us>

			gpio_set_input ();
 8001db4:	f7ff ff7c 	bl	8001cb0 <gpio_set_input>
	for (int i=0; i<8; i++)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b07      	cmp	r3, #7
 8001dc2:	ddd5      	ble.n	8001d70 <write+0x14>
		}
	}
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40010800 	.word	0x40010800

08001dd0 <read>:

uint8_t read (void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	71fb      	strb	r3, [r7, #7]
	gpio_set_input ();
 8001dda:	f7ff ff69 	bl	8001cb0 <gpio_set_input>

	for (int i=0;i<8;i++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	e022      	b.n	8001e2a <read+0x5a>
	{
		gpio_set_output ();   // set as output
 8001de4:	f7ff ff7a 	bl	8001cdc <gpio_set_output>

		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the data pin LOW
 8001de8:	2200      	movs	r2, #0
 8001dea:	2102      	movs	r1, #2
 8001dec:	4813      	ldr	r0, [pc, #76]	; (8001e3c <read+0x6c>)
 8001dee:	f000 ffdc 	bl	8002daa <HAL_GPIO_WritePin>
		DWT_Delay_us (2);  // wait for 2 us
 8001df2:	2002      	movs	r0, #2
 8001df4:	f7ff ff3a 	bl	8001c6c <DWT_Delay_us>

		gpio_set_input ();  // set as input
 8001df8:	f7ff ff5a 	bl	8001cb0 <gpio_set_input>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))  // if the pin is HIGH
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	480f      	ldr	r0, [pc, #60]	; (8001e3c <read+0x6c>)
 8001e00:	f000 ffbc 	bl	8002d7c <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <read+0x4e>
		{
			value |= 1<<i;  // read = 1
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	b25a      	sxtb	r2, r3
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (60);  // wait for 60 us
 8001e1e:	203c      	movs	r0, #60	; 0x3c
 8001e20:	f7ff ff24 	bl	8001c6c <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b07      	cmp	r3, #7
 8001e2e:	ddd9      	ble.n	8001de4 <read+0x14>
	}
	return value;
 8001e30:	79fb      	ldrb	r3, [r7, #7]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40010800 	.word	0x40010800

08001e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b08b      	sub	sp, #44	; 0x2c
 8001e44:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e46:	f000 fcd7 	bl	80027f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e4a:	f000 f8d9 	bl	8002000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4e:	f000 f9c5 	bl	80021dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e52:	f000 f91b 	bl	800208c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001e56:	f000 fa5b 	bl	8002310 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001e5a:	f000 f995 	bl	8002188 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001e5e:	f000 f943 	bl	80020e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001e62:	f7ff fbdf 	bl	8001624 <ILI9341_Init>
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8001e66:	4857      	ldr	r0, [pc, #348]	; (8001fc4 <main+0x184>)
 8001e68:	f002 fd06 	bl	8004878 <printf>
  printf("** Test finished successfully. ** \n\r");
 8001e6c:	4856      	ldr	r0, [pc, #344]	; (8001fc8 <main+0x188>)
 8001e6e:	f002 fd03 	bl	8004878 <printf>
  DWT_Delay_Init();
 8001e72:	f7ff fecb 	bl	8001c0c <DWT_Delay_Init>
  ILI9341_Fill_Screen(WHITE);
 8001e76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e7a:	f7ff fd79 	bl	8001970 <ILI9341_Fill_Screen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* temperautre*/
	check = ds18b20_init ();
 8001e7e:	f7ff ff45 	bl	8001d0c <ds18b20_init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <main+0x18c>)
 8001e88:	701a      	strb	r2, [r3, #0]
	write (0xCC);  // skip ROM
 8001e8a:	20cc      	movs	r0, #204	; 0xcc
 8001e8c:	f7ff ff66 	bl	8001d5c <write>
	write (0x44);  // convert t
 8001e90:	2044      	movs	r0, #68	; 0x44
 8001e92:	f7ff ff63 	bl	8001d5c <write>

	HAL_Delay (800);
 8001e96:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e9a:	f000 fd0f 	bl	80028bc <HAL_Delay>

	ds18b20_init ();
 8001e9e:	f7ff ff35 	bl	8001d0c <ds18b20_init>
	write (0xCC);  // skip ROM
 8001ea2:	20cc      	movs	r0, #204	; 0xcc
 8001ea4:	f7ff ff5a 	bl	8001d5c <write>
	write (0xBE);  // Read Scratchpad
 8001ea8:	20be      	movs	r0, #190	; 0xbe
 8001eaa:	f7ff ff57 	bl	8001d5c <write>

	temp_l = read();
 8001eae:	f7ff ff8f 	bl	8001dd0 <read>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <main+0x190>)
 8001eb8:	701a      	strb	r2, [r3, #0]
	temp_h = read();
 8001eba:	f7ff ff89 	bl	8001dd0 <read>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <main+0x194>)
 8001ec4:	701a      	strb	r2, [r3, #0]
	temp = (temp_h<<8)|temp_l;
 8001ec6:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <main+0x194>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <main+0x190>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <main+0x198>)
 8001edc:	801a      	strh	r2, [r3, #0]
	temperature = (float)temp/16;
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <main+0x198>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fe86 	bl	8000bf4 <__aeabi_ui2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ff8c 	bl	8000e0c <__aeabi_fdiv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <main+0x19c>)
 8001efa:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f00:	4837      	ldr	r0, [pc, #220]	; (8001fe0 <main+0x1a0>)
 8001f02:	f000 ff6a 	bl	8002dda <HAL_GPIO_TogglePin>
	/*screen test*/

//	ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 1, WHITE);

//	printf(counter_buff, "%f \n\r", temperature);
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001f06:	2003      	movs	r0, #3
 8001f08:	f7ff fb2e 	bl	8001568 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 1, WHITE);
 8001f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	2301      	movs	r3, #1
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	220a      	movs	r2, #10
 8001f1a:	210a      	movs	r1, #10
 8001f1c:	4831      	ldr	r0, [pc, #196]	; (8001fe4 <main+0x1a4>)
 8001f1e:	f7ff fa2d 	bl	800137c <ILI9341_Draw_Text>
	char counter_buff[30];
	printf("%.1f \n\r", temperature);
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <main+0x19c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fa7e 	bl	8000428 <__aeabi_f2d>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	460c      	mov	r4, r1
 8001f30:	461a      	mov	r2, r3
 8001f32:	4623      	mov	r3, r4
 8001f34:	482c      	ldr	r0, [pc, #176]	; (8001fe8 <main+0x1a8>)
 8001f36:	f002 fc9f 	bl	8004878 <printf>
	sprintf(counter_buff, "Current Temp: %.1f", temperature);
 8001f3a:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <main+0x19c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fa72 	bl	8000428 <__aeabi_f2d>
 8001f44:	4603      	mov	r3, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	4638      	mov	r0, r7
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	4927      	ldr	r1, [pc, #156]	; (8001fec <main+0x1ac>)
 8001f50:	f002 fcfc 	bl	800494c <sprintf>
	ILI9341_Draw_Text(counter_buff, 10, 90, BLACK, 2, WHITE);
 8001f54:	4638      	mov	r0, r7
 8001f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2300      	movs	r3, #0
 8001f62:	225a      	movs	r2, #90	; 0x5a
 8001f64:	210a      	movs	r1, #10
 8001f66:	f7ff fa09 	bl	800137c <ILI9341_Draw_Text>

	printf("\r\n");
 8001f6a:	4821      	ldr	r0, [pc, #132]	; (8001ff0 <main+0x1b0>)
 8001f6c:	f002 fce6 	bl	800493c <puts>

	printf("Scanning I2C bus:\r\n");
 8001f70:	4820      	ldr	r0, [pc, #128]	; (8001ff4 <main+0x1b4>)
 8001f72:	f002 fce3 	bl	800493c <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for (i=1; i<128; i++)
 8001f76:	2301      	movs	r3, #1
 8001f78:	77fb      	strb	r3, [r7, #31]
 8001f7a:	e01b      	b.n	8001fb4 <main+0x174>
	   * &hi2c1 is the handle
	   * (uint16_t)(i<<1) is the i2c address left aligned
	   * retries 2
	   * timeout 2
	   */
	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 8001f7c:	7ffb      	ldrb	r3, [r7, #31]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	b299      	uxth	r1, r3
 8001f84:	2302      	movs	r3, #2
 8001f86:	2202      	movs	r2, #2
 8001f88:	481b      	ldr	r0, [pc, #108]	; (8001ff8 <main+0x1b8>)
 8001f8a:	f001 f867 	bl	800305c <HAL_I2C_IsDeviceReady>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	77bb      	strb	r3, [r7, #30]
	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8001f92:	7fbb      	ldrb	r3, [r7, #30]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <main+0x15e>
	  {
		  printf("."); // No ACK received at that address
 8001f98:	202e      	movs	r0, #46	; 0x2e
 8001f9a:	f002 fc7f 	bl	800489c <putchar>
	  }
	  if (result == HAL_OK)
 8001f9e:	7fbb      	ldrb	r3, [r7, #30]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d104      	bne.n	8001fae <main+0x16e>
	  {
		  printf("0x%X", i); // Received an ACK at that address
 8001fa4:	7ffb      	ldrb	r3, [r7, #31]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4814      	ldr	r0, [pc, #80]	; (8001ffc <main+0x1bc>)
 8001faa:	f002 fc65 	bl	8004878 <printf>
	for (i=1; i<128; i++)
 8001fae:	7ffb      	ldrb	r3, [r7, #31]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	77fb      	strb	r3, [r7, #31]
 8001fb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	dadf      	bge.n	8001f7c <main+0x13c>
	  }
	}
	printf("\r\n");
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <main+0x1b0>)
 8001fbe:	f002 fcbd 	bl	800493c <puts>
  {
 8001fc2:	e75c      	b.n	8001e7e <main+0x3e>
 8001fc4:	08009de0 	.word	0x08009de0
 8001fc8:	08009e30 	.word	0x08009e30
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	20000ac0 	.word	0x20000ac0
 8001fd4:	20000ac8 	.word	0x20000ac8
 8001fd8:	20000ac2 	.word	0x20000ac2
 8001fdc:	20000ac4 	.word	0x20000ac4
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	08009e58 	.word	0x08009e58
 8001fe8:	08009e74 	.word	0x08009e74
 8001fec:	08009e7c 	.word	0x08009e7c
 8001ff0:	08009e90 	.word	0x08009e90
 8001ff4:	08009e94 	.word	0x08009e94
 8001ff8:	20000a6c 	.word	0x20000a6c
 8001ffc:	08009ea8 	.word	0x08009ea8

08002000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b090      	sub	sp, #64	; 0x40
 8002004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002006:	f107 0318 	add.w	r3, r7, #24
 800200a:	2228      	movs	r2, #40	; 0x28
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fc2a 	bl	8004868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002022:	2301      	movs	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800202a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002030:	2301      	movs	r3, #1
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002034:	2302      	movs	r3, #2
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800203e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002044:	f107 0318 	add.w	r3, r7, #24
 8002048:	4618      	mov	r0, r3
 800204a:	f001 f981 	bl	8003350 <HAL_RCC_OscConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002054:	f000 f956 	bl	8002304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002058:	230f      	movs	r3, #15
 800205a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205c:	2302      	movs	r3, #2
 800205e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800206a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	2102      	movs	r1, #2
 8002074:	4618      	mov	r0, r3
 8002076:	f001 fbeb 	bl	8003850 <HAL_RCC_ClockConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002080:	f000 f940 	bl	8002304 <Error_Handler>
  }
}
 8002084:	bf00      	nop
 8002086:	3740      	adds	r7, #64	; 0x40
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <MX_I2C1_Init+0x50>)
 8002092:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <MX_I2C1_Init+0x54>)
 8002094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_I2C1_Init+0x50>)
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <MX_I2C1_Init+0x58>)
 800209a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_I2C1_Init+0x50>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <MX_I2C1_Init+0x50>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_I2C1_Init+0x50>)
 80020aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <MX_I2C1_Init+0x50>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_I2C1_Init+0x50>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <MX_I2C1_Init+0x50>)
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_I2C1_Init+0x50>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <MX_I2C1_Init+0x50>)
 80020ca:	f000 fe9f 	bl	8002e0c <HAL_I2C_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020d4:	f000 f916 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000a6c 	.word	0x20000a6c
 80020e0:	40005400 	.word	0x40005400
 80020e4:	000186a0 	.word	0x000186a0

080020e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_TIM1_Init+0x98>)
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <MX_TIM1_Init+0x9c>)
 8002108:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_TIM1_Init+0x98>)
 800210c:	2247      	movs	r2, #71	; 0x47
 800210e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MX_TIM1_Init+0x98>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_TIM1_Init+0x98>)
 8002118:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800211c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MX_TIM1_Init+0x98>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_TIM1_Init+0x98>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <MX_TIM1_Init+0x98>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002130:	4813      	ldr	r0, [pc, #76]	; (8002180 <MX_TIM1_Init+0x98>)
 8002132:	f001 ff46 	bl	8003fc2 <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800213c:	f000 f8e2 	bl	8002304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4619      	mov	r1, r3
 800214c:	480c      	ldr	r0, [pc, #48]	; (8002180 <MX_TIM1_Init+0x98>)
 800214e:	f001 ff63 	bl	8004018 <HAL_TIM_ConfigClockSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002158:	f000 f8d4 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_TIM1_Init+0x98>)
 800216a:	f002 f905 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002174:	f000 f8c6 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000b1c 	.word	0x20000b1c
 8002184:	40012c00 	.word	0x40012c00

08002188 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <MX_USART1_UART_Init+0x50>)
 8002190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021c0:	f002 f91e 	bl	8004400 <HAL_UART_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021ca:	f000 f89b 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000acc 	.word	0x20000acc
 80021d8:	40013800 	.word	0x40013800

080021dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f0:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <MX_GPIO_Init+0xf4>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	4a36      	ldr	r2, [pc, #216]	; (80022d0 <MX_GPIO_Init+0xf4>)
 80021f6:	f043 0310 	orr.w	r3, r3, #16
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <MX_GPIO_Init+0xf4>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <MX_GPIO_Init+0xf4>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a30      	ldr	r2, [pc, #192]	; (80022d0 <MX_GPIO_Init+0xf4>)
 800220e:	f043 0320 	orr.w	r3, r3, #32
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <MX_GPIO_Init+0xf4>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <MX_GPIO_Init+0xf4>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <MX_GPIO_Init+0xf4>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <MX_GPIO_Init+0xf4>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <MX_GPIO_Init+0xf4>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a24      	ldr	r2, [pc, #144]	; (80022d0 <MX_GPIO_Init+0xf4>)
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <MX_GPIO_Init+0xf4>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002256:	481f      	ldr	r0, [pc, #124]	; (80022d4 <MX_GPIO_Init+0xf8>)
 8002258:	f000 fda7 	bl	8002daa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	2102      	movs	r1, #2
 8002260:	481d      	ldr	r0, [pc, #116]	; (80022d8 <MX_GPIO_Init+0xfc>)
 8002262:	f000 fda2 	bl	8002daa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	210b      	movs	r1, #11
 800226a:	481c      	ldr	r0, [pc, #112]	; (80022dc <MX_GPIO_Init+0x100>)
 800226c:	f000 fd9d 	bl	8002daa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2302      	movs	r3, #2
 8002280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4619      	mov	r1, r3
 8002288:	4812      	ldr	r0, [pc, #72]	; (80022d4 <MX_GPIO_Init+0xf8>)
 800228a:	f000 fc1d 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800228e:	2302      	movs	r3, #2
 8002290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2302      	movs	r3, #2
 800229c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4619      	mov	r1, r3
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <MX_GPIO_Init+0xfc>)
 80022a6:	f000 fc0f 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80022aa:	230b      	movs	r3, #11
 80022ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2302      	movs	r3, #2
 80022b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 0310 	add.w	r3, r7, #16
 80022be:	4619      	mov	r1, r3
 80022c0:	4806      	ldr	r0, [pc, #24]	; (80022dc <MX_GPIO_Init+0x100>)
 80022c2:	f000 fc01 	bl	8002ac8 <HAL_GPIO_Init>

}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40011000 	.word	0x40011000
 80022d8:	40010800 	.word	0x40010800
 80022dc:	40010c00 	.word	0x40010c00

080022e0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80022e8:	1d39      	adds	r1, r7, #4
 80022ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ee:	2201      	movs	r2, #1
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <__io_putchar+0x20>)
 80022f2:	f002 f8d2 	bl	800449a <HAL_UART_Transmit>
  return ch;
 80022f6:	687b      	ldr	r3, [r7, #4]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000acc 	.word	0x20000acc

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

 void MX_SPI1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <MX_SPI1_Init+0x64>)
 8002316:	4a18      	ldr	r2, [pc, #96]	; (8002378 <MX_SPI1_Init+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <MX_SPI1_Init+0x64>)
 800231c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MX_SPI1_Init+0x64>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <MX_SPI1_Init+0x64>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <MX_SPI1_Init+0x64>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <MX_SPI1_Init+0x64>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_SPI1_Init+0x64>)
 800233c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002340:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_SPI1_Init+0x64>)
 8002344:	2200      	movs	r2, #0
 8002346:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <MX_SPI1_Init+0x64>)
 800234a:	2200      	movs	r2, #0
 800234c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_SPI1_Init+0x64>)
 8002350:	2200      	movs	r2, #0
 8002352:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <MX_SPI1_Init+0x64>)
 8002356:	2200      	movs	r2, #0
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_SPI1_Init+0x64>)
 800235c:	220a      	movs	r2, #10
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <MX_SPI1_Init+0x64>)
 8002362:	f001 fc11 	bl	8003b88 <HAL_SPI_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800236c:	f7ff ffca 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000a14 	.word	0x20000a14
 8002378:	40013000 	.word	0x40013000

0800237c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_MspInit+0x5c>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <HAL_MspInit+0x5c>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6193      	str	r3, [r2, #24]
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_MspInit+0x5c>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_MspInit+0x5c>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_MspInit+0x5c>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_MspInit+0x5c>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_MspInit+0x60>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_MspInit+0x60>)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010000 	.word	0x40010000

080023e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a15      	ldr	r2, [pc, #84]	; (8002450 <HAL_I2C_MspInit+0x70>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d123      	bne.n	8002448 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_I2C_MspInit+0x74>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_I2C_MspInit+0x74>)
 8002406:	f043 0308 	orr.w	r3, r3, #8
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_I2C_MspInit+0x74>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002418:	23c0      	movs	r3, #192	; 0xc0
 800241a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241c:	2312      	movs	r3, #18
 800241e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	4619      	mov	r1, r3
 800242a:	480b      	ldr	r0, [pc, #44]	; (8002458 <HAL_I2C_MspInit+0x78>)
 800242c:	f000 fb4c 	bl	8002ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_I2C_MspInit+0x74>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_I2C_MspInit+0x74>)
 8002436:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800243a:	61d3      	str	r3, [r2, #28]
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_I2C_MspInit+0x74>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002448:	bf00      	nop
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40005400 	.word	0x40005400
 8002454:	40021000 	.word	0x40021000
 8002458:	40010c00 	.word	0x40010c00

0800245c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0310 	add.w	r3, r7, #16
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_SPI_MspInit+0x88>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d12f      	bne.n	80024dc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HAL_SPI_MspInit+0x8c>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_SPI_MspInit+0x8c>)
 8002482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002486:	6193      	str	r3, [r2, #24]
 8002488:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_SPI_MspInit+0x8c>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_SPI_MspInit+0x8c>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <HAL_SPI_MspInit+0x8c>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	6193      	str	r3, [r2, #24]
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_SPI_MspInit+0x8c>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80024ac:	23b0      	movs	r3, #176	; 0xb0
 80024ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b4:	2303      	movs	r3, #3
 80024b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	480b      	ldr	r0, [pc, #44]	; (80024ec <HAL_SPI_MspInit+0x90>)
 80024c0:	f000 fb02 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024c4:	2340      	movs	r3, #64	; 0x40
 80024c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	4619      	mov	r1, r3
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_SPI_MspInit+0x90>)
 80024d8:	f000 faf6 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024dc:	bf00      	nop
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40013000 	.word	0x40013000
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010800 	.word	0x40010800

080024f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_TIM_Base_MspInit+0x34>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10b      	bne.n	800251a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_TIM_Base_MspInit+0x38>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <HAL_TIM_Base_MspInit+0x38>)
 8002508:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800250c:	6193      	str	r3, [r2, #24]
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_TIM_Base_MspInit+0x38>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40021000 	.word	0x40021000

0800252c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <HAL_UART_MspInit+0x8c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d131      	bne.n	80025b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_UART_MspInit+0x90>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <HAL_UART_MspInit+0x90>)
 8002552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002556:	6193      	str	r3, [r2, #24]
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_UART_MspInit+0x90>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_UART_MspInit+0x90>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <HAL_UART_MspInit+0x90>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6193      	str	r3, [r2, #24]
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_UART_MspInit+0x90>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800257c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002580:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	4619      	mov	r1, r3
 8002590:	480b      	ldr	r0, [pc, #44]	; (80025c0 <HAL_UART_MspInit+0x94>)
 8002592:	f000 fa99 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800259a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	4619      	mov	r1, r3
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <HAL_UART_MspInit+0x94>)
 80025ac:	f000 fa8c 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025b0:	bf00      	nop
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010800 	.word	0x40010800

080025c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <HardFault_Handler+0x4>

080025d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025da:	e7fe      	b.n	80025da <MemManage_Handler+0x4>

080025dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <BusFault_Handler+0x4>

080025e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <UsageFault_Handler+0x4>

080025e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002610:	f000 f938 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e00a      	b.n	8002640 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800262a:	f3af 8000 	nop.w
 800262e:	4601      	mov	r1, r0
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	60ba      	str	r2, [r7, #8]
 8002636:	b2ca      	uxtb	r2, r1
 8002638:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	dbf0      	blt.n	800262a <_read+0x12>
	}

return len;
 8002648:	687b      	ldr	r3, [r7, #4]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e009      	b.n	8002678 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	60ba      	str	r2, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fe37 	bl	80022e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbf1      	blt.n	8002664 <_write+0x12>
	}
	return len;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_close>:

int _close(int file)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
	return -1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026b0:	605a      	str	r2, [r3, #4]
	return 0;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <_isatty>:

int _isatty(int file)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	return 1;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
	return 0;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <_sbrk+0x50>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <_sbrk+0x16>
		heap_end = &end;
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <_sbrk+0x50>)
 80026fe:	4a10      	ldr	r2, [pc, #64]	; (8002740 <_sbrk+0x54>)
 8002700:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <_sbrk+0x50>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <_sbrk+0x50>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	466a      	mov	r2, sp
 8002712:	4293      	cmp	r3, r2
 8002714:	d907      	bls.n	8002726 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002716:	f002 f87d 	bl	8004814 <__errno>
 800271a:	4602      	mov	r2, r0
 800271c:	230c      	movs	r3, #12
 800271e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002724:	e006      	b.n	8002734 <_sbrk+0x48>
	}

	heap_end += incr;
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <_sbrk+0x50>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	4a03      	ldr	r2, [pc, #12]	; (800273c <_sbrk+0x50>)
 8002730:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200009dc 	.word	0x200009dc
 8002740:	20000b70 	.word	0x20000b70

08002744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002748:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <SystemInit+0x5c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <SystemInit+0x5c>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <SystemInit+0x5c>)
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	4911      	ldr	r1, [pc, #68]	; (80027a0 <SystemInit+0x5c>)
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <SystemInit+0x60>)
 800275c:	4013      	ands	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <SystemInit+0x5c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <SystemInit+0x5c>)
 8002766:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800276a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <SystemInit+0x5c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <SystemInit+0x5c>)
 8002776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <SystemInit+0x5c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <SystemInit+0x5c>)
 8002782:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002786:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <SystemInit+0x5c>)
 800278a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800278e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SystemInit+0x64>)
 8002792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002796:	609a      	str	r2, [r3, #8]
#endif 
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	40021000 	.word	0x40021000
 80027a4:	f8ff0000 	.word	0xf8ff0000
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027ae:	e003      	b.n	80027b8 <LoopCopyDataInit>

080027b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027b6:	3104      	adds	r1, #4

080027b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027b8:	480a      	ldr	r0, [pc, #40]	; (80027e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027c0:	d3f6      	bcc.n	80027b0 <CopyDataInit>
  ldr r2, =_sbss
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80027c4:	e002      	b.n	80027cc <LoopFillZerobss>

080027c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80027c8:	f842 3b04 	str.w	r3, [r2], #4

080027cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80027ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027d0:	d3f9      	bcc.n	80027c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027d2:	f7ff ffb7 	bl	8002744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027d6:	f002 f823 	bl	8004820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027da:	f7ff fb31 	bl	8001e40 <main>
  bx lr
 80027de:	4770      	bx	lr
  ldr r3, =_sidata
 80027e0:	0800a3c4 	.word	0x0800a3c4
  ldr r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027e8:	200009c0 	.word	0x200009c0
  ldr r2, =_sbss
 80027ec:	200009c0 	.word	0x200009c0
  ldr r3, = _ebss
 80027f0:	20000b70 	.word	0x20000b70

080027f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC1_2_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_Init+0x28>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_Init+0x28>)
 8002802:	f043 0310 	orr.w	r3, r3, #16
 8002806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 f929 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	2000      	movs	r0, #0
 8002810:	f000 f808 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fdb2 	bl	800237c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40022000 	.word	0x40022000

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_InitTick+0x54>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_InitTick+0x58>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800283a:	fbb3 f3f1 	udiv	r3, r3, r1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f933 	bl	8002aae <HAL_SYSTICK_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00e      	b.n	8002870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d80a      	bhi.n	800286e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002860:	f000 f909 	bl	8002a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002864:	4a06      	ldr	r2, [pc, #24]	; (8002880 <HAL_InitTick+0x5c>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000008 	.word	0x20000008
 800287c:	20000010 	.word	0x20000010
 8002880:	2000000c 	.word	0x2000000c

08002884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_IncTick+0x1c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_IncTick+0x20>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a03      	ldr	r2, [pc, #12]	; (80028a4 <HAL_IncTick+0x20>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	20000010 	.word	0x20000010
 80028a4:	20000b5c 	.word	0x20000b5c

080028a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return uwTick;
 80028ac:	4b02      	ldr	r3, [pc, #8]	; (80028b8 <HAL_GetTick+0x10>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000b5c 	.word	0x20000b5c

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff fff0 	bl	80028a8 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_Delay+0x40>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffe0 	bl	80028a8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000010 	.word	0x20000010

08002900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800292c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002932:	4a04      	ldr	r2, [pc, #16]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	60d3      	str	r3, [r2, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <__NVIC_GetPriorityGrouping+0x18>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 0307 	and.w	r3, r3, #7
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	; (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	; (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a40:	f7ff ff90 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff49 	bl	8002900 <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff5e 	bl	8002948 <__NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff90 	bl	80029b8 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5f 	bl	8002964 <__NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffb0 	bl	8002a1c <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b08b      	sub	sp, #44	; 0x2c
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ada:	e127      	b.n	8002d2c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002adc:	2201      	movs	r2, #1
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 8116 	bne.w	8002d26 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b12      	cmp	r3, #18
 8002b00:	d034      	beq.n	8002b6c <HAL_GPIO_Init+0xa4>
 8002b02:	2b12      	cmp	r3, #18
 8002b04:	d80d      	bhi.n	8002b22 <HAL_GPIO_Init+0x5a>
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d02b      	beq.n	8002b62 <HAL_GPIO_Init+0x9a>
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d804      	bhi.n	8002b18 <HAL_GPIO_Init+0x50>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d031      	beq.n	8002b76 <HAL_GPIO_Init+0xae>
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d01c      	beq.n	8002b50 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b16:	e048      	b.n	8002baa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d043      	beq.n	8002ba4 <HAL_GPIO_Init+0xdc>
 8002b1c:	2b11      	cmp	r3, #17
 8002b1e:	d01b      	beq.n	8002b58 <HAL_GPIO_Init+0x90>
          break;
 8002b20:	e043      	b.n	8002baa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b22:	4a89      	ldr	r2, [pc, #548]	; (8002d48 <HAL_GPIO_Init+0x280>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d026      	beq.n	8002b76 <HAL_GPIO_Init+0xae>
 8002b28:	4a87      	ldr	r2, [pc, #540]	; (8002d48 <HAL_GPIO_Init+0x280>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d806      	bhi.n	8002b3c <HAL_GPIO_Init+0x74>
 8002b2e:	4a87      	ldr	r2, [pc, #540]	; (8002d4c <HAL_GPIO_Init+0x284>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d020      	beq.n	8002b76 <HAL_GPIO_Init+0xae>
 8002b34:	4a86      	ldr	r2, [pc, #536]	; (8002d50 <HAL_GPIO_Init+0x288>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01d      	beq.n	8002b76 <HAL_GPIO_Init+0xae>
          break;
 8002b3a:	e036      	b.n	8002baa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b3c:	4a85      	ldr	r2, [pc, #532]	; (8002d54 <HAL_GPIO_Init+0x28c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d019      	beq.n	8002b76 <HAL_GPIO_Init+0xae>
 8002b42:	4a85      	ldr	r2, [pc, #532]	; (8002d58 <HAL_GPIO_Init+0x290>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d016      	beq.n	8002b76 <HAL_GPIO_Init+0xae>
 8002b48:	4a84      	ldr	r2, [pc, #528]	; (8002d5c <HAL_GPIO_Init+0x294>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_GPIO_Init+0xae>
          break;
 8002b4e:	e02c      	b.n	8002baa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	623b      	str	r3, [r7, #32]
          break;
 8002b56:	e028      	b.n	8002baa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	623b      	str	r3, [r7, #32]
          break;
 8002b60:	e023      	b.n	8002baa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	3308      	adds	r3, #8
 8002b68:	623b      	str	r3, [r7, #32]
          break;
 8002b6a:	e01e      	b.n	8002baa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	330c      	adds	r3, #12
 8002b72:	623b      	str	r3, [r7, #32]
          break;
 8002b74:	e019      	b.n	8002baa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	623b      	str	r3, [r7, #32]
          break;
 8002b82:	e012      	b.n	8002baa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	611a      	str	r2, [r3, #16]
          break;
 8002b96:	e008      	b.n	8002baa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b98:	2308      	movs	r3, #8
 8002b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	615a      	str	r2, [r3, #20]
          break;
 8002ba2:	e002      	b.n	8002baa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
          break;
 8002ba8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2bff      	cmp	r3, #255	; 0xff
 8002bae:	d801      	bhi.n	8002bb4 <HAL_GPIO_Init+0xec>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	e001      	b.n	8002bb8 <HAL_GPIO_Init+0xf0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2bff      	cmp	r3, #255	; 0xff
 8002bbe:	d802      	bhi.n	8002bc6 <HAL_GPIO_Init+0xfe>
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x104>
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	3b08      	subs	r3, #8
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	210f      	movs	r1, #15
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	401a      	ands	r2, r3
 8002bde:	6a39      	ldr	r1, [r7, #32]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	431a      	orrs	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8096 	beq.w	8002d26 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bfa:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <HAL_GPIO_Init+0x298>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_GPIO_Init+0x298>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6193      	str	r3, [r2, #24]
 8002c06:	4b56      	ldr	r3, [pc, #344]	; (8002d60 <HAL_GPIO_Init+0x298>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c12:	4a54      	ldr	r2, [pc, #336]	; (8002d64 <HAL_GPIO_Init+0x29c>)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4013      	ands	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4b      	ldr	r2, [pc, #300]	; (8002d68 <HAL_GPIO_Init+0x2a0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0x19e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <HAL_GPIO_Init+0x2a4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_GPIO_Init+0x19a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a49      	ldr	r2, [pc, #292]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x196>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a48      	ldr	r2, [pc, #288]	; (8002d74 <HAL_GPIO_Init+0x2ac>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_GPIO_Init+0x192>
 8002c56:	2303      	movs	r3, #3
 8002c58:	e006      	b.n	8002c68 <HAL_GPIO_Init+0x1a0>
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	e004      	b.n	8002c68 <HAL_GPIO_Init+0x1a0>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e002      	b.n	8002c68 <HAL_GPIO_Init+0x1a0>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_GPIO_Init+0x1a0>
 8002c66:	2300      	movs	r3, #0
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	f002 0203 	and.w	r2, r2, #3
 8002c6e:	0092      	lsls	r2, r2, #2
 8002c70:	4093      	lsls	r3, r2
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c78:	493a      	ldr	r1, [pc, #232]	; (8002d64 <HAL_GPIO_Init+0x29c>)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4938      	ldr	r1, [pc, #224]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
 8002c9e:	e006      	b.n	8002cae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ca0:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	4933      	ldr	r1, [pc, #204]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cba:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	492e      	ldr	r1, [pc, #184]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
 8002cc6:	e006      	b.n	8002cd6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	4929      	ldr	r1, [pc, #164]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	4924      	ldr	r1, [pc, #144]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
 8002cee:	e006      	b.n	8002cfe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	491f      	ldr	r1, [pc, #124]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	491a      	ldr	r1, [pc, #104]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60cb      	str	r3, [r1, #12]
 8002d16:	e006      	b.n	8002d26 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	4915      	ldr	r1, [pc, #84]	; (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	3301      	adds	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f47f aed0 	bne.w	8002adc <HAL_GPIO_Init+0x14>
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	372c      	adds	r7, #44	; 0x2c
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	10210000 	.word	0x10210000
 8002d4c:	10110000 	.word	0x10110000
 8002d50:	10120000 	.word	0x10120000
 8002d54:	10310000 	.word	0x10310000
 8002d58:	10320000 	.word	0x10320000
 8002d5c:	10220000 	.word	0x10220000
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40010800 	.word	0x40010800
 8002d6c:	40010c00 	.word	0x40010c00
 8002d70:	40011000 	.word	0x40011000
 8002d74:	40011400 	.word	0x40011400
 8002d78:	40010400 	.word	0x40010400

08002d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
 8002d98:	e001      	b.n	8002d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	807b      	strh	r3, [r7, #2]
 8002db6:	4613      	mov	r3, r2
 8002db8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dba:	787b      	ldrb	r3, [r7, #1]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc0:	887a      	ldrh	r2, [r7, #2]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dc6:	e003      	b.n	8002dd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	041a      	lsls	r2, r3, #16
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	611a      	str	r2, [r3, #16]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	887b      	ldrh	r3, [r7, #2]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	611a      	str	r2, [r3, #16]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
	...

08002e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e10f      	b.n	800303e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff fad4 	bl	80023e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e50:	f000 fe54 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8002e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a7b      	ldr	r2, [pc, #492]	; (8003048 <HAL_I2C_Init+0x23c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d807      	bhi.n	8002e70 <HAL_I2C_Init+0x64>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a7a      	ldr	r2, [pc, #488]	; (800304c <HAL_I2C_Init+0x240>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e006      	b.n	8002e7e <HAL_I2C_Init+0x72>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a77      	ldr	r2, [pc, #476]	; (8003050 <HAL_I2C_Init+0x244>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0db      	b.n	800303e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a72      	ldr	r2, [pc, #456]	; (8003054 <HAL_I2C_Init+0x248>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0c9b      	lsrs	r3, r3, #18
 8002e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a64      	ldr	r2, [pc, #400]	; (8003048 <HAL_I2C_Init+0x23c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d802      	bhi.n	8002ec0 <HAL_I2C_Init+0xb4>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	e009      	b.n	8002ed4 <HAL_I2C_Init+0xc8>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	4a63      	ldr	r2, [pc, #396]	; (8003058 <HAL_I2C_Init+0x24c>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	099b      	lsrs	r3, r3, #6
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ee6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4956      	ldr	r1, [pc, #344]	; (8003048 <HAL_I2C_Init+0x23c>)
 8002ef0:	428b      	cmp	r3, r1
 8002ef2:	d80d      	bhi.n	8002f10 <HAL_I2C_Init+0x104>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e59      	subs	r1, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	bf38      	it	cc
 8002f0c:	2304      	movcc	r3, #4
 8002f0e:	e04f      	b.n	8002fb0 <HAL_I2C_Init+0x1a4>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d111      	bne.n	8002f3c <HAL_I2C_Init+0x130>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e58      	subs	r0, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	440b      	add	r3, r1
 8002f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e012      	b.n	8002f62 <HAL_I2C_Init+0x156>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1e58      	subs	r0, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	0099      	lsls	r1, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Init+0x15e>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e022      	b.n	8002fb0 <HAL_I2C_Init+0x1a4>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10e      	bne.n	8002f90 <HAL_I2C_Init+0x184>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1e58      	subs	r0, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	440b      	add	r3, r1
 8002f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f8e:	e00f      	b.n	8002fb0 <HAL_I2C_Init+0x1a4>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1e58      	subs	r0, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	0099      	lsls	r1, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	6809      	ldr	r1, [r1, #0]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6911      	ldr	r1, [r2, #16]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68d2      	ldr	r2, [r2, #12]
 8002fea:	4311      	orrs	r1, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	000186a0 	.word	0x000186a0
 800304c:	001e847f 	.word	0x001e847f
 8003050:	003d08ff 	.word	0x003d08ff
 8003054:	431bde83 	.word	0x431bde83
 8003058:	10624dd3 	.word	0x10624dd3

0800305c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	460b      	mov	r3, r1
 800306a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff fc1c 	bl	80028a8 <HAL_GetTick>
 8003070:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003072:	2301      	movs	r3, #1
 8003074:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	f040 8105 	bne.w	800328e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2319      	movs	r3, #25
 800308a:	2201      	movs	r2, #1
 800308c:	4982      	ldr	r1, [pc, #520]	; (8003298 <HAL_I2C_IsDeviceReady+0x23c>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f906 	bl	80032a0 <I2C_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
 800309c:	e0f8      	b.n	8003290 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_I2C_IsDeviceReady+0x50>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e0f1      	b.n	8003290 <HAL_I2C_IsDeviceReady+0x234>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d007      	beq.n	80030d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2224      	movs	r2, #36	; 0x24
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a6a      	ldr	r2, [pc, #424]	; (800329c <HAL_I2C_IsDeviceReady+0x240>)
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003104:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2200      	movs	r2, #0
 800310e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f8c4 	bl	80032a0 <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0b6      	b.n	8003290 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003122:	897b      	ldrh	r3, [r7, #10]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003130:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003132:	f7ff fbb9 	bl	80028a8 <HAL_GetTick>
 8003136:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003166:	e025      	b.n	80031b4 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003168:	f7ff fb9e 	bl	80028a8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d302      	bcc.n	800317e <HAL_I2C_IsDeviceReady+0x122>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22a0      	movs	r2, #160	; 0xa0
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b02      	cmp	r3, #2
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2ba0      	cmp	r3, #160	; 0xa0
 80031be:	d005      	beq.n	80031cc <HAL_I2C_IsDeviceReady+0x170>
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <HAL_I2C_IsDeviceReady+0x170>
 80031c6:	7dbb      	ldrb	r3, [r7, #22]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0cd      	beq.n	8003168 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d129      	bne.n	8003236 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2319      	movs	r3, #25
 800320e:	2201      	movs	r2, #1
 8003210:	4921      	ldr	r1, [pc, #132]	; (8003298 <HAL_I2C_IsDeviceReady+0x23c>)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f844 	bl	80032a0 <I2C_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e036      	b.n	8003290 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e02c      	b.n	8003290 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003244:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800324e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2319      	movs	r3, #25
 8003256:	2201      	movs	r2, #1
 8003258:	490f      	ldr	r1, [pc, #60]	; (8003298 <HAL_I2C_IsDeviceReady+0x23c>)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f820 	bl	80032a0 <I2C_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e012      	b.n	8003290 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	3301      	adds	r3, #1
 800326e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	f4ff af3e 	bcc.w	80030f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	00100002 	.word	0x00100002
 800329c:	ffff0000 	.word	0xffff0000

080032a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b0:	e025      	b.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b8:	d021      	beq.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ba:	f7ff faf5 	bl	80028a8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d116      	bne.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e023      	b.n	8003346 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10d      	bne.n	8003324 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4013      	ands	r3, r2
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf0c      	ite	eq
 800331a:	2301      	moveq	r3, #1
 800331c:	2300      	movne	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	e00c      	b.n	800333e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4013      	ands	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf0c      	ite	eq
 8003336:	2301      	moveq	r3, #1
 8003338:	2300      	movne	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	429a      	cmp	r2, r3
 8003342:	d0b6      	beq.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e26c      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8087 	beq.w	800347e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003370:	4b92      	ldr	r3, [pc, #584]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b04      	cmp	r3, #4
 800337a:	d00c      	beq.n	8003396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800337c:	4b8f      	ldr	r3, [pc, #572]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d112      	bne.n	80033ae <HAL_RCC_OscConfig+0x5e>
 8003388:	4b8c      	ldr	r3, [pc, #560]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d10b      	bne.n	80033ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003396:	4b89      	ldr	r3, [pc, #548]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d06c      	beq.n	800347c <HAL_RCC_OscConfig+0x12c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d168      	bne.n	800347c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e246      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x76>
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7f      	ldr	r2, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e02e      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b7b      	ldr	r3, [pc, #492]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7a      	ldr	r2, [pc, #488]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b78      	ldr	r3, [pc, #480]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a77      	ldr	r2, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0xbc>
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a71      	ldr	r2, [pc, #452]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6e      	ldr	r2, [pc, #440]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 800340c:	4b6b      	ldr	r3, [pc, #428]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6a      	ldr	r2, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a67      	ldr	r2, [pc, #412]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7ff fa3c 	bl	80028a8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7ff fa38 	bl	80028a8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1fa      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b5d      	ldr	r3, [pc, #372]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xe4>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7ff fa28 	bl	80028a8 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7ff fa24 	bl	80028a8 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1e6      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b53      	ldr	r3, [pc, #332]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x10c>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348a:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003496:	4b49      	ldr	r3, [pc, #292]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x18c>
 80034a2:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1ba      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4939      	ldr	r1, [pc, #228]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7ff f9dd 	bl	80028a8 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f2:	f7ff f9d9 	bl	80028a8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e19b      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4927      	ldr	r1, [pc, #156]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7ff f9bc 	bl	80028a8 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7ff f9b8 	bl	80028a8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e17a      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d03a      	beq.n	80035d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d019      	beq.n	800359a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_RCC_OscConfig+0x274>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356c:	f7ff f99c 	bl	80028a8 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7ff f998 	bl	80028a8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e15a      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003592:	2001      	movs	r0, #1
 8003594:	f000 fada 	bl	8003b4c <RCC_Delay>
 8003598:	e01c      	b.n	80035d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_OscConfig+0x274>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a0:	f7ff f982 	bl	80028a8 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a6:	e00f      	b.n	80035c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7ff f97e 	bl	80028a8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d908      	bls.n	80035c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e140      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	42420000 	.word	0x42420000
 80035c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e9      	bne.n	80035a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a6 	beq.w	800372e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e6:	4b97      	ldr	r3, [pc, #604]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	4b94      	ldr	r3, [pc, #592]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a93      	ldr	r2, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	61d3      	str	r3, [r2, #28]
 80035fe:	4b91      	ldr	r3, [pc, #580]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b8e      	ldr	r3, [pc, #568]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b8b      	ldr	r3, [pc, #556]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a8a      	ldr	r2, [pc, #552]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7ff f93f 	bl	80028a8 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7ff f93b 	bl	80028a8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b64      	cmp	r3, #100	; 0x64
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0fd      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b81      	ldr	r3, [pc, #516]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x312>
 8003654:	4b7b      	ldr	r3, [pc, #492]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a7a      	ldr	r2, [pc, #488]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	e02d      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x334>
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a75      	ldr	r2, [pc, #468]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6213      	str	r3, [r2, #32]
 8003676:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a72      	ldr	r2, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	e01c      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b05      	cmp	r3, #5
 800368a:	d10c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x356>
 800368c:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4a6c      	ldr	r2, [pc, #432]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6213      	str	r3, [r2, #32]
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4a69      	ldr	r2, [pc, #420]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6213      	str	r3, [r2, #32]
 80036a4:	e00b      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4a66      	ldr	r2, [pc, #408]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6213      	str	r3, [r2, #32]
 80036b2:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a63      	ldr	r2, [pc, #396]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c6:	f7ff f8ef 	bl	80028a8 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ce:	f7ff f8eb 	bl	80028a8 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e0ab      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e4:	4b57      	ldr	r3, [pc, #348]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ee      	beq.n	80036ce <HAL_RCC_OscConfig+0x37e>
 80036f0:	e014      	b.n	800371c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7ff f8d9 	bl	80028a8 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7ff f8d5 	bl	80028a8 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e095      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003710:	4b4c      	ldr	r3, [pc, #304]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ee      	bne.n	80036fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d105      	bne.n	800372e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003722:	4b48      	ldr	r3, [pc, #288]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4a47      	ldr	r2, [pc, #284]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8081 	beq.w	800383a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003738:	4b42      	ldr	r3, [pc, #264]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d061      	beq.n	8003808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d146      	bne.n	80037da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_RCC_OscConfig+0x4fc>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7ff f8a9 	bl	80028a8 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7ff f8a5 	bl	80028a8 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e067      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d108      	bne.n	8003794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003782:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	492d      	ldr	r1, [pc, #180]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a19      	ldr	r1, [r3, #32]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	430b      	orrs	r3, r1
 80037a6:	4927      	ldr	r1, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <HAL_RCC_OscConfig+0x4fc>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7ff f879 	bl	80028a8 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7ff f875 	bl	80028a8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e037      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x46a>
 80037d8:	e02f      	b.n	800383a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_RCC_OscConfig+0x4fc>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7ff f862 	bl	80028a8 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7ff f85e 	bl	80028a8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e020      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x498>
 8003806:	e018      	b.n	800383a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e013      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	429a      	cmp	r2, r3
 8003826:	d106      	bne.n	8003836 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
 800384c:	42420060 	.word	0x42420060

08003850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0d0      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d910      	bls.n	8003894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	4965      	ldr	r1, [pc, #404]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0b8      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d020      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ac:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c4:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a52      	ldr	r2, [pc, #328]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	494d      	ldr	r1, [pc, #308]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d040      	beq.n	8003970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d115      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e07f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e073      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06b      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	4b39      	ldr	r3, [pc, #228]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4936      	ldr	r1, [pc, #216]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003940:	f7fe ffb2 	bl	80028a8 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fe ffae 	bl	80028a8 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e053      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003970:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d210      	bcs.n	80039a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 0207 	bic.w	r2, r3, #7
 8003986:	4922      	ldr	r1, [pc, #136]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e032      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4916      	ldr	r1, [pc, #88]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039de:	f000 f821 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039e2:	4601      	mov	r1, r0
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	5cd3      	ldrb	r3, [r2, r3]
 80039f2:	fa21 f303 	lsr.w	r3, r1, r3
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1cc>)
 80039f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1d0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe ff10 	bl	8002824 <HAL_InitTick>

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40022000 	.word	0x40022000
 8003a14:	40021000 	.word	0x40021000
 8003a18:	0800a104 	.word	0x0800a104
 8003a1c:	20000008 	.word	0x20000008
 8003a20:	2000000c 	.word	0x2000000c

08003a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	b490      	push	{r4, r7}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a2c:	1d3c      	adds	r4, r7, #4
 8003a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a34:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a4e:	4b23      	ldr	r3, [pc, #140]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x40>
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x46>
 8003a62:	e02d      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a64:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a66:	623b      	str	r3, [r7, #32]
      break;
 8003a68:	e02d      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	0c9b      	lsrs	r3, r3, #18
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a76:	4413      	add	r3, r2
 8003a78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d013      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a88:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	0c5b      	lsrs	r3, r3, #17
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a96:	4413      	add	r3, r2
 8003a98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aa2:	fb02 f203 	mul.w	r2, r2, r3
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e004      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	623b      	str	r3, [r7, #32]
      break;
 8003abe:	e002      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ac2:	623b      	str	r3, [r7, #32]
      break;
 8003ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc90      	pop	{r4, r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	08009eb0 	.word	0x08009eb0
 8003ad8:	08009ec0 	.word	0x08009ec0
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	007a1200 	.word	0x007a1200
 8003ae4:	003d0900 	.word	0x003d0900

08003ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aec:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	20000008 	.word	0x20000008

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b00:	f7ff fff2 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b04:	4601      	mov	r1, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4a03      	ldr	r2, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5cd3      	ldrb	r3, [r2, r3]
 8003b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	0800a114 	.word	0x0800a114

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b28:	f7ff ffde 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4601      	mov	r1, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	0adb      	lsrs	r3, r3, #11
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4a03      	ldr	r2, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	0800a114 	.word	0x0800a114

08003b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <RCC_Delay+0x34>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <RCC_Delay+0x38>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0a5b      	lsrs	r3, r3, #9
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b68:	bf00      	nop
  }
  while (Delay --);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e5a      	subs	r2, r3, #1
 8003b6e:	60fa      	str	r2, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f9      	bne.n	8003b68 <RCC_Delay+0x1c>
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000008 	.word	0x20000008
 8003b84:	10624dd3 	.word	0x10624dd3

08003b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e053      	b.n	8003c42 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7fe fc51 	bl	800245c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	ea42 0103 	orr.w	r1, r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	0c1a      	lsrs	r2, r3, #16
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f002 0204 	and.w	r2, r2, #4
 8003c20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b088      	sub	sp, #32
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_SPI_Transmit+0x22>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e11e      	b.n	8003eaa <HAL_SPI_Transmit+0x260>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c74:	f7fe fe18 	bl	80028a8 <HAL_GetTick>
 8003c78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d002      	beq.n	8003c90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c8e:	e103      	b.n	8003e98 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_SPI_Transmit+0x52>
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ca0:	e0fa      	b.n	8003e98 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	88fa      	ldrh	r2, [r7, #6]
 8003cba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	88fa      	ldrh	r2, [r7, #6]
 8003cc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce8:	d107      	bne.n	8003cfa <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d007      	beq.n	8003d18 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d20:	d14b      	bne.n	8003dba <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_SPI_Transmit+0xe6>
 8003d2a:	8afb      	ldrh	r3, [r7, #22]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d13e      	bne.n	8003dae <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	881a      	ldrh	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	1c9a      	adds	r2, r3, #2
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d54:	e02b      	b.n	8003dae <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d112      	bne.n	8003d8a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	1c9a      	adds	r2, r3, #2
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d88:	e011      	b.n	8003dae <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d8a:	f7fe fd8d 	bl	80028a8 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d803      	bhi.n	8003da2 <HAL_SPI_Transmit+0x158>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da0:	d102      	bne.n	8003da8 <HAL_SPI_Transmit+0x15e>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dac:	e074      	b.n	8003e98 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1ce      	bne.n	8003d56 <HAL_SPI_Transmit+0x10c>
 8003db8:	e04c      	b.n	8003e54 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_SPI_Transmit+0x17e>
 8003dc2:	8afb      	ldrh	r3, [r7, #22]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d140      	bne.n	8003e4a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dee:	e02c      	b.n	8003e4a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d113      	bne.n	8003e26 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e24:	e011      	b.n	8003e4a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e26:	f7fe fd3f 	bl	80028a8 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d803      	bhi.n	8003e3e <HAL_SPI_Transmit+0x1f4>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e3c:	d102      	bne.n	8003e44 <HAL_SPI_Transmit+0x1fa>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e48:	e026      	b.n	8003e98 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1cd      	bne.n	8003df0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	6839      	ldr	r1, [r7, #0]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f894 	bl	8003f86 <SPI_EndRxTxTransaction>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e000      	b.n	8003e98 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003e96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ec2:	e04c      	b.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eca:	d048      	beq.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003ecc:	f7fe fcec 	bl	80028a8 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d902      	bls.n	8003ee2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d13d      	bne.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ef0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efa:	d111      	bne.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f04:	d004      	beq.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d107      	bne.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f28:	d10f      	bne.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e00f      	b.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d1a3      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b086      	sub	sp, #24
 8003f8a:	af02      	add	r7, sp, #8
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff ff88 	bl	8003eb2 <SPI_WaitFlagStateUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e000      	b.n	8003fba <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e01d      	b.n	8004010 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fe fa81 	bl	80024f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f000 f8c1 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_TIM_ConfigClockSource+0x18>
 800402c:	2302      	movs	r3, #2
 800402e:	e0a6      	b.n	800417e <HAL_TIM_ConfigClockSource+0x166>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800404e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004056:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d067      	beq.n	8004138 <HAL_TIM_ConfigClockSource+0x120>
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d80b      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x6c>
 800406c:	2b10      	cmp	r3, #16
 800406e:	d073      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0x140>
 8004070:	2b10      	cmp	r3, #16
 8004072:	d802      	bhi.n	800407a <HAL_TIM_ConfigClockSource+0x62>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d06f      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004078:	e078      	b.n	800416c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800407a:	2b20      	cmp	r3, #32
 800407c:	d06c      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0x140>
 800407e:	2b30      	cmp	r3, #48	; 0x30
 8004080:	d06a      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004082:	e073      	b.n	800416c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004084:	2b70      	cmp	r3, #112	; 0x70
 8004086:	d00d      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x8c>
 8004088:	2b70      	cmp	r3, #112	; 0x70
 800408a:	d804      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x7e>
 800408c:	2b50      	cmp	r3, #80	; 0x50
 800408e:	d033      	beq.n	80040f8 <HAL_TIM_ConfigClockSource+0xe0>
 8004090:	2b60      	cmp	r3, #96	; 0x60
 8004092:	d041      	beq.n	8004118 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004094:	e06a      	b.n	800416c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409a:	d066      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x152>
 800409c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a0:	d017      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040a2:	e063      	b.n	800416c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f000 f941 	bl	800433a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]
      break;
 80040d0:	e04c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6899      	ldr	r1, [r3, #8]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f000 f92a 	bl	800433a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f4:	609a      	str	r2, [r3, #8]
      break;
 80040f6:	e039      	b.n	800416c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6859      	ldr	r1, [r3, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	461a      	mov	r2, r3
 8004106:	f000 f8a1 	bl	800424c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2150      	movs	r1, #80	; 0x50
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f8f8 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004116:	e029      	b.n	800416c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	461a      	mov	r2, r3
 8004126:	f000 f8bf 	bl	80042a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2160      	movs	r1, #96	; 0x60
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f8e8 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004136:	e019      	b.n	800416c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	461a      	mov	r2, r3
 8004146:	f000 f881 	bl	800424c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2140      	movs	r1, #64	; 0x40
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f8d8 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004156:	e009      	b.n	800416c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f000 f8cf 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004168:	e000      	b.n	800416c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800416a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a29      	ldr	r2, [pc, #164]	; (8004240 <TIM_Base_SetConfig+0xb8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00b      	beq.n	80041b8 <TIM_Base_SetConfig+0x30>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a6:	d007      	beq.n	80041b8 <TIM_Base_SetConfig+0x30>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a26      	ldr	r2, [pc, #152]	; (8004244 <TIM_Base_SetConfig+0xbc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_Base_SetConfig+0x30>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a25      	ldr	r2, [pc, #148]	; (8004248 <TIM_Base_SetConfig+0xc0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d108      	bne.n	80041ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <TIM_Base_SetConfig+0xb8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00b      	beq.n	80041ea <TIM_Base_SetConfig+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d007      	beq.n	80041ea <TIM_Base_SetConfig+0x62>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <TIM_Base_SetConfig+0xbc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_Base_SetConfig+0x62>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a18      	ldr	r2, [pc, #96]	; (8004248 <TIM_Base_SetConfig+0xc0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d108      	bne.n	80041fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a07      	ldr	r2, [pc, #28]	; (8004240 <TIM_Base_SetConfig+0xb8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d103      	bne.n	8004230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	615a      	str	r2, [r3, #20]
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800

0800424c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 030a 	bic.w	r3, r3, #10
 8004288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f023 0210 	bic.w	r2, r3, #16
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	031b      	lsls	r3, r3, #12
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	621a      	str	r2, [r3, #32]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 0307 	orr.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004354:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	021a      	lsls	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	431a      	orrs	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4313      	orrs	r3, r2
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	609a      	str	r2, [r3, #8]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e032      	b.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e03f      	b.n	8004492 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fe f880 	bl	800252c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2224      	movs	r2, #36	; 0x24
 8004430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f90b 	bl	8004660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b088      	sub	sp, #32
 800449e:	af02      	add	r7, sp, #8
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	603b      	str	r3, [r7, #0]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	f040 8083 	bne.w	80045c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_UART_Transmit+0x2e>
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e07b      	b.n	80045c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_UART_Transmit+0x40>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e074      	b.n	80045c4 <HAL_UART_Transmit+0x12a>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2221      	movs	r2, #33	; 0x21
 80044ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80044f0:	f7fe f9da 	bl	80028a8 <HAL_GetTick>
 80044f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	88fa      	ldrh	r2, [r7, #6]
 80044fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004502:	e042      	b.n	800458a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451a:	d122      	bne.n	8004562 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f850 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e046      	b.n	80045c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004548:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d103      	bne.n	800455a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	3302      	adds	r3, #2
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	e017      	b.n	800458a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	3301      	adds	r3, #1
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	e013      	b.n	800458a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2200      	movs	r2, #0
 800456a:	2180      	movs	r1, #128	; 0x80
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f82d 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e023      	b.n	80045c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	60ba      	str	r2, [r7, #8]
 8004582:	781a      	ldrb	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1b7      	bne.n	8004504 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2200      	movs	r2, #0
 800459c:	2140      	movs	r1, #64	; 0x40
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f814 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e00a      	b.n	80045c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
  }
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045dc:	e02c      	b.n	8004638 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e4:	d028      	beq.n	8004638 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <UART_WaitOnFlagUntilTimeout+0x30>
 80045ec:	f7fe f95c 	bl	80028a8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d21d      	bcs.n	8004638 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800460a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e00f      	b.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4013      	ands	r3, r2
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	429a      	cmp	r2, r3
 8004654:	d0c3      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800469a:	f023 030c 	bic.w	r3, r3, #12
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	430b      	orrs	r3, r1
 80046a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a52      	ldr	r2, [pc, #328]	; (800480c <UART_SetConfig+0x1ac>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d14e      	bne.n	8004766 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046c8:	f7ff fa2c 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 80046cc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009a      	lsls	r2, r3, #2
 80046d8:	441a      	add	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	4a4a      	ldr	r2, [pc, #296]	; (8004810 <UART_SetConfig+0x1b0>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	0119      	lsls	r1, r3, #4
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009a      	lsls	r2, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	fbb2 f2f3 	udiv	r2, r2, r3
 8004704:	4b42      	ldr	r3, [pc, #264]	; (8004810 <UART_SetConfig+0x1b0>)
 8004706:	fba3 0302 	umull	r0, r3, r3, r2
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	2064      	movs	r0, #100	; 0x64
 800470e:	fb00 f303 	mul.w	r3, r0, r3
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	3332      	adds	r3, #50	; 0x32
 8004718:	4a3d      	ldr	r2, [pc, #244]	; (8004810 <UART_SetConfig+0x1b0>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004724:	4419      	add	r1, r3
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009a      	lsls	r2, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	fbb2 f2f3 	udiv	r2, r2, r3
 800473c:	4b34      	ldr	r3, [pc, #208]	; (8004810 <UART_SetConfig+0x1b0>)
 800473e:	fba3 0302 	umull	r0, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2064      	movs	r0, #100	; 0x64
 8004746:	fb00 f303 	mul.w	r3, r0, r3
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	3332      	adds	r3, #50	; 0x32
 8004750:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <UART_SetConfig+0x1b0>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f003 020f 	and.w	r2, r3, #15
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	440a      	add	r2, r1
 8004762:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004764:	e04d      	b.n	8004802 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004766:	f7ff f9c9 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 800476a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009a      	lsls	r2, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	4a23      	ldr	r2, [pc, #140]	; (8004810 <UART_SetConfig+0x1b0>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	0119      	lsls	r1, r3, #4
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009a      	lsls	r2, r3, #2
 8004796:	441a      	add	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a2:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <UART_SetConfig+0x1b0>)
 80047a4:	fba3 0302 	umull	r0, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	2064      	movs	r0, #100	; 0x64
 80047ac:	fb00 f303 	mul.w	r3, r0, r3
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	3332      	adds	r3, #50	; 0x32
 80047b6:	4a16      	ldr	r2, [pc, #88]	; (8004810 <UART_SetConfig+0x1b0>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c2:	4419      	add	r1, r3
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	009a      	lsls	r2, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <UART_SetConfig+0x1b0>)
 80047dc:	fba3 0302 	umull	r0, r3, r3, r2
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	2064      	movs	r0, #100	; 0x64
 80047e4:	fb00 f303 	mul.w	r3, r0, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	3332      	adds	r3, #50	; 0x32
 80047ee:	4a08      	ldr	r2, [pc, #32]	; (8004810 <UART_SetConfig+0x1b0>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	f003 020f 	and.w	r2, r3, #15
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	440a      	add	r2, r1
 8004800:	609a      	str	r2, [r3, #8]
}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40013800 	.word	0x40013800
 8004810:	51eb851f 	.word	0x51eb851f

08004814 <__errno>:
 8004814:	4b01      	ldr	r3, [pc, #4]	; (800481c <__errno+0x8>)
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000014 	.word	0x20000014

08004820 <__libc_init_array>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	2500      	movs	r5, #0
 8004824:	4e0c      	ldr	r6, [pc, #48]	; (8004858 <__libc_init_array+0x38>)
 8004826:	4c0d      	ldr	r4, [pc, #52]	; (800485c <__libc_init_array+0x3c>)
 8004828:	1ba4      	subs	r4, r4, r6
 800482a:	10a4      	asrs	r4, r4, #2
 800482c:	42a5      	cmp	r5, r4
 800482e:	d109      	bne.n	8004844 <__libc_init_array+0x24>
 8004830:	f005 fac8 	bl	8009dc4 <_init>
 8004834:	2500      	movs	r5, #0
 8004836:	4e0a      	ldr	r6, [pc, #40]	; (8004860 <__libc_init_array+0x40>)
 8004838:	4c0a      	ldr	r4, [pc, #40]	; (8004864 <__libc_init_array+0x44>)
 800483a:	1ba4      	subs	r4, r4, r6
 800483c:	10a4      	asrs	r4, r4, #2
 800483e:	42a5      	cmp	r5, r4
 8004840:	d105      	bne.n	800484e <__libc_init_array+0x2e>
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004848:	4798      	blx	r3
 800484a:	3501      	adds	r5, #1
 800484c:	e7ee      	b.n	800482c <__libc_init_array+0xc>
 800484e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004852:	4798      	blx	r3
 8004854:	3501      	adds	r5, #1
 8004856:	e7f2      	b.n	800483e <__libc_init_array+0x1e>
 8004858:	0800a3b8 	.word	0x0800a3b8
 800485c:	0800a3b8 	.word	0x0800a3b8
 8004860:	0800a3b8 	.word	0x0800a3b8
 8004864:	0800a3c0 	.word	0x0800a3c0

08004868 <memset>:
 8004868:	4603      	mov	r3, r0
 800486a:	4402      	add	r2, r0
 800486c:	4293      	cmp	r3, r2
 800486e:	d100      	bne.n	8004872 <memset+0xa>
 8004870:	4770      	bx	lr
 8004872:	f803 1b01 	strb.w	r1, [r3], #1
 8004876:	e7f9      	b.n	800486c <memset+0x4>

08004878 <printf>:
 8004878:	b40f      	push	{r0, r1, r2, r3}
 800487a:	b507      	push	{r0, r1, r2, lr}
 800487c:	4906      	ldr	r1, [pc, #24]	; (8004898 <printf+0x20>)
 800487e:	ab04      	add	r3, sp, #16
 8004880:	6808      	ldr	r0, [r1, #0]
 8004882:	f853 2b04 	ldr.w	r2, [r3], #4
 8004886:	6881      	ldr	r1, [r0, #8]
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	f001 fa8d 	bl	8005da8 <_vfprintf_r>
 800488e:	b003      	add	sp, #12
 8004890:	f85d eb04 	ldr.w	lr, [sp], #4
 8004894:	b004      	add	sp, #16
 8004896:	4770      	bx	lr
 8004898:	20000014 	.word	0x20000014

0800489c <putchar>:
 800489c:	4b03      	ldr	r3, [pc, #12]	; (80048ac <putchar+0x10>)
 800489e:	4601      	mov	r1, r0
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f004 bd12 	b.w	80092ce <_putc_r>
 80048aa:	bf00      	nop
 80048ac:	20000014 	.word	0x20000014

080048b0 <_puts_r>:
 80048b0:	b530      	push	{r4, r5, lr}
 80048b2:	4605      	mov	r5, r0
 80048b4:	b089      	sub	sp, #36	; 0x24
 80048b6:	4608      	mov	r0, r1
 80048b8:	460c      	mov	r4, r1
 80048ba:	f7fb fc49 	bl	8000150 <strlen>
 80048be:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <_puts_r+0x88>)
 80048c0:	e9cd 4004 	strd	r4, r0, [sp, #16]
 80048c4:	9306      	str	r3, [sp, #24]
 80048c6:	2301      	movs	r3, #1
 80048c8:	4418      	add	r0, r3
 80048ca:	9307      	str	r3, [sp, #28]
 80048cc:	ab04      	add	r3, sp, #16
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	2302      	movs	r3, #2
 80048d2:	9302      	str	r3, [sp, #8]
 80048d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80048d6:	9003      	str	r0, [sp, #12]
 80048d8:	68ac      	ldr	r4, [r5, #8]
 80048da:	b913      	cbnz	r3, 80048e2 <_puts_r+0x32>
 80048dc:	4628      	mov	r0, r5
 80048de:	f003 fc9b 	bl	8008218 <__sinit>
 80048e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048e4:	07db      	lsls	r3, r3, #31
 80048e6:	d405      	bmi.n	80048f4 <_puts_r+0x44>
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	0598      	lsls	r0, r3, #22
 80048ec:	d402      	bmi.n	80048f4 <_puts_r+0x44>
 80048ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f0:	f003 ff5a 	bl	80087a8 <__retarget_lock_acquire_recursive>
 80048f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f8:	0499      	lsls	r1, r3, #18
 80048fa:	d406      	bmi.n	800490a <_puts_r+0x5a>
 80048fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004900:	81a3      	strh	r3, [r4, #12]
 8004902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004908:	6663      	str	r3, [r4, #100]	; 0x64
 800490a:	4628      	mov	r0, r5
 800490c:	aa01      	add	r2, sp, #4
 800490e:	4621      	mov	r1, r4
 8004910:	f003 fdce 	bl	80084b0 <__sfvwrite_r>
 8004914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004916:	2800      	cmp	r0, #0
 8004918:	bf0c      	ite	eq
 800491a:	250a      	moveq	r5, #10
 800491c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8004920:	07da      	lsls	r2, r3, #31
 8004922:	d405      	bmi.n	8004930 <_puts_r+0x80>
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	059b      	lsls	r3, r3, #22
 8004928:	d402      	bmi.n	8004930 <_puts_r+0x80>
 800492a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800492c:	f003 ff3d 	bl	80087aa <__retarget_lock_release_recursive>
 8004930:	4628      	mov	r0, r5
 8004932:	b009      	add	sp, #36	; 0x24
 8004934:	bd30      	pop	{r4, r5, pc}
 8004936:	bf00      	nop
 8004938:	0800a120 	.word	0x0800a120

0800493c <puts>:
 800493c:	4b02      	ldr	r3, [pc, #8]	; (8004948 <puts+0xc>)
 800493e:	4601      	mov	r1, r0
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	f7ff bfb5 	b.w	80048b0 <_puts_r>
 8004946:	bf00      	nop
 8004948:	20000014 	.word	0x20000014

0800494c <sprintf>:
 800494c:	b40e      	push	{r1, r2, r3}
 800494e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004952:	b500      	push	{lr}
 8004954:	b09c      	sub	sp, #112	; 0x70
 8004956:	ab1d      	add	r3, sp, #116	; 0x74
 8004958:	9002      	str	r0, [sp, #8]
 800495a:	9006      	str	r0, [sp, #24]
 800495c:	9107      	str	r1, [sp, #28]
 800495e:	9104      	str	r1, [sp, #16]
 8004960:	4808      	ldr	r0, [pc, #32]	; (8004984 <sprintf+0x38>)
 8004962:	4909      	ldr	r1, [pc, #36]	; (8004988 <sprintf+0x3c>)
 8004964:	f853 2b04 	ldr.w	r2, [r3], #4
 8004968:	9105      	str	r1, [sp, #20]
 800496a:	6800      	ldr	r0, [r0, #0]
 800496c:	a902      	add	r1, sp, #8
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	f000 f80c 	bl	800498c <_svfprintf_r>
 8004974:	2200      	movs	r2, #0
 8004976:	9b02      	ldr	r3, [sp, #8]
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	b01c      	add	sp, #112	; 0x70
 800497c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004980:	b003      	add	sp, #12
 8004982:	4770      	bx	lr
 8004984:	20000014 	.word	0x20000014
 8004988:	ffff0208 	.word	0xffff0208

0800498c <_svfprintf_r>:
 800498c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004990:	b0d5      	sub	sp, #340	; 0x154
 8004992:	4689      	mov	r9, r1
 8004994:	4693      	mov	fp, r2
 8004996:	461e      	mov	r6, r3
 8004998:	9007      	str	r0, [sp, #28]
 800499a:	f003 fef5 	bl	8008788 <_localeconv_r>
 800499e:	6803      	ldr	r3, [r0, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	931a      	str	r3, [sp, #104]	; 0x68
 80049a4:	f7fb fbd4 	bl	8000150 <strlen>
 80049a8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80049ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80049ae:	0618      	lsls	r0, r3, #24
 80049b0:	d518      	bpl.n	80049e4 <_svfprintf_r+0x58>
 80049b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80049b6:	b9ab      	cbnz	r3, 80049e4 <_svfprintf_r+0x58>
 80049b8:	2140      	movs	r1, #64	; 0x40
 80049ba:	9807      	ldr	r0, [sp, #28]
 80049bc:	f003 ff62 	bl	8008884 <_malloc_r>
 80049c0:	f8c9 0000 	str.w	r0, [r9]
 80049c4:	f8c9 0010 	str.w	r0, [r9, #16]
 80049c8:	b948      	cbnz	r0, 80049de <_svfprintf_r+0x52>
 80049ca:	230c      	movs	r3, #12
 80049cc:	9a07      	ldr	r2, [sp, #28]
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049d4:	9310      	str	r3, [sp, #64]	; 0x40
 80049d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80049d8:	b055      	add	sp, #340	; 0x154
 80049da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049de:	2340      	movs	r3, #64	; 0x40
 80049e0:	f8c9 3014 	str.w	r3, [r9, #20]
 80049e4:	2300      	movs	r3, #0
 80049e6:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 80049ea:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 80049ee:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 80049f2:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80049f6:	ac2b      	add	r4, sp, #172	; 0xac
 80049f8:	9428      	str	r4, [sp, #160]	; 0xa0
 80049fa:	9308      	str	r3, [sp, #32]
 80049fc:	930d      	str	r3, [sp, #52]	; 0x34
 80049fe:	9316      	str	r3, [sp, #88]	; 0x58
 8004a00:	931d      	str	r3, [sp, #116]	; 0x74
 8004a02:	9310      	str	r3, [sp, #64]	; 0x40
 8004a04:	465d      	mov	r5, fp
 8004a06:	462b      	mov	r3, r5
 8004a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a0c:	b112      	cbz	r2, 8004a14 <_svfprintf_r+0x88>
 8004a0e:	2a25      	cmp	r2, #37	; 0x25
 8004a10:	f040 80e4 	bne.w	8004bdc <_svfprintf_r+0x250>
 8004a14:	ebb5 070b 	subs.w	r7, r5, fp
 8004a18:	d00e      	beq.n	8004a38 <_svfprintf_r+0xac>
 8004a1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004a1c:	e9c4 b700 	strd	fp, r7, [r4]
 8004a20:	443b      	add	r3, r7
 8004a22:	932a      	str	r3, [sp, #168]	; 0xa8
 8004a24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004a26:	3301      	adds	r3, #1
 8004a28:	2b07      	cmp	r3, #7
 8004a2a:	9329      	str	r3, [sp, #164]	; 0xa4
 8004a2c:	f300 80d8 	bgt.w	8004be0 <_svfprintf_r+0x254>
 8004a30:	3408      	adds	r4, #8
 8004a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a34:	443b      	add	r3, r7
 8004a36:	9310      	str	r3, [sp, #64]	; 0x40
 8004a38:	782b      	ldrb	r3, [r5, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f001 81a4 	beq.w	8005d88 <_svfprintf_r+0x13fc>
 8004a40:	1c6b      	adds	r3, r5, #1
 8004a42:	930e      	str	r3, [sp, #56]	; 0x38
 8004a44:	2300      	movs	r3, #0
 8004a46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004a4a:	469a      	mov	sl, r3
 8004a4c:	270a      	movs	r7, #10
 8004a4e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8004a52:	9311      	str	r3, [sp, #68]	; 0x44
 8004a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	930a      	str	r3, [sp, #40]	; 0x28
 8004a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	930e      	str	r3, [sp, #56]	; 0x38
 8004a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a62:	3b20      	subs	r3, #32
 8004a64:	2b5a      	cmp	r3, #90	; 0x5a
 8004a66:	f200 8614 	bhi.w	8005692 <_svfprintf_r+0xd06>
 8004a6a:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <_svfprintf_r+0xe4>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004c73 	.word	0x08004c73
 8004a74:	08005693 	.word	0x08005693
 8004a78:	08005693 	.word	0x08005693
 8004a7c:	08004c85 	.word	0x08004c85
 8004a80:	08005693 	.word	0x08005693
 8004a84:	08005693 	.word	0x08005693
 8004a88:	08005693 	.word	0x08005693
 8004a8c:	08004c39 	.word	0x08004c39
 8004a90:	08005693 	.word	0x08005693
 8004a94:	08005693 	.word	0x08005693
 8004a98:	08004c8b 	.word	0x08004c8b
 8004a9c:	08004ca1 	.word	0x08004ca1
 8004aa0:	08005693 	.word	0x08005693
 8004aa4:	08004c9b 	.word	0x08004c9b
 8004aa8:	08004ca5 	.word	0x08004ca5
 8004aac:	08005693 	.word	0x08005693
 8004ab0:	08004cd7 	.word	0x08004cd7
 8004ab4:	08004cdd 	.word	0x08004cdd
 8004ab8:	08004cdd 	.word	0x08004cdd
 8004abc:	08004cdd 	.word	0x08004cdd
 8004ac0:	08004cdd 	.word	0x08004cdd
 8004ac4:	08004cdd 	.word	0x08004cdd
 8004ac8:	08004cdd 	.word	0x08004cdd
 8004acc:	08004cdd 	.word	0x08004cdd
 8004ad0:	08004cdd 	.word	0x08004cdd
 8004ad4:	08004cdd 	.word	0x08004cdd
 8004ad8:	08005693 	.word	0x08005693
 8004adc:	08005693 	.word	0x08005693
 8004ae0:	08005693 	.word	0x08005693
 8004ae4:	08005693 	.word	0x08005693
 8004ae8:	08005693 	.word	0x08005693
 8004aec:	08005693 	.word	0x08005693
 8004af0:	08005693 	.word	0x08005693
 8004af4:	08004dcb 	.word	0x08004dcb
 8004af8:	08005693 	.word	0x08005693
 8004afc:	08004d37 	.word	0x08004d37
 8004b00:	08004d59 	.word	0x08004d59
 8004b04:	08004dcb 	.word	0x08004dcb
 8004b08:	08004dcb 	.word	0x08004dcb
 8004b0c:	08004dcb 	.word	0x08004dcb
 8004b10:	08005693 	.word	0x08005693
 8004b14:	08005693 	.word	0x08005693
 8004b18:	08005693 	.word	0x08005693
 8004b1c:	08005693 	.word	0x08005693
 8004b20:	08004cfd 	.word	0x08004cfd
 8004b24:	08005693 	.word	0x08005693
 8004b28:	08005693 	.word	0x08005693
 8004b2c:	08005299 	.word	0x08005299
 8004b30:	08005693 	.word	0x08005693
 8004b34:	08005693 	.word	0x08005693
 8004b38:	08005693 	.word	0x08005693
 8004b3c:	08005325 	.word	0x08005325
 8004b40:	08005693 	.word	0x08005693
 8004b44:	08005501 	.word	0x08005501
 8004b48:	08005693 	.word	0x08005693
 8004b4c:	08005693 	.word	0x08005693
 8004b50:	08004bf9 	.word	0x08004bf9
 8004b54:	08005693 	.word	0x08005693
 8004b58:	08005693 	.word	0x08005693
 8004b5c:	08005693 	.word	0x08005693
 8004b60:	08005693 	.word	0x08005693
 8004b64:	08005693 	.word	0x08005693
 8004b68:	08005693 	.word	0x08005693
 8004b6c:	08005693 	.word	0x08005693
 8004b70:	08005693 	.word	0x08005693
 8004b74:	08004dcb 	.word	0x08004dcb
 8004b78:	08005693 	.word	0x08005693
 8004b7c:	08004d37 	.word	0x08004d37
 8004b80:	08004d5d 	.word	0x08004d5d
 8004b84:	08004dcb 	.word	0x08004dcb
 8004b88:	08004dcb 	.word	0x08004dcb
 8004b8c:	08004dcb 	.word	0x08004dcb
 8004b90:	08004d03 	.word	0x08004d03
 8004b94:	08004d5d 	.word	0x08004d5d
 8004b98:	08004d2b 	.word	0x08004d2b
 8004b9c:	08005693 	.word	0x08005693
 8004ba0:	08004d1d 	.word	0x08004d1d
 8004ba4:	08005693 	.word	0x08005693
 8004ba8:	08005253 	.word	0x08005253
 8004bac:	0800529d 	.word	0x0800529d
 8004bb0:	08005305 	.word	0x08005305
 8004bb4:	08004d2b 	.word	0x08004d2b
 8004bb8:	08005693 	.word	0x08005693
 8004bbc:	08005325 	.word	0x08005325
 8004bc0:	08004a55 	.word	0x08004a55
 8004bc4:	08005505 	.word	0x08005505
 8004bc8:	08005693 	.word	0x08005693
 8004bcc:	08005693 	.word	0x08005693
 8004bd0:	08005543 	.word	0x08005543
 8004bd4:	08005693 	.word	0x08005693
 8004bd8:	08004a55 	.word	0x08004a55
 8004bdc:	461d      	mov	r5, r3
 8004bde:	e712      	b.n	8004a06 <_svfprintf_r+0x7a>
 8004be0:	aa28      	add	r2, sp, #160	; 0xa0
 8004be2:	4649      	mov	r1, r9
 8004be4:	9807      	ldr	r0, [sp, #28]
 8004be6:	f004 fded 	bl	80097c4 <__ssprint_r>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	f040 8157 	bne.w	8004e9e <_svfprintf_r+0x512>
 8004bf0:	ac2b      	add	r4, sp, #172	; 0xac
 8004bf2:	e71e      	b.n	8004a32 <_svfprintf_r+0xa6>
 8004bf4:	461e      	mov	r6, r3
 8004bf6:	e72d      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004bf8:	4bad      	ldr	r3, [pc, #692]	; (8004eb0 <_svfprintf_r+0x524>)
 8004bfa:	f01a 0f20 	tst.w	sl, #32
 8004bfe:	931c      	str	r3, [sp, #112]	; 0x70
 8004c00:	f000 84a2 	beq.w	8005548 <_svfprintf_r+0xbbc>
 8004c04:	3607      	adds	r6, #7
 8004c06:	f026 0607 	bic.w	r6, r6, #7
 8004c0a:	f106 0308 	add.w	r3, r6, #8
 8004c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8004c10:	e9d6 6700 	ldrd	r6, r7, [r6]
 8004c14:	f01a 0f01 	tst.w	sl, #1
 8004c18:	d00a      	beq.n	8004c30 <_svfprintf_r+0x2a4>
 8004c1a:	ea56 0307 	orrs.w	r3, r6, r7
 8004c1e:	d007      	beq.n	8004c30 <_svfprintf_r+0x2a4>
 8004c20:	2330      	movs	r3, #48	; 0x30
 8004c22:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8004c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c28:	f04a 0a02 	orr.w	sl, sl, #2
 8004c2c:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8004c30:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8004c34:	2302      	movs	r3, #2
 8004c36:	e33f      	b.n	80052b8 <_svfprintf_r+0x92c>
 8004c38:	9807      	ldr	r0, [sp, #28]
 8004c3a:	f003 fda5 	bl	8008788 <_localeconv_r>
 8004c3e:	6843      	ldr	r3, [r0, #4]
 8004c40:	4618      	mov	r0, r3
 8004c42:	931d      	str	r3, [sp, #116]	; 0x74
 8004c44:	f7fb fa84 	bl	8000150 <strlen>
 8004c48:	9016      	str	r0, [sp, #88]	; 0x58
 8004c4a:	9807      	ldr	r0, [sp, #28]
 8004c4c:	f003 fd9c 	bl	8008788 <_localeconv_r>
 8004c50:	6883      	ldr	r3, [r0, #8]
 8004c52:	930d      	str	r3, [sp, #52]	; 0x34
 8004c54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f43f aefc 	beq.w	8004a54 <_svfprintf_r+0xc8>
 8004c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f43f aef8 	beq.w	8004a54 <_svfprintf_r+0xc8>
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f43f aef4 	beq.w	8004a54 <_svfprintf_r+0xc8>
 8004c6c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8004c70:	e6f0      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004c72:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f47f aeec 	bne.w	8004a54 <_svfprintf_r+0xc8>
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8004c82:	e6e7      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004c84:	f04a 0a01 	orr.w	sl, sl, #1
 8004c88:	e6e4      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004c8a:	6832      	ldr	r2, [r6, #0]
 8004c8c:	1d33      	adds	r3, r6, #4
 8004c8e:	2a00      	cmp	r2, #0
 8004c90:	9211      	str	r2, [sp, #68]	; 0x44
 8004c92:	daaf      	bge.n	8004bf4 <_svfprintf_r+0x268>
 8004c94:	461e      	mov	r6, r3
 8004c96:	4252      	negs	r2, r2
 8004c98:	9211      	str	r2, [sp, #68]	; 0x44
 8004c9a:	f04a 0a04 	orr.w	sl, sl, #4
 8004c9e:	e6d9      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004ca0:	232b      	movs	r3, #43	; 0x2b
 8004ca2:	e7ec      	b.n	8004c7e <_svfprintf_r+0x2f2>
 8004ca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ca8:	7812      	ldrb	r2, [r2, #0]
 8004caa:	3301      	adds	r3, #1
 8004cac:	2a2a      	cmp	r2, #42	; 0x2a
 8004cae:	920a      	str	r2, [sp, #40]	; 0x28
 8004cb0:	d10f      	bne.n	8004cd2 <_svfprintf_r+0x346>
 8004cb2:	6835      	ldr	r5, [r6, #0]
 8004cb4:	930e      	str	r3, [sp, #56]	; 0x38
 8004cb6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8004cba:	3604      	adds	r6, #4
 8004cbc:	e6ca      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004cbe:	fb07 2505 	mla	r5, r7, r5, r2
 8004cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cc6:	920a      	str	r2, [sp, #40]	; 0x28
 8004cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cca:	3a30      	subs	r2, #48	; 0x30
 8004ccc:	2a09      	cmp	r2, #9
 8004cce:	d9f6      	bls.n	8004cbe <_svfprintf_r+0x332>
 8004cd0:	e6c5      	b.n	8004a5e <_svfprintf_r+0xd2>
 8004cd2:	2500      	movs	r5, #0
 8004cd4:	e7f8      	b.n	8004cc8 <_svfprintf_r+0x33c>
 8004cd6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8004cda:	e6bb      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004cdc:	2200      	movs	r2, #0
 8004cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ce0:	9211      	str	r2, [sp, #68]	; 0x44
 8004ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ce4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004ce6:	3a30      	subs	r2, #48	; 0x30
 8004ce8:	fb07 2201 	mla	r2, r7, r1, r2
 8004cec:	9211      	str	r2, [sp, #68]	; 0x44
 8004cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cf2:	920a      	str	r2, [sp, #40]	; 0x28
 8004cf4:	3a30      	subs	r2, #48	; 0x30
 8004cf6:	2a09      	cmp	r2, #9
 8004cf8:	d9f3      	bls.n	8004ce2 <_svfprintf_r+0x356>
 8004cfa:	e6b0      	b.n	8004a5e <_svfprintf_r+0xd2>
 8004cfc:	f04a 0a08 	orr.w	sl, sl, #8
 8004d00:	e6a8      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b68      	cmp	r3, #104	; 0x68
 8004d08:	bf01      	itttt	eq
 8004d0a:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8004d0c:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8004d10:	3301      	addeq	r3, #1
 8004d12:	930e      	streq	r3, [sp, #56]	; 0x38
 8004d14:	bf18      	it	ne
 8004d16:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8004d1a:	e69b      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b6c      	cmp	r3, #108	; 0x6c
 8004d22:	d105      	bne.n	8004d30 <_svfprintf_r+0x3a4>
 8004d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d26:	3301      	adds	r3, #1
 8004d28:	930e      	str	r3, [sp, #56]	; 0x38
 8004d2a:	f04a 0a20 	orr.w	sl, sl, #32
 8004d2e:	e691      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004d30:	f04a 0a10 	orr.w	sl, sl, #16
 8004d34:	e68e      	b.n	8004a54 <_svfprintf_r+0xc8>
 8004d36:	2000      	movs	r0, #0
 8004d38:	1d33      	adds	r3, r6, #4
 8004d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8004d3c:	6833      	ldr	r3, [r6, #0]
 8004d3e:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8004d42:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8004d46:	4680      	mov	r8, r0
 8004d48:	2501      	movs	r5, #1
 8004d4a:	9012      	str	r0, [sp, #72]	; 0x48
 8004d4c:	4607      	mov	r7, r0
 8004d4e:	900b      	str	r0, [sp, #44]	; 0x2c
 8004d50:	4606      	mov	r6, r0
 8004d52:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8004d56:	e2fe      	b.n	8005356 <_svfprintf_r+0x9ca>
 8004d58:	f04a 0a10 	orr.w	sl, sl, #16
 8004d5c:	f01a 0f20 	tst.w	sl, #32
 8004d60:	d020      	beq.n	8004da4 <_svfprintf_r+0x418>
 8004d62:	3607      	adds	r6, #7
 8004d64:	f026 0607 	bic.w	r6, r6, #7
 8004d68:	f106 0308 	add.w	r3, r6, #8
 8004d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8004d6e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	f177 0300 	sbcs.w	r3, r7, #0
 8004d78:	da05      	bge.n	8004d86 <_svfprintf_r+0x3fa>
 8004d7a:	232d      	movs	r3, #45	; 0x2d
 8004d7c:	4276      	negs	r6, r6
 8004d7e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004d82:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8004d86:	1c6b      	adds	r3, r5, #1
 8004d88:	f040 83f1 	bne.w	800556e <_svfprintf_r+0xbe2>
 8004d8c:	2f00      	cmp	r7, #0
 8004d8e:	bf08      	it	eq
 8004d90:	2e0a      	cmpeq	r6, #10
 8004d92:	f080 8423 	bcs.w	80055dc <_svfprintf_r+0xc50>
 8004d96:	3630      	adds	r6, #48	; 0x30
 8004d98:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8004d9c:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 8004da0:	f000 bc08 	b.w	80055b4 <_svfprintf_r+0xc28>
 8004da4:	1d33      	adds	r3, r6, #4
 8004da6:	f01a 0f10 	tst.w	sl, #16
 8004daa:	930c      	str	r3, [sp, #48]	; 0x30
 8004dac:	d002      	beq.n	8004db4 <_svfprintf_r+0x428>
 8004dae:	6836      	ldr	r6, [r6, #0]
 8004db0:	17f7      	asrs	r7, r6, #31
 8004db2:	e7de      	b.n	8004d72 <_svfprintf_r+0x3e6>
 8004db4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8004db8:	6836      	ldr	r6, [r6, #0]
 8004dba:	d001      	beq.n	8004dc0 <_svfprintf_r+0x434>
 8004dbc:	b236      	sxth	r6, r6
 8004dbe:	e7f7      	b.n	8004db0 <_svfprintf_r+0x424>
 8004dc0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004dc4:	bf18      	it	ne
 8004dc6:	b276      	sxtbne	r6, r6
 8004dc8:	e7f2      	b.n	8004db0 <_svfprintf_r+0x424>
 8004dca:	3607      	adds	r6, #7
 8004dcc:	f026 0607 	bic.w	r6, r6, #7
 8004dd0:	f106 0308 	add.w	r3, r6, #8
 8004dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8004dd6:	6833      	ldr	r3, [r6, #0]
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ddc:	9314      	str	r3, [sp, #80]	; 0x50
 8004dde:	6873      	ldr	r3, [r6, #4]
 8004de0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004de2:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8004de6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004de8:	4638      	mov	r0, r7
 8004dea:	4b32      	ldr	r3, [pc, #200]	; (8004eb4 <_svfprintf_r+0x528>)
 8004dec:	4631      	mov	r1, r6
 8004dee:	f7fb fe0d 	bl	8000a0c <__aeabi_dcmpun>
 8004df2:	bb00      	cbnz	r0, 8004e36 <_svfprintf_r+0x4aa>
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df8:	4b2e      	ldr	r3, [pc, #184]	; (8004eb4 <_svfprintf_r+0x528>)
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	f7fb fde7 	bl	80009d0 <__aeabi_dcmple>
 8004e02:	b9c0      	cbnz	r0, 8004e36 <_svfprintf_r+0x4aa>
 8004e04:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8004e08:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8004e0c:	f7fb fdd6 	bl	80009bc <__aeabi_dcmplt>
 8004e10:	b110      	cbz	r0, 8004e18 <_svfprintf_r+0x48c>
 8004e12:	232d      	movs	r3, #45	; 0x2d
 8004e14:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8004e18:	4a27      	ldr	r2, [pc, #156]	; (8004eb8 <_svfprintf_r+0x52c>)
 8004e1a:	4b28      	ldr	r3, [pc, #160]	; (8004ebc <_svfprintf_r+0x530>)
 8004e1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e1e:	f04f 0800 	mov.w	r8, #0
 8004e22:	2947      	cmp	r1, #71	; 0x47
 8004e24:	bfcc      	ite	gt
 8004e26:	4693      	movgt	fp, r2
 8004e28:	469b      	movle	fp, r3
 8004e2a:	2503      	movs	r5, #3
 8004e2c:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8004e30:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8004e34:	e3c4      	b.n	80055c0 <_svfprintf_r+0xc34>
 8004e36:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8004e3a:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8004e3e:	f7fb fde5 	bl	8000a0c <__aeabi_dcmpun>
 8004e42:	4680      	mov	r8, r0
 8004e44:	b140      	cbz	r0, 8004e58 <_svfprintf_r+0x4cc>
 8004e46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e48:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <_svfprintf_r+0x534>)
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bfbc      	itt	lt
 8004e4e:	232d      	movlt	r3, #45	; 0x2d
 8004e50:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <_svfprintf_r+0x538>)
 8004e56:	e7e1      	b.n	8004e1c <_svfprintf_r+0x490>
 8004e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e5a:	f023 0320 	bic.w	r3, r3, #32
 8004e5e:	2b41      	cmp	r3, #65	; 0x41
 8004e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e62:	d131      	bne.n	8004ec8 <_svfprintf_r+0x53c>
 8004e64:	2330      	movs	r3, #48	; 0x30
 8004e66:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8004e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e6c:	f04a 0a02 	orr.w	sl, sl, #2
 8004e70:	2b61      	cmp	r3, #97	; 0x61
 8004e72:	bf14      	ite	ne
 8004e74:	2358      	movne	r3, #88	; 0x58
 8004e76:	2378      	moveq	r3, #120	; 0x78
 8004e78:	2d63      	cmp	r5, #99	; 0x63
 8004e7a:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8004e7e:	f340 8111 	ble.w	80050a4 <_svfprintf_r+0x718>
 8004e82:	1c69      	adds	r1, r5, #1
 8004e84:	9807      	ldr	r0, [sp, #28]
 8004e86:	f003 fcfd 	bl	8008884 <_malloc_r>
 8004e8a:	4683      	mov	fp, r0
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	f040 810c 	bne.w	80050aa <_svfprintf_r+0x71e>
 8004e92:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9a:	f8a9 300c 	strh.w	r3, [r9, #12]
 8004e9e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004ea2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ea8:	bf18      	it	ne
 8004eaa:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8004eae:	e591      	b.n	80049d4 <_svfprintf_r+0x48>
 8004eb0:	0800a143 	.word	0x0800a143
 8004eb4:	7fefffff 	.word	0x7fefffff
 8004eb8:	0800a126 	.word	0x0800a126
 8004ebc:	0800a122 	.word	0x0800a122
 8004ec0:	0800a12e 	.word	0x0800a12e
 8004ec4:	0800a12a 	.word	0x0800a12a
 8004ec8:	1c69      	adds	r1, r5, #1
 8004eca:	f000 80f0 	beq.w	80050ae <_svfprintf_r+0x722>
 8004ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed0:	2b47      	cmp	r3, #71	; 0x47
 8004ed2:	d102      	bne.n	8004eda <_svfprintf_r+0x54e>
 8004ed4:	2d00      	cmp	r5, #0
 8004ed6:	f000 80ec 	beq.w	80050b2 <_svfprintf_r+0x726>
 8004eda:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8004ede:	9315      	str	r3, [sp, #84]	; 0x54
 8004ee0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ee2:	1e1e      	subs	r6, r3, #0
 8004ee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ee6:	9308      	str	r3, [sp, #32]
 8004ee8:	bfb7      	itett	lt
 8004eea:	4633      	movlt	r3, r6
 8004eec:	2300      	movge	r3, #0
 8004eee:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 8004ef2:	232d      	movlt	r3, #45	; 0x2d
 8004ef4:	9319      	str	r3, [sp, #100]	; 0x64
 8004ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ef8:	2b41      	cmp	r3, #65	; 0x41
 8004efa:	f040 80eb 	bne.w	80050d4 <_svfprintf_r+0x748>
 8004efe:	aa22      	add	r2, sp, #136	; 0x88
 8004f00:	9808      	ldr	r0, [sp, #32]
 8004f02:	4631      	mov	r1, r6
 8004f04:	f004 fbc4 	bl	8009690 <frexp>
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004f0e:	f7fb fae3 	bl	80004d8 <__aeabi_dmul>
 8004f12:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8004f16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f1a:	f7fb fd45 	bl	80009a8 <__aeabi_dcmpeq>
 8004f1e:	b108      	cbz	r0, 8004f24 <_svfprintf_r+0x598>
 8004f20:	2301      	movs	r3, #1
 8004f22:	9322      	str	r3, [sp, #136]	; 0x88
 8004f24:	4fac      	ldr	r7, [pc, #688]	; (80051d8 <_svfprintf_r+0x84c>)
 8004f26:	4bad      	ldr	r3, [pc, #692]	; (80051dc <_svfprintf_r+0x850>)
 8004f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f2a:	465e      	mov	r6, fp
 8004f2c:	2a61      	cmp	r2, #97	; 0x61
 8004f2e:	bf08      	it	eq
 8004f30:	461f      	moveq	r7, r3
 8004f32:	9712      	str	r7, [sp, #72]	; 0x48
 8004f34:	1e6f      	subs	r7, r5, #1
 8004f36:	2200      	movs	r2, #0
 8004f38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f3c:	4ba8      	ldr	r3, [pc, #672]	; (80051e0 <_svfprintf_r+0x854>)
 8004f3e:	f7fb facb 	bl	80004d8 <__aeabi_dmul>
 8004f42:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f46:	f7fb fd77 	bl	8000a38 <__aeabi_d2iz>
 8004f4a:	901e      	str	r0, [sp, #120]	; 0x78
 8004f4c:	f7fb fa5a 	bl	8000404 <__aeabi_i2d>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f58:	f7fb f906 	bl	8000168 <__aeabi_dsub>
 8004f5c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004f5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f64:	5c9b      	ldrb	r3, [r3, r2]
 8004f66:	1c7a      	adds	r2, r7, #1
 8004f68:	f806 3b01 	strb.w	r3, [r6], #1
 8004f6c:	971f      	str	r7, [sp, #124]	; 0x7c
 8004f6e:	d006      	beq.n	8004f7e <_svfprintf_r+0x5f2>
 8004f70:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8004f74:	3f01      	subs	r7, #1
 8004f76:	f7fb fd17 	bl	80009a8 <__aeabi_dcmpeq>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d0db      	beq.n	8004f36 <_svfprintf_r+0x5aa>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f84:	4b97      	ldr	r3, [pc, #604]	; (80051e4 <_svfprintf_r+0x858>)
 8004f86:	f7fb fd37 	bl	80009f8 <__aeabi_dcmpgt>
 8004f8a:	b960      	cbnz	r0, 8004fa6 <_svfprintf_r+0x61a>
 8004f8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f90:	2200      	movs	r2, #0
 8004f92:	4b94      	ldr	r3, [pc, #592]	; (80051e4 <_svfprintf_r+0x858>)
 8004f94:	f7fb fd08 	bl	80009a8 <__aeabi_dcmpeq>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	f000 8096 	beq.w	80050ca <_svfprintf_r+0x73e>
 8004f9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004fa0:	07db      	lsls	r3, r3, #31
 8004fa2:	f140 8092 	bpl.w	80050ca <_svfprintf_r+0x73e>
 8004fa6:	2030      	movs	r0, #48	; 0x30
 8004fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004faa:	9626      	str	r6, [sp, #152]	; 0x98
 8004fac:	7bd9      	ldrb	r1, [r3, #15]
 8004fae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004fb0:	1e53      	subs	r3, r2, #1
 8004fb2:	9326      	str	r3, [sp, #152]	; 0x98
 8004fb4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	d07d      	beq.n	80050b8 <_svfprintf_r+0x72c>
 8004fbc:	2b39      	cmp	r3, #57	; 0x39
 8004fbe:	bf0b      	itete	eq
 8004fc0:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 8004fc2:	3301      	addne	r3, #1
 8004fc4:	7a9b      	ldrbeq	r3, [r3, #10]
 8004fc6:	b2db      	uxtbne	r3, r3
 8004fc8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004fcc:	4633      	mov	r3, r6
 8004fce:	eba3 030b 	sub.w	r3, r3, fp
 8004fd2:	9308      	str	r3, [sp, #32]
 8004fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8004fd8:	2b47      	cmp	r3, #71	; 0x47
 8004fda:	f040 80c7 	bne.w	800516c <_svfprintf_r+0x7e0>
 8004fde:	1cf7      	adds	r7, r6, #3
 8004fe0:	db02      	blt.n	8004fe8 <_svfprintf_r+0x65c>
 8004fe2:	42b5      	cmp	r5, r6
 8004fe4:	f280 80ed 	bge.w	80051c2 <_svfprintf_r+0x836>
 8004fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fea:	3b02      	subs	r3, #2
 8004fec:	930a      	str	r3, [sp, #40]	; 0x28
 8004fee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ff0:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8004ff4:	f021 0120 	bic.w	r1, r1, #32
 8004ff8:	2941      	cmp	r1, #65	; 0x41
 8004ffa:	bf08      	it	eq
 8004ffc:	320f      	addeq	r2, #15
 8004ffe:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 8005002:	bf06      	itte	eq
 8005004:	b2d2      	uxtbeq	r2, r2
 8005006:	2101      	moveq	r1, #1
 8005008:	2100      	movne	r1, #0
 800500a:	2b00      	cmp	r3, #0
 800500c:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8005010:	bfb4      	ite	lt
 8005012:	222d      	movlt	r2, #45	; 0x2d
 8005014:	222b      	movge	r2, #43	; 0x2b
 8005016:	9322      	str	r3, [sp, #136]	; 0x88
 8005018:	bfb8      	it	lt
 800501a:	f1c6 0301 	rsblt	r3, r6, #1
 800501e:	2b09      	cmp	r3, #9
 8005020:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8005024:	f340 80b9 	ble.w	800519a <_svfprintf_r+0x80e>
 8005028:	250a      	movs	r5, #10
 800502a:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 800502e:	fb93 f0f5 	sdiv	r0, r3, r5
 8005032:	fb05 3310 	mls	r3, r5, r0, r3
 8005036:	2809      	cmp	r0, #9
 8005038:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800503c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005040:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8005044:	4603      	mov	r3, r0
 8005046:	f300 80a1 	bgt.w	800518c <_svfprintf_r+0x800>
 800504a:	3330      	adds	r3, #48	; 0x30
 800504c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005050:	3a02      	subs	r2, #2
 8005052:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8005056:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 800505a:	4282      	cmp	r2, r0
 800505c:	4619      	mov	r1, r3
 800505e:	f0c0 8097 	bcc.w	8005190 <_svfprintf_r+0x804>
 8005062:	9a08      	ldr	r2, [sp, #32]
 8005064:	ab24      	add	r3, sp, #144	; 0x90
 8005066:	1acb      	subs	r3, r1, r3
 8005068:	2a01      	cmp	r2, #1
 800506a:	931b      	str	r3, [sp, #108]	; 0x6c
 800506c:	eb03 0502 	add.w	r5, r3, r2
 8005070:	dc02      	bgt.n	8005078 <_svfprintf_r+0x6ec>
 8005072:	f01a 0f01 	tst.w	sl, #1
 8005076:	d001      	beq.n	800507c <_svfprintf_r+0x6f0>
 8005078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800507a:	441d      	add	r5, r3
 800507c:	2700      	movs	r7, #0
 800507e:	463e      	mov	r6, r7
 8005080:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8005084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005088:	9315      	str	r3, [sp, #84]	; 0x54
 800508a:	970b      	str	r7, [sp, #44]	; 0x2c
 800508c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 830b 	beq.w	80056aa <_svfprintf_r+0xd1e>
 8005094:	232d      	movs	r3, #45	; 0x2d
 8005096:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800509a:	2300      	movs	r3, #0
 800509c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80050a0:	9312      	str	r3, [sp, #72]	; 0x48
 80050a2:	e158      	b.n	8005356 <_svfprintf_r+0x9ca>
 80050a4:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 80050a8:	e717      	b.n	8004eda <_svfprintf_r+0x54e>
 80050aa:	4680      	mov	r8, r0
 80050ac:	e715      	b.n	8004eda <_svfprintf_r+0x54e>
 80050ae:	2506      	movs	r5, #6
 80050b0:	e713      	b.n	8004eda <_svfprintf_r+0x54e>
 80050b2:	46a8      	mov	r8, r5
 80050b4:	2501      	movs	r5, #1
 80050b6:	e710      	b.n	8004eda <_svfprintf_r+0x54e>
 80050b8:	f802 0c01 	strb.w	r0, [r2, #-1]
 80050bc:	e777      	b.n	8004fae <_svfprintf_r+0x622>
 80050be:	f803 1b01 	strb.w	r1, [r3], #1
 80050c2:	1af2      	subs	r2, r6, r3
 80050c4:	2a00      	cmp	r2, #0
 80050c6:	dafa      	bge.n	80050be <_svfprintf_r+0x732>
 80050c8:	e781      	b.n	8004fce <_svfprintf_r+0x642>
 80050ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80050cc:	4633      	mov	r3, r6
 80050ce:	2130      	movs	r1, #48	; 0x30
 80050d0:	4416      	add	r6, r2
 80050d2:	e7f6      	b.n	80050c2 <_svfprintf_r+0x736>
 80050d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050d6:	2b46      	cmp	r3, #70	; 0x46
 80050d8:	d004      	beq.n	80050e4 <_svfprintf_r+0x758>
 80050da:	2b45      	cmp	r3, #69	; 0x45
 80050dc:	d140      	bne.n	8005160 <_svfprintf_r+0x7d4>
 80050de:	1c6f      	adds	r7, r5, #1
 80050e0:	2302      	movs	r3, #2
 80050e2:	e001      	b.n	80050e8 <_svfprintf_r+0x75c>
 80050e4:	462f      	mov	r7, r5
 80050e6:	2303      	movs	r3, #3
 80050e8:	aa26      	add	r2, sp, #152	; 0x98
 80050ea:	9204      	str	r2, [sp, #16]
 80050ec:	aa23      	add	r2, sp, #140	; 0x8c
 80050ee:	9203      	str	r2, [sp, #12]
 80050f0:	aa22      	add	r2, sp, #136	; 0x88
 80050f2:	e9cd 7201 	strd	r7, r2, [sp, #4]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	9a08      	ldr	r2, [sp, #32]
 80050fa:	4633      	mov	r3, r6
 80050fc:	9807      	ldr	r0, [sp, #28]
 80050fe:	f002 f9ef 	bl	80074e0 <_dtoa_r>
 8005102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005104:	4683      	mov	fp, r0
 8005106:	2b47      	cmp	r3, #71	; 0x47
 8005108:	d102      	bne.n	8005110 <_svfprintf_r+0x784>
 800510a:	f01a 0f01 	tst.w	sl, #1
 800510e:	d02b      	beq.n	8005168 <_svfprintf_r+0x7dc>
 8005110:	eb0b 0307 	add.w	r3, fp, r7
 8005114:	9312      	str	r3, [sp, #72]	; 0x48
 8005116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005118:	2b46      	cmp	r3, #70	; 0x46
 800511a:	d111      	bne.n	8005140 <_svfprintf_r+0x7b4>
 800511c:	f89b 3000 	ldrb.w	r3, [fp]
 8005120:	2b30      	cmp	r3, #48	; 0x30
 8005122:	d109      	bne.n	8005138 <_svfprintf_r+0x7ac>
 8005124:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8005128:	9808      	ldr	r0, [sp, #32]
 800512a:	4631      	mov	r1, r6
 800512c:	f7fb fc3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005130:	b910      	cbnz	r0, 8005138 <_svfprintf_r+0x7ac>
 8005132:	f1c7 0701 	rsb	r7, r7, #1
 8005136:	9722      	str	r7, [sp, #136]	; 0x88
 8005138:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800513a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800513c:	441a      	add	r2, r3
 800513e:	9212      	str	r2, [sp, #72]	; 0x48
 8005140:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8005144:	9808      	ldr	r0, [sp, #32]
 8005146:	4631      	mov	r1, r6
 8005148:	f7fb fc2e 	bl	80009a8 <__aeabi_dcmpeq>
 800514c:	b950      	cbnz	r0, 8005164 <_svfprintf_r+0x7d8>
 800514e:	2230      	movs	r2, #48	; 0x30
 8005150:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005152:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005154:	4299      	cmp	r1, r3
 8005156:	d907      	bls.n	8005168 <_svfprintf_r+0x7dc>
 8005158:	1c59      	adds	r1, r3, #1
 800515a:	9126      	str	r1, [sp, #152]	; 0x98
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e7f7      	b.n	8005150 <_svfprintf_r+0x7c4>
 8005160:	462f      	mov	r7, r5
 8005162:	e7bd      	b.n	80050e0 <_svfprintf_r+0x754>
 8005164:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005166:	9326      	str	r3, [sp, #152]	; 0x98
 8005168:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800516a:	e730      	b.n	8004fce <_svfprintf_r+0x642>
 800516c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800516e:	2b46      	cmp	r3, #70	; 0x46
 8005170:	f47f af3d 	bne.w	8004fee <_svfprintf_r+0x662>
 8005174:	2e00      	cmp	r6, #0
 8005176:	dd1d      	ble.n	80051b4 <_svfprintf_r+0x828>
 8005178:	b915      	cbnz	r5, 8005180 <_svfprintf_r+0x7f4>
 800517a:	f01a 0f01 	tst.w	sl, #1
 800517e:	d03d      	beq.n	80051fc <_svfprintf_r+0x870>
 8005180:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005182:	18f3      	adds	r3, r6, r3
 8005184:	441d      	add	r5, r3
 8005186:	2366      	movs	r3, #102	; 0x66
 8005188:	930a      	str	r3, [sp, #40]	; 0x28
 800518a:	e03c      	b.n	8005206 <_svfprintf_r+0x87a>
 800518c:	460a      	mov	r2, r1
 800518e:	e74e      	b.n	800502e <_svfprintf_r+0x6a2>
 8005190:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005194:	f803 1b01 	strb.w	r1, [r3], #1
 8005198:	e75f      	b.n	800505a <_svfprintf_r+0x6ce>
 800519a:	b941      	cbnz	r1, 80051ae <_svfprintf_r+0x822>
 800519c:	2230      	movs	r2, #48	; 0x30
 800519e:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 80051a2:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 80051a6:	3330      	adds	r3, #48	; 0x30
 80051a8:	1c51      	adds	r1, r2, #1
 80051aa:	7013      	strb	r3, [r2, #0]
 80051ac:	e759      	b.n	8005062 <_svfprintf_r+0x6d6>
 80051ae:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 80051b2:	e7f8      	b.n	80051a6 <_svfprintf_r+0x81a>
 80051b4:	b915      	cbnz	r5, 80051bc <_svfprintf_r+0x830>
 80051b6:	f01a 0f01 	tst.w	sl, #1
 80051ba:	d021      	beq.n	8005200 <_svfprintf_r+0x874>
 80051bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051be:	3301      	adds	r3, #1
 80051c0:	e7e0      	b.n	8005184 <_svfprintf_r+0x7f8>
 80051c2:	9b08      	ldr	r3, [sp, #32]
 80051c4:	42b3      	cmp	r3, r6
 80051c6:	dc0f      	bgt.n	80051e8 <_svfprintf_r+0x85c>
 80051c8:	f01a 0f01 	tst.w	sl, #1
 80051cc:	d02e      	beq.n	800522c <_svfprintf_r+0x8a0>
 80051ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051d0:	18f5      	adds	r5, r6, r3
 80051d2:	2367      	movs	r3, #103	; 0x67
 80051d4:	e7d8      	b.n	8005188 <_svfprintf_r+0x7fc>
 80051d6:	bf00      	nop
 80051d8:	0800a143 	.word	0x0800a143
 80051dc:	0800a132 	.word	0x0800a132
 80051e0:	40300000 	.word	0x40300000
 80051e4:	3fe00000 	.word	0x3fe00000
 80051e8:	9b08      	ldr	r3, [sp, #32]
 80051ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051ec:	2e00      	cmp	r6, #0
 80051ee:	eb03 0502 	add.w	r5, r3, r2
 80051f2:	dcee      	bgt.n	80051d2 <_svfprintf_r+0x846>
 80051f4:	f1c6 0301 	rsb	r3, r6, #1
 80051f8:	441d      	add	r5, r3
 80051fa:	e7ea      	b.n	80051d2 <_svfprintf_r+0x846>
 80051fc:	4635      	mov	r5, r6
 80051fe:	e7c2      	b.n	8005186 <_svfprintf_r+0x7fa>
 8005200:	2366      	movs	r3, #102	; 0x66
 8005202:	2501      	movs	r5, #1
 8005204:	930a      	str	r3, [sp, #40]	; 0x28
 8005206:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 800520a:	930b      	str	r3, [sp, #44]	; 0x2c
 800520c:	d01f      	beq.n	800524e <_svfprintf_r+0x8c2>
 800520e:	2700      	movs	r7, #0
 8005210:	2e00      	cmp	r6, #0
 8005212:	970b      	str	r7, [sp, #44]	; 0x2c
 8005214:	f77f af3a 	ble.w	800508c <_svfprintf_r+0x700>
 8005218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2bff      	cmp	r3, #255	; 0xff
 800521e:	d107      	bne.n	8005230 <_svfprintf_r+0x8a4>
 8005220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005222:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005224:	443b      	add	r3, r7
 8005226:	fb02 5503 	mla	r5, r2, r3, r5
 800522a:	e72f      	b.n	800508c <_svfprintf_r+0x700>
 800522c:	4635      	mov	r5, r6
 800522e:	e7d0      	b.n	80051d2 <_svfprintf_r+0x846>
 8005230:	42b3      	cmp	r3, r6
 8005232:	daf5      	bge.n	8005220 <_svfprintf_r+0x894>
 8005234:	1af6      	subs	r6, r6, r3
 8005236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	b133      	cbz	r3, 800524a <_svfprintf_r+0x8be>
 800523c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800523e:	3301      	adds	r3, #1
 8005240:	930b      	str	r3, [sp, #44]	; 0x2c
 8005242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005244:	3301      	adds	r3, #1
 8005246:	930d      	str	r3, [sp, #52]	; 0x34
 8005248:	e7e6      	b.n	8005218 <_svfprintf_r+0x88c>
 800524a:	3701      	adds	r7, #1
 800524c:	e7e4      	b.n	8005218 <_svfprintf_r+0x88c>
 800524e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005250:	e71c      	b.n	800508c <_svfprintf_r+0x700>
 8005252:	4632      	mov	r2, r6
 8005254:	f852 3b04 	ldr.w	r3, [r2], #4
 8005258:	f01a 0f20 	tst.w	sl, #32
 800525c:	920c      	str	r2, [sp, #48]	; 0x30
 800525e:	d009      	beq.n	8005274 <_svfprintf_r+0x8e8>
 8005260:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005262:	4610      	mov	r0, r2
 8005264:	17d1      	asrs	r1, r2, #31
 8005266:	e9c3 0100 	strd	r0, r1, [r3]
 800526a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800526c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8005270:	f7ff bbc8 	b.w	8004a04 <_svfprintf_r+0x78>
 8005274:	f01a 0f10 	tst.w	sl, #16
 8005278:	d002      	beq.n	8005280 <_svfprintf_r+0x8f4>
 800527a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e7f4      	b.n	800526a <_svfprintf_r+0x8de>
 8005280:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005284:	d002      	beq.n	800528c <_svfprintf_r+0x900>
 8005286:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005288:	801a      	strh	r2, [r3, #0]
 800528a:	e7ee      	b.n	800526a <_svfprintf_r+0x8de>
 800528c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8005290:	d0f3      	beq.n	800527a <_svfprintf_r+0x8ee>
 8005292:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e7e8      	b.n	800526a <_svfprintf_r+0x8de>
 8005298:	f04a 0a10 	orr.w	sl, sl, #16
 800529c:	f01a 0f20 	tst.w	sl, #32
 80052a0:	d01e      	beq.n	80052e0 <_svfprintf_r+0x954>
 80052a2:	3607      	adds	r6, #7
 80052a4:	f026 0607 	bic.w	r6, r6, #7
 80052a8:	f106 0308 	add.w	r3, r6, #8
 80052ac:	930c      	str	r3, [sp, #48]	; 0x30
 80052ae:	e9d6 6700 	ldrd	r6, r7, [r6]
 80052b2:	2300      	movs	r3, #0
 80052b4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80052b8:	2200      	movs	r2, #0
 80052ba:	1c69      	adds	r1, r5, #1
 80052bc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 80052c0:	f000 8158 	beq.w	8005574 <_svfprintf_r+0xbe8>
 80052c4:	4652      	mov	r2, sl
 80052c6:	ea56 0107 	orrs.w	r1, r6, r7
 80052ca:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80052ce:	f040 8151 	bne.w	8005574 <_svfprintf_r+0xbe8>
 80052d2:	2d00      	cmp	r5, #0
 80052d4:	f000 81d3 	beq.w	800567e <_svfprintf_r+0xcf2>
 80052d8:	2b01      	cmp	r3, #1
 80052da:	f040 814e 	bne.w	800557a <_svfprintf_r+0xbee>
 80052de:	e55a      	b.n	8004d96 <_svfprintf_r+0x40a>
 80052e0:	1d33      	adds	r3, r6, #4
 80052e2:	f01a 0f10 	tst.w	sl, #16
 80052e6:	930c      	str	r3, [sp, #48]	; 0x30
 80052e8:	d001      	beq.n	80052ee <_svfprintf_r+0x962>
 80052ea:	6836      	ldr	r6, [r6, #0]
 80052ec:	e003      	b.n	80052f6 <_svfprintf_r+0x96a>
 80052ee:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80052f2:	d002      	beq.n	80052fa <_svfprintf_r+0x96e>
 80052f4:	8836      	ldrh	r6, [r6, #0]
 80052f6:	2700      	movs	r7, #0
 80052f8:	e7db      	b.n	80052b2 <_svfprintf_r+0x926>
 80052fa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80052fe:	d0f4      	beq.n	80052ea <_svfprintf_r+0x95e>
 8005300:	7836      	ldrb	r6, [r6, #0]
 8005302:	e7f8      	b.n	80052f6 <_svfprintf_r+0x96a>
 8005304:	1d33      	adds	r3, r6, #4
 8005306:	930c      	str	r3, [sp, #48]	; 0x30
 8005308:	f647 0330 	movw	r3, #30768	; 0x7830
 800530c:	2278      	movs	r2, #120	; 0x78
 800530e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8005312:	4baf      	ldr	r3, [pc, #700]	; (80055d0 <_svfprintf_r+0xc44>)
 8005314:	6836      	ldr	r6, [r6, #0]
 8005316:	931c      	str	r3, [sp, #112]	; 0x70
 8005318:	2700      	movs	r7, #0
 800531a:	f04a 0a02 	orr.w	sl, sl, #2
 800531e:	2302      	movs	r3, #2
 8005320:	920a      	str	r2, [sp, #40]	; 0x28
 8005322:	e7c9      	b.n	80052b8 <_svfprintf_r+0x92c>
 8005324:	1d33      	adds	r3, r6, #4
 8005326:	f8d6 b000 	ldr.w	fp, [r6]
 800532a:	2600      	movs	r6, #0
 800532c:	1c68      	adds	r0, r5, #1
 800532e:	930c      	str	r3, [sp, #48]	; 0x30
 8005330:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8005334:	f000 80de 	beq.w	80054f4 <_svfprintf_r+0xb68>
 8005338:	462a      	mov	r2, r5
 800533a:	4631      	mov	r1, r6
 800533c:	4658      	mov	r0, fp
 800533e:	f003 fcd7 	bl	8008cf0 <memchr>
 8005342:	4680      	mov	r8, r0
 8005344:	2800      	cmp	r0, #0
 8005346:	f43f ad73 	beq.w	8004e30 <_svfprintf_r+0x4a4>
 800534a:	46b0      	mov	r8, r6
 800534c:	4637      	mov	r7, r6
 800534e:	eba0 050b 	sub.w	r5, r0, fp
 8005352:	9612      	str	r6, [sp, #72]	; 0x48
 8005354:	960b      	str	r6, [sp, #44]	; 0x2c
 8005356:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005358:	42ab      	cmp	r3, r5
 800535a:	bfb8      	it	lt
 800535c:	462b      	movlt	r3, r5
 800535e:	9315      	str	r3, [sp, #84]	; 0x54
 8005360:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8005364:	b113      	cbz	r3, 800536c <_svfprintf_r+0x9e0>
 8005366:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005368:	3301      	adds	r3, #1
 800536a:	9315      	str	r3, [sp, #84]	; 0x54
 800536c:	f01a 0302 	ands.w	r3, sl, #2
 8005370:	931e      	str	r3, [sp, #120]	; 0x78
 8005372:	bf1e      	ittt	ne
 8005374:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8005376:	3302      	addne	r3, #2
 8005378:	9315      	strne	r3, [sp, #84]	; 0x54
 800537a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800537e:	931f      	str	r3, [sp, #124]	; 0x7c
 8005380:	d121      	bne.n	80053c6 <_svfprintf_r+0xa3a>
 8005382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005384:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	2b00      	cmp	r3, #0
 800538a:	9319      	str	r3, [sp, #100]	; 0x64
 800538c:	dd1b      	ble.n	80053c6 <_svfprintf_r+0xa3a>
 800538e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8005392:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005394:	3201      	adds	r2, #1
 8005396:	2810      	cmp	r0, #16
 8005398:	488e      	ldr	r0, [pc, #568]	; (80055d4 <_svfprintf_r+0xc48>)
 800539a:	f104 0108 	add.w	r1, r4, #8
 800539e:	6020      	str	r0, [r4, #0]
 80053a0:	f300 8187 	bgt.w	80056b2 <_svfprintf_r+0xd26>
 80053a4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80053a6:	2a07      	cmp	r2, #7
 80053a8:	4403      	add	r3, r0
 80053aa:	6060      	str	r0, [r4, #4]
 80053ac:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80053b0:	f340 8194 	ble.w	80056dc <_svfprintf_r+0xd50>
 80053b4:	aa28      	add	r2, sp, #160	; 0xa0
 80053b6:	4649      	mov	r1, r9
 80053b8:	9807      	ldr	r0, [sp, #28]
 80053ba:	f004 fa03 	bl	80097c4 <__ssprint_r>
 80053be:	2800      	cmp	r0, #0
 80053c0:	f040 84c0 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 80053c4:	ac2b      	add	r4, sp, #172	; 0xac
 80053c6:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80053ca:	b173      	cbz	r3, 80053ea <_svfprintf_r+0xa5e>
 80053cc:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	2301      	movs	r3, #1
 80053d4:	6063      	str	r3, [r4, #4]
 80053d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80053d8:	3301      	adds	r3, #1
 80053da:	932a      	str	r3, [sp, #168]	; 0xa8
 80053dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80053de:	3301      	adds	r3, #1
 80053e0:	2b07      	cmp	r3, #7
 80053e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80053e4:	f300 817c 	bgt.w	80056e0 <_svfprintf_r+0xd54>
 80053e8:	3408      	adds	r4, #8
 80053ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053ec:	b16b      	cbz	r3, 800540a <_svfprintf_r+0xa7e>
 80053ee:	ab21      	add	r3, sp, #132	; 0x84
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	2302      	movs	r3, #2
 80053f4:	6063      	str	r3, [r4, #4]
 80053f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80053f8:	3302      	adds	r3, #2
 80053fa:	932a      	str	r3, [sp, #168]	; 0xa8
 80053fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80053fe:	3301      	adds	r3, #1
 8005400:	2b07      	cmp	r3, #7
 8005402:	9329      	str	r3, [sp, #164]	; 0xa4
 8005404:	f300 8176 	bgt.w	80056f4 <_svfprintf_r+0xd68>
 8005408:	3408      	adds	r4, #8
 800540a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d121      	bne.n	8005454 <_svfprintf_r+0xac8>
 8005410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005412:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	2b00      	cmp	r3, #0
 8005418:	9319      	str	r3, [sp, #100]	; 0x64
 800541a:	dd1b      	ble.n	8005454 <_svfprintf_r+0xac8>
 800541c:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8005420:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005422:	3201      	adds	r2, #1
 8005424:	2810      	cmp	r0, #16
 8005426:	486c      	ldr	r0, [pc, #432]	; (80055d8 <_svfprintf_r+0xc4c>)
 8005428:	f104 0108 	add.w	r1, r4, #8
 800542c:	6020      	str	r0, [r4, #0]
 800542e:	f300 816b 	bgt.w	8005708 <_svfprintf_r+0xd7c>
 8005432:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005434:	2a07      	cmp	r2, #7
 8005436:	4403      	add	r3, r0
 8005438:	6060      	str	r0, [r4, #4]
 800543a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800543e:	f340 8178 	ble.w	8005732 <_svfprintf_r+0xda6>
 8005442:	aa28      	add	r2, sp, #160	; 0xa0
 8005444:	4649      	mov	r1, r9
 8005446:	9807      	ldr	r0, [sp, #28]
 8005448:	f004 f9bc 	bl	80097c4 <__ssprint_r>
 800544c:	2800      	cmp	r0, #0
 800544e:	f040 8479 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005452:	ac2b      	add	r4, sp, #172	; 0xac
 8005454:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005456:	1b5b      	subs	r3, r3, r5
 8005458:	2b00      	cmp	r3, #0
 800545a:	9312      	str	r3, [sp, #72]	; 0x48
 800545c:	dd1b      	ble.n	8005496 <_svfprintf_r+0xb0a>
 800545e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8005462:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005464:	3201      	adds	r2, #1
 8005466:	2810      	cmp	r0, #16
 8005468:	485b      	ldr	r0, [pc, #364]	; (80055d8 <_svfprintf_r+0xc4c>)
 800546a:	f104 0108 	add.w	r1, r4, #8
 800546e:	6020      	str	r0, [r4, #0]
 8005470:	f300 8161 	bgt.w	8005736 <_svfprintf_r+0xdaa>
 8005474:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005476:	2a07      	cmp	r2, #7
 8005478:	4403      	add	r3, r0
 800547a:	6060      	str	r0, [r4, #4]
 800547c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8005480:	f340 816e 	ble.w	8005760 <_svfprintf_r+0xdd4>
 8005484:	aa28      	add	r2, sp, #160	; 0xa0
 8005486:	4649      	mov	r1, r9
 8005488:	9807      	ldr	r0, [sp, #28]
 800548a:	f004 f99b 	bl	80097c4 <__ssprint_r>
 800548e:	2800      	cmp	r0, #0
 8005490:	f040 8458 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005494:	ac2b      	add	r4, sp, #172	; 0xac
 8005496:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005498:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800549c:	9312      	str	r3, [sp, #72]	; 0x48
 800549e:	f040 8161 	bne.w	8005764 <_svfprintf_r+0xdd8>
 80054a2:	e9c4 b500 	strd	fp, r5, [r4]
 80054a6:	441d      	add	r5, r3
 80054a8:	952a      	str	r5, [sp, #168]	; 0xa8
 80054aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80054ac:	3301      	adds	r3, #1
 80054ae:	2b07      	cmp	r3, #7
 80054b0:	9329      	str	r3, [sp, #164]	; 0xa4
 80054b2:	f300 819d 	bgt.w	80057f0 <_svfprintf_r+0xe64>
 80054b6:	3408      	adds	r4, #8
 80054b8:	f01a 0f04 	tst.w	sl, #4
 80054bc:	f040 8424 	bne.w	8005d08 <_svfprintf_r+0x137c>
 80054c0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80054c4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80054c6:	428a      	cmp	r2, r1
 80054c8:	bfac      	ite	ge
 80054ca:	189b      	addge	r3, r3, r2
 80054cc:	185b      	addlt	r3, r3, r1
 80054ce:	9310      	str	r3, [sp, #64]	; 0x40
 80054d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80054d2:	b13b      	cbz	r3, 80054e4 <_svfprintf_r+0xb58>
 80054d4:	aa28      	add	r2, sp, #160	; 0xa0
 80054d6:	4649      	mov	r1, r9
 80054d8:	9807      	ldr	r0, [sp, #28]
 80054da:	f004 f973 	bl	80097c4 <__ssprint_r>
 80054de:	2800      	cmp	r0, #0
 80054e0:	f040 8430 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 80054e4:	2300      	movs	r3, #0
 80054e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80054e8:	f1b8 0f00 	cmp.w	r8, #0
 80054ec:	f040 8446 	bne.w	8005d7c <_svfprintf_r+0x13f0>
 80054f0:	ac2b      	add	r4, sp, #172	; 0xac
 80054f2:	e6ba      	b.n	800526a <_svfprintf_r+0x8de>
 80054f4:	4658      	mov	r0, fp
 80054f6:	f7fa fe2b 	bl	8000150 <strlen>
 80054fa:	46b0      	mov	r8, r6
 80054fc:	4605      	mov	r5, r0
 80054fe:	e497      	b.n	8004e30 <_svfprintf_r+0x4a4>
 8005500:	f04a 0a10 	orr.w	sl, sl, #16
 8005504:	f01a 0f20 	tst.w	sl, #32
 8005508:	d009      	beq.n	800551e <_svfprintf_r+0xb92>
 800550a:	3607      	adds	r6, #7
 800550c:	f026 0607 	bic.w	r6, r6, #7
 8005510:	f106 0308 	add.w	r3, r6, #8
 8005514:	930c      	str	r3, [sp, #48]	; 0x30
 8005516:	e9d6 6700 	ldrd	r6, r7, [r6]
 800551a:	2301      	movs	r3, #1
 800551c:	e6cc      	b.n	80052b8 <_svfprintf_r+0x92c>
 800551e:	1d33      	adds	r3, r6, #4
 8005520:	f01a 0f10 	tst.w	sl, #16
 8005524:	930c      	str	r3, [sp, #48]	; 0x30
 8005526:	d001      	beq.n	800552c <_svfprintf_r+0xba0>
 8005528:	6836      	ldr	r6, [r6, #0]
 800552a:	e003      	b.n	8005534 <_svfprintf_r+0xba8>
 800552c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005530:	d002      	beq.n	8005538 <_svfprintf_r+0xbac>
 8005532:	8836      	ldrh	r6, [r6, #0]
 8005534:	2700      	movs	r7, #0
 8005536:	e7f0      	b.n	800551a <_svfprintf_r+0xb8e>
 8005538:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800553c:	d0f4      	beq.n	8005528 <_svfprintf_r+0xb9c>
 800553e:	7836      	ldrb	r6, [r6, #0]
 8005540:	e7f8      	b.n	8005534 <_svfprintf_r+0xba8>
 8005542:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <_svfprintf_r+0xc44>)
 8005544:	f7ff bb59 	b.w	8004bfa <_svfprintf_r+0x26e>
 8005548:	1d33      	adds	r3, r6, #4
 800554a:	f01a 0f10 	tst.w	sl, #16
 800554e:	930c      	str	r3, [sp, #48]	; 0x30
 8005550:	d001      	beq.n	8005556 <_svfprintf_r+0xbca>
 8005552:	6836      	ldr	r6, [r6, #0]
 8005554:	e003      	b.n	800555e <_svfprintf_r+0xbd2>
 8005556:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800555a:	d003      	beq.n	8005564 <_svfprintf_r+0xbd8>
 800555c:	8836      	ldrh	r6, [r6, #0]
 800555e:	2700      	movs	r7, #0
 8005560:	f7ff bb58 	b.w	8004c14 <_svfprintf_r+0x288>
 8005564:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8005568:	d0f3      	beq.n	8005552 <_svfprintf_r+0xbc6>
 800556a:	7836      	ldrb	r6, [r6, #0]
 800556c:	e7f7      	b.n	800555e <_svfprintf_r+0xbd2>
 800556e:	4652      	mov	r2, sl
 8005570:	2301      	movs	r3, #1
 8005572:	e6a8      	b.n	80052c6 <_svfprintf_r+0x93a>
 8005574:	2b01      	cmp	r3, #1
 8005576:	f43f ac09 	beq.w	8004d8c <_svfprintf_r+0x400>
 800557a:	2b02      	cmp	r3, #2
 800557c:	d06d      	beq.n	800565a <_svfprintf_r+0xcce>
 800557e:	ab54      	add	r3, sp, #336	; 0x150
 8005580:	08f1      	lsrs	r1, r6, #3
 8005582:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8005586:	08f8      	lsrs	r0, r7, #3
 8005588:	f006 0207 	and.w	r2, r6, #7
 800558c:	4607      	mov	r7, r0
 800558e:	460e      	mov	r6, r1
 8005590:	3230      	adds	r2, #48	; 0x30
 8005592:	ea56 0107 	orrs.w	r1, r6, r7
 8005596:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800559a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800559e:	d114      	bne.n	80055ca <_svfprintf_r+0xc3e>
 80055a0:	f01a 0f01 	tst.w	sl, #1
 80055a4:	d006      	beq.n	80055b4 <_svfprintf_r+0xc28>
 80055a6:	2a30      	cmp	r2, #48	; 0x30
 80055a8:	d004      	beq.n	80055b4 <_svfprintf_r+0xc28>
 80055aa:	2230      	movs	r2, #48	; 0x30
 80055ac:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80055b0:	f1a3 0b02 	sub.w	fp, r3, #2
 80055b4:	f04f 0800 	mov.w	r8, #0
 80055b8:	ab54      	add	r3, sp, #336	; 0x150
 80055ba:	9512      	str	r5, [sp, #72]	; 0x48
 80055bc:	eba3 050b 	sub.w	r5, r3, fp
 80055c0:	4647      	mov	r7, r8
 80055c2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80055c6:	4646      	mov	r6, r8
 80055c8:	e6c5      	b.n	8005356 <_svfprintf_r+0x9ca>
 80055ca:	465b      	mov	r3, fp
 80055cc:	e7d8      	b.n	8005580 <_svfprintf_r+0xbf4>
 80055ce:	bf00      	nop
 80055d0:	0800a132 	.word	0x0800a132
 80055d4:	0800a156 	.word	0x0800a156
 80055d8:	0800a166 	.word	0x0800a166
 80055dc:	2300      	movs	r3, #0
 80055de:	9308      	str	r3, [sp, #32]
 80055e0:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 80055e4:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 80055e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80055ea:	220a      	movs	r2, #10
 80055ec:	2300      	movs	r3, #0
 80055ee:	4630      	mov	r0, r6
 80055f0:	4639      	mov	r1, r7
 80055f2:	f7fb fca7 	bl	8000f44 <__aeabi_uldivmod>
 80055f6:	9b08      	ldr	r3, [sp, #32]
 80055f8:	3230      	adds	r2, #48	; 0x30
 80055fa:	3301      	adds	r3, #1
 80055fc:	9308      	str	r3, [sp, #32]
 80055fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005600:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
 8005604:	f808 2c01 	strb.w	r2, [r8, #-1]
 8005608:	b1d3      	cbz	r3, 8005640 <_svfprintf_r+0xcb4>
 800560a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800560c:	9a08      	ldr	r2, [sp, #32]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d115      	bne.n	8005640 <_svfprintf_r+0xcb4>
 8005614:	2aff      	cmp	r2, #255	; 0xff
 8005616:	d013      	beq.n	8005640 <_svfprintf_r+0xcb4>
 8005618:	2f00      	cmp	r7, #0
 800561a:	bf08      	it	eq
 800561c:	2e0a      	cmpeq	r6, #10
 800561e:	d30f      	bcc.n	8005640 <_svfprintf_r+0xcb4>
 8005620:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005622:	991d      	ldr	r1, [sp, #116]	; 0x74
 8005624:	ebab 0b03 	sub.w	fp, fp, r3
 8005628:	461a      	mov	r2, r3
 800562a:	4658      	mov	r0, fp
 800562c:	f004 f8b5 	bl	800979a <strncpy>
 8005630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	b11b      	cbz	r3, 800563e <_svfprintf_r+0xcb2>
 8005636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005638:	3301      	adds	r3, #1
 800563a:	930d      	str	r3, [sp, #52]	; 0x34
 800563c:	2300      	movs	r3, #0
 800563e:	9308      	str	r3, [sp, #32]
 8005640:	2300      	movs	r3, #0
 8005642:	4630      	mov	r0, r6
 8005644:	4639      	mov	r1, r7
 8005646:	220a      	movs	r2, #10
 8005648:	f7fb fc7c 	bl	8000f44 <__aeabi_uldivmod>
 800564c:	4606      	mov	r6, r0
 800564e:	460f      	mov	r7, r1
 8005650:	ea56 0307 	orrs.w	r3, r6, r7
 8005654:	d0ae      	beq.n	80055b4 <_svfprintf_r+0xc28>
 8005656:	46d8      	mov	r8, fp
 8005658:	e7c7      	b.n	80055ea <_svfprintf_r+0xc5e>
 800565a:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 800565e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005660:	f006 030f 	and.w	r3, r6, #15
 8005664:	5cd3      	ldrb	r3, [r2, r3]
 8005666:	093a      	lsrs	r2, r7, #4
 8005668:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800566c:	0933      	lsrs	r3, r6, #4
 800566e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005672:	461e      	mov	r6, r3
 8005674:	4617      	mov	r7, r2
 8005676:	ea56 0307 	orrs.w	r3, r6, r7
 800567a:	d1f0      	bne.n	800565e <_svfprintf_r+0xcd2>
 800567c:	e79a      	b.n	80055b4 <_svfprintf_r+0xc28>
 800567e:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8005682:	2b00      	cmp	r3, #0
 8005684:	d196      	bne.n	80055b4 <_svfprintf_r+0xc28>
 8005686:	07d2      	lsls	r2, r2, #31
 8005688:	bf44      	itt	mi
 800568a:	2330      	movmi	r3, #48	; 0x30
 800568c:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8005690:	e790      	b.n	80055b4 <_svfprintf_r+0xc28>
 8005692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8377 	beq.w	8005d88 <_svfprintf_r+0x13fc>
 800569a:	2000      	movs	r0, #0
 800569c:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 80056a0:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 80056a4:	960c      	str	r6, [sp, #48]	; 0x30
 80056a6:	f7ff bb4e 	b.w	8004d46 <_svfprintf_r+0x3ba>
 80056aa:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80056ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056b0:	e4f6      	b.n	80050a0 <_svfprintf_r+0x714>
 80056b2:	2010      	movs	r0, #16
 80056b4:	2a07      	cmp	r2, #7
 80056b6:	4403      	add	r3, r0
 80056b8:	6060      	str	r0, [r4, #4]
 80056ba:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80056be:	dd08      	ble.n	80056d2 <_svfprintf_r+0xd46>
 80056c0:	aa28      	add	r2, sp, #160	; 0xa0
 80056c2:	4649      	mov	r1, r9
 80056c4:	9807      	ldr	r0, [sp, #28]
 80056c6:	f004 f87d 	bl	80097c4 <__ssprint_r>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f040 833a 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 80056d0:	a92b      	add	r1, sp, #172	; 0xac
 80056d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056d4:	460c      	mov	r4, r1
 80056d6:	3b10      	subs	r3, #16
 80056d8:	9319      	str	r3, [sp, #100]	; 0x64
 80056da:	e658      	b.n	800538e <_svfprintf_r+0xa02>
 80056dc:	460c      	mov	r4, r1
 80056de:	e672      	b.n	80053c6 <_svfprintf_r+0xa3a>
 80056e0:	aa28      	add	r2, sp, #160	; 0xa0
 80056e2:	4649      	mov	r1, r9
 80056e4:	9807      	ldr	r0, [sp, #28]
 80056e6:	f004 f86d 	bl	80097c4 <__ssprint_r>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	f040 832a 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 80056f0:	ac2b      	add	r4, sp, #172	; 0xac
 80056f2:	e67a      	b.n	80053ea <_svfprintf_r+0xa5e>
 80056f4:	aa28      	add	r2, sp, #160	; 0xa0
 80056f6:	4649      	mov	r1, r9
 80056f8:	9807      	ldr	r0, [sp, #28]
 80056fa:	f004 f863 	bl	80097c4 <__ssprint_r>
 80056fe:	2800      	cmp	r0, #0
 8005700:	f040 8320 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005704:	ac2b      	add	r4, sp, #172	; 0xac
 8005706:	e680      	b.n	800540a <_svfprintf_r+0xa7e>
 8005708:	2010      	movs	r0, #16
 800570a:	2a07      	cmp	r2, #7
 800570c:	4403      	add	r3, r0
 800570e:	6060      	str	r0, [r4, #4]
 8005710:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8005714:	dd08      	ble.n	8005728 <_svfprintf_r+0xd9c>
 8005716:	aa28      	add	r2, sp, #160	; 0xa0
 8005718:	4649      	mov	r1, r9
 800571a:	9807      	ldr	r0, [sp, #28]
 800571c:	f004 f852 	bl	80097c4 <__ssprint_r>
 8005720:	2800      	cmp	r0, #0
 8005722:	f040 830f 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005726:	a92b      	add	r1, sp, #172	; 0xac
 8005728:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800572a:	460c      	mov	r4, r1
 800572c:	3b10      	subs	r3, #16
 800572e:	9319      	str	r3, [sp, #100]	; 0x64
 8005730:	e674      	b.n	800541c <_svfprintf_r+0xa90>
 8005732:	460c      	mov	r4, r1
 8005734:	e68e      	b.n	8005454 <_svfprintf_r+0xac8>
 8005736:	2010      	movs	r0, #16
 8005738:	2a07      	cmp	r2, #7
 800573a:	4403      	add	r3, r0
 800573c:	6060      	str	r0, [r4, #4]
 800573e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8005742:	dd08      	ble.n	8005756 <_svfprintf_r+0xdca>
 8005744:	aa28      	add	r2, sp, #160	; 0xa0
 8005746:	4649      	mov	r1, r9
 8005748:	9807      	ldr	r0, [sp, #28]
 800574a:	f004 f83b 	bl	80097c4 <__ssprint_r>
 800574e:	2800      	cmp	r0, #0
 8005750:	f040 82f8 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005754:	a92b      	add	r1, sp, #172	; 0xac
 8005756:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005758:	460c      	mov	r4, r1
 800575a:	3b10      	subs	r3, #16
 800575c:	9312      	str	r3, [sp, #72]	; 0x48
 800575e:	e67e      	b.n	800545e <_svfprintf_r+0xad2>
 8005760:	460c      	mov	r4, r1
 8005762:	e698      	b.n	8005496 <_svfprintf_r+0xb0a>
 8005764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005766:	2b65      	cmp	r3, #101	; 0x65
 8005768:	f340 8234 	ble.w	8005bd4 <_svfprintf_r+0x1248>
 800576c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8005770:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8005774:	f7fb f918 	bl	80009a8 <__aeabi_dcmpeq>
 8005778:	2800      	cmp	r0, #0
 800577a:	d069      	beq.n	8005850 <_svfprintf_r+0xec4>
 800577c:	4b6e      	ldr	r3, [pc, #440]	; (8005938 <_svfprintf_r+0xfac>)
 800577e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	2301      	movs	r3, #1
 8005784:	441d      	add	r5, r3
 8005786:	6063      	str	r3, [r4, #4]
 8005788:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800578a:	952a      	str	r5, [sp, #168]	; 0xa8
 800578c:	3301      	adds	r3, #1
 800578e:	2b07      	cmp	r3, #7
 8005790:	9329      	str	r3, [sp, #164]	; 0xa4
 8005792:	dc37      	bgt.n	8005804 <_svfprintf_r+0xe78>
 8005794:	3408      	adds	r4, #8
 8005796:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005798:	9a08      	ldr	r2, [sp, #32]
 800579a:	4293      	cmp	r3, r2
 800579c:	db03      	blt.n	80057a6 <_svfprintf_r+0xe1a>
 800579e:	f01a 0f01 	tst.w	sl, #1
 80057a2:	f43f ae89 	beq.w	80054b8 <_svfprintf_r+0xb2c>
 80057a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80057a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057aa:	6023      	str	r3, [r4, #0]
 80057ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ae:	6063      	str	r3, [r4, #4]
 80057b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80057b2:	4413      	add	r3, r2
 80057b4:	932a      	str	r3, [sp, #168]	; 0xa8
 80057b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80057b8:	3301      	adds	r3, #1
 80057ba:	2b07      	cmp	r3, #7
 80057bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80057be:	dc2b      	bgt.n	8005818 <_svfprintf_r+0xe8c>
 80057c0:	3408      	adds	r4, #8
 80057c2:	9b08      	ldr	r3, [sp, #32]
 80057c4:	1e5d      	subs	r5, r3, #1
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	f77f ae76 	ble.w	80054b8 <_svfprintf_r+0xb2c>
 80057cc:	2710      	movs	r7, #16
 80057ce:	4e5b      	ldr	r6, [pc, #364]	; (800593c <_svfprintf_r+0xfb0>)
 80057d0:	2d10      	cmp	r5, #16
 80057d2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80057d6:	f104 0108 	add.w	r1, r4, #8
 80057da:	f103 0301 	add.w	r3, r3, #1
 80057de:	6026      	str	r6, [r4, #0]
 80057e0:	dc24      	bgt.n	800582c <_svfprintf_r+0xea0>
 80057e2:	6065      	str	r5, [r4, #4]
 80057e4:	2b07      	cmp	r3, #7
 80057e6:	4415      	add	r5, r2
 80057e8:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80057ec:	f340 8289 	ble.w	8005d02 <_svfprintf_r+0x1376>
 80057f0:	aa28      	add	r2, sp, #160	; 0xa0
 80057f2:	4649      	mov	r1, r9
 80057f4:	9807      	ldr	r0, [sp, #28]
 80057f6:	f003 ffe5 	bl	80097c4 <__ssprint_r>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	f040 82a2 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005800:	ac2b      	add	r4, sp, #172	; 0xac
 8005802:	e659      	b.n	80054b8 <_svfprintf_r+0xb2c>
 8005804:	aa28      	add	r2, sp, #160	; 0xa0
 8005806:	4649      	mov	r1, r9
 8005808:	9807      	ldr	r0, [sp, #28]
 800580a:	f003 ffdb 	bl	80097c4 <__ssprint_r>
 800580e:	2800      	cmp	r0, #0
 8005810:	f040 8298 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005814:	ac2b      	add	r4, sp, #172	; 0xac
 8005816:	e7be      	b.n	8005796 <_svfprintf_r+0xe0a>
 8005818:	aa28      	add	r2, sp, #160	; 0xa0
 800581a:	4649      	mov	r1, r9
 800581c:	9807      	ldr	r0, [sp, #28]
 800581e:	f003 ffd1 	bl	80097c4 <__ssprint_r>
 8005822:	2800      	cmp	r0, #0
 8005824:	f040 828e 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005828:	ac2b      	add	r4, sp, #172	; 0xac
 800582a:	e7ca      	b.n	80057c2 <_svfprintf_r+0xe36>
 800582c:	3210      	adds	r2, #16
 800582e:	2b07      	cmp	r3, #7
 8005830:	6067      	str	r7, [r4, #4]
 8005832:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8005836:	dd08      	ble.n	800584a <_svfprintf_r+0xebe>
 8005838:	aa28      	add	r2, sp, #160	; 0xa0
 800583a:	4649      	mov	r1, r9
 800583c:	9807      	ldr	r0, [sp, #28]
 800583e:	f003 ffc1 	bl	80097c4 <__ssprint_r>
 8005842:	2800      	cmp	r0, #0
 8005844:	f040 827e 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005848:	a92b      	add	r1, sp, #172	; 0xac
 800584a:	3d10      	subs	r5, #16
 800584c:	460c      	mov	r4, r1
 800584e:	e7bf      	b.n	80057d0 <_svfprintf_r+0xe44>
 8005850:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005852:	2b00      	cmp	r3, #0
 8005854:	dc74      	bgt.n	8005940 <_svfprintf_r+0xfb4>
 8005856:	4b38      	ldr	r3, [pc, #224]	; (8005938 <_svfprintf_r+0xfac>)
 8005858:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	2301      	movs	r3, #1
 800585e:	441d      	add	r5, r3
 8005860:	6063      	str	r3, [r4, #4]
 8005862:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005864:	952a      	str	r5, [sp, #168]	; 0xa8
 8005866:	3301      	adds	r3, #1
 8005868:	2b07      	cmp	r3, #7
 800586a:	9329      	str	r3, [sp, #164]	; 0xa4
 800586c:	dc3e      	bgt.n	80058ec <_svfprintf_r+0xf60>
 800586e:	3408      	adds	r4, #8
 8005870:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005872:	b92b      	cbnz	r3, 8005880 <_svfprintf_r+0xef4>
 8005874:	9b08      	ldr	r3, [sp, #32]
 8005876:	b91b      	cbnz	r3, 8005880 <_svfprintf_r+0xef4>
 8005878:	f01a 0f01 	tst.w	sl, #1
 800587c:	f43f ae1c 	beq.w	80054b8 <_svfprintf_r+0xb2c>
 8005880:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005882:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005888:	6063      	str	r3, [r4, #4]
 800588a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800588c:	4413      	add	r3, r2
 800588e:	932a      	str	r3, [sp, #168]	; 0xa8
 8005890:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005892:	3301      	adds	r3, #1
 8005894:	2b07      	cmp	r3, #7
 8005896:	9329      	str	r3, [sp, #164]	; 0xa4
 8005898:	dc32      	bgt.n	8005900 <_svfprintf_r+0xf74>
 800589a:	3408      	adds	r4, #8
 800589c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800589e:	2d00      	cmp	r5, #0
 80058a0:	da1b      	bge.n	80058da <_svfprintf_r+0xf4e>
 80058a2:	4623      	mov	r3, r4
 80058a4:	2710      	movs	r7, #16
 80058a6:	4e25      	ldr	r6, [pc, #148]	; (800593c <_svfprintf_r+0xfb0>)
 80058a8:	426d      	negs	r5, r5
 80058aa:	2d10      	cmp	r5, #16
 80058ac:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 80058b0:	f104 0408 	add.w	r4, r4, #8
 80058b4:	f102 0201 	add.w	r2, r2, #1
 80058b8:	601e      	str	r6, [r3, #0]
 80058ba:	dc2b      	bgt.n	8005914 <_svfprintf_r+0xf88>
 80058bc:	605d      	str	r5, [r3, #4]
 80058be:	2a07      	cmp	r2, #7
 80058c0:	440d      	add	r5, r1
 80058c2:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 80058c6:	dd08      	ble.n	80058da <_svfprintf_r+0xf4e>
 80058c8:	aa28      	add	r2, sp, #160	; 0xa0
 80058ca:	4649      	mov	r1, r9
 80058cc:	9807      	ldr	r0, [sp, #28]
 80058ce:	f003 ff79 	bl	80097c4 <__ssprint_r>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	f040 8236 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 80058d8:	ac2b      	add	r4, sp, #172	; 0xac
 80058da:	9b08      	ldr	r3, [sp, #32]
 80058dc:	9a08      	ldr	r2, [sp, #32]
 80058de:	6063      	str	r3, [r4, #4]
 80058e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80058e2:	f8c4 b000 	str.w	fp, [r4]
 80058e6:	4413      	add	r3, r2
 80058e8:	932a      	str	r3, [sp, #168]	; 0xa8
 80058ea:	e5de      	b.n	80054aa <_svfprintf_r+0xb1e>
 80058ec:	aa28      	add	r2, sp, #160	; 0xa0
 80058ee:	4649      	mov	r1, r9
 80058f0:	9807      	ldr	r0, [sp, #28]
 80058f2:	f003 ff67 	bl	80097c4 <__ssprint_r>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	f040 8224 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 80058fc:	ac2b      	add	r4, sp, #172	; 0xac
 80058fe:	e7b7      	b.n	8005870 <_svfprintf_r+0xee4>
 8005900:	aa28      	add	r2, sp, #160	; 0xa0
 8005902:	4649      	mov	r1, r9
 8005904:	9807      	ldr	r0, [sp, #28]
 8005906:	f003 ff5d 	bl	80097c4 <__ssprint_r>
 800590a:	2800      	cmp	r0, #0
 800590c:	f040 821a 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005910:	ac2b      	add	r4, sp, #172	; 0xac
 8005912:	e7c3      	b.n	800589c <_svfprintf_r+0xf10>
 8005914:	3110      	adds	r1, #16
 8005916:	2a07      	cmp	r2, #7
 8005918:	605f      	str	r7, [r3, #4]
 800591a:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 800591e:	dd08      	ble.n	8005932 <_svfprintf_r+0xfa6>
 8005920:	aa28      	add	r2, sp, #160	; 0xa0
 8005922:	4649      	mov	r1, r9
 8005924:	9807      	ldr	r0, [sp, #28]
 8005926:	f003 ff4d 	bl	80097c4 <__ssprint_r>
 800592a:	2800      	cmp	r0, #0
 800592c:	f040 820a 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005930:	ac2b      	add	r4, sp, #172	; 0xac
 8005932:	3d10      	subs	r5, #16
 8005934:	4623      	mov	r3, r4
 8005936:	e7b8      	b.n	80058aa <_svfprintf_r+0xf1e>
 8005938:	0800a154 	.word	0x0800a154
 800593c:	0800a166 	.word	0x0800a166
 8005940:	9b08      	ldr	r3, [sp, #32]
 8005942:	42b3      	cmp	r3, r6
 8005944:	bfa8      	it	ge
 8005946:	4633      	movge	r3, r6
 8005948:	2b00      	cmp	r3, #0
 800594a:	461d      	mov	r5, r3
 800594c:	dd0b      	ble.n	8005966 <_svfprintf_r+0xfda>
 800594e:	e9c4 b300 	strd	fp, r3, [r4]
 8005952:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005954:	442b      	add	r3, r5
 8005956:	932a      	str	r3, [sp, #168]	; 0xa8
 8005958:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800595a:	3301      	adds	r3, #1
 800595c:	2b07      	cmp	r3, #7
 800595e:	9329      	str	r3, [sp, #164]	; 0xa4
 8005960:	f300 8086 	bgt.w	8005a70 <_svfprintf_r+0x10e4>
 8005964:	3408      	adds	r4, #8
 8005966:	2d00      	cmp	r5, #0
 8005968:	bfb4      	ite	lt
 800596a:	4635      	movlt	r5, r6
 800596c:	1b75      	subge	r5, r6, r5
 800596e:	2d00      	cmp	r5, #0
 8005970:	dd19      	ble.n	80059a6 <_svfprintf_r+0x101a>
 8005972:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8005976:	4896      	ldr	r0, [pc, #600]	; (8005bd0 <_svfprintf_r+0x1244>)
 8005978:	2d10      	cmp	r5, #16
 800597a:	f103 0301 	add.w	r3, r3, #1
 800597e:	f104 0108 	add.w	r1, r4, #8
 8005982:	6020      	str	r0, [r4, #0]
 8005984:	dc7e      	bgt.n	8005a84 <_svfprintf_r+0x10f8>
 8005986:	6065      	str	r5, [r4, #4]
 8005988:	2b07      	cmp	r3, #7
 800598a:	4415      	add	r5, r2
 800598c:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8005990:	f340 808b 	ble.w	8005aaa <_svfprintf_r+0x111e>
 8005994:	aa28      	add	r2, sp, #160	; 0xa0
 8005996:	4649      	mov	r1, r9
 8005998:	9807      	ldr	r0, [sp, #28]
 800599a:	f003 ff13 	bl	80097c4 <__ssprint_r>
 800599e:	2800      	cmp	r0, #0
 80059a0:	f040 81d0 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 80059a4:	ac2b      	add	r4, sp, #172	; 0xac
 80059a6:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80059aa:	445e      	add	r6, fp
 80059ac:	d009      	beq.n	80059c2 <_svfprintf_r+0x1036>
 80059ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d17c      	bne.n	8005aae <_svfprintf_r+0x1122>
 80059b4:	2f00      	cmp	r7, #0
 80059b6:	d17c      	bne.n	8005ab2 <_svfprintf_r+0x1126>
 80059b8:	9b08      	ldr	r3, [sp, #32]
 80059ba:	445b      	add	r3, fp
 80059bc:	429e      	cmp	r6, r3
 80059be:	bf28      	it	cs
 80059c0:	461e      	movcs	r6, r3
 80059c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059c4:	9a08      	ldr	r2, [sp, #32]
 80059c6:	4293      	cmp	r3, r2
 80059c8:	db02      	blt.n	80059d0 <_svfprintf_r+0x1044>
 80059ca:	f01a 0f01 	tst.w	sl, #1
 80059ce:	d00e      	beq.n	80059ee <_svfprintf_r+0x1062>
 80059d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80059d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059d8:	6063      	str	r3, [r4, #4]
 80059da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80059dc:	4413      	add	r3, r2
 80059de:	932a      	str	r3, [sp, #168]	; 0xa8
 80059e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80059e2:	3301      	adds	r3, #1
 80059e4:	2b07      	cmp	r3, #7
 80059e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80059e8:	f300 80dd 	bgt.w	8005ba6 <_svfprintf_r+0x121a>
 80059ec:	3408      	adds	r4, #8
 80059ee:	9b08      	ldr	r3, [sp, #32]
 80059f0:	9a08      	ldr	r2, [sp, #32]
 80059f2:	eb0b 0503 	add.w	r5, fp, r3
 80059f6:	1bab      	subs	r3, r5, r6
 80059f8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80059fa:	1b55      	subs	r5, r2, r5
 80059fc:	429d      	cmp	r5, r3
 80059fe:	bfa8      	it	ge
 8005a00:	461d      	movge	r5, r3
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	dd0b      	ble.n	8005a1e <_svfprintf_r+0x1092>
 8005a06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005a08:	e9c4 6500 	strd	r6, r5, [r4]
 8005a0c:	442b      	add	r3, r5
 8005a0e:	932a      	str	r3, [sp, #168]	; 0xa8
 8005a10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005a12:	3301      	adds	r3, #1
 8005a14:	2b07      	cmp	r3, #7
 8005a16:	9329      	str	r3, [sp, #164]	; 0xa4
 8005a18:	f300 80cf 	bgt.w	8005bba <_svfprintf_r+0x122e>
 8005a1c:	3408      	adds	r4, #8
 8005a1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a20:	9a08      	ldr	r2, [sp, #32]
 8005a22:	2d00      	cmp	r5, #0
 8005a24:	eba2 0303 	sub.w	r3, r2, r3
 8005a28:	bfb4      	ite	lt
 8005a2a:	461d      	movlt	r5, r3
 8005a2c:	1b5d      	subge	r5, r3, r5
 8005a2e:	2d00      	cmp	r5, #0
 8005a30:	f77f ad42 	ble.w	80054b8 <_svfprintf_r+0xb2c>
 8005a34:	2710      	movs	r7, #16
 8005a36:	4e66      	ldr	r6, [pc, #408]	; (8005bd0 <_svfprintf_r+0x1244>)
 8005a38:	2d10      	cmp	r5, #16
 8005a3a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8005a3e:	f104 0108 	add.w	r1, r4, #8
 8005a42:	f103 0301 	add.w	r3, r3, #1
 8005a46:	6026      	str	r6, [r4, #0]
 8005a48:	f77f aecb 	ble.w	80057e2 <_svfprintf_r+0xe56>
 8005a4c:	3210      	adds	r2, #16
 8005a4e:	2b07      	cmp	r3, #7
 8005a50:	6067      	str	r7, [r4, #4]
 8005a52:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8005a56:	dd08      	ble.n	8005a6a <_svfprintf_r+0x10de>
 8005a58:	aa28      	add	r2, sp, #160	; 0xa0
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	9807      	ldr	r0, [sp, #28]
 8005a5e:	f003 feb1 	bl	80097c4 <__ssprint_r>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f040 816e 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005a68:	a92b      	add	r1, sp, #172	; 0xac
 8005a6a:	3d10      	subs	r5, #16
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	e7e3      	b.n	8005a38 <_svfprintf_r+0x10ac>
 8005a70:	aa28      	add	r2, sp, #160	; 0xa0
 8005a72:	4649      	mov	r1, r9
 8005a74:	9807      	ldr	r0, [sp, #28]
 8005a76:	f003 fea5 	bl	80097c4 <__ssprint_r>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f040 8162 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005a80:	ac2b      	add	r4, sp, #172	; 0xac
 8005a82:	e770      	b.n	8005966 <_svfprintf_r+0xfda>
 8005a84:	2010      	movs	r0, #16
 8005a86:	2b07      	cmp	r3, #7
 8005a88:	4402      	add	r2, r0
 8005a8a:	6060      	str	r0, [r4, #4]
 8005a8c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8005a90:	dd08      	ble.n	8005aa4 <_svfprintf_r+0x1118>
 8005a92:	aa28      	add	r2, sp, #160	; 0xa0
 8005a94:	4649      	mov	r1, r9
 8005a96:	9807      	ldr	r0, [sp, #28]
 8005a98:	f003 fe94 	bl	80097c4 <__ssprint_r>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	f040 8151 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005aa2:	a92b      	add	r1, sp, #172	; 0xac
 8005aa4:	3d10      	subs	r5, #16
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	e763      	b.n	8005972 <_svfprintf_r+0xfe6>
 8005aaa:	460c      	mov	r4, r1
 8005aac:	e77b      	b.n	80059a6 <_svfprintf_r+0x101a>
 8005aae:	2f00      	cmp	r7, #0
 8005ab0:	d049      	beq.n	8005b46 <_svfprintf_r+0x11ba>
 8005ab2:	3f01      	subs	r7, #1
 8005ab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ab6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005abc:	6063      	str	r3, [r4, #4]
 8005abe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005ac0:	4413      	add	r3, r2
 8005ac2:	932a      	str	r3, [sp, #168]	; 0xa8
 8005ac4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	2b07      	cmp	r3, #7
 8005aca:	9329      	str	r3, [sp, #164]	; 0xa4
 8005acc:	dc42      	bgt.n	8005b54 <_svfprintf_r+0x11c8>
 8005ace:	3408      	adds	r4, #8
 8005ad0:	9b08      	ldr	r3, [sp, #32]
 8005ad2:	445b      	add	r3, fp
 8005ad4:	1b9a      	subs	r2, r3, r6
 8005ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	4293      	cmp	r3, r2
 8005adc:	bfa8      	it	ge
 8005ade:	4613      	movge	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	461d      	mov	r5, r3
 8005ae4:	dd0a      	ble.n	8005afc <_svfprintf_r+0x1170>
 8005ae6:	e9c4 6300 	strd	r6, r3, [r4]
 8005aea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005aec:	442b      	add	r3, r5
 8005aee:	932a      	str	r3, [sp, #168]	; 0xa8
 8005af0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005af2:	3301      	adds	r3, #1
 8005af4:	2b07      	cmp	r3, #7
 8005af6:	9329      	str	r3, [sp, #164]	; 0xa4
 8005af8:	dc36      	bgt.n	8005b68 <_svfprintf_r+0x11dc>
 8005afa:	3408      	adds	r4, #8
 8005afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	bfb4      	ite	lt
 8005b04:	461d      	movlt	r5, r3
 8005b06:	1b5d      	subge	r5, r3, r5
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	dd18      	ble.n	8005b3e <_svfprintf_r+0x11b2>
 8005b0c:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8005b10:	482f      	ldr	r0, [pc, #188]	; (8005bd0 <_svfprintf_r+0x1244>)
 8005b12:	2d10      	cmp	r5, #16
 8005b14:	f102 0201 	add.w	r2, r2, #1
 8005b18:	f104 0108 	add.w	r1, r4, #8
 8005b1c:	6020      	str	r0, [r4, #0]
 8005b1e:	dc2d      	bgt.n	8005b7c <_svfprintf_r+0x11f0>
 8005b20:	442b      	add	r3, r5
 8005b22:	2a07      	cmp	r2, #7
 8005b24:	6065      	str	r5, [r4, #4]
 8005b26:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8005b2a:	dd3a      	ble.n	8005ba2 <_svfprintf_r+0x1216>
 8005b2c:	aa28      	add	r2, sp, #160	; 0xa0
 8005b2e:	4649      	mov	r1, r9
 8005b30:	9807      	ldr	r0, [sp, #28]
 8005b32:	f003 fe47 	bl	80097c4 <__ssprint_r>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	f040 8104 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005b3c:	ac2b      	add	r4, sp, #172	; 0xac
 8005b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	441e      	add	r6, r3
 8005b44:	e733      	b.n	80059ae <_svfprintf_r+0x1022>
 8005b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	930d      	str	r3, [sp, #52]	; 0x34
 8005b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b52:	e7af      	b.n	8005ab4 <_svfprintf_r+0x1128>
 8005b54:	aa28      	add	r2, sp, #160	; 0xa0
 8005b56:	4649      	mov	r1, r9
 8005b58:	9807      	ldr	r0, [sp, #28]
 8005b5a:	f003 fe33 	bl	80097c4 <__ssprint_r>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	f040 80f0 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005b64:	ac2b      	add	r4, sp, #172	; 0xac
 8005b66:	e7b3      	b.n	8005ad0 <_svfprintf_r+0x1144>
 8005b68:	aa28      	add	r2, sp, #160	; 0xa0
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	9807      	ldr	r0, [sp, #28]
 8005b6e:	f003 fe29 	bl	80097c4 <__ssprint_r>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	f040 80e6 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005b78:	ac2b      	add	r4, sp, #172	; 0xac
 8005b7a:	e7bf      	b.n	8005afc <_svfprintf_r+0x1170>
 8005b7c:	2010      	movs	r0, #16
 8005b7e:	2a07      	cmp	r2, #7
 8005b80:	4403      	add	r3, r0
 8005b82:	6060      	str	r0, [r4, #4]
 8005b84:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8005b88:	dd08      	ble.n	8005b9c <_svfprintf_r+0x1210>
 8005b8a:	aa28      	add	r2, sp, #160	; 0xa0
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	9807      	ldr	r0, [sp, #28]
 8005b90:	f003 fe18 	bl	80097c4 <__ssprint_r>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	f040 80d5 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005b9a:	a92b      	add	r1, sp, #172	; 0xac
 8005b9c:	3d10      	subs	r5, #16
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	e7b4      	b.n	8005b0c <_svfprintf_r+0x1180>
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	e7cb      	b.n	8005b3e <_svfprintf_r+0x11b2>
 8005ba6:	aa28      	add	r2, sp, #160	; 0xa0
 8005ba8:	4649      	mov	r1, r9
 8005baa:	9807      	ldr	r0, [sp, #28]
 8005bac:	f003 fe0a 	bl	80097c4 <__ssprint_r>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	f040 80c7 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005bb6:	ac2b      	add	r4, sp, #172	; 0xac
 8005bb8:	e719      	b.n	80059ee <_svfprintf_r+0x1062>
 8005bba:	aa28      	add	r2, sp, #160	; 0xa0
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	9807      	ldr	r0, [sp, #28]
 8005bc0:	f003 fe00 	bl	80097c4 <__ssprint_r>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	f040 80bd 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005bca:	ac2b      	add	r4, sp, #172	; 0xac
 8005bcc:	e727      	b.n	8005a1e <_svfprintf_r+0x1092>
 8005bce:	bf00      	nop
 8005bd0:	0800a166 	.word	0x0800a166
 8005bd4:	9a08      	ldr	r2, [sp, #32]
 8005bd6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005bd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005bda:	2a01      	cmp	r2, #1
 8005bdc:	f105 0501 	add.w	r5, r5, #1
 8005be0:	f103 0301 	add.w	r3, r3, #1
 8005be4:	f104 0608 	add.w	r6, r4, #8
 8005be8:	dc02      	bgt.n	8005bf0 <_svfprintf_r+0x1264>
 8005bea:	f01a 0f01 	tst.w	sl, #1
 8005bee:	d07d      	beq.n	8005cec <_svfprintf_r+0x1360>
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	2b07      	cmp	r3, #7
 8005bf4:	f8c4 b000 	str.w	fp, [r4]
 8005bf8:	6062      	str	r2, [r4, #4]
 8005bfa:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8005bfe:	dd08      	ble.n	8005c12 <_svfprintf_r+0x1286>
 8005c00:	aa28      	add	r2, sp, #160	; 0xa0
 8005c02:	4649      	mov	r1, r9
 8005c04:	9807      	ldr	r0, [sp, #28]
 8005c06:	f003 fddd 	bl	80097c4 <__ssprint_r>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	f040 809a 	bne.w	8005d44 <_svfprintf_r+0x13b8>
 8005c10:	ae2b      	add	r6, sp, #172	; 0xac
 8005c12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005c14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c16:	6033      	str	r3, [r6, #0]
 8005c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c1a:	6073      	str	r3, [r6, #4]
 8005c1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005c1e:	4413      	add	r3, r2
 8005c20:	932a      	str	r3, [sp, #168]	; 0xa8
 8005c22:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005c24:	3301      	adds	r3, #1
 8005c26:	2b07      	cmp	r3, #7
 8005c28:	9329      	str	r3, [sp, #164]	; 0xa4
 8005c2a:	dc31      	bgt.n	8005c90 <_svfprintf_r+0x1304>
 8005c2c:	3608      	adds	r6, #8
 8005c2e:	9b08      	ldr	r3, [sp, #32]
 8005c30:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8005c34:	1e5c      	subs	r4, r3, #1
 8005c36:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8005c3a:	f7fa feb5 	bl	80009a8 <__aeabi_dcmpeq>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d12f      	bne.n	8005ca2 <_svfprintf_r+0x1316>
 8005c42:	f10b 0301 	add.w	r3, fp, #1
 8005c46:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005c48:	e9c6 3400 	strd	r3, r4, [r6]
 8005c4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005c4e:	9908      	ldr	r1, [sp, #32]
 8005c50:	3201      	adds	r2, #1
 8005c52:	3b01      	subs	r3, #1
 8005c54:	440b      	add	r3, r1
 8005c56:	2a07      	cmp	r2, #7
 8005c58:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8005c5c:	dd4f      	ble.n	8005cfe <_svfprintf_r+0x1372>
 8005c5e:	aa28      	add	r2, sp, #160	; 0xa0
 8005c60:	4649      	mov	r1, r9
 8005c62:	9807      	ldr	r0, [sp, #28]
 8005c64:	f003 fdae 	bl	80097c4 <__ssprint_r>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d16b      	bne.n	8005d44 <_svfprintf_r+0x13b8>
 8005c6c:	ae2b      	add	r6, sp, #172	; 0xac
 8005c6e:	ab24      	add	r3, sp, #144	; 0x90
 8005c70:	6033      	str	r3, [r6, #0]
 8005c72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c74:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005c76:	6073      	str	r3, [r6, #4]
 8005c78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005c7a:	4413      	add	r3, r2
 8005c7c:	932a      	str	r3, [sp, #168]	; 0xa8
 8005c7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005c80:	3301      	adds	r3, #1
 8005c82:	2b07      	cmp	r3, #7
 8005c84:	9329      	str	r3, [sp, #164]	; 0xa4
 8005c86:	f73f adb3 	bgt.w	80057f0 <_svfprintf_r+0xe64>
 8005c8a:	f106 0408 	add.w	r4, r6, #8
 8005c8e:	e413      	b.n	80054b8 <_svfprintf_r+0xb2c>
 8005c90:	aa28      	add	r2, sp, #160	; 0xa0
 8005c92:	4649      	mov	r1, r9
 8005c94:	9807      	ldr	r0, [sp, #28]
 8005c96:	f003 fd95 	bl	80097c4 <__ssprint_r>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d152      	bne.n	8005d44 <_svfprintf_r+0x13b8>
 8005c9e:	ae2b      	add	r6, sp, #172	; 0xac
 8005ca0:	e7c5      	b.n	8005c2e <_svfprintf_r+0x12a2>
 8005ca2:	2c00      	cmp	r4, #0
 8005ca4:	dde3      	ble.n	8005c6e <_svfprintf_r+0x12e2>
 8005ca6:	2710      	movs	r7, #16
 8005ca8:	4d3d      	ldr	r5, [pc, #244]	; (8005da0 <_svfprintf_r+0x1414>)
 8005caa:	2c10      	cmp	r4, #16
 8005cac:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8005cb0:	f106 0108 	add.w	r1, r6, #8
 8005cb4:	f103 0301 	add.w	r3, r3, #1
 8005cb8:	6035      	str	r5, [r6, #0]
 8005cba:	dc07      	bgt.n	8005ccc <_svfprintf_r+0x1340>
 8005cbc:	6074      	str	r4, [r6, #4]
 8005cbe:	2b07      	cmp	r3, #7
 8005cc0:	4414      	add	r4, r2
 8005cc2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8005cc6:	dcca      	bgt.n	8005c5e <_svfprintf_r+0x12d2>
 8005cc8:	460e      	mov	r6, r1
 8005cca:	e7d0      	b.n	8005c6e <_svfprintf_r+0x12e2>
 8005ccc:	3210      	adds	r2, #16
 8005cce:	2b07      	cmp	r3, #7
 8005cd0:	6077      	str	r7, [r6, #4]
 8005cd2:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8005cd6:	dd06      	ble.n	8005ce6 <_svfprintf_r+0x135a>
 8005cd8:	aa28      	add	r2, sp, #160	; 0xa0
 8005cda:	4649      	mov	r1, r9
 8005cdc:	9807      	ldr	r0, [sp, #28]
 8005cde:	f003 fd71 	bl	80097c4 <__ssprint_r>
 8005ce2:	bb78      	cbnz	r0, 8005d44 <_svfprintf_r+0x13b8>
 8005ce4:	a92b      	add	r1, sp, #172	; 0xac
 8005ce6:	3c10      	subs	r4, #16
 8005ce8:	460e      	mov	r6, r1
 8005cea:	e7de      	b.n	8005caa <_svfprintf_r+0x131e>
 8005cec:	2201      	movs	r2, #1
 8005cee:	2b07      	cmp	r3, #7
 8005cf0:	f8c4 b000 	str.w	fp, [r4]
 8005cf4:	6062      	str	r2, [r4, #4]
 8005cf6:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8005cfa:	ddb8      	ble.n	8005c6e <_svfprintf_r+0x12e2>
 8005cfc:	e7af      	b.n	8005c5e <_svfprintf_r+0x12d2>
 8005cfe:	3608      	adds	r6, #8
 8005d00:	e7b5      	b.n	8005c6e <_svfprintf_r+0x12e2>
 8005d02:	460c      	mov	r4, r1
 8005d04:	f7ff bbd8 	b.w	80054b8 <_svfprintf_r+0xb2c>
 8005d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d0c:	1a9d      	subs	r5, r3, r2
 8005d0e:	2d00      	cmp	r5, #0
 8005d10:	f77f abd6 	ble.w	80054c0 <_svfprintf_r+0xb34>
 8005d14:	2710      	movs	r7, #16
 8005d16:	4e23      	ldr	r6, [pc, #140]	; (8005da4 <_svfprintf_r+0x1418>)
 8005d18:	2d10      	cmp	r5, #16
 8005d1a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8005d1e:	6026      	str	r6, [r4, #0]
 8005d20:	f103 0301 	add.w	r3, r3, #1
 8005d24:	dc18      	bgt.n	8005d58 <_svfprintf_r+0x13cc>
 8005d26:	6065      	str	r5, [r4, #4]
 8005d28:	2b07      	cmp	r3, #7
 8005d2a:	4415      	add	r5, r2
 8005d2c:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8005d30:	f77f abc6 	ble.w	80054c0 <_svfprintf_r+0xb34>
 8005d34:	aa28      	add	r2, sp, #160	; 0xa0
 8005d36:	4649      	mov	r1, r9
 8005d38:	9807      	ldr	r0, [sp, #28]
 8005d3a:	f003 fd43 	bl	80097c4 <__ssprint_r>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f43f abbe 	beq.w	80054c0 <_svfprintf_r+0xb34>
 8005d44:	f1b8 0f00 	cmp.w	r8, #0
 8005d48:	f43f a8a9 	beq.w	8004e9e <_svfprintf_r+0x512>
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	9807      	ldr	r0, [sp, #28]
 8005d50:	f002 faf2 	bl	8008338 <_free_r>
 8005d54:	f7ff b8a3 	b.w	8004e9e <_svfprintf_r+0x512>
 8005d58:	3210      	adds	r2, #16
 8005d5a:	2b07      	cmp	r3, #7
 8005d5c:	6067      	str	r7, [r4, #4]
 8005d5e:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8005d62:	dc02      	bgt.n	8005d6a <_svfprintf_r+0x13de>
 8005d64:	3408      	adds	r4, #8
 8005d66:	3d10      	subs	r5, #16
 8005d68:	e7d6      	b.n	8005d18 <_svfprintf_r+0x138c>
 8005d6a:	aa28      	add	r2, sp, #160	; 0xa0
 8005d6c:	4649      	mov	r1, r9
 8005d6e:	9807      	ldr	r0, [sp, #28]
 8005d70:	f003 fd28 	bl	80097c4 <__ssprint_r>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d1e5      	bne.n	8005d44 <_svfprintf_r+0x13b8>
 8005d78:	ac2b      	add	r4, sp, #172	; 0xac
 8005d7a:	e7f4      	b.n	8005d66 <_svfprintf_r+0x13da>
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	9807      	ldr	r0, [sp, #28]
 8005d80:	f002 fada 	bl	8008338 <_free_r>
 8005d84:	f7ff bbb4 	b.w	80054f0 <_svfprintf_r+0xb64>
 8005d88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f43f a887 	beq.w	8004e9e <_svfprintf_r+0x512>
 8005d90:	aa28      	add	r2, sp, #160	; 0xa0
 8005d92:	4649      	mov	r1, r9
 8005d94:	9807      	ldr	r0, [sp, #28]
 8005d96:	f003 fd15 	bl	80097c4 <__ssprint_r>
 8005d9a:	f7ff b880 	b.w	8004e9e <_svfprintf_r+0x512>
 8005d9e:	bf00      	nop
 8005da0:	0800a166 	.word	0x0800a166
 8005da4:	0800a156 	.word	0x0800a156

08005da8 <_vfprintf_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	b0d5      	sub	sp, #340	; 0x154
 8005dae:	4689      	mov	r9, r1
 8005db0:	9207      	str	r2, [sp, #28]
 8005db2:	461c      	mov	r4, r3
 8005db4:	461e      	mov	r6, r3
 8005db6:	4683      	mov	fp, r0
 8005db8:	f002 fce6 	bl	8008788 <_localeconv_r>
 8005dbc:	6803      	ldr	r3, [r0, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	931a      	str	r3, [sp, #104]	; 0x68
 8005dc2:	f7fa f9c5 	bl	8000150 <strlen>
 8005dc6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005dc8:	f1bb 0f00 	cmp.w	fp, #0
 8005dcc:	d005      	beq.n	8005dda <_vfprintf_r+0x32>
 8005dce:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8005dd2:	b913      	cbnz	r3, 8005dda <_vfprintf_r+0x32>
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	f002 fa1f 	bl	8008218 <__sinit>
 8005dda:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8005dde:	07d8      	lsls	r0, r3, #31
 8005de0:	d407      	bmi.n	8005df2 <_vfprintf_r+0x4a>
 8005de2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005de6:	0599      	lsls	r1, r3, #22
 8005de8:	d403      	bmi.n	8005df2 <_vfprintf_r+0x4a>
 8005dea:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8005dee:	f002 fcdb 	bl	80087a8 <__retarget_lock_acquire_recursive>
 8005df2:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8005df6:	049a      	lsls	r2, r3, #18
 8005df8:	d409      	bmi.n	8005e0e <_vfprintf_r+0x66>
 8005dfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dfe:	f8a9 300c 	strh.w	r3, [r9, #12]
 8005e02:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8005e06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e0a:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8005e0e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005e12:	071f      	lsls	r7, r3, #28
 8005e14:	d502      	bpl.n	8005e1c <_vfprintf_r+0x74>
 8005e16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e1a:	b9a3      	cbnz	r3, 8005e46 <_vfprintf_r+0x9e>
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	4658      	mov	r0, fp
 8005e20:	f001 fa66 	bl	80072f0 <__swsetup_r>
 8005e24:	b178      	cbz	r0, 8005e46 <_vfprintf_r+0x9e>
 8005e26:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8005e2a:	07dd      	lsls	r5, r3, #31
 8005e2c:	d407      	bmi.n	8005e3e <_vfprintf_r+0x96>
 8005e2e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005e32:	059c      	lsls	r4, r3, #22
 8005e34:	d403      	bmi.n	8005e3e <_vfprintf_r+0x96>
 8005e36:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8005e3a:	f002 fcb6 	bl	80087aa <__retarget_lock_release_recursive>
 8005e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e42:	9310      	str	r3, [sp, #64]	; 0x40
 8005e44:	e01a      	b.n	8005e7c <_vfprintf_r+0xd4>
 8005e46:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005e4a:	f003 021a 	and.w	r2, r3, #26
 8005e4e:	2a0a      	cmp	r2, #10
 8005e50:	d118      	bne.n	8005e84 <_vfprintf_r+0xdc>
 8005e52:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	db14      	blt.n	8005e84 <_vfprintf_r+0xdc>
 8005e5a:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8005e5e:	07d0      	lsls	r0, r2, #31
 8005e60:	d405      	bmi.n	8005e6e <_vfprintf_r+0xc6>
 8005e62:	0599      	lsls	r1, r3, #22
 8005e64:	d403      	bmi.n	8005e6e <_vfprintf_r+0xc6>
 8005e66:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8005e6a:	f002 fc9e 	bl	80087aa <__retarget_lock_release_recursive>
 8005e6e:	4623      	mov	r3, r4
 8005e70:	9a07      	ldr	r2, [sp, #28]
 8005e72:	4649      	mov	r1, r9
 8005e74:	4658      	mov	r0, fp
 8005e76:	f001 f9fb 	bl	8007270 <__sbprintf>
 8005e7a:	9010      	str	r0, [sp, #64]	; 0x40
 8005e7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005e7e:	b055      	add	sp, #340	; 0x154
 8005e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e84:	2300      	movs	r3, #0
 8005e86:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8005e8a:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8005e8e:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 8005e92:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8005e96:	ac2b      	add	r4, sp, #172	; 0xac
 8005e98:	9428      	str	r4, [sp, #160]	; 0xa0
 8005e9a:	9308      	str	r3, [sp, #32]
 8005e9c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e9e:	9316      	str	r3, [sp, #88]	; 0x58
 8005ea0:	931d      	str	r3, [sp, #116]	; 0x74
 8005ea2:	9310      	str	r3, [sp, #64]	; 0x40
 8005ea4:	9d07      	ldr	r5, [sp, #28]
 8005ea6:	462b      	mov	r3, r5
 8005ea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eac:	b112      	cbz	r2, 8005eb4 <_vfprintf_r+0x10c>
 8005eae:	2a25      	cmp	r2, #37	; 0x25
 8005eb0:	f040 80e4 	bne.w	800607c <_vfprintf_r+0x2d4>
 8005eb4:	9b07      	ldr	r3, [sp, #28]
 8005eb6:	1aef      	subs	r7, r5, r3
 8005eb8:	d00e      	beq.n	8005ed8 <_vfprintf_r+0x130>
 8005eba:	e9c4 3700 	strd	r3, r7, [r4]
 8005ebe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005ec0:	443b      	add	r3, r7
 8005ec2:	932a      	str	r3, [sp, #168]	; 0xa8
 8005ec4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	2b07      	cmp	r3, #7
 8005eca:	9329      	str	r3, [sp, #164]	; 0xa4
 8005ecc:	f300 80d8 	bgt.w	8006080 <_vfprintf_r+0x2d8>
 8005ed0:	3408      	adds	r4, #8
 8005ed2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ed4:	443b      	add	r3, r7
 8005ed6:	9310      	str	r3, [sp, #64]	; 0x40
 8005ed8:	782b      	ldrb	r3, [r5, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f001 81b5 	beq.w	800724a <_vfprintf_r+0x14a2>
 8005ee0:	1c6b      	adds	r3, r5, #1
 8005ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005eea:	469a      	mov	sl, r3
 8005eec:	270a      	movs	r7, #10
 8005eee:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8005ef2:	9311      	str	r3, [sp, #68]	; 0x44
 8005ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8005efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005efc:	3301      	adds	r3, #1
 8005efe:	930e      	str	r3, [sp, #56]	; 0x38
 8005f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f02:	3b20      	subs	r3, #32
 8005f04:	2b5a      	cmp	r3, #90	; 0x5a
 8005f06:	f200 8627 	bhi.w	8006b58 <_vfprintf_r+0xdb0>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <_vfprintf_r+0x168>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08006113 	.word	0x08006113
 8005f14:	08006b59 	.word	0x08006b59
 8005f18:	08006b59 	.word	0x08006b59
 8005f1c:	08006125 	.word	0x08006125
 8005f20:	08006b59 	.word	0x08006b59
 8005f24:	08006b59 	.word	0x08006b59
 8005f28:	08006b59 	.word	0x08006b59
 8005f2c:	080060d9 	.word	0x080060d9
 8005f30:	08006b59 	.word	0x08006b59
 8005f34:	08006b59 	.word	0x08006b59
 8005f38:	0800612b 	.word	0x0800612b
 8005f3c:	08006141 	.word	0x08006141
 8005f40:	08006b59 	.word	0x08006b59
 8005f44:	0800613b 	.word	0x0800613b
 8005f48:	08006145 	.word	0x08006145
 8005f4c:	08006b59 	.word	0x08006b59
 8005f50:	08006177 	.word	0x08006177
 8005f54:	0800617d 	.word	0x0800617d
 8005f58:	0800617d 	.word	0x0800617d
 8005f5c:	0800617d 	.word	0x0800617d
 8005f60:	0800617d 	.word	0x0800617d
 8005f64:	0800617d 	.word	0x0800617d
 8005f68:	0800617d 	.word	0x0800617d
 8005f6c:	0800617d 	.word	0x0800617d
 8005f70:	0800617d 	.word	0x0800617d
 8005f74:	0800617d 	.word	0x0800617d
 8005f78:	08006b59 	.word	0x08006b59
 8005f7c:	08006b59 	.word	0x08006b59
 8005f80:	08006b59 	.word	0x08006b59
 8005f84:	08006b59 	.word	0x08006b59
 8005f88:	08006b59 	.word	0x08006b59
 8005f8c:	08006b59 	.word	0x08006b59
 8005f90:	08006b59 	.word	0x08006b59
 8005f94:	08006269 	.word	0x08006269
 8005f98:	08006b59 	.word	0x08006b59
 8005f9c:	080061d7 	.word	0x080061d7
 8005fa0:	080061f9 	.word	0x080061f9
 8005fa4:	08006269 	.word	0x08006269
 8005fa8:	08006269 	.word	0x08006269
 8005fac:	08006269 	.word	0x08006269
 8005fb0:	08006b59 	.word	0x08006b59
 8005fb4:	08006b59 	.word	0x08006b59
 8005fb8:	08006b59 	.word	0x08006b59
 8005fbc:	08006b59 	.word	0x08006b59
 8005fc0:	0800619d 	.word	0x0800619d
 8005fc4:	08006b59 	.word	0x08006b59
 8005fc8:	08006b59 	.word	0x08006b59
 8005fcc:	0800674d 	.word	0x0800674d
 8005fd0:	08006b59 	.word	0x08006b59
 8005fd4:	08006b59 	.word	0x08006b59
 8005fd8:	08006b59 	.word	0x08006b59
 8005fdc:	080067d9 	.word	0x080067d9
 8005fe0:	08006b59 	.word	0x08006b59
 8005fe4:	080069b9 	.word	0x080069b9
 8005fe8:	08006b59 	.word	0x08006b59
 8005fec:	08006b59 	.word	0x08006b59
 8005ff0:	08006099 	.word	0x08006099
 8005ff4:	08006b59 	.word	0x08006b59
 8005ff8:	08006b59 	.word	0x08006b59
 8005ffc:	08006b59 	.word	0x08006b59
 8006000:	08006b59 	.word	0x08006b59
 8006004:	08006b59 	.word	0x08006b59
 8006008:	08006b59 	.word	0x08006b59
 800600c:	08006b59 	.word	0x08006b59
 8006010:	08006b59 	.word	0x08006b59
 8006014:	08006269 	.word	0x08006269
 8006018:	08006b59 	.word	0x08006b59
 800601c:	080061d7 	.word	0x080061d7
 8006020:	080061fd 	.word	0x080061fd
 8006024:	08006269 	.word	0x08006269
 8006028:	08006269 	.word	0x08006269
 800602c:	08006269 	.word	0x08006269
 8006030:	080061a3 	.word	0x080061a3
 8006034:	080061fd 	.word	0x080061fd
 8006038:	080061cb 	.word	0x080061cb
 800603c:	08006b59 	.word	0x08006b59
 8006040:	080061bd 	.word	0x080061bd
 8006044:	08006b59 	.word	0x08006b59
 8006048:	08006707 	.word	0x08006707
 800604c:	08006751 	.word	0x08006751
 8006050:	080067b9 	.word	0x080067b9
 8006054:	080061cb 	.word	0x080061cb
 8006058:	08006b59 	.word	0x08006b59
 800605c:	080067d9 	.word	0x080067d9
 8006060:	08005ef5 	.word	0x08005ef5
 8006064:	080069bd 	.word	0x080069bd
 8006068:	08006b59 	.word	0x08006b59
 800606c:	08006b59 	.word	0x08006b59
 8006070:	080069fb 	.word	0x080069fb
 8006074:	08006b59 	.word	0x08006b59
 8006078:	08005ef5 	.word	0x08005ef5
 800607c:	461d      	mov	r5, r3
 800607e:	e712      	b.n	8005ea6 <_vfprintf_r+0xfe>
 8006080:	aa28      	add	r2, sp, #160	; 0xa0
 8006082:	4649      	mov	r1, r9
 8006084:	4658      	mov	r0, fp
 8006086:	f003 fc22 	bl	80098ce <__sprint_r>
 800608a:	2800      	cmp	r0, #0
 800608c:	f040 8157 	bne.w	800633e <_vfprintf_r+0x596>
 8006090:	ac2b      	add	r4, sp, #172	; 0xac
 8006092:	e71e      	b.n	8005ed2 <_vfprintf_r+0x12a>
 8006094:	461e      	mov	r6, r3
 8006096:	e72d      	b.n	8005ef4 <_vfprintf_r+0x14c>
 8006098:	4bb2      	ldr	r3, [pc, #712]	; (8006364 <_vfprintf_r+0x5bc>)
 800609a:	f01a 0f20 	tst.w	sl, #32
 800609e:	931c      	str	r3, [sp, #112]	; 0x70
 80060a0:	f000 84ae 	beq.w	8006a00 <_vfprintf_r+0xc58>
 80060a4:	3607      	adds	r6, #7
 80060a6:	f026 0607 	bic.w	r6, r6, #7
 80060aa:	f106 0308 	add.w	r3, r6, #8
 80060ae:	930d      	str	r3, [sp, #52]	; 0x34
 80060b0:	e9d6 6700 	ldrd	r6, r7, [r6]
 80060b4:	f01a 0f01 	tst.w	sl, #1
 80060b8:	d00a      	beq.n	80060d0 <_vfprintf_r+0x328>
 80060ba:	ea56 0307 	orrs.w	r3, r6, r7
 80060be:	d007      	beq.n	80060d0 <_vfprintf_r+0x328>
 80060c0:	2330      	movs	r3, #48	; 0x30
 80060c2:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80060c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c8:	f04a 0a02 	orr.w	sl, sl, #2
 80060cc:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 80060d0:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80060d4:	2302      	movs	r3, #2
 80060d6:	e349      	b.n	800676c <_vfprintf_r+0x9c4>
 80060d8:	4658      	mov	r0, fp
 80060da:	f002 fb55 	bl	8008788 <_localeconv_r>
 80060de:	6843      	ldr	r3, [r0, #4]
 80060e0:	4618      	mov	r0, r3
 80060e2:	931d      	str	r3, [sp, #116]	; 0x74
 80060e4:	f7fa f834 	bl	8000150 <strlen>
 80060e8:	9016      	str	r0, [sp, #88]	; 0x58
 80060ea:	4658      	mov	r0, fp
 80060ec:	f002 fb4c 	bl	8008788 <_localeconv_r>
 80060f0:	6883      	ldr	r3, [r0, #8]
 80060f2:	930c      	str	r3, [sp, #48]	; 0x30
 80060f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f43f aefc 	beq.w	8005ef4 <_vfprintf_r+0x14c>
 80060fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f43f aef8 	beq.w	8005ef4 <_vfprintf_r+0x14c>
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f43f aef4 	beq.w	8005ef4 <_vfprintf_r+0x14c>
 800610c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8006110:	e6f0      	b.n	8005ef4 <_vfprintf_r+0x14c>
 8006112:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8006116:	2b00      	cmp	r3, #0
 8006118:	f47f aeec 	bne.w	8005ef4 <_vfprintf_r+0x14c>
 800611c:	2320      	movs	r3, #32
 800611e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8006122:	e6e7      	b.n	8005ef4 <_vfprintf_r+0x14c>
 8006124:	f04a 0a01 	orr.w	sl, sl, #1
 8006128:	e6e4      	b.n	8005ef4 <_vfprintf_r+0x14c>
 800612a:	6832      	ldr	r2, [r6, #0]
 800612c:	1d33      	adds	r3, r6, #4
 800612e:	2a00      	cmp	r2, #0
 8006130:	9211      	str	r2, [sp, #68]	; 0x44
 8006132:	daaf      	bge.n	8006094 <_vfprintf_r+0x2ec>
 8006134:	461e      	mov	r6, r3
 8006136:	4252      	negs	r2, r2
 8006138:	9211      	str	r2, [sp, #68]	; 0x44
 800613a:	f04a 0a04 	orr.w	sl, sl, #4
 800613e:	e6d9      	b.n	8005ef4 <_vfprintf_r+0x14c>
 8006140:	232b      	movs	r3, #43	; 0x2b
 8006142:	e7ec      	b.n	800611e <_vfprintf_r+0x376>
 8006144:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006148:	7812      	ldrb	r2, [r2, #0]
 800614a:	3301      	adds	r3, #1
 800614c:	2a2a      	cmp	r2, #42	; 0x2a
 800614e:	920a      	str	r2, [sp, #40]	; 0x28
 8006150:	d10f      	bne.n	8006172 <_vfprintf_r+0x3ca>
 8006152:	6835      	ldr	r5, [r6, #0]
 8006154:	930e      	str	r3, [sp, #56]	; 0x38
 8006156:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800615a:	3604      	adds	r6, #4
 800615c:	e6ca      	b.n	8005ef4 <_vfprintf_r+0x14c>
 800615e:	fb07 2505 	mla	r5, r7, r5, r2
 8006162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006166:	920a      	str	r2, [sp, #40]	; 0x28
 8006168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800616a:	3a30      	subs	r2, #48	; 0x30
 800616c:	2a09      	cmp	r2, #9
 800616e:	d9f6      	bls.n	800615e <_vfprintf_r+0x3b6>
 8006170:	e6c5      	b.n	8005efe <_vfprintf_r+0x156>
 8006172:	2500      	movs	r5, #0
 8006174:	e7f8      	b.n	8006168 <_vfprintf_r+0x3c0>
 8006176:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800617a:	e6bb      	b.n	8005ef4 <_vfprintf_r+0x14c>
 800617c:	2200      	movs	r2, #0
 800617e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006180:	9211      	str	r2, [sp, #68]	; 0x44
 8006182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006184:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006186:	3a30      	subs	r2, #48	; 0x30
 8006188:	fb07 2201 	mla	r2, r7, r1, r2
 800618c:	9211      	str	r2, [sp, #68]	; 0x44
 800618e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006192:	920a      	str	r2, [sp, #40]	; 0x28
 8006194:	3a30      	subs	r2, #48	; 0x30
 8006196:	2a09      	cmp	r2, #9
 8006198:	d9f3      	bls.n	8006182 <_vfprintf_r+0x3da>
 800619a:	e6b0      	b.n	8005efe <_vfprintf_r+0x156>
 800619c:	f04a 0a08 	orr.w	sl, sl, #8
 80061a0:	e6a8      	b.n	8005ef4 <_vfprintf_r+0x14c>
 80061a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b68      	cmp	r3, #104	; 0x68
 80061a8:	bf01      	itttt	eq
 80061aa:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 80061ac:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80061b0:	3301      	addeq	r3, #1
 80061b2:	930e      	streq	r3, [sp, #56]	; 0x38
 80061b4:	bf18      	it	ne
 80061b6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80061ba:	e69b      	b.n	8005ef4 <_vfprintf_r+0x14c>
 80061bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b6c      	cmp	r3, #108	; 0x6c
 80061c2:	d105      	bne.n	80061d0 <_vfprintf_r+0x428>
 80061c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061c6:	3301      	adds	r3, #1
 80061c8:	930e      	str	r3, [sp, #56]	; 0x38
 80061ca:	f04a 0a20 	orr.w	sl, sl, #32
 80061ce:	e691      	b.n	8005ef4 <_vfprintf_r+0x14c>
 80061d0:	f04a 0a10 	orr.w	sl, sl, #16
 80061d4:	e68e      	b.n	8005ef4 <_vfprintf_r+0x14c>
 80061d6:	2000      	movs	r0, #0
 80061d8:	1d33      	adds	r3, r6, #4
 80061da:	930d      	str	r3, [sp, #52]	; 0x34
 80061dc:	6833      	ldr	r3, [r6, #0]
 80061de:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 80061e2:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 80061e6:	ab3b      	add	r3, sp, #236	; 0xec
 80061e8:	4680      	mov	r8, r0
 80061ea:	2501      	movs	r5, #1
 80061ec:	9012      	str	r0, [sp, #72]	; 0x48
 80061ee:	4607      	mov	r7, r0
 80061f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80061f2:	4606      	mov	r6, r0
 80061f4:	9307      	str	r3, [sp, #28]
 80061f6:	e308      	b.n	800680a <_vfprintf_r+0xa62>
 80061f8:	f04a 0a10 	orr.w	sl, sl, #16
 80061fc:	f01a 0f20 	tst.w	sl, #32
 8006200:	d01f      	beq.n	8006242 <_vfprintf_r+0x49a>
 8006202:	3607      	adds	r6, #7
 8006204:	f026 0607 	bic.w	r6, r6, #7
 8006208:	f106 0308 	add.w	r3, r6, #8
 800620c:	930d      	str	r3, [sp, #52]	; 0x34
 800620e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8006212:	2e00      	cmp	r6, #0
 8006214:	f177 0300 	sbcs.w	r3, r7, #0
 8006218:	da05      	bge.n	8006226 <_vfprintf_r+0x47e>
 800621a:	232d      	movs	r3, #45	; 0x2d
 800621c:	4276      	negs	r6, r6
 800621e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006222:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8006226:	1c6b      	adds	r3, r5, #1
 8006228:	f040 83fd 	bne.w	8006a26 <_vfprintf_r+0xc7e>
 800622c:	2f00      	cmp	r7, #0
 800622e:	bf08      	it	eq
 8006230:	2e0a      	cmpeq	r6, #10
 8006232:	f080 8425 	bcs.w	8006a80 <_vfprintf_r+0xcd8>
 8006236:	3630      	adds	r6, #48	; 0x30
 8006238:	ab54      	add	r3, sp, #336	; 0x150
 800623a:	f803 6d01 	strb.w	r6, [r3, #-1]!
 800623e:	f000 bc15 	b.w	8006a6c <_vfprintf_r+0xcc4>
 8006242:	1d33      	adds	r3, r6, #4
 8006244:	f01a 0f10 	tst.w	sl, #16
 8006248:	930d      	str	r3, [sp, #52]	; 0x34
 800624a:	d002      	beq.n	8006252 <_vfprintf_r+0x4aa>
 800624c:	6836      	ldr	r6, [r6, #0]
 800624e:	17f7      	asrs	r7, r6, #31
 8006250:	e7df      	b.n	8006212 <_vfprintf_r+0x46a>
 8006252:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006256:	6836      	ldr	r6, [r6, #0]
 8006258:	d001      	beq.n	800625e <_vfprintf_r+0x4b6>
 800625a:	b236      	sxth	r6, r6
 800625c:	e7f7      	b.n	800624e <_vfprintf_r+0x4a6>
 800625e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006262:	bf18      	it	ne
 8006264:	b276      	sxtbne	r6, r6
 8006266:	e7f2      	b.n	800624e <_vfprintf_r+0x4a6>
 8006268:	3607      	adds	r6, #7
 800626a:	f026 0607 	bic.w	r6, r6, #7
 800626e:	f106 0308 	add.w	r3, r6, #8
 8006272:	930d      	str	r3, [sp, #52]	; 0x34
 8006274:	6833      	ldr	r3, [r6, #0]
 8006276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800627a:	9314      	str	r3, [sp, #80]	; 0x50
 800627c:	6873      	ldr	r3, [r6, #4]
 800627e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006280:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8006284:	9313      	str	r3, [sp, #76]	; 0x4c
 8006286:	4638      	mov	r0, r7
 8006288:	4b37      	ldr	r3, [pc, #220]	; (8006368 <_vfprintf_r+0x5c0>)
 800628a:	4631      	mov	r1, r6
 800628c:	f7fa fbbe 	bl	8000a0c <__aeabi_dcmpun>
 8006290:	bb08      	cbnz	r0, 80062d6 <_vfprintf_r+0x52e>
 8006292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006296:	4b34      	ldr	r3, [pc, #208]	; (8006368 <_vfprintf_r+0x5c0>)
 8006298:	4638      	mov	r0, r7
 800629a:	4631      	mov	r1, r6
 800629c:	f7fa fb98 	bl	80009d0 <__aeabi_dcmple>
 80062a0:	b9c8      	cbnz	r0, 80062d6 <_vfprintf_r+0x52e>
 80062a2:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80062a6:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 80062aa:	f7fa fb87 	bl	80009bc <__aeabi_dcmplt>
 80062ae:	b110      	cbz	r0, 80062b6 <_vfprintf_r+0x50e>
 80062b0:	232d      	movs	r3, #45	; 0x2d
 80062b2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80062b6:	4a2d      	ldr	r2, [pc, #180]	; (800636c <_vfprintf_r+0x5c4>)
 80062b8:	4b2d      	ldr	r3, [pc, #180]	; (8006370 <_vfprintf_r+0x5c8>)
 80062ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80062bc:	f04f 0800 	mov.w	r8, #0
 80062c0:	2947      	cmp	r1, #71	; 0x47
 80062c2:	bfd8      	it	le
 80062c4:	461a      	movle	r2, r3
 80062c6:	2503      	movs	r5, #3
 80062c8:	9207      	str	r2, [sp, #28]
 80062ca:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80062ce:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 80062d2:	f000 bc19 	b.w	8006b08 <_vfprintf_r+0xd60>
 80062d6:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 80062da:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 80062de:	f7fa fb95 	bl	8000a0c <__aeabi_dcmpun>
 80062e2:	4680      	mov	r8, r0
 80062e4:	b140      	cbz	r0, 80062f8 <_vfprintf_r+0x550>
 80062e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062e8:	4a22      	ldr	r2, [pc, #136]	; (8006374 <_vfprintf_r+0x5cc>)
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bfbc      	itt	lt
 80062ee:	232d      	movlt	r3, #45	; 0x2d
 80062f0:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 80062f4:	4b20      	ldr	r3, [pc, #128]	; (8006378 <_vfprintf_r+0x5d0>)
 80062f6:	e7e0      	b.n	80062ba <_vfprintf_r+0x512>
 80062f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062fa:	f023 0320 	bic.w	r3, r3, #32
 80062fe:	2b41      	cmp	r3, #65	; 0x41
 8006300:	930b      	str	r3, [sp, #44]	; 0x2c
 8006302:	d13b      	bne.n	800637c <_vfprintf_r+0x5d4>
 8006304:	2330      	movs	r3, #48	; 0x30
 8006306:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800630a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630c:	f04a 0a02 	orr.w	sl, sl, #2
 8006310:	2b61      	cmp	r3, #97	; 0x61
 8006312:	bf14      	ite	ne
 8006314:	2358      	movne	r3, #88	; 0x58
 8006316:	2378      	moveq	r3, #120	; 0x78
 8006318:	2d63      	cmp	r5, #99	; 0x63
 800631a:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 800631e:	f340 811b 	ble.w	8006558 <_vfprintf_r+0x7b0>
 8006322:	1c69      	adds	r1, r5, #1
 8006324:	4658      	mov	r0, fp
 8006326:	f002 faad 	bl	8008884 <_malloc_r>
 800632a:	9007      	str	r0, [sp, #28]
 800632c:	2800      	cmp	r0, #0
 800632e:	f040 8116 	bne.w	800655e <_vfprintf_r+0x7b6>
 8006332:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633a:	f8a9 300c 	strh.w	r3, [r9, #12]
 800633e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8006342:	07d8      	lsls	r0, r3, #31
 8006344:	d407      	bmi.n	8006356 <_vfprintf_r+0x5ae>
 8006346:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800634a:	0599      	lsls	r1, r3, #22
 800634c:	d403      	bmi.n	8006356 <_vfprintf_r+0x5ae>
 800634e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8006352:	f002 fa2a 	bl	80087aa <__retarget_lock_release_recursive>
 8006356:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800635a:	065a      	lsls	r2, r3, #25
 800635c:	f57f ad8e 	bpl.w	8005e7c <_vfprintf_r+0xd4>
 8006360:	e56d      	b.n	8005e3e <_vfprintf_r+0x96>
 8006362:	bf00      	nop
 8006364:	0800a143 	.word	0x0800a143
 8006368:	7fefffff 	.word	0x7fefffff
 800636c:	0800a126 	.word	0x0800a126
 8006370:	0800a122 	.word	0x0800a122
 8006374:	0800a12e 	.word	0x0800a12e
 8006378:	0800a12a 	.word	0x0800a12a
 800637c:	1c6a      	adds	r2, r5, #1
 800637e:	f000 80f1 	beq.w	8006564 <_vfprintf_r+0x7bc>
 8006382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006384:	2b47      	cmp	r3, #71	; 0x47
 8006386:	d102      	bne.n	800638e <_vfprintf_r+0x5e6>
 8006388:	2d00      	cmp	r5, #0
 800638a:	f000 80ed 	beq.w	8006568 <_vfprintf_r+0x7c0>
 800638e:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8006392:	9315      	str	r3, [sp, #84]	; 0x54
 8006394:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006396:	1e1e      	subs	r6, r3, #0
 8006398:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800639a:	9308      	str	r3, [sp, #32]
 800639c:	bfb7      	itett	lt
 800639e:	4633      	movlt	r3, r6
 80063a0:	2300      	movge	r3, #0
 80063a2:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 80063a6:	232d      	movlt	r3, #45	; 0x2d
 80063a8:	9319      	str	r3, [sp, #100]	; 0x64
 80063aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ac:	2b41      	cmp	r3, #65	; 0x41
 80063ae:	f040 80ec 	bne.w	800658a <_vfprintf_r+0x7e2>
 80063b2:	aa22      	add	r2, sp, #136	; 0x88
 80063b4:	9808      	ldr	r0, [sp, #32]
 80063b6:	4631      	mov	r1, r6
 80063b8:	f003 f96a 	bl	8009690 <frexp>
 80063bc:	2200      	movs	r2, #0
 80063be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80063c2:	f7fa f889 	bl	80004d8 <__aeabi_dmul>
 80063c6:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80063ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063ce:	f7fa faeb 	bl	80009a8 <__aeabi_dcmpeq>
 80063d2:	b108      	cbz	r0, 80063d8 <_vfprintf_r+0x630>
 80063d4:	2301      	movs	r3, #1
 80063d6:	9322      	str	r3, [sp, #136]	; 0x88
 80063d8:	4fa7      	ldr	r7, [pc, #668]	; (8006678 <_vfprintf_r+0x8d0>)
 80063da:	4ba8      	ldr	r3, [pc, #672]	; (800667c <_vfprintf_r+0x8d4>)
 80063dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063de:	9e07      	ldr	r6, [sp, #28]
 80063e0:	2a61      	cmp	r2, #97	; 0x61
 80063e2:	bf08      	it	eq
 80063e4:	461f      	moveq	r7, r3
 80063e6:	9712      	str	r7, [sp, #72]	; 0x48
 80063e8:	1e6f      	subs	r7, r5, #1
 80063ea:	2200      	movs	r2, #0
 80063ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063f0:	4ba3      	ldr	r3, [pc, #652]	; (8006680 <_vfprintf_r+0x8d8>)
 80063f2:	f7fa f871 	bl	80004d8 <__aeabi_dmul>
 80063f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063fa:	f7fa fb1d 	bl	8000a38 <__aeabi_d2iz>
 80063fe:	901e      	str	r0, [sp, #120]	; 0x78
 8006400:	f7fa f800 	bl	8000404 <__aeabi_i2d>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800640c:	f7f9 feac 	bl	8000168 <__aeabi_dsub>
 8006410:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006412:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006414:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006418:	5c9b      	ldrb	r3, [r3, r2]
 800641a:	971f      	str	r7, [sp, #124]	; 0x7c
 800641c:	f806 3b01 	strb.w	r3, [r6], #1
 8006420:	1c7b      	adds	r3, r7, #1
 8006422:	d006      	beq.n	8006432 <_vfprintf_r+0x68a>
 8006424:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006428:	3f01      	subs	r7, #1
 800642a:	f7fa fabd 	bl	80009a8 <__aeabi_dcmpeq>
 800642e:	2800      	cmp	r0, #0
 8006430:	d0db      	beq.n	80063ea <_vfprintf_r+0x642>
 8006432:	2200      	movs	r2, #0
 8006434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006438:	4b92      	ldr	r3, [pc, #584]	; (8006684 <_vfprintf_r+0x8dc>)
 800643a:	f7fa fadd 	bl	80009f8 <__aeabi_dcmpgt>
 800643e:	b960      	cbnz	r0, 800645a <_vfprintf_r+0x6b2>
 8006440:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006444:	2200      	movs	r2, #0
 8006446:	4b8f      	ldr	r3, [pc, #572]	; (8006684 <_vfprintf_r+0x8dc>)
 8006448:	f7fa faae 	bl	80009a8 <__aeabi_dcmpeq>
 800644c:	2800      	cmp	r0, #0
 800644e:	f000 8097 	beq.w	8006580 <_vfprintf_r+0x7d8>
 8006452:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006454:	07df      	lsls	r7, r3, #31
 8006456:	f140 8093 	bpl.w	8006580 <_vfprintf_r+0x7d8>
 800645a:	2030      	movs	r0, #48	; 0x30
 800645c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800645e:	9626      	str	r6, [sp, #152]	; 0x98
 8006460:	7bd9      	ldrb	r1, [r3, #15]
 8006462:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006464:	1e53      	subs	r3, r2, #1
 8006466:	9326      	str	r3, [sp, #152]	; 0x98
 8006468:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800646c:	428b      	cmp	r3, r1
 800646e:	d07e      	beq.n	800656e <_vfprintf_r+0x7c6>
 8006470:	2b39      	cmp	r3, #57	; 0x39
 8006472:	bf0b      	itete	eq
 8006474:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 8006476:	3301      	addne	r3, #1
 8006478:	7a9b      	ldrbeq	r3, [r3, #10]
 800647a:	b2db      	uxtbne	r3, r3
 800647c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006480:	4633      	mov	r3, r6
 8006482:	9a07      	ldr	r2, [sp, #28]
 8006484:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006486:	1a9b      	subs	r3, r3, r2
 8006488:	9308      	str	r3, [sp, #32]
 800648a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800648c:	2b47      	cmp	r3, #71	; 0x47
 800648e:	f040 80c8 	bne.w	8006622 <_vfprintf_r+0x87a>
 8006492:	1cf0      	adds	r0, r6, #3
 8006494:	db02      	blt.n	800649c <_vfprintf_r+0x6f4>
 8006496:	42b5      	cmp	r5, r6
 8006498:	f280 80f6 	bge.w	8006688 <_vfprintf_r+0x8e0>
 800649c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649e:	3b02      	subs	r3, #2
 80064a0:	930a      	str	r3, [sp, #40]	; 0x28
 80064a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064a4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80064a8:	f021 0120 	bic.w	r1, r1, #32
 80064ac:	2941      	cmp	r1, #65	; 0x41
 80064ae:	bf08      	it	eq
 80064b0:	320f      	addeq	r2, #15
 80064b2:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 80064b6:	bf06      	itte	eq
 80064b8:	b2d2      	uxtbeq	r2, r2
 80064ba:	2101      	moveq	r1, #1
 80064bc:	2100      	movne	r1, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 80064c4:	bfb4      	ite	lt
 80064c6:	222d      	movlt	r2, #45	; 0x2d
 80064c8:	222b      	movge	r2, #43	; 0x2b
 80064ca:	9322      	str	r3, [sp, #136]	; 0x88
 80064cc:	bfb8      	it	lt
 80064ce:	f1c6 0301 	rsblt	r3, r6, #1
 80064d2:	2b09      	cmp	r3, #9
 80064d4:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 80064d8:	f340 80ba 	ble.w	8006650 <_vfprintf_r+0x8a8>
 80064dc:	250a      	movs	r5, #10
 80064de:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 80064e2:	fb93 f0f5 	sdiv	r0, r3, r5
 80064e6:	fb05 3310 	mls	r3, r5, r0, r3
 80064ea:	2809      	cmp	r0, #9
 80064ec:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80064f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064f4:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 80064f8:	4603      	mov	r3, r0
 80064fa:	f300 80a2 	bgt.w	8006642 <_vfprintf_r+0x89a>
 80064fe:	3330      	adds	r3, #48	; 0x30
 8006500:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006504:	3a02      	subs	r2, #2
 8006506:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 800650a:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 800650e:	4282      	cmp	r2, r0
 8006510:	4619      	mov	r1, r3
 8006512:	f0c0 8098 	bcc.w	8006646 <_vfprintf_r+0x89e>
 8006516:	9a08      	ldr	r2, [sp, #32]
 8006518:	ab24      	add	r3, sp, #144	; 0x90
 800651a:	1acb      	subs	r3, r1, r3
 800651c:	2a01      	cmp	r2, #1
 800651e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006520:	eb03 0502 	add.w	r5, r3, r2
 8006524:	dc02      	bgt.n	800652c <_vfprintf_r+0x784>
 8006526:	f01a 0f01 	tst.w	sl, #1
 800652a:	d001      	beq.n	8006530 <_vfprintf_r+0x788>
 800652c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800652e:	441d      	add	r5, r3
 8006530:	2700      	movs	r7, #0
 8006532:	463e      	mov	r6, r7
 8006534:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8006538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800653c:	9315      	str	r3, [sp, #84]	; 0x54
 800653e:	970b      	str	r7, [sp, #44]	; 0x2c
 8006540:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8314 	beq.w	8006b70 <_vfprintf_r+0xdc8>
 8006548:	232d      	movs	r3, #45	; 0x2d
 800654a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800654e:	2300      	movs	r3, #0
 8006550:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8006554:	9312      	str	r3, [sp, #72]	; 0x48
 8006556:	e158      	b.n	800680a <_vfprintf_r+0xa62>
 8006558:	ab3b      	add	r3, sp, #236	; 0xec
 800655a:	9307      	str	r3, [sp, #28]
 800655c:	e717      	b.n	800638e <_vfprintf_r+0x5e6>
 800655e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006562:	e714      	b.n	800638e <_vfprintf_r+0x5e6>
 8006564:	2506      	movs	r5, #6
 8006566:	e712      	b.n	800638e <_vfprintf_r+0x5e6>
 8006568:	46a8      	mov	r8, r5
 800656a:	2501      	movs	r5, #1
 800656c:	e70f      	b.n	800638e <_vfprintf_r+0x5e6>
 800656e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006572:	e776      	b.n	8006462 <_vfprintf_r+0x6ba>
 8006574:	f803 1b01 	strb.w	r1, [r3], #1
 8006578:	1af2      	subs	r2, r6, r3
 800657a:	2a00      	cmp	r2, #0
 800657c:	dafa      	bge.n	8006574 <_vfprintf_r+0x7cc>
 800657e:	e780      	b.n	8006482 <_vfprintf_r+0x6da>
 8006580:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006582:	4633      	mov	r3, r6
 8006584:	2130      	movs	r1, #48	; 0x30
 8006586:	4416      	add	r6, r2
 8006588:	e7f6      	b.n	8006578 <_vfprintf_r+0x7d0>
 800658a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800658c:	2b46      	cmp	r3, #70	; 0x46
 800658e:	d004      	beq.n	800659a <_vfprintf_r+0x7f2>
 8006590:	2b45      	cmp	r3, #69	; 0x45
 8006592:	d140      	bne.n	8006616 <_vfprintf_r+0x86e>
 8006594:	1c6f      	adds	r7, r5, #1
 8006596:	2302      	movs	r3, #2
 8006598:	e001      	b.n	800659e <_vfprintf_r+0x7f6>
 800659a:	462f      	mov	r7, r5
 800659c:	2303      	movs	r3, #3
 800659e:	aa26      	add	r2, sp, #152	; 0x98
 80065a0:	9204      	str	r2, [sp, #16]
 80065a2:	aa23      	add	r2, sp, #140	; 0x8c
 80065a4:	9203      	str	r2, [sp, #12]
 80065a6:	aa22      	add	r2, sp, #136	; 0x88
 80065a8:	e9cd 7201 	strd	r7, r2, [sp, #4]
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	9a08      	ldr	r2, [sp, #32]
 80065b0:	4633      	mov	r3, r6
 80065b2:	4658      	mov	r0, fp
 80065b4:	f000 ff94 	bl	80074e0 <_dtoa_r>
 80065b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ba:	9007      	str	r0, [sp, #28]
 80065bc:	2b47      	cmp	r3, #71	; 0x47
 80065be:	d102      	bne.n	80065c6 <_vfprintf_r+0x81e>
 80065c0:	f01a 0f01 	tst.w	sl, #1
 80065c4:	d02b      	beq.n	800661e <_vfprintf_r+0x876>
 80065c6:	9b07      	ldr	r3, [sp, #28]
 80065c8:	443b      	add	r3, r7
 80065ca:	9312      	str	r3, [sp, #72]	; 0x48
 80065cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ce:	2b46      	cmp	r3, #70	; 0x46
 80065d0:	d111      	bne.n	80065f6 <_vfprintf_r+0x84e>
 80065d2:	9b07      	ldr	r3, [sp, #28]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b30      	cmp	r3, #48	; 0x30
 80065d8:	d109      	bne.n	80065ee <_vfprintf_r+0x846>
 80065da:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80065de:	9808      	ldr	r0, [sp, #32]
 80065e0:	4631      	mov	r1, r6
 80065e2:	f7fa f9e1 	bl	80009a8 <__aeabi_dcmpeq>
 80065e6:	b910      	cbnz	r0, 80065ee <_vfprintf_r+0x846>
 80065e8:	f1c7 0701 	rsb	r7, r7, #1
 80065ec:	9722      	str	r7, [sp, #136]	; 0x88
 80065ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065f2:	441a      	add	r2, r3
 80065f4:	9212      	str	r2, [sp, #72]	; 0x48
 80065f6:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80065fa:	9808      	ldr	r0, [sp, #32]
 80065fc:	4631      	mov	r1, r6
 80065fe:	f7fa f9d3 	bl	80009a8 <__aeabi_dcmpeq>
 8006602:	b950      	cbnz	r0, 800661a <_vfprintf_r+0x872>
 8006604:	2230      	movs	r2, #48	; 0x30
 8006606:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006608:	9912      	ldr	r1, [sp, #72]	; 0x48
 800660a:	4299      	cmp	r1, r3
 800660c:	d907      	bls.n	800661e <_vfprintf_r+0x876>
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	9126      	str	r1, [sp, #152]	; 0x98
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	e7f7      	b.n	8006606 <_vfprintf_r+0x85e>
 8006616:	462f      	mov	r7, r5
 8006618:	e7bd      	b.n	8006596 <_vfprintf_r+0x7ee>
 800661a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800661c:	9326      	str	r3, [sp, #152]	; 0x98
 800661e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006620:	e72f      	b.n	8006482 <_vfprintf_r+0x6da>
 8006622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006624:	2b46      	cmp	r3, #70	; 0x46
 8006626:	f47f af3c 	bne.w	80064a2 <_vfprintf_r+0x6fa>
 800662a:	2e00      	cmp	r6, #0
 800662c:	dd1d      	ble.n	800666a <_vfprintf_r+0x8c2>
 800662e:	b915      	cbnz	r5, 8006636 <_vfprintf_r+0x88e>
 8006630:	f01a 0f01 	tst.w	sl, #1
 8006634:	d03c      	beq.n	80066b0 <_vfprintf_r+0x908>
 8006636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006638:	18f3      	adds	r3, r6, r3
 800663a:	441d      	add	r5, r3
 800663c:	2366      	movs	r3, #102	; 0x66
 800663e:	930a      	str	r3, [sp, #40]	; 0x28
 8006640:	e03b      	b.n	80066ba <_vfprintf_r+0x912>
 8006642:	460a      	mov	r2, r1
 8006644:	e74d      	b.n	80064e2 <_vfprintf_r+0x73a>
 8006646:	f812 1b01 	ldrb.w	r1, [r2], #1
 800664a:	f803 1b01 	strb.w	r1, [r3], #1
 800664e:	e75e      	b.n	800650e <_vfprintf_r+0x766>
 8006650:	b941      	cbnz	r1, 8006664 <_vfprintf_r+0x8bc>
 8006652:	2230      	movs	r2, #48	; 0x30
 8006654:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 8006658:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 800665c:	3330      	adds	r3, #48	; 0x30
 800665e:	1c51      	adds	r1, r2, #1
 8006660:	7013      	strb	r3, [r2, #0]
 8006662:	e758      	b.n	8006516 <_vfprintf_r+0x76e>
 8006664:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8006668:	e7f8      	b.n	800665c <_vfprintf_r+0x8b4>
 800666a:	b915      	cbnz	r5, 8006672 <_vfprintf_r+0x8ca>
 800666c:	f01a 0f01 	tst.w	sl, #1
 8006670:	d020      	beq.n	80066b4 <_vfprintf_r+0x90c>
 8006672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006674:	3301      	adds	r3, #1
 8006676:	e7e0      	b.n	800663a <_vfprintf_r+0x892>
 8006678:	0800a143 	.word	0x0800a143
 800667c:	0800a132 	.word	0x0800a132
 8006680:	40300000 	.word	0x40300000
 8006684:	3fe00000 	.word	0x3fe00000
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	42b3      	cmp	r3, r6
 800668c:	dc06      	bgt.n	800669c <_vfprintf_r+0x8f4>
 800668e:	f01a 0f01 	tst.w	sl, #1
 8006692:	d025      	beq.n	80066e0 <_vfprintf_r+0x938>
 8006694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006696:	18f5      	adds	r5, r6, r3
 8006698:	2367      	movs	r3, #103	; 0x67
 800669a:	e7d0      	b.n	800663e <_vfprintf_r+0x896>
 800669c:	9b08      	ldr	r3, [sp, #32]
 800669e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066a0:	2e00      	cmp	r6, #0
 80066a2:	eb03 0502 	add.w	r5, r3, r2
 80066a6:	dcf7      	bgt.n	8006698 <_vfprintf_r+0x8f0>
 80066a8:	f1c6 0301 	rsb	r3, r6, #1
 80066ac:	441d      	add	r5, r3
 80066ae:	e7f3      	b.n	8006698 <_vfprintf_r+0x8f0>
 80066b0:	4635      	mov	r5, r6
 80066b2:	e7c3      	b.n	800663c <_vfprintf_r+0x894>
 80066b4:	2366      	movs	r3, #102	; 0x66
 80066b6:	2501      	movs	r5, #1
 80066b8:	930a      	str	r3, [sp, #40]	; 0x28
 80066ba:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 80066be:	930b      	str	r3, [sp, #44]	; 0x2c
 80066c0:	d01f      	beq.n	8006702 <_vfprintf_r+0x95a>
 80066c2:	2700      	movs	r7, #0
 80066c4:	2e00      	cmp	r6, #0
 80066c6:	970b      	str	r7, [sp, #44]	; 0x2c
 80066c8:	f77f af3a 	ble.w	8006540 <_vfprintf_r+0x798>
 80066cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2bff      	cmp	r3, #255	; 0xff
 80066d2:	d107      	bne.n	80066e4 <_vfprintf_r+0x93c>
 80066d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80066d8:	443b      	add	r3, r7
 80066da:	fb02 5503 	mla	r5, r2, r3, r5
 80066de:	e72f      	b.n	8006540 <_vfprintf_r+0x798>
 80066e0:	4635      	mov	r5, r6
 80066e2:	e7d9      	b.n	8006698 <_vfprintf_r+0x8f0>
 80066e4:	42b3      	cmp	r3, r6
 80066e6:	daf5      	bge.n	80066d4 <_vfprintf_r+0x92c>
 80066e8:	1af6      	subs	r6, r6, r3
 80066ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	b133      	cbz	r3, 80066fe <_vfprintf_r+0x956>
 80066f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f2:	3301      	adds	r3, #1
 80066f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80066f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066f8:	3301      	adds	r3, #1
 80066fa:	930c      	str	r3, [sp, #48]	; 0x30
 80066fc:	e7e6      	b.n	80066cc <_vfprintf_r+0x924>
 80066fe:	3701      	adds	r7, #1
 8006700:	e7e4      	b.n	80066cc <_vfprintf_r+0x924>
 8006702:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006704:	e71c      	b.n	8006540 <_vfprintf_r+0x798>
 8006706:	4632      	mov	r2, r6
 8006708:	f852 3b04 	ldr.w	r3, [r2], #4
 800670c:	f01a 0f20 	tst.w	sl, #32
 8006710:	920d      	str	r2, [sp, #52]	; 0x34
 8006712:	d009      	beq.n	8006728 <_vfprintf_r+0x980>
 8006714:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006716:	4610      	mov	r0, r2
 8006718:	17d1      	asrs	r1, r2, #31
 800671a:	e9c3 0100 	strd	r0, r1, [r3]
 800671e:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	; 0x34
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	f7ff bbbe 	b.w	8005ea4 <_vfprintf_r+0xfc>
 8006728:	f01a 0f10 	tst.w	sl, #16
 800672c:	d002      	beq.n	8006734 <_vfprintf_r+0x98c>
 800672e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	e7f4      	b.n	800671e <_vfprintf_r+0x976>
 8006734:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006738:	d002      	beq.n	8006740 <_vfprintf_r+0x998>
 800673a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800673c:	801a      	strh	r2, [r3, #0]
 800673e:	e7ee      	b.n	800671e <_vfprintf_r+0x976>
 8006740:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006744:	d0f3      	beq.n	800672e <_vfprintf_r+0x986>
 8006746:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	e7e8      	b.n	800671e <_vfprintf_r+0x976>
 800674c:	f04a 0a10 	orr.w	sl, sl, #16
 8006750:	f01a 0f20 	tst.w	sl, #32
 8006754:	d01e      	beq.n	8006794 <_vfprintf_r+0x9ec>
 8006756:	3607      	adds	r6, #7
 8006758:	f026 0607 	bic.w	r6, r6, #7
 800675c:	f106 0308 	add.w	r3, r6, #8
 8006760:	930d      	str	r3, [sp, #52]	; 0x34
 8006762:	e9d6 6700 	ldrd	r6, r7, [r6]
 8006766:	2300      	movs	r3, #0
 8006768:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800676c:	2200      	movs	r2, #0
 800676e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8006772:	1c6a      	adds	r2, r5, #1
 8006774:	f000 815a 	beq.w	8006a2c <_vfprintf_r+0xc84>
 8006778:	4652      	mov	r2, sl
 800677a:	ea56 0107 	orrs.w	r1, r6, r7
 800677e:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8006782:	f040 8153 	bne.w	8006a2c <_vfprintf_r+0xc84>
 8006786:	2d00      	cmp	r5, #0
 8006788:	f000 81d9 	beq.w	8006b3e <_vfprintf_r+0xd96>
 800678c:	2b01      	cmp	r3, #1
 800678e:	f040 8150 	bne.w	8006a32 <_vfprintf_r+0xc8a>
 8006792:	e550      	b.n	8006236 <_vfprintf_r+0x48e>
 8006794:	1d33      	adds	r3, r6, #4
 8006796:	f01a 0f10 	tst.w	sl, #16
 800679a:	930d      	str	r3, [sp, #52]	; 0x34
 800679c:	d001      	beq.n	80067a2 <_vfprintf_r+0x9fa>
 800679e:	6836      	ldr	r6, [r6, #0]
 80067a0:	e003      	b.n	80067aa <_vfprintf_r+0xa02>
 80067a2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80067a6:	d002      	beq.n	80067ae <_vfprintf_r+0xa06>
 80067a8:	8836      	ldrh	r6, [r6, #0]
 80067aa:	2700      	movs	r7, #0
 80067ac:	e7db      	b.n	8006766 <_vfprintf_r+0x9be>
 80067ae:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80067b2:	d0f4      	beq.n	800679e <_vfprintf_r+0x9f6>
 80067b4:	7836      	ldrb	r6, [r6, #0]
 80067b6:	e7f8      	b.n	80067aa <_vfprintf_r+0xa02>
 80067b8:	1d33      	adds	r3, r6, #4
 80067ba:	930d      	str	r3, [sp, #52]	; 0x34
 80067bc:	f647 0330 	movw	r3, #30768	; 0x7830
 80067c0:	2278      	movs	r2, #120	; 0x78
 80067c2:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 80067c6:	4bab      	ldr	r3, [pc, #684]	; (8006a74 <_vfprintf_r+0xccc>)
 80067c8:	6836      	ldr	r6, [r6, #0]
 80067ca:	931c      	str	r3, [sp, #112]	; 0x70
 80067cc:	2700      	movs	r7, #0
 80067ce:	f04a 0a02 	orr.w	sl, sl, #2
 80067d2:	2302      	movs	r3, #2
 80067d4:	920a      	str	r2, [sp, #40]	; 0x28
 80067d6:	e7c9      	b.n	800676c <_vfprintf_r+0x9c4>
 80067d8:	1d33      	adds	r3, r6, #4
 80067da:	930d      	str	r3, [sp, #52]	; 0x34
 80067dc:	6833      	ldr	r3, [r6, #0]
 80067de:	2600      	movs	r6, #0
 80067e0:	1c69      	adds	r1, r5, #1
 80067e2:	9307      	str	r3, [sp, #28]
 80067e4:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 80067e8:	f000 80e0 	beq.w	80069ac <_vfprintf_r+0xc04>
 80067ec:	462a      	mov	r2, r5
 80067ee:	4631      	mov	r1, r6
 80067f0:	4618      	mov	r0, r3
 80067f2:	f002 fa7d 	bl	8008cf0 <memchr>
 80067f6:	4680      	mov	r8, r0
 80067f8:	2800      	cmp	r0, #0
 80067fa:	f43f ad68 	beq.w	80062ce <_vfprintf_r+0x526>
 80067fe:	46b0      	mov	r8, r6
 8006800:	4637      	mov	r7, r6
 8006802:	9b07      	ldr	r3, [sp, #28]
 8006804:	9612      	str	r6, [sp, #72]	; 0x48
 8006806:	1ac5      	subs	r5, r0, r3
 8006808:	960b      	str	r6, [sp, #44]	; 0x2c
 800680a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800680c:	42ab      	cmp	r3, r5
 800680e:	bfb8      	it	lt
 8006810:	462b      	movlt	r3, r5
 8006812:	9315      	str	r3, [sp, #84]	; 0x54
 8006814:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8006818:	b113      	cbz	r3, 8006820 <_vfprintf_r+0xa78>
 800681a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800681c:	3301      	adds	r3, #1
 800681e:	9315      	str	r3, [sp, #84]	; 0x54
 8006820:	f01a 0302 	ands.w	r3, sl, #2
 8006824:	931e      	str	r3, [sp, #120]	; 0x78
 8006826:	bf1e      	ittt	ne
 8006828:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 800682a:	3302      	addne	r3, #2
 800682c:	9315      	strne	r3, [sp, #84]	; 0x54
 800682e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8006832:	931f      	str	r3, [sp, #124]	; 0x7c
 8006834:	d121      	bne.n	800687a <_vfprintf_r+0xad2>
 8006836:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006838:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	9319      	str	r3, [sp, #100]	; 0x64
 8006840:	dd1b      	ble.n	800687a <_vfprintf_r+0xad2>
 8006842:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006846:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006848:	3201      	adds	r2, #1
 800684a:	2810      	cmp	r0, #16
 800684c:	488a      	ldr	r0, [pc, #552]	; (8006a78 <_vfprintf_r+0xcd0>)
 800684e:	f104 0108 	add.w	r1, r4, #8
 8006852:	6020      	str	r0, [r4, #0]
 8006854:	f300 8190 	bgt.w	8006b78 <_vfprintf_r+0xdd0>
 8006858:	9819      	ldr	r0, [sp, #100]	; 0x64
 800685a:	2a07      	cmp	r2, #7
 800685c:	4403      	add	r3, r0
 800685e:	6060      	str	r0, [r4, #4]
 8006860:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006864:	f340 819d 	ble.w	8006ba2 <_vfprintf_r+0xdfa>
 8006868:	aa28      	add	r2, sp, #160	; 0xa0
 800686a:	4649      	mov	r1, r9
 800686c:	4658      	mov	r0, fp
 800686e:	f003 f82e 	bl	80098ce <__sprint_r>
 8006872:	2800      	cmp	r0, #0
 8006874:	f040 84c7 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006878:	ac2b      	add	r4, sp, #172	; 0xac
 800687a:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 800687e:	b173      	cbz	r3, 800689e <_vfprintf_r+0xaf6>
 8006880:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	2301      	movs	r3, #1
 8006888:	6063      	str	r3, [r4, #4]
 800688a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800688c:	3301      	adds	r3, #1
 800688e:	932a      	str	r3, [sp, #168]	; 0xa8
 8006890:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006892:	3301      	adds	r3, #1
 8006894:	2b07      	cmp	r3, #7
 8006896:	9329      	str	r3, [sp, #164]	; 0xa4
 8006898:	f300 8185 	bgt.w	8006ba6 <_vfprintf_r+0xdfe>
 800689c:	3408      	adds	r4, #8
 800689e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068a0:	b16b      	cbz	r3, 80068be <_vfprintf_r+0xb16>
 80068a2:	ab21      	add	r3, sp, #132	; 0x84
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	2302      	movs	r3, #2
 80068a8:	6063      	str	r3, [r4, #4]
 80068aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80068ac:	3302      	adds	r3, #2
 80068ae:	932a      	str	r3, [sp, #168]	; 0xa8
 80068b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80068b2:	3301      	adds	r3, #1
 80068b4:	2b07      	cmp	r3, #7
 80068b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80068b8:	f300 817f 	bgt.w	8006bba <_vfprintf_r+0xe12>
 80068bc:	3408      	adds	r4, #8
 80068be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068c0:	2b80      	cmp	r3, #128	; 0x80
 80068c2:	d121      	bne.n	8006908 <_vfprintf_r+0xb60>
 80068c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	9319      	str	r3, [sp, #100]	; 0x64
 80068ce:	dd1b      	ble.n	8006908 <_vfprintf_r+0xb60>
 80068d0:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80068d4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80068d6:	3201      	adds	r2, #1
 80068d8:	2810      	cmp	r0, #16
 80068da:	4868      	ldr	r0, [pc, #416]	; (8006a7c <_vfprintf_r+0xcd4>)
 80068dc:	f104 0108 	add.w	r1, r4, #8
 80068e0:	6020      	str	r0, [r4, #0]
 80068e2:	f300 8174 	bgt.w	8006bce <_vfprintf_r+0xe26>
 80068e6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80068e8:	2a07      	cmp	r2, #7
 80068ea:	4403      	add	r3, r0
 80068ec:	6060      	str	r0, [r4, #4]
 80068ee:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80068f2:	f340 8181 	ble.w	8006bf8 <_vfprintf_r+0xe50>
 80068f6:	aa28      	add	r2, sp, #160	; 0xa0
 80068f8:	4649      	mov	r1, r9
 80068fa:	4658      	mov	r0, fp
 80068fc:	f002 ffe7 	bl	80098ce <__sprint_r>
 8006900:	2800      	cmp	r0, #0
 8006902:	f040 8480 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006906:	ac2b      	add	r4, sp, #172	; 0xac
 8006908:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800690a:	1b5b      	subs	r3, r3, r5
 800690c:	2b00      	cmp	r3, #0
 800690e:	9312      	str	r3, [sp, #72]	; 0x48
 8006910:	dd1b      	ble.n	800694a <_vfprintf_r+0xba2>
 8006912:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006916:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006918:	3201      	adds	r2, #1
 800691a:	2810      	cmp	r0, #16
 800691c:	4857      	ldr	r0, [pc, #348]	; (8006a7c <_vfprintf_r+0xcd4>)
 800691e:	f104 0108 	add.w	r1, r4, #8
 8006922:	6020      	str	r0, [r4, #0]
 8006924:	f300 816a 	bgt.w	8006bfc <_vfprintf_r+0xe54>
 8006928:	9812      	ldr	r0, [sp, #72]	; 0x48
 800692a:	2a07      	cmp	r2, #7
 800692c:	4403      	add	r3, r0
 800692e:	6060      	str	r0, [r4, #4]
 8006930:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006934:	f340 8177 	ble.w	8006c26 <_vfprintf_r+0xe7e>
 8006938:	aa28      	add	r2, sp, #160	; 0xa0
 800693a:	4649      	mov	r1, r9
 800693c:	4658      	mov	r0, fp
 800693e:	f002 ffc6 	bl	80098ce <__sprint_r>
 8006942:	2800      	cmp	r0, #0
 8006944:	f040 845f 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006948:	ac2b      	add	r4, sp, #172	; 0xac
 800694a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800694c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006950:	9312      	str	r3, [sp, #72]	; 0x48
 8006952:	f040 816a 	bne.w	8006c2a <_vfprintf_r+0xe82>
 8006956:	9b07      	ldr	r3, [sp, #28]
 8006958:	e9c4 3500 	strd	r3, r5, [r4]
 800695c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800695e:	441d      	add	r5, r3
 8006960:	952a      	str	r5, [sp, #168]	; 0xa8
 8006962:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006964:	3301      	adds	r3, #1
 8006966:	2b07      	cmp	r3, #7
 8006968:	9329      	str	r3, [sp, #164]	; 0xa4
 800696a:	f300 81a4 	bgt.w	8006cb6 <_vfprintf_r+0xf0e>
 800696e:	3408      	adds	r4, #8
 8006970:	f01a 0f04 	tst.w	sl, #4
 8006974:	f040 8429 	bne.w	80071ca <_vfprintf_r+0x1422>
 8006978:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800697c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800697e:	428a      	cmp	r2, r1
 8006980:	bfac      	ite	ge
 8006982:	189b      	addge	r3, r3, r2
 8006984:	185b      	addlt	r3, r3, r1
 8006986:	9310      	str	r3, [sp, #64]	; 0x40
 8006988:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800698a:	b13b      	cbz	r3, 800699c <_vfprintf_r+0xbf4>
 800698c:	aa28      	add	r2, sp, #160	; 0xa0
 800698e:	4649      	mov	r1, r9
 8006990:	4658      	mov	r0, fp
 8006992:	f002 ff9c 	bl	80098ce <__sprint_r>
 8006996:	2800      	cmp	r0, #0
 8006998:	f040 8435 	bne.w	8007206 <_vfprintf_r+0x145e>
 800699c:	2300      	movs	r3, #0
 800699e:	9329      	str	r3, [sp, #164]	; 0xa4
 80069a0:	f1b8 0f00 	cmp.w	r8, #0
 80069a4:	f040 844b 	bne.w	800723e <_vfprintf_r+0x1496>
 80069a8:	ac2b      	add	r4, sp, #172	; 0xac
 80069aa:	e6b8      	b.n	800671e <_vfprintf_r+0x976>
 80069ac:	9807      	ldr	r0, [sp, #28]
 80069ae:	f7f9 fbcf 	bl	8000150 <strlen>
 80069b2:	46b0      	mov	r8, r6
 80069b4:	4605      	mov	r5, r0
 80069b6:	e48a      	b.n	80062ce <_vfprintf_r+0x526>
 80069b8:	f04a 0a10 	orr.w	sl, sl, #16
 80069bc:	f01a 0f20 	tst.w	sl, #32
 80069c0:	d009      	beq.n	80069d6 <_vfprintf_r+0xc2e>
 80069c2:	3607      	adds	r6, #7
 80069c4:	f026 0607 	bic.w	r6, r6, #7
 80069c8:	f106 0308 	add.w	r3, r6, #8
 80069cc:	930d      	str	r3, [sp, #52]	; 0x34
 80069ce:	e9d6 6700 	ldrd	r6, r7, [r6]
 80069d2:	2301      	movs	r3, #1
 80069d4:	e6ca      	b.n	800676c <_vfprintf_r+0x9c4>
 80069d6:	1d33      	adds	r3, r6, #4
 80069d8:	f01a 0f10 	tst.w	sl, #16
 80069dc:	930d      	str	r3, [sp, #52]	; 0x34
 80069de:	d001      	beq.n	80069e4 <_vfprintf_r+0xc3c>
 80069e0:	6836      	ldr	r6, [r6, #0]
 80069e2:	e003      	b.n	80069ec <_vfprintf_r+0xc44>
 80069e4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80069e8:	d002      	beq.n	80069f0 <_vfprintf_r+0xc48>
 80069ea:	8836      	ldrh	r6, [r6, #0]
 80069ec:	2700      	movs	r7, #0
 80069ee:	e7f0      	b.n	80069d2 <_vfprintf_r+0xc2a>
 80069f0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80069f4:	d0f4      	beq.n	80069e0 <_vfprintf_r+0xc38>
 80069f6:	7836      	ldrb	r6, [r6, #0]
 80069f8:	e7f8      	b.n	80069ec <_vfprintf_r+0xc44>
 80069fa:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <_vfprintf_r+0xccc>)
 80069fc:	f7ff bb4d 	b.w	800609a <_vfprintf_r+0x2f2>
 8006a00:	1d33      	adds	r3, r6, #4
 8006a02:	f01a 0f10 	tst.w	sl, #16
 8006a06:	930d      	str	r3, [sp, #52]	; 0x34
 8006a08:	d001      	beq.n	8006a0e <_vfprintf_r+0xc66>
 8006a0a:	6836      	ldr	r6, [r6, #0]
 8006a0c:	e003      	b.n	8006a16 <_vfprintf_r+0xc6e>
 8006a0e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006a12:	d003      	beq.n	8006a1c <_vfprintf_r+0xc74>
 8006a14:	8836      	ldrh	r6, [r6, #0]
 8006a16:	2700      	movs	r7, #0
 8006a18:	f7ff bb4c 	b.w	80060b4 <_vfprintf_r+0x30c>
 8006a1c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006a20:	d0f3      	beq.n	8006a0a <_vfprintf_r+0xc62>
 8006a22:	7836      	ldrb	r6, [r6, #0]
 8006a24:	e7f7      	b.n	8006a16 <_vfprintf_r+0xc6e>
 8006a26:	4652      	mov	r2, sl
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e6a6      	b.n	800677a <_vfprintf_r+0x9d2>
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	f43f abfd 	beq.w	800622c <_vfprintf_r+0x484>
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	ab54      	add	r3, sp, #336	; 0x150
 8006a36:	d06f      	beq.n	8006b18 <_vfprintf_r+0xd70>
 8006a38:	08f1      	lsrs	r1, r6, #3
 8006a3a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8006a3e:	1e5a      	subs	r2, r3, #1
 8006a40:	08f8      	lsrs	r0, r7, #3
 8006a42:	9207      	str	r2, [sp, #28]
 8006a44:	4607      	mov	r7, r0
 8006a46:	f006 0207 	and.w	r2, r6, #7
 8006a4a:	460e      	mov	r6, r1
 8006a4c:	3230      	adds	r2, #48	; 0x30
 8006a4e:	ea56 0107 	orrs.w	r1, r6, r7
 8006a52:	f803 2c01 	strb.w	r2, [r3, #-1]
 8006a56:	d10b      	bne.n	8006a70 <_vfprintf_r+0xcc8>
 8006a58:	f01a 0f01 	tst.w	sl, #1
 8006a5c:	d04e      	beq.n	8006afc <_vfprintf_r+0xd54>
 8006a5e:	2a30      	cmp	r2, #48	; 0x30
 8006a60:	d04c      	beq.n	8006afc <_vfprintf_r+0xd54>
 8006a62:	2230      	movs	r2, #48	; 0x30
 8006a64:	9907      	ldr	r1, [sp, #28]
 8006a66:	3b02      	subs	r3, #2
 8006a68:	f801 2c01 	strb.w	r2, [r1, #-1]
 8006a6c:	9307      	str	r3, [sp, #28]
 8006a6e:	e045      	b.n	8006afc <_vfprintf_r+0xd54>
 8006a70:	9b07      	ldr	r3, [sp, #28]
 8006a72:	e7e1      	b.n	8006a38 <_vfprintf_r+0xc90>
 8006a74:	0800a132 	.word	0x0800a132
 8006a78:	0800a176 	.word	0x0800a176
 8006a7c:	0800a186 	.word	0x0800a186
 8006a80:	2300      	movs	r3, #0
 8006a82:	9308      	str	r3, [sp, #32]
 8006a84:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8006a88:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8006a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a8e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8006a92:	9307      	str	r3, [sp, #28]
 8006a94:	220a      	movs	r2, #10
 8006a96:	2300      	movs	r3, #0
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7fa fa52 	bl	8000f44 <__aeabi_uldivmod>
 8006aa0:	9b08      	ldr	r3, [sp, #32]
 8006aa2:	3230      	adds	r2, #48	; 0x30
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	9308      	str	r3, [sp, #32]
 8006aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aaa:	f808 2c01 	strb.w	r2, [r8, #-1]
 8006aae:	b1d3      	cbz	r3, 8006ae6 <_vfprintf_r+0xd3e>
 8006ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ab2:	9a08      	ldr	r2, [sp, #32]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d115      	bne.n	8006ae6 <_vfprintf_r+0xd3e>
 8006aba:	2aff      	cmp	r2, #255	; 0xff
 8006abc:	d013      	beq.n	8006ae6 <_vfprintf_r+0xd3e>
 8006abe:	2f00      	cmp	r7, #0
 8006ac0:	bf08      	it	eq
 8006ac2:	2e0a      	cmpeq	r6, #10
 8006ac4:	d30f      	bcc.n	8006ae6 <_vfprintf_r+0xd3e>
 8006ac6:	9b07      	ldr	r3, [sp, #28]
 8006ac8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006aca:	991d      	ldr	r1, [sp, #116]	; 0x74
 8006acc:	1a9b      	subs	r3, r3, r2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	9307      	str	r3, [sp, #28]
 8006ad2:	f002 fe62 	bl	800979a <strncpy>
 8006ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	b11b      	cbz	r3, 8006ae4 <_vfprintf_r+0xd3c>
 8006adc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ade:	3301      	adds	r3, #1
 8006ae0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9308      	str	r3, [sp, #32]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4630      	mov	r0, r6
 8006aea:	4639      	mov	r1, r7
 8006aec:	220a      	movs	r2, #10
 8006aee:	f7fa fa29 	bl	8000f44 <__aeabi_uldivmod>
 8006af2:	4606      	mov	r6, r0
 8006af4:	460f      	mov	r7, r1
 8006af6:	ea56 0307 	orrs.w	r3, r6, r7
 8006afa:	d10a      	bne.n	8006b12 <_vfprintf_r+0xd6a>
 8006afc:	f04f 0800 	mov.w	r8, #0
 8006b00:	9a07      	ldr	r2, [sp, #28]
 8006b02:	ab54      	add	r3, sp, #336	; 0x150
 8006b04:	9512      	str	r5, [sp, #72]	; 0x48
 8006b06:	1a9d      	subs	r5, r3, r2
 8006b08:	4647      	mov	r7, r8
 8006b0a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8006b0e:	4646      	mov	r6, r8
 8006b10:	e67b      	b.n	800680a <_vfprintf_r+0xa62>
 8006b12:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006b16:	e7ba      	b.n	8006a8e <_vfprintf_r+0xce6>
 8006b18:	9307      	str	r3, [sp, #28]
 8006b1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b1c:	f006 030f 	and.w	r3, r6, #15
 8006b20:	5cd3      	ldrb	r3, [r2, r3]
 8006b22:	9a07      	ldr	r2, [sp, #28]
 8006b24:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8006b28:	0933      	lsrs	r3, r6, #4
 8006b2a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006b2e:	9207      	str	r2, [sp, #28]
 8006b30:	093a      	lsrs	r2, r7, #4
 8006b32:	461e      	mov	r6, r3
 8006b34:	4617      	mov	r7, r2
 8006b36:	ea56 0307 	orrs.w	r3, r6, r7
 8006b3a:	d1ee      	bne.n	8006b1a <_vfprintf_r+0xd72>
 8006b3c:	e7de      	b.n	8006afc <_vfprintf_r+0xd54>
 8006b3e:	b94b      	cbnz	r3, 8006b54 <_vfprintf_r+0xdac>
 8006b40:	ab54      	add	r3, sp, #336	; 0x150
 8006b42:	07d6      	lsls	r6, r2, #31
 8006b44:	9307      	str	r3, [sp, #28]
 8006b46:	d5d9      	bpl.n	8006afc <_vfprintf_r+0xd54>
 8006b48:	2330      	movs	r3, #48	; 0x30
 8006b4a:	9a07      	ldr	r2, [sp, #28]
 8006b4c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8006b50:	4613      	mov	r3, r2
 8006b52:	e78b      	b.n	8006a6c <_vfprintf_r+0xcc4>
 8006b54:	ab54      	add	r3, sp, #336	; 0x150
 8006b56:	e789      	b.n	8006a6c <_vfprintf_r+0xcc4>
 8006b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 8375 	beq.w	800724a <_vfprintf_r+0x14a2>
 8006b60:	2000      	movs	r0, #0
 8006b62:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8006b66:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8006b6a:	960d      	str	r6, [sp, #52]	; 0x34
 8006b6c:	f7ff bb3b 	b.w	80061e6 <_vfprintf_r+0x43e>
 8006b70:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8006b74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b76:	e4ed      	b.n	8006554 <_vfprintf_r+0x7ac>
 8006b78:	2010      	movs	r0, #16
 8006b7a:	2a07      	cmp	r2, #7
 8006b7c:	4403      	add	r3, r0
 8006b7e:	6060      	str	r0, [r4, #4]
 8006b80:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006b84:	dd08      	ble.n	8006b98 <_vfprintf_r+0xdf0>
 8006b86:	aa28      	add	r2, sp, #160	; 0xa0
 8006b88:	4649      	mov	r1, r9
 8006b8a:	4658      	mov	r0, fp
 8006b8c:	f002 fe9f 	bl	80098ce <__sprint_r>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	f040 8338 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006b96:	a92b      	add	r1, sp, #172	; 0xac
 8006b98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	3b10      	subs	r3, #16
 8006b9e:	9319      	str	r3, [sp, #100]	; 0x64
 8006ba0:	e64f      	b.n	8006842 <_vfprintf_r+0xa9a>
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	e669      	b.n	800687a <_vfprintf_r+0xad2>
 8006ba6:	aa28      	add	r2, sp, #160	; 0xa0
 8006ba8:	4649      	mov	r1, r9
 8006baa:	4658      	mov	r0, fp
 8006bac:	f002 fe8f 	bl	80098ce <__sprint_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	f040 8328 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006bb6:	ac2b      	add	r4, sp, #172	; 0xac
 8006bb8:	e671      	b.n	800689e <_vfprintf_r+0xaf6>
 8006bba:	aa28      	add	r2, sp, #160	; 0xa0
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	f002 fe85 	bl	80098ce <__sprint_r>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	f040 831e 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006bca:	ac2b      	add	r4, sp, #172	; 0xac
 8006bcc:	e677      	b.n	80068be <_vfprintf_r+0xb16>
 8006bce:	2010      	movs	r0, #16
 8006bd0:	2a07      	cmp	r2, #7
 8006bd2:	4403      	add	r3, r0
 8006bd4:	6060      	str	r0, [r4, #4]
 8006bd6:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006bda:	dd08      	ble.n	8006bee <_vfprintf_r+0xe46>
 8006bdc:	aa28      	add	r2, sp, #160	; 0xa0
 8006bde:	4649      	mov	r1, r9
 8006be0:	4658      	mov	r0, fp
 8006be2:	f002 fe74 	bl	80098ce <__sprint_r>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f040 830d 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006bec:	a92b      	add	r1, sp, #172	; 0xac
 8006bee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	3b10      	subs	r3, #16
 8006bf4:	9319      	str	r3, [sp, #100]	; 0x64
 8006bf6:	e66b      	b.n	80068d0 <_vfprintf_r+0xb28>
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	e685      	b.n	8006908 <_vfprintf_r+0xb60>
 8006bfc:	2010      	movs	r0, #16
 8006bfe:	2a07      	cmp	r2, #7
 8006c00:	4403      	add	r3, r0
 8006c02:	6060      	str	r0, [r4, #4]
 8006c04:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006c08:	dd08      	ble.n	8006c1c <_vfprintf_r+0xe74>
 8006c0a:	aa28      	add	r2, sp, #160	; 0xa0
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	4658      	mov	r0, fp
 8006c10:	f002 fe5d 	bl	80098ce <__sprint_r>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	f040 82f6 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006c1a:	a92b      	add	r1, sp, #172	; 0xac
 8006c1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c1e:	460c      	mov	r4, r1
 8006c20:	3b10      	subs	r3, #16
 8006c22:	9312      	str	r3, [sp, #72]	; 0x48
 8006c24:	e675      	b.n	8006912 <_vfprintf_r+0xb6a>
 8006c26:	460c      	mov	r4, r1
 8006c28:	e68f      	b.n	800694a <_vfprintf_r+0xba2>
 8006c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2c:	2b65      	cmp	r3, #101	; 0x65
 8006c2e:	f340 8237 	ble.w	80070a0 <_vfprintf_r+0x12f8>
 8006c32:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006c36:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8006c3a:	f7f9 feb5 	bl	80009a8 <__aeabi_dcmpeq>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d069      	beq.n	8006d16 <_vfprintf_r+0xf6e>
 8006c42:	4b6f      	ldr	r3, [pc, #444]	; (8006e00 <_vfprintf_r+0x1058>)
 8006c44:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	2301      	movs	r3, #1
 8006c4a:	441d      	add	r5, r3
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006c50:	952a      	str	r5, [sp, #168]	; 0xa8
 8006c52:	3301      	adds	r3, #1
 8006c54:	2b07      	cmp	r3, #7
 8006c56:	9329      	str	r3, [sp, #164]	; 0xa4
 8006c58:	dc37      	bgt.n	8006cca <_vfprintf_r+0xf22>
 8006c5a:	3408      	adds	r4, #8
 8006c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c5e:	9a08      	ldr	r2, [sp, #32]
 8006c60:	4293      	cmp	r3, r2
 8006c62:	db03      	blt.n	8006c6c <_vfprintf_r+0xec4>
 8006c64:	f01a 0f01 	tst.w	sl, #1
 8006c68:	f43f ae82 	beq.w	8006970 <_vfprintf_r+0xbc8>
 8006c6c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c74:	6063      	str	r3, [r4, #4]
 8006c76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006c78:	4413      	add	r3, r2
 8006c7a:	932a      	str	r3, [sp, #168]	; 0xa8
 8006c7c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006c7e:	3301      	adds	r3, #1
 8006c80:	2b07      	cmp	r3, #7
 8006c82:	9329      	str	r3, [sp, #164]	; 0xa4
 8006c84:	dc2b      	bgt.n	8006cde <_vfprintf_r+0xf36>
 8006c86:	3408      	adds	r4, #8
 8006c88:	9b08      	ldr	r3, [sp, #32]
 8006c8a:	1e5d      	subs	r5, r3, #1
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	f77f ae6f 	ble.w	8006970 <_vfprintf_r+0xbc8>
 8006c92:	2710      	movs	r7, #16
 8006c94:	4e5b      	ldr	r6, [pc, #364]	; (8006e04 <_vfprintf_r+0x105c>)
 8006c96:	2d10      	cmp	r5, #16
 8006c98:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006c9c:	f104 0108 	add.w	r1, r4, #8
 8006ca0:	f103 0301 	add.w	r3, r3, #1
 8006ca4:	6026      	str	r6, [r4, #0]
 8006ca6:	dc24      	bgt.n	8006cf2 <_vfprintf_r+0xf4a>
 8006ca8:	6065      	str	r5, [r4, #4]
 8006caa:	2b07      	cmp	r3, #7
 8006cac:	4415      	add	r5, r2
 8006cae:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8006cb2:	f340 8287 	ble.w	80071c4 <_vfprintf_r+0x141c>
 8006cb6:	aa28      	add	r2, sp, #160	; 0xa0
 8006cb8:	4649      	mov	r1, r9
 8006cba:	4658      	mov	r0, fp
 8006cbc:	f002 fe07 	bl	80098ce <__sprint_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	f040 82a0 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006cc6:	ac2b      	add	r4, sp, #172	; 0xac
 8006cc8:	e652      	b.n	8006970 <_vfprintf_r+0xbc8>
 8006cca:	aa28      	add	r2, sp, #160	; 0xa0
 8006ccc:	4649      	mov	r1, r9
 8006cce:	4658      	mov	r0, fp
 8006cd0:	f002 fdfd 	bl	80098ce <__sprint_r>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	f040 8296 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006cda:	ac2b      	add	r4, sp, #172	; 0xac
 8006cdc:	e7be      	b.n	8006c5c <_vfprintf_r+0xeb4>
 8006cde:	aa28      	add	r2, sp, #160	; 0xa0
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	4658      	mov	r0, fp
 8006ce4:	f002 fdf3 	bl	80098ce <__sprint_r>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	f040 828c 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006cee:	ac2b      	add	r4, sp, #172	; 0xac
 8006cf0:	e7ca      	b.n	8006c88 <_vfprintf_r+0xee0>
 8006cf2:	3210      	adds	r2, #16
 8006cf4:	2b07      	cmp	r3, #7
 8006cf6:	6067      	str	r7, [r4, #4]
 8006cf8:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8006cfc:	dd08      	ble.n	8006d10 <_vfprintf_r+0xf68>
 8006cfe:	aa28      	add	r2, sp, #160	; 0xa0
 8006d00:	4649      	mov	r1, r9
 8006d02:	4658      	mov	r0, fp
 8006d04:	f002 fde3 	bl	80098ce <__sprint_r>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f040 827c 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006d0e:	a92b      	add	r1, sp, #172	; 0xac
 8006d10:	3d10      	subs	r5, #16
 8006d12:	460c      	mov	r4, r1
 8006d14:	e7bf      	b.n	8006c96 <_vfprintf_r+0xeee>
 8006d16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dc75      	bgt.n	8006e08 <_vfprintf_r+0x1060>
 8006d1c:	4b38      	ldr	r3, [pc, #224]	; (8006e00 <_vfprintf_r+0x1058>)
 8006d1e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	2301      	movs	r3, #1
 8006d24:	441d      	add	r5, r3
 8006d26:	6063      	str	r3, [r4, #4]
 8006d28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006d2a:	952a      	str	r5, [sp, #168]	; 0xa8
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	2b07      	cmp	r3, #7
 8006d30:	9329      	str	r3, [sp, #164]	; 0xa4
 8006d32:	dc3e      	bgt.n	8006db2 <_vfprintf_r+0x100a>
 8006d34:	3408      	adds	r4, #8
 8006d36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d38:	b92b      	cbnz	r3, 8006d46 <_vfprintf_r+0xf9e>
 8006d3a:	9b08      	ldr	r3, [sp, #32]
 8006d3c:	b91b      	cbnz	r3, 8006d46 <_vfprintf_r+0xf9e>
 8006d3e:	f01a 0f01 	tst.w	sl, #1
 8006d42:	f43f ae15 	beq.w	8006970 <_vfprintf_r+0xbc8>
 8006d46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006d48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d4a:	6023      	str	r3, [r4, #0]
 8006d4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d4e:	6063      	str	r3, [r4, #4]
 8006d50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006d52:	4413      	add	r3, r2
 8006d54:	932a      	str	r3, [sp, #168]	; 0xa8
 8006d56:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006d58:	3301      	adds	r3, #1
 8006d5a:	2b07      	cmp	r3, #7
 8006d5c:	9329      	str	r3, [sp, #164]	; 0xa4
 8006d5e:	dc32      	bgt.n	8006dc6 <_vfprintf_r+0x101e>
 8006d60:	3408      	adds	r4, #8
 8006d62:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	da1b      	bge.n	8006da0 <_vfprintf_r+0xff8>
 8006d68:	4623      	mov	r3, r4
 8006d6a:	2710      	movs	r7, #16
 8006d6c:	4e25      	ldr	r6, [pc, #148]	; (8006e04 <_vfprintf_r+0x105c>)
 8006d6e:	426d      	negs	r5, r5
 8006d70:	2d10      	cmp	r5, #16
 8006d72:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8006d76:	f104 0408 	add.w	r4, r4, #8
 8006d7a:	f102 0201 	add.w	r2, r2, #1
 8006d7e:	601e      	str	r6, [r3, #0]
 8006d80:	dc2b      	bgt.n	8006dda <_vfprintf_r+0x1032>
 8006d82:	605d      	str	r5, [r3, #4]
 8006d84:	2a07      	cmp	r2, #7
 8006d86:	440d      	add	r5, r1
 8006d88:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 8006d8c:	dd08      	ble.n	8006da0 <_vfprintf_r+0xff8>
 8006d8e:	aa28      	add	r2, sp, #160	; 0xa0
 8006d90:	4649      	mov	r1, r9
 8006d92:	4658      	mov	r0, fp
 8006d94:	f002 fd9b 	bl	80098ce <__sprint_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f040 8234 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006d9e:	ac2b      	add	r4, sp, #172	; 0xac
 8006da0:	9b07      	ldr	r3, [sp, #28]
 8006da2:	9a08      	ldr	r2, [sp, #32]
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	9b08      	ldr	r3, [sp, #32]
 8006da8:	6063      	str	r3, [r4, #4]
 8006daa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006dac:	4413      	add	r3, r2
 8006dae:	932a      	str	r3, [sp, #168]	; 0xa8
 8006db0:	e5d7      	b.n	8006962 <_vfprintf_r+0xbba>
 8006db2:	aa28      	add	r2, sp, #160	; 0xa0
 8006db4:	4649      	mov	r1, r9
 8006db6:	4658      	mov	r0, fp
 8006db8:	f002 fd89 	bl	80098ce <__sprint_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f040 8222 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006dc2:	ac2b      	add	r4, sp, #172	; 0xac
 8006dc4:	e7b7      	b.n	8006d36 <_vfprintf_r+0xf8e>
 8006dc6:	aa28      	add	r2, sp, #160	; 0xa0
 8006dc8:	4649      	mov	r1, r9
 8006dca:	4658      	mov	r0, fp
 8006dcc:	f002 fd7f 	bl	80098ce <__sprint_r>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f040 8218 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006dd6:	ac2b      	add	r4, sp, #172	; 0xac
 8006dd8:	e7c3      	b.n	8006d62 <_vfprintf_r+0xfba>
 8006dda:	3110      	adds	r1, #16
 8006ddc:	2a07      	cmp	r2, #7
 8006dde:	605f      	str	r7, [r3, #4]
 8006de0:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 8006de4:	dd08      	ble.n	8006df8 <_vfprintf_r+0x1050>
 8006de6:	aa28      	add	r2, sp, #160	; 0xa0
 8006de8:	4649      	mov	r1, r9
 8006dea:	4658      	mov	r0, fp
 8006dec:	f002 fd6f 	bl	80098ce <__sprint_r>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	f040 8208 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006df6:	ac2b      	add	r4, sp, #172	; 0xac
 8006df8:	3d10      	subs	r5, #16
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	e7b8      	b.n	8006d70 <_vfprintf_r+0xfc8>
 8006dfe:	bf00      	nop
 8006e00:	0800a154 	.word	0x0800a154
 8006e04:	0800a186 	.word	0x0800a186
 8006e08:	9b08      	ldr	r3, [sp, #32]
 8006e0a:	42b3      	cmp	r3, r6
 8006e0c:	bfa8      	it	ge
 8006e0e:	4633      	movge	r3, r6
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	461d      	mov	r5, r3
 8006e14:	dd0c      	ble.n	8006e30 <_vfprintf_r+0x1088>
 8006e16:	9b07      	ldr	r3, [sp, #28]
 8006e18:	e9c4 3500 	strd	r3, r5, [r4]
 8006e1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e1e:	442b      	add	r3, r5
 8006e20:	932a      	str	r3, [sp, #168]	; 0xa8
 8006e22:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006e24:	3301      	adds	r3, #1
 8006e26:	2b07      	cmp	r3, #7
 8006e28:	9329      	str	r3, [sp, #164]	; 0xa4
 8006e2a:	f300 8087 	bgt.w	8006f3c <_vfprintf_r+0x1194>
 8006e2e:	3408      	adds	r4, #8
 8006e30:	2d00      	cmp	r5, #0
 8006e32:	bfb4      	ite	lt
 8006e34:	4635      	movlt	r5, r6
 8006e36:	1b75      	subge	r5, r6, r5
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	dd19      	ble.n	8006e70 <_vfprintf_r+0x10c8>
 8006e3c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006e40:	4896      	ldr	r0, [pc, #600]	; (800709c <_vfprintf_r+0x12f4>)
 8006e42:	2d10      	cmp	r5, #16
 8006e44:	f103 0301 	add.w	r3, r3, #1
 8006e48:	f104 0108 	add.w	r1, r4, #8
 8006e4c:	6020      	str	r0, [r4, #0]
 8006e4e:	dc7f      	bgt.n	8006f50 <_vfprintf_r+0x11a8>
 8006e50:	6065      	str	r5, [r4, #4]
 8006e52:	2b07      	cmp	r3, #7
 8006e54:	4415      	add	r5, r2
 8006e56:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8006e5a:	f340 808c 	ble.w	8006f76 <_vfprintf_r+0x11ce>
 8006e5e:	aa28      	add	r2, sp, #160	; 0xa0
 8006e60:	4649      	mov	r1, r9
 8006e62:	4658      	mov	r0, fp
 8006e64:	f002 fd33 	bl	80098ce <__sprint_r>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	f040 81cc 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006e6e:	ac2b      	add	r4, sp, #172	; 0xac
 8006e70:	9b07      	ldr	r3, [sp, #28]
 8006e72:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8006e76:	441e      	add	r6, r3
 8006e78:	d00a      	beq.n	8006e90 <_vfprintf_r+0x10e8>
 8006e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d17c      	bne.n	8006f7a <_vfprintf_r+0x11d2>
 8006e80:	2f00      	cmp	r7, #0
 8006e82:	d17c      	bne.n	8006f7e <_vfprintf_r+0x11d6>
 8006e84:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006e88:	4413      	add	r3, r2
 8006e8a:	429e      	cmp	r6, r3
 8006e8c:	bf28      	it	cs
 8006e8e:	461e      	movcs	r6, r3
 8006e90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e92:	9a08      	ldr	r2, [sp, #32]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	db02      	blt.n	8006e9e <_vfprintf_r+0x10f6>
 8006e98:	f01a 0f01 	tst.w	sl, #1
 8006e9c:	d00e      	beq.n	8006ebc <_vfprintf_r+0x1114>
 8006e9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006ea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ea2:	6023      	str	r3, [r4, #0]
 8006ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ea6:	6063      	str	r3, [r4, #4]
 8006ea8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006eaa:	4413      	add	r3, r2
 8006eac:	932a      	str	r3, [sp, #168]	; 0xa8
 8006eae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	2b07      	cmp	r3, #7
 8006eb4:	9329      	str	r3, [sp, #164]	; 0xa4
 8006eb6:	f300 80dd 	bgt.w	8007074 <_vfprintf_r+0x12cc>
 8006eba:	3408      	adds	r4, #8
 8006ebc:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006ebe:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	1b55      	subs	r5, r2, r5
 8006ec6:	1b9b      	subs	r3, r3, r6
 8006ec8:	429d      	cmp	r5, r3
 8006eca:	bfa8      	it	ge
 8006ecc:	461d      	movge	r5, r3
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	dd0b      	ble.n	8006eea <_vfprintf_r+0x1142>
 8006ed2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006ed4:	e9c4 6500 	strd	r6, r5, [r4]
 8006ed8:	442b      	add	r3, r5
 8006eda:	932a      	str	r3, [sp, #168]	; 0xa8
 8006edc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006ede:	3301      	adds	r3, #1
 8006ee0:	2b07      	cmp	r3, #7
 8006ee2:	9329      	str	r3, [sp, #164]	; 0xa4
 8006ee4:	f300 80d0 	bgt.w	8007088 <_vfprintf_r+0x12e0>
 8006ee8:	3408      	adds	r4, #8
 8006eea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eec:	9a08      	ldr	r2, [sp, #32]
 8006eee:	2d00      	cmp	r5, #0
 8006ef0:	eba2 0303 	sub.w	r3, r2, r3
 8006ef4:	bfb4      	ite	lt
 8006ef6:	461d      	movlt	r5, r3
 8006ef8:	1b5d      	subge	r5, r3, r5
 8006efa:	2d00      	cmp	r5, #0
 8006efc:	f77f ad38 	ble.w	8006970 <_vfprintf_r+0xbc8>
 8006f00:	2710      	movs	r7, #16
 8006f02:	4e66      	ldr	r6, [pc, #408]	; (800709c <_vfprintf_r+0x12f4>)
 8006f04:	2d10      	cmp	r5, #16
 8006f06:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006f0a:	f104 0108 	add.w	r1, r4, #8
 8006f0e:	f103 0301 	add.w	r3, r3, #1
 8006f12:	6026      	str	r6, [r4, #0]
 8006f14:	f77f aec8 	ble.w	8006ca8 <_vfprintf_r+0xf00>
 8006f18:	3210      	adds	r2, #16
 8006f1a:	2b07      	cmp	r3, #7
 8006f1c:	6067      	str	r7, [r4, #4]
 8006f1e:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8006f22:	dd08      	ble.n	8006f36 <_vfprintf_r+0x118e>
 8006f24:	aa28      	add	r2, sp, #160	; 0xa0
 8006f26:	4649      	mov	r1, r9
 8006f28:	4658      	mov	r0, fp
 8006f2a:	f002 fcd0 	bl	80098ce <__sprint_r>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f040 8169 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006f34:	a92b      	add	r1, sp, #172	; 0xac
 8006f36:	3d10      	subs	r5, #16
 8006f38:	460c      	mov	r4, r1
 8006f3a:	e7e3      	b.n	8006f04 <_vfprintf_r+0x115c>
 8006f3c:	aa28      	add	r2, sp, #160	; 0xa0
 8006f3e:	4649      	mov	r1, r9
 8006f40:	4658      	mov	r0, fp
 8006f42:	f002 fcc4 	bl	80098ce <__sprint_r>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f040 815d 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006f4c:	ac2b      	add	r4, sp, #172	; 0xac
 8006f4e:	e76f      	b.n	8006e30 <_vfprintf_r+0x1088>
 8006f50:	2010      	movs	r0, #16
 8006f52:	2b07      	cmp	r3, #7
 8006f54:	4402      	add	r2, r0
 8006f56:	6060      	str	r0, [r4, #4]
 8006f58:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8006f5c:	dd08      	ble.n	8006f70 <_vfprintf_r+0x11c8>
 8006f5e:	aa28      	add	r2, sp, #160	; 0xa0
 8006f60:	4649      	mov	r1, r9
 8006f62:	4658      	mov	r0, fp
 8006f64:	f002 fcb3 	bl	80098ce <__sprint_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	f040 814c 	bne.w	8007206 <_vfprintf_r+0x145e>
 8006f6e:	a92b      	add	r1, sp, #172	; 0xac
 8006f70:	3d10      	subs	r5, #16
 8006f72:	460c      	mov	r4, r1
 8006f74:	e762      	b.n	8006e3c <_vfprintf_r+0x1094>
 8006f76:	460c      	mov	r4, r1
 8006f78:	e77a      	b.n	8006e70 <_vfprintf_r+0x10c8>
 8006f7a:	2f00      	cmp	r7, #0
 8006f7c:	d04a      	beq.n	8007014 <_vfprintf_r+0x126c>
 8006f7e:	3f01      	subs	r7, #1
 8006f80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f82:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f88:	6063      	str	r3, [r4, #4]
 8006f8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006f8c:	4413      	add	r3, r2
 8006f8e:	932a      	str	r3, [sp, #168]	; 0xa8
 8006f90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006f92:	3301      	adds	r3, #1
 8006f94:	2b07      	cmp	r3, #7
 8006f96:	9329      	str	r3, [sp, #164]	; 0xa4
 8006f98:	dc43      	bgt.n	8007022 <_vfprintf_r+0x127a>
 8006f9a:	3408      	adds	r4, #8
 8006f9c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	1b9a      	subs	r2, r3, r6
 8006fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	bfa8      	it	ge
 8006fac:	4613      	movge	r3, r2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	461d      	mov	r5, r3
 8006fb2:	dd0a      	ble.n	8006fca <_vfprintf_r+0x1222>
 8006fb4:	e9c4 6300 	strd	r6, r3, [r4]
 8006fb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006fba:	442b      	add	r3, r5
 8006fbc:	932a      	str	r3, [sp, #168]	; 0xa8
 8006fbe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	2b07      	cmp	r3, #7
 8006fc4:	9329      	str	r3, [sp, #164]	; 0xa4
 8006fc6:	dc36      	bgt.n	8007036 <_vfprintf_r+0x128e>
 8006fc8:	3408      	adds	r4, #8
 8006fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	bfb4      	ite	lt
 8006fd2:	461d      	movlt	r5, r3
 8006fd4:	1b5d      	subge	r5, r3, r5
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	dd18      	ble.n	800700c <_vfprintf_r+0x1264>
 8006fda:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006fde:	482f      	ldr	r0, [pc, #188]	; (800709c <_vfprintf_r+0x12f4>)
 8006fe0:	2d10      	cmp	r5, #16
 8006fe2:	f102 0201 	add.w	r2, r2, #1
 8006fe6:	f104 0108 	add.w	r1, r4, #8
 8006fea:	6020      	str	r0, [r4, #0]
 8006fec:	dc2d      	bgt.n	800704a <_vfprintf_r+0x12a2>
 8006fee:	442b      	add	r3, r5
 8006ff0:	2a07      	cmp	r2, #7
 8006ff2:	6065      	str	r5, [r4, #4]
 8006ff4:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006ff8:	dd3a      	ble.n	8007070 <_vfprintf_r+0x12c8>
 8006ffa:	aa28      	add	r2, sp, #160	; 0xa0
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	4658      	mov	r0, fp
 8007000:	f002 fc65 	bl	80098ce <__sprint_r>
 8007004:	2800      	cmp	r0, #0
 8007006:	f040 80fe 	bne.w	8007206 <_vfprintf_r+0x145e>
 800700a:	ac2b      	add	r4, sp, #172	; 0xac
 800700c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	441e      	add	r6, r3
 8007012:	e732      	b.n	8006e7a <_vfprintf_r+0x10d2>
 8007014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007016:	3b01      	subs	r3, #1
 8007018:	930c      	str	r3, [sp, #48]	; 0x30
 800701a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800701c:	3b01      	subs	r3, #1
 800701e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007020:	e7ae      	b.n	8006f80 <_vfprintf_r+0x11d8>
 8007022:	aa28      	add	r2, sp, #160	; 0xa0
 8007024:	4649      	mov	r1, r9
 8007026:	4658      	mov	r0, fp
 8007028:	f002 fc51 	bl	80098ce <__sprint_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	f040 80ea 	bne.w	8007206 <_vfprintf_r+0x145e>
 8007032:	ac2b      	add	r4, sp, #172	; 0xac
 8007034:	e7b2      	b.n	8006f9c <_vfprintf_r+0x11f4>
 8007036:	aa28      	add	r2, sp, #160	; 0xa0
 8007038:	4649      	mov	r1, r9
 800703a:	4658      	mov	r0, fp
 800703c:	f002 fc47 	bl	80098ce <__sprint_r>
 8007040:	2800      	cmp	r0, #0
 8007042:	f040 80e0 	bne.w	8007206 <_vfprintf_r+0x145e>
 8007046:	ac2b      	add	r4, sp, #172	; 0xac
 8007048:	e7bf      	b.n	8006fca <_vfprintf_r+0x1222>
 800704a:	2010      	movs	r0, #16
 800704c:	2a07      	cmp	r2, #7
 800704e:	4403      	add	r3, r0
 8007050:	6060      	str	r0, [r4, #4]
 8007052:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007056:	dd08      	ble.n	800706a <_vfprintf_r+0x12c2>
 8007058:	aa28      	add	r2, sp, #160	; 0xa0
 800705a:	4649      	mov	r1, r9
 800705c:	4658      	mov	r0, fp
 800705e:	f002 fc36 	bl	80098ce <__sprint_r>
 8007062:	2800      	cmp	r0, #0
 8007064:	f040 80cf 	bne.w	8007206 <_vfprintf_r+0x145e>
 8007068:	a92b      	add	r1, sp, #172	; 0xac
 800706a:	3d10      	subs	r5, #16
 800706c:	460c      	mov	r4, r1
 800706e:	e7b4      	b.n	8006fda <_vfprintf_r+0x1232>
 8007070:	460c      	mov	r4, r1
 8007072:	e7cb      	b.n	800700c <_vfprintf_r+0x1264>
 8007074:	aa28      	add	r2, sp, #160	; 0xa0
 8007076:	4649      	mov	r1, r9
 8007078:	4658      	mov	r0, fp
 800707a:	f002 fc28 	bl	80098ce <__sprint_r>
 800707e:	2800      	cmp	r0, #0
 8007080:	f040 80c1 	bne.w	8007206 <_vfprintf_r+0x145e>
 8007084:	ac2b      	add	r4, sp, #172	; 0xac
 8007086:	e719      	b.n	8006ebc <_vfprintf_r+0x1114>
 8007088:	aa28      	add	r2, sp, #160	; 0xa0
 800708a:	4649      	mov	r1, r9
 800708c:	4658      	mov	r0, fp
 800708e:	f002 fc1e 	bl	80098ce <__sprint_r>
 8007092:	2800      	cmp	r0, #0
 8007094:	f040 80b7 	bne.w	8007206 <_vfprintf_r+0x145e>
 8007098:	ac2b      	add	r4, sp, #172	; 0xac
 800709a:	e726      	b.n	8006eea <_vfprintf_r+0x1142>
 800709c:	0800a186 	.word	0x0800a186
 80070a0:	9a08      	ldr	r2, [sp, #32]
 80070a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070a4:	2a01      	cmp	r2, #1
 80070a6:	9a07      	ldr	r2, [sp, #28]
 80070a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80070aa:	6022      	str	r2, [r4, #0]
 80070ac:	f04f 0201 	mov.w	r2, #1
 80070b0:	f105 0501 	add.w	r5, r5, #1
 80070b4:	f103 0301 	add.w	r3, r3, #1
 80070b8:	f104 0608 	add.w	r6, r4, #8
 80070bc:	6062      	str	r2, [r4, #4]
 80070be:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80070c2:	dc02      	bgt.n	80070ca <_vfprintf_r+0x1322>
 80070c4:	f01a 0f01 	tst.w	sl, #1
 80070c8:	d077      	beq.n	80071ba <_vfprintf_r+0x1412>
 80070ca:	2b07      	cmp	r3, #7
 80070cc:	dd08      	ble.n	80070e0 <_vfprintf_r+0x1338>
 80070ce:	aa28      	add	r2, sp, #160	; 0xa0
 80070d0:	4649      	mov	r1, r9
 80070d2:	4658      	mov	r0, fp
 80070d4:	f002 fbfb 	bl	80098ce <__sprint_r>
 80070d8:	2800      	cmp	r0, #0
 80070da:	f040 8094 	bne.w	8007206 <_vfprintf_r+0x145e>
 80070de:	ae2b      	add	r6, sp, #172	; 0xac
 80070e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80070e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070e4:	6033      	str	r3, [r6, #0]
 80070e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070e8:	6073      	str	r3, [r6, #4]
 80070ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80070ec:	4413      	add	r3, r2
 80070ee:	932a      	str	r3, [sp, #168]	; 0xa8
 80070f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070f2:	3301      	adds	r3, #1
 80070f4:	2b07      	cmp	r3, #7
 80070f6:	9329      	str	r3, [sp, #164]	; 0xa4
 80070f8:	dc31      	bgt.n	800715e <_vfprintf_r+0x13b6>
 80070fa:	3608      	adds	r6, #8
 80070fc:	9b08      	ldr	r3, [sp, #32]
 80070fe:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007102:	1e5c      	subs	r4, r3, #1
 8007104:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007108:	f7f9 fc4e 	bl	80009a8 <__aeabi_dcmpeq>
 800710c:	2800      	cmp	r0, #0
 800710e:	d12f      	bne.n	8007170 <_vfprintf_r+0x13c8>
 8007110:	9b07      	ldr	r3, [sp, #28]
 8007112:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8007114:	3301      	adds	r3, #1
 8007116:	e9c6 3400 	strd	r3, r4, [r6]
 800711a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800711c:	9908      	ldr	r1, [sp, #32]
 800711e:	3201      	adds	r2, #1
 8007120:	3b01      	subs	r3, #1
 8007122:	440b      	add	r3, r1
 8007124:	2a07      	cmp	r2, #7
 8007126:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800712a:	dd49      	ble.n	80071c0 <_vfprintf_r+0x1418>
 800712c:	aa28      	add	r2, sp, #160	; 0xa0
 800712e:	4649      	mov	r1, r9
 8007130:	4658      	mov	r0, fp
 8007132:	f002 fbcc 	bl	80098ce <__sprint_r>
 8007136:	2800      	cmp	r0, #0
 8007138:	d165      	bne.n	8007206 <_vfprintf_r+0x145e>
 800713a:	ae2b      	add	r6, sp, #172	; 0xac
 800713c:	ab24      	add	r3, sp, #144	; 0x90
 800713e:	6033      	str	r3, [r6, #0]
 8007140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007142:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007144:	6073      	str	r3, [r6, #4]
 8007146:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007148:	4413      	add	r3, r2
 800714a:	932a      	str	r3, [sp, #168]	; 0xa8
 800714c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800714e:	3301      	adds	r3, #1
 8007150:	2b07      	cmp	r3, #7
 8007152:	9329      	str	r3, [sp, #164]	; 0xa4
 8007154:	f73f adaf 	bgt.w	8006cb6 <_vfprintf_r+0xf0e>
 8007158:	f106 0408 	add.w	r4, r6, #8
 800715c:	e408      	b.n	8006970 <_vfprintf_r+0xbc8>
 800715e:	aa28      	add	r2, sp, #160	; 0xa0
 8007160:	4649      	mov	r1, r9
 8007162:	4658      	mov	r0, fp
 8007164:	f002 fbb3 	bl	80098ce <__sprint_r>
 8007168:	2800      	cmp	r0, #0
 800716a:	d14c      	bne.n	8007206 <_vfprintf_r+0x145e>
 800716c:	ae2b      	add	r6, sp, #172	; 0xac
 800716e:	e7c5      	b.n	80070fc <_vfprintf_r+0x1354>
 8007170:	2c00      	cmp	r4, #0
 8007172:	dde3      	ble.n	800713c <_vfprintf_r+0x1394>
 8007174:	2710      	movs	r7, #16
 8007176:	4d3c      	ldr	r5, [pc, #240]	; (8007268 <_vfprintf_r+0x14c0>)
 8007178:	2c10      	cmp	r4, #16
 800717a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800717e:	f106 0108 	add.w	r1, r6, #8
 8007182:	f103 0301 	add.w	r3, r3, #1
 8007186:	6035      	str	r5, [r6, #0]
 8007188:	dc07      	bgt.n	800719a <_vfprintf_r+0x13f2>
 800718a:	6074      	str	r4, [r6, #4]
 800718c:	2b07      	cmp	r3, #7
 800718e:	4414      	add	r4, r2
 8007190:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8007194:	dcca      	bgt.n	800712c <_vfprintf_r+0x1384>
 8007196:	460e      	mov	r6, r1
 8007198:	e7d0      	b.n	800713c <_vfprintf_r+0x1394>
 800719a:	3210      	adds	r2, #16
 800719c:	2b07      	cmp	r3, #7
 800719e:	6077      	str	r7, [r6, #4]
 80071a0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80071a4:	dd06      	ble.n	80071b4 <_vfprintf_r+0x140c>
 80071a6:	aa28      	add	r2, sp, #160	; 0xa0
 80071a8:	4649      	mov	r1, r9
 80071aa:	4658      	mov	r0, fp
 80071ac:	f002 fb8f 	bl	80098ce <__sprint_r>
 80071b0:	bb48      	cbnz	r0, 8007206 <_vfprintf_r+0x145e>
 80071b2:	a92b      	add	r1, sp, #172	; 0xac
 80071b4:	3c10      	subs	r4, #16
 80071b6:	460e      	mov	r6, r1
 80071b8:	e7de      	b.n	8007178 <_vfprintf_r+0x13d0>
 80071ba:	2b07      	cmp	r3, #7
 80071bc:	ddbe      	ble.n	800713c <_vfprintf_r+0x1394>
 80071be:	e7b5      	b.n	800712c <_vfprintf_r+0x1384>
 80071c0:	3608      	adds	r6, #8
 80071c2:	e7bb      	b.n	800713c <_vfprintf_r+0x1394>
 80071c4:	460c      	mov	r4, r1
 80071c6:	f7ff bbd3 	b.w	8006970 <_vfprintf_r+0xbc8>
 80071ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80071ce:	1a9d      	subs	r5, r3, r2
 80071d0:	2d00      	cmp	r5, #0
 80071d2:	f77f abd1 	ble.w	8006978 <_vfprintf_r+0xbd0>
 80071d6:	2710      	movs	r7, #16
 80071d8:	4e24      	ldr	r6, [pc, #144]	; (800726c <_vfprintf_r+0x14c4>)
 80071da:	2d10      	cmp	r5, #16
 80071dc:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80071e0:	6026      	str	r6, [r4, #0]
 80071e2:	f103 0301 	add.w	r3, r3, #1
 80071e6:	dc18      	bgt.n	800721a <_vfprintf_r+0x1472>
 80071e8:	6065      	str	r5, [r4, #4]
 80071ea:	2b07      	cmp	r3, #7
 80071ec:	4415      	add	r5, r2
 80071ee:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80071f2:	f77f abc1 	ble.w	8006978 <_vfprintf_r+0xbd0>
 80071f6:	aa28      	add	r2, sp, #160	; 0xa0
 80071f8:	4649      	mov	r1, r9
 80071fa:	4658      	mov	r0, fp
 80071fc:	f002 fb67 	bl	80098ce <__sprint_r>
 8007200:	2800      	cmp	r0, #0
 8007202:	f43f abb9 	beq.w	8006978 <_vfprintf_r+0xbd0>
 8007206:	f1b8 0f00 	cmp.w	r8, #0
 800720a:	f43f a898 	beq.w	800633e <_vfprintf_r+0x596>
 800720e:	4641      	mov	r1, r8
 8007210:	4658      	mov	r0, fp
 8007212:	f001 f891 	bl	8008338 <_free_r>
 8007216:	f7ff b892 	b.w	800633e <_vfprintf_r+0x596>
 800721a:	3210      	adds	r2, #16
 800721c:	2b07      	cmp	r3, #7
 800721e:	6067      	str	r7, [r4, #4]
 8007220:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8007224:	dc02      	bgt.n	800722c <_vfprintf_r+0x1484>
 8007226:	3408      	adds	r4, #8
 8007228:	3d10      	subs	r5, #16
 800722a:	e7d6      	b.n	80071da <_vfprintf_r+0x1432>
 800722c:	aa28      	add	r2, sp, #160	; 0xa0
 800722e:	4649      	mov	r1, r9
 8007230:	4658      	mov	r0, fp
 8007232:	f002 fb4c 	bl	80098ce <__sprint_r>
 8007236:	2800      	cmp	r0, #0
 8007238:	d1e5      	bne.n	8007206 <_vfprintf_r+0x145e>
 800723a:	ac2b      	add	r4, sp, #172	; 0xac
 800723c:	e7f4      	b.n	8007228 <_vfprintf_r+0x1480>
 800723e:	4641      	mov	r1, r8
 8007240:	4658      	mov	r0, fp
 8007242:	f001 f879 	bl	8008338 <_free_r>
 8007246:	f7ff bbaf 	b.w	80069a8 <_vfprintf_r+0xc00>
 800724a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800724c:	b91b      	cbnz	r3, 8007256 <_vfprintf_r+0x14ae>
 800724e:	2300      	movs	r3, #0
 8007250:	9329      	str	r3, [sp, #164]	; 0xa4
 8007252:	f7ff b874 	b.w	800633e <_vfprintf_r+0x596>
 8007256:	aa28      	add	r2, sp, #160	; 0xa0
 8007258:	4649      	mov	r1, r9
 800725a:	4658      	mov	r0, fp
 800725c:	f002 fb37 	bl	80098ce <__sprint_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	f47f a86c 	bne.w	800633e <_vfprintf_r+0x596>
 8007266:	e7f2      	b.n	800724e <_vfprintf_r+0x14a6>
 8007268:	0800a186 	.word	0x0800a186
 800726c:	0800a176 	.word	0x0800a176

08007270 <__sbprintf>:
 8007270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007272:	460c      	mov	r4, r1
 8007274:	461f      	mov	r7, r3
 8007276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007278:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800727c:	9319      	str	r3, [sp, #100]	; 0x64
 800727e:	89e3      	ldrh	r3, [r4, #14]
 8007280:	8989      	ldrh	r1, [r1, #12]
 8007282:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007286:	69e3      	ldr	r3, [r4, #28]
 8007288:	f021 0102 	bic.w	r1, r1, #2
 800728c:	9307      	str	r3, [sp, #28]
 800728e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007290:	f8ad 100c 	strh.w	r1, [sp, #12]
 8007294:	a91a      	add	r1, sp, #104	; 0x68
 8007296:	4615      	mov	r5, r2
 8007298:	4606      	mov	r6, r0
 800729a:	9309      	str	r3, [sp, #36]	; 0x24
 800729c:	9100      	str	r1, [sp, #0]
 800729e:	2300      	movs	r3, #0
 80072a0:	9104      	str	r1, [sp, #16]
 80072a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80072a6:	a816      	add	r0, sp, #88	; 0x58
 80072a8:	9102      	str	r1, [sp, #8]
 80072aa:	9105      	str	r1, [sp, #20]
 80072ac:	9306      	str	r3, [sp, #24]
 80072ae:	f001 fa79 	bl	80087a4 <__retarget_lock_init_recursive>
 80072b2:	462a      	mov	r2, r5
 80072b4:	463b      	mov	r3, r7
 80072b6:	4669      	mov	r1, sp
 80072b8:	4630      	mov	r0, r6
 80072ba:	f7fe fd75 	bl	8005da8 <_vfprintf_r>
 80072be:	1e05      	subs	r5, r0, #0
 80072c0:	db07      	blt.n	80072d2 <__sbprintf+0x62>
 80072c2:	4669      	mov	r1, sp
 80072c4:	4630      	mov	r0, r6
 80072c6:	f000 ff3b 	bl	8008140 <_fflush_r>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	bf18      	it	ne
 80072ce:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80072d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80072d6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80072d8:	065b      	lsls	r3, r3, #25
 80072da:	bf42      	ittt	mi
 80072dc:	89a3      	ldrhmi	r3, [r4, #12]
 80072de:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80072e2:	81a3      	strhmi	r3, [r4, #12]
 80072e4:	f001 fa5f 	bl	80087a6 <__retarget_lock_close_recursive>
 80072e8:	4628      	mov	r0, r5
 80072ea:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80072ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072f0 <__swsetup_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4b2a      	ldr	r3, [pc, #168]	; (800739c <__swsetup_r+0xac>)
 80072f4:	4605      	mov	r5, r0
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	460c      	mov	r4, r1
 80072fa:	b118      	cbz	r0, 8007304 <__swsetup_r+0x14>
 80072fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80072fe:	b90b      	cbnz	r3, 8007304 <__swsetup_r+0x14>
 8007300:	f000 ff8a 	bl	8008218 <__sinit>
 8007304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007308:	b29a      	uxth	r2, r3
 800730a:	0711      	lsls	r1, r2, #28
 800730c:	d422      	bmi.n	8007354 <__swsetup_r+0x64>
 800730e:	06d0      	lsls	r0, r2, #27
 8007310:	d407      	bmi.n	8007322 <__swsetup_r+0x32>
 8007312:	2209      	movs	r2, #9
 8007314:	602a      	str	r2, [r5, #0]
 8007316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800731a:	81a3      	strh	r3, [r4, #12]
 800731c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007320:	e034      	b.n	800738c <__swsetup_r+0x9c>
 8007322:	0751      	lsls	r1, r2, #29
 8007324:	d512      	bpl.n	800734c <__swsetup_r+0x5c>
 8007326:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007328:	b141      	cbz	r1, 800733c <__swsetup_r+0x4c>
 800732a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800732e:	4299      	cmp	r1, r3
 8007330:	d002      	beq.n	8007338 <__swsetup_r+0x48>
 8007332:	4628      	mov	r0, r5
 8007334:	f001 f800 	bl	8008338 <_free_r>
 8007338:	2300      	movs	r3, #0
 800733a:	6323      	str	r3, [r4, #48]	; 0x30
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007342:	81a3      	strh	r3, [r4, #12]
 8007344:	2300      	movs	r3, #0
 8007346:	6063      	str	r3, [r4, #4]
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	f043 0308 	orr.w	r3, r3, #8
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	6923      	ldr	r3, [r4, #16]
 8007356:	b94b      	cbnz	r3, 800736c <__swsetup_r+0x7c>
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800735e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007362:	d003      	beq.n	800736c <__swsetup_r+0x7c>
 8007364:	4621      	mov	r1, r4
 8007366:	4628      	mov	r0, r5
 8007368:	f001 fa4c 	bl	8008804 <__smakebuf_r>
 800736c:	89a2      	ldrh	r2, [r4, #12]
 800736e:	f012 0301 	ands.w	r3, r2, #1
 8007372:	d00c      	beq.n	800738e <__swsetup_r+0x9e>
 8007374:	2300      	movs	r3, #0
 8007376:	60a3      	str	r3, [r4, #8]
 8007378:	6963      	ldr	r3, [r4, #20]
 800737a:	425b      	negs	r3, r3
 800737c:	61a3      	str	r3, [r4, #24]
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	b953      	cbnz	r3, 8007398 <__swsetup_r+0xa8>
 8007382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007386:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800738a:	d1c4      	bne.n	8007316 <__swsetup_r+0x26>
 800738c:	bd38      	pop	{r3, r4, r5, pc}
 800738e:	0792      	lsls	r2, r2, #30
 8007390:	bf58      	it	pl
 8007392:	6963      	ldrpl	r3, [r4, #20]
 8007394:	60a3      	str	r3, [r4, #8]
 8007396:	e7f2      	b.n	800737e <__swsetup_r+0x8e>
 8007398:	2000      	movs	r0, #0
 800739a:	e7f7      	b.n	800738c <__swsetup_r+0x9c>
 800739c:	20000014 	.word	0x20000014

080073a0 <register_fini>:
 80073a0:	4b02      	ldr	r3, [pc, #8]	; (80073ac <register_fini+0xc>)
 80073a2:	b113      	cbz	r3, 80073aa <register_fini+0xa>
 80073a4:	4802      	ldr	r0, [pc, #8]	; (80073b0 <register_fini+0x10>)
 80073a6:	f000 b805 	b.w	80073b4 <atexit>
 80073aa:	4770      	bx	lr
 80073ac:	00000000 	.word	0x00000000
 80073b0:	08008269 	.word	0x08008269

080073b4 <atexit>:
 80073b4:	2300      	movs	r3, #0
 80073b6:	4601      	mov	r1, r0
 80073b8:	461a      	mov	r2, r3
 80073ba:	4618      	mov	r0, r3
 80073bc:	f002 bb14 	b.w	80099e8 <__register_exitproc>

080073c0 <quorem>:
 80073c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	6903      	ldr	r3, [r0, #16]
 80073c6:	690c      	ldr	r4, [r1, #16]
 80073c8:	4680      	mov	r8, r0
 80073ca:	42a3      	cmp	r3, r4
 80073cc:	f2c0 8084 	blt.w	80074d8 <quorem+0x118>
 80073d0:	3c01      	subs	r4, #1
 80073d2:	f101 0714 	add.w	r7, r1, #20
 80073d6:	f100 0614 	add.w	r6, r0, #20
 80073da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80073de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80073e2:	3501      	adds	r5, #1
 80073e4:	fbb0 f5f5 	udiv	r5, r0, r5
 80073e8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80073ec:	eb06 030c 	add.w	r3, r6, ip
 80073f0:	eb07 090c 	add.w	r9, r7, ip
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	b39d      	cbz	r5, 8007460 <quorem+0xa0>
 80073f8:	f04f 0a00 	mov.w	sl, #0
 80073fc:	4638      	mov	r0, r7
 80073fe:	46b6      	mov	lr, r6
 8007400:	46d3      	mov	fp, sl
 8007402:	f850 2b04 	ldr.w	r2, [r0], #4
 8007406:	b293      	uxth	r3, r2
 8007408:	fb05 a303 	mla	r3, r5, r3, sl
 800740c:	0c12      	lsrs	r2, r2, #16
 800740e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007412:	fb05 a202 	mla	r2, r5, r2, sl
 8007416:	b29b      	uxth	r3, r3
 8007418:	ebab 0303 	sub.w	r3, fp, r3
 800741c:	f8de b000 	ldr.w	fp, [lr]
 8007420:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007424:	fa1f fb8b 	uxth.w	fp, fp
 8007428:	445b      	add	r3, fp
 800742a:	fa1f fb82 	uxth.w	fp, r2
 800742e:	f8de 2000 	ldr.w	r2, [lr]
 8007432:	4581      	cmp	r9, r0
 8007434:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007438:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800743c:	b29b      	uxth	r3, r3
 800743e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007442:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007446:	f84e 3b04 	str.w	r3, [lr], #4
 800744a:	d2da      	bcs.n	8007402 <quorem+0x42>
 800744c:	f856 300c 	ldr.w	r3, [r6, ip]
 8007450:	b933      	cbnz	r3, 8007460 <quorem+0xa0>
 8007452:	9b01      	ldr	r3, [sp, #4]
 8007454:	3b04      	subs	r3, #4
 8007456:	429e      	cmp	r6, r3
 8007458:	461a      	mov	r2, r3
 800745a:	d331      	bcc.n	80074c0 <quorem+0x100>
 800745c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007460:	4640      	mov	r0, r8
 8007462:	f001 fe6d 	bl	8009140 <__mcmp>
 8007466:	2800      	cmp	r0, #0
 8007468:	db26      	blt.n	80074b8 <quorem+0xf8>
 800746a:	4630      	mov	r0, r6
 800746c:	f04f 0c00 	mov.w	ip, #0
 8007470:	3501      	adds	r5, #1
 8007472:	f857 1b04 	ldr.w	r1, [r7], #4
 8007476:	f8d0 e000 	ldr.w	lr, [r0]
 800747a:	b28b      	uxth	r3, r1
 800747c:	ebac 0303 	sub.w	r3, ip, r3
 8007480:	fa1f f28e 	uxth.w	r2, lr
 8007484:	4413      	add	r3, r2
 8007486:	0c0a      	lsrs	r2, r1, #16
 8007488:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800748c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007490:	b29b      	uxth	r3, r3
 8007492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007496:	45b9      	cmp	r9, r7
 8007498:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800749c:	f840 3b04 	str.w	r3, [r0], #4
 80074a0:	d2e7      	bcs.n	8007472 <quorem+0xb2>
 80074a2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80074a6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80074aa:	b92a      	cbnz	r2, 80074b8 <quorem+0xf8>
 80074ac:	3b04      	subs	r3, #4
 80074ae:	429e      	cmp	r6, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	d30b      	bcc.n	80074cc <quorem+0x10c>
 80074b4:	f8c8 4010 	str.w	r4, [r8, #16]
 80074b8:	4628      	mov	r0, r5
 80074ba:	b003      	add	sp, #12
 80074bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c0:	6812      	ldr	r2, [r2, #0]
 80074c2:	3b04      	subs	r3, #4
 80074c4:	2a00      	cmp	r2, #0
 80074c6:	d1c9      	bne.n	800745c <quorem+0x9c>
 80074c8:	3c01      	subs	r4, #1
 80074ca:	e7c4      	b.n	8007456 <quorem+0x96>
 80074cc:	6812      	ldr	r2, [r2, #0]
 80074ce:	3b04      	subs	r3, #4
 80074d0:	2a00      	cmp	r2, #0
 80074d2:	d1ef      	bne.n	80074b4 <quorem+0xf4>
 80074d4:	3c01      	subs	r4, #1
 80074d6:	e7ea      	b.n	80074ae <quorem+0xee>
 80074d8:	2000      	movs	r0, #0
 80074da:	e7ee      	b.n	80074ba <quorem+0xfa>
 80074dc:	0000      	movs	r0, r0
	...

080074e0 <_dtoa_r>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	4616      	mov	r6, r2
 80074e6:	461f      	mov	r7, r3
 80074e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80074ea:	b095      	sub	sp, #84	; 0x54
 80074ec:	4604      	mov	r4, r0
 80074ee:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80074f0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80074f4:	b141      	cbz	r1, 8007508 <_dtoa_r+0x28>
 80074f6:	2301      	movs	r3, #1
 80074f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074fa:	4093      	lsls	r3, r2
 80074fc:	608b      	str	r3, [r1, #8]
 80074fe:	604a      	str	r2, [r1, #4]
 8007500:	f001 fc59 	bl	8008db6 <_Bfree>
 8007504:	2300      	movs	r3, #0
 8007506:	6423      	str	r3, [r4, #64]	; 0x40
 8007508:	1e3b      	subs	r3, r7, #0
 800750a:	bfaf      	iteee	ge
 800750c:	2300      	movge	r3, #0
 800750e:	2201      	movlt	r2, #1
 8007510:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007514:	9303      	strlt	r3, [sp, #12]
 8007516:	bfa8      	it	ge
 8007518:	602b      	strge	r3, [r5, #0]
 800751a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800751e:	4bb0      	ldr	r3, [pc, #704]	; (80077e0 <_dtoa_r+0x300>)
 8007520:	bfb8      	it	lt
 8007522:	602a      	strlt	r2, [r5, #0]
 8007524:	ea33 0308 	bics.w	r3, r3, r8
 8007528:	d116      	bne.n	8007558 <_dtoa_r+0x78>
 800752a:	f242 730f 	movw	r3, #9999	; 0x270f
 800752e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	9b02      	ldr	r3, [sp, #8]
 8007534:	b923      	cbnz	r3, 8007540 <_dtoa_r+0x60>
 8007536:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800753a:	2800      	cmp	r0, #0
 800753c:	f000 853f 	beq.w	8007fbe <_dtoa_r+0xade>
 8007540:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007542:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 80077f4 <_dtoa_r+0x314>
 8007546:	b11b      	cbz	r3, 8007550 <_dtoa_r+0x70>
 8007548:	f10b 0303 	add.w	r3, fp, #3
 800754c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	4658      	mov	r0, fp
 8007552:	b015      	add	sp, #84	; 0x54
 8007554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800755c:	2200      	movs	r2, #0
 800755e:	2300      	movs	r3, #0
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f9 fa20 	bl	80009a8 <__aeabi_dcmpeq>
 8007568:	4682      	mov	sl, r0
 800756a:	b160      	cbz	r0, 8007586 <_dtoa_r+0xa6>
 800756c:	2301      	movs	r3, #1
 800756e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 851e 	beq.w	8007fb6 <_dtoa_r+0xad6>
 800757a:	4b9a      	ldr	r3, [pc, #616]	; (80077e4 <_dtoa_r+0x304>)
 800757c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800757e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e7e4      	b.n	8007550 <_dtoa_r+0x70>
 8007586:	ab12      	add	r3, sp, #72	; 0x48
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	ab13      	add	r3, sp, #76	; 0x4c
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	4632      	mov	r2, r6
 8007590:	463b      	mov	r3, r7
 8007592:	4620      	mov	r0, r4
 8007594:	f001 fe4c 	bl	8009230 <__d2b>
 8007598:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800759c:	9006      	str	r0, [sp, #24]
 800759e:	2d00      	cmp	r5, #0
 80075a0:	d07d      	beq.n	800769e <_dtoa_r+0x1be>
 80075a2:	46b0      	mov	r8, r6
 80075a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075a8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80075ac:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80075b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075b4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80075b8:	2200      	movs	r2, #0
 80075ba:	4b8b      	ldr	r3, [pc, #556]	; (80077e8 <_dtoa_r+0x308>)
 80075bc:	4640      	mov	r0, r8
 80075be:	4649      	mov	r1, r9
 80075c0:	f7f8 fdd2 	bl	8000168 <__aeabi_dsub>
 80075c4:	a380      	add	r3, pc, #512	; (adr r3, 80077c8 <_dtoa_r+0x2e8>)
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f7f8 ff85 	bl	80004d8 <__aeabi_dmul>
 80075ce:	a380      	add	r3, pc, #512	; (adr r3, 80077d0 <_dtoa_r+0x2f0>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f7f8 fdca 	bl	800016c <__adddf3>
 80075d8:	4606      	mov	r6, r0
 80075da:	4628      	mov	r0, r5
 80075dc:	460f      	mov	r7, r1
 80075de:	f7f8 ff11 	bl	8000404 <__aeabi_i2d>
 80075e2:	a37d      	add	r3, pc, #500	; (adr r3, 80077d8 <_dtoa_r+0x2f8>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f7f8 ff76 	bl	80004d8 <__aeabi_dmul>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4630      	mov	r0, r6
 80075f2:	4639      	mov	r1, r7
 80075f4:	f7f8 fdba 	bl	800016c <__adddf3>
 80075f8:	4606      	mov	r6, r0
 80075fa:	460f      	mov	r7, r1
 80075fc:	f7f9 fa1c 	bl	8000a38 <__aeabi_d2iz>
 8007600:	2200      	movs	r2, #0
 8007602:	4682      	mov	sl, r0
 8007604:	2300      	movs	r3, #0
 8007606:	4630      	mov	r0, r6
 8007608:	4639      	mov	r1, r7
 800760a:	f7f9 f9d7 	bl	80009bc <__aeabi_dcmplt>
 800760e:	b148      	cbz	r0, 8007624 <_dtoa_r+0x144>
 8007610:	4650      	mov	r0, sl
 8007612:	f7f8 fef7 	bl	8000404 <__aeabi_i2d>
 8007616:	4632      	mov	r2, r6
 8007618:	463b      	mov	r3, r7
 800761a:	f7f9 f9c5 	bl	80009a8 <__aeabi_dcmpeq>
 800761e:	b908      	cbnz	r0, 8007624 <_dtoa_r+0x144>
 8007620:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007624:	f1ba 0f16 	cmp.w	sl, #22
 8007628:	d85a      	bhi.n	80076e0 <_dtoa_r+0x200>
 800762a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800762e:	496f      	ldr	r1, [pc, #444]	; (80077ec <_dtoa_r+0x30c>)
 8007630:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007638:	f7f9 f9de 	bl	80009f8 <__aeabi_dcmpgt>
 800763c:	2800      	cmp	r0, #0
 800763e:	d051      	beq.n	80076e4 <_dtoa_r+0x204>
 8007640:	2300      	movs	r3, #0
 8007642:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007646:	930d      	str	r3, [sp, #52]	; 0x34
 8007648:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800764a:	1b5d      	subs	r5, r3, r5
 800764c:	1e6b      	subs	r3, r5, #1
 800764e:	9307      	str	r3, [sp, #28]
 8007650:	bf43      	ittte	mi
 8007652:	2300      	movmi	r3, #0
 8007654:	f1c5 0901 	rsbmi	r9, r5, #1
 8007658:	9307      	strmi	r3, [sp, #28]
 800765a:	f04f 0900 	movpl.w	r9, #0
 800765e:	f1ba 0f00 	cmp.w	sl, #0
 8007662:	db41      	blt.n	80076e8 <_dtoa_r+0x208>
 8007664:	9b07      	ldr	r3, [sp, #28]
 8007666:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800766a:	4453      	add	r3, sl
 800766c:	9307      	str	r3, [sp, #28]
 800766e:	2300      	movs	r3, #0
 8007670:	9308      	str	r3, [sp, #32]
 8007672:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007674:	2b09      	cmp	r3, #9
 8007676:	f200 808c 	bhi.w	8007792 <_dtoa_r+0x2b2>
 800767a:	2b05      	cmp	r3, #5
 800767c:	bfc4      	itt	gt
 800767e:	3b04      	subgt	r3, #4
 8007680:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007684:	bfc8      	it	gt
 8007686:	2500      	movgt	r5, #0
 8007688:	f1a3 0302 	sub.w	r3, r3, #2
 800768c:	bfd8      	it	le
 800768e:	2501      	movle	r5, #1
 8007690:	2b03      	cmp	r3, #3
 8007692:	f200 808a 	bhi.w	80077aa <_dtoa_r+0x2ca>
 8007696:	e8df f003 	tbb	[pc, r3]
 800769a:	7a78      	.short	0x7a78
 800769c:	6c2f      	.short	0x6c2f
 800769e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80076a2:	441d      	add	r5, r3
 80076a4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80076a8:	2820      	cmp	r0, #32
 80076aa:	dd13      	ble.n	80076d4 <_dtoa_r+0x1f4>
 80076ac:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80076b0:	9b02      	ldr	r3, [sp, #8]
 80076b2:	fa08 f800 	lsl.w	r8, r8, r0
 80076b6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80076ba:	fa23 f000 	lsr.w	r0, r3, r0
 80076be:	ea48 0000 	orr.w	r0, r8, r0
 80076c2:	f7f8 fe8f 	bl	80003e4 <__aeabi_ui2d>
 80076c6:	2301      	movs	r3, #1
 80076c8:	4680      	mov	r8, r0
 80076ca:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80076ce:	3d01      	subs	r5, #1
 80076d0:	9310      	str	r3, [sp, #64]	; 0x40
 80076d2:	e771      	b.n	80075b8 <_dtoa_r+0xd8>
 80076d4:	9b02      	ldr	r3, [sp, #8]
 80076d6:	f1c0 0020 	rsb	r0, r0, #32
 80076da:	fa03 f000 	lsl.w	r0, r3, r0
 80076de:	e7f0      	b.n	80076c2 <_dtoa_r+0x1e2>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e7b0      	b.n	8007646 <_dtoa_r+0x166>
 80076e4:	900d      	str	r0, [sp, #52]	; 0x34
 80076e6:	e7af      	b.n	8007648 <_dtoa_r+0x168>
 80076e8:	f1ca 0300 	rsb	r3, sl, #0
 80076ec:	9308      	str	r3, [sp, #32]
 80076ee:	2300      	movs	r3, #0
 80076f0:	eba9 090a 	sub.w	r9, r9, sl
 80076f4:	930c      	str	r3, [sp, #48]	; 0x30
 80076f6:	e7bc      	b.n	8007672 <_dtoa_r+0x192>
 80076f8:	2301      	movs	r3, #1
 80076fa:	9309      	str	r3, [sp, #36]	; 0x24
 80076fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	dd56      	ble.n	80077b0 <_dtoa_r+0x2d0>
 8007702:	4698      	mov	r8, r3
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	2200      	movs	r2, #0
 8007708:	6462      	str	r2, [r4, #68]	; 0x44
 800770a:	2204      	movs	r2, #4
 800770c:	f102 0014 	add.w	r0, r2, #20
 8007710:	4298      	cmp	r0, r3
 8007712:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007714:	d951      	bls.n	80077ba <_dtoa_r+0x2da>
 8007716:	4620      	mov	r0, r4
 8007718:	f001 fb28 	bl	8008d6c <_Balloc>
 800771c:	f1b8 0f0e 	cmp.w	r8, #14
 8007720:	4683      	mov	fp, r0
 8007722:	6420      	str	r0, [r4, #64]	; 0x40
 8007724:	f200 80ed 	bhi.w	8007902 <_dtoa_r+0x422>
 8007728:	2d00      	cmp	r5, #0
 800772a:	f000 80ea 	beq.w	8007902 <_dtoa_r+0x422>
 800772e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007732:	f1ba 0f00 	cmp.w	sl, #0
 8007736:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800773a:	dd77      	ble.n	800782c <_dtoa_r+0x34c>
 800773c:	4a2b      	ldr	r2, [pc, #172]	; (80077ec <_dtoa_r+0x30c>)
 800773e:	f00a 030f 	and.w	r3, sl, #15
 8007742:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007746:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800774a:	06f0      	lsls	r0, r6, #27
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007754:	d568      	bpl.n	8007828 <_dtoa_r+0x348>
 8007756:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800775a:	4b25      	ldr	r3, [pc, #148]	; (80077f0 <_dtoa_r+0x310>)
 800775c:	2503      	movs	r5, #3
 800775e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007762:	f7f8 ffe3 	bl	800072c <__aeabi_ddiv>
 8007766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800776a:	f006 060f 	and.w	r6, r6, #15
 800776e:	4f20      	ldr	r7, [pc, #128]	; (80077f0 <_dtoa_r+0x310>)
 8007770:	e04f      	b.n	8007812 <_dtoa_r+0x332>
 8007772:	2301      	movs	r3, #1
 8007774:	9309      	str	r3, [sp, #36]	; 0x24
 8007776:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007778:	4453      	add	r3, sl
 800777a:	f103 0801 	add.w	r8, r3, #1
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	4643      	mov	r3, r8
 8007782:	2b01      	cmp	r3, #1
 8007784:	bfb8      	it	lt
 8007786:	2301      	movlt	r3, #1
 8007788:	e7bd      	b.n	8007706 <_dtoa_r+0x226>
 800778a:	2300      	movs	r3, #0
 800778c:	e7b5      	b.n	80076fa <_dtoa_r+0x21a>
 800778e:	2300      	movs	r3, #0
 8007790:	e7f0      	b.n	8007774 <_dtoa_r+0x294>
 8007792:	2501      	movs	r5, #1
 8007794:	2300      	movs	r3, #0
 8007796:	9509      	str	r5, [sp, #36]	; 0x24
 8007798:	931e      	str	r3, [sp, #120]	; 0x78
 800779a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800779e:	2200      	movs	r2, #0
 80077a0:	9304      	str	r3, [sp, #16]
 80077a2:	4698      	mov	r8, r3
 80077a4:	2312      	movs	r3, #18
 80077a6:	921f      	str	r2, [sp, #124]	; 0x7c
 80077a8:	e7ad      	b.n	8007706 <_dtoa_r+0x226>
 80077aa:	2301      	movs	r3, #1
 80077ac:	9309      	str	r3, [sp, #36]	; 0x24
 80077ae:	e7f4      	b.n	800779a <_dtoa_r+0x2ba>
 80077b0:	2301      	movs	r3, #1
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	4698      	mov	r8, r3
 80077b6:	461a      	mov	r2, r3
 80077b8:	e7f5      	b.n	80077a6 <_dtoa_r+0x2c6>
 80077ba:	3101      	adds	r1, #1
 80077bc:	6461      	str	r1, [r4, #68]	; 0x44
 80077be:	0052      	lsls	r2, r2, #1
 80077c0:	e7a4      	b.n	800770c <_dtoa_r+0x22c>
 80077c2:	bf00      	nop
 80077c4:	f3af 8000 	nop.w
 80077c8:	636f4361 	.word	0x636f4361
 80077cc:	3fd287a7 	.word	0x3fd287a7
 80077d0:	8b60c8b3 	.word	0x8b60c8b3
 80077d4:	3fc68a28 	.word	0x3fc68a28
 80077d8:	509f79fb 	.word	0x509f79fb
 80077dc:	3fd34413 	.word	0x3fd34413
 80077e0:	7ff00000 	.word	0x7ff00000
 80077e4:	0800a155 	.word	0x0800a155
 80077e8:	3ff80000 	.word	0x3ff80000
 80077ec:	0800a1d0 	.word	0x0800a1d0
 80077f0:	0800a1a8 	.word	0x0800a1a8
 80077f4:	0800a19f 	.word	0x0800a19f
 80077f8:	07f1      	lsls	r1, r6, #31
 80077fa:	d508      	bpl.n	800780e <_dtoa_r+0x32e>
 80077fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007804:	f7f8 fe68 	bl	80004d8 <__aeabi_dmul>
 8007808:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800780c:	3501      	adds	r5, #1
 800780e:	1076      	asrs	r6, r6, #1
 8007810:	3708      	adds	r7, #8
 8007812:	2e00      	cmp	r6, #0
 8007814:	d1f0      	bne.n	80077f8 <_dtoa_r+0x318>
 8007816:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800781a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800781e:	f7f8 ff85 	bl	800072c <__aeabi_ddiv>
 8007822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007826:	e01b      	b.n	8007860 <_dtoa_r+0x380>
 8007828:	2502      	movs	r5, #2
 800782a:	e7a0      	b.n	800776e <_dtoa_r+0x28e>
 800782c:	f000 80a4 	beq.w	8007978 <_dtoa_r+0x498>
 8007830:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007834:	f1ca 0600 	rsb	r6, sl, #0
 8007838:	4ba0      	ldr	r3, [pc, #640]	; (8007abc <_dtoa_r+0x5dc>)
 800783a:	f006 020f 	and.w	r2, r6, #15
 800783e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007846:	f7f8 fe47 	bl	80004d8 <__aeabi_dmul>
 800784a:	2502      	movs	r5, #2
 800784c:	2300      	movs	r3, #0
 800784e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007852:	4f9b      	ldr	r7, [pc, #620]	; (8007ac0 <_dtoa_r+0x5e0>)
 8007854:	1136      	asrs	r6, r6, #4
 8007856:	2e00      	cmp	r6, #0
 8007858:	f040 8083 	bne.w	8007962 <_dtoa_r+0x482>
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e0      	bne.n	8007822 <_dtoa_r+0x342>
 8007860:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 808a 	beq.w	800797c <_dtoa_r+0x49c>
 8007868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800786c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007870:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007874:	2200      	movs	r2, #0
 8007876:	4b93      	ldr	r3, [pc, #588]	; (8007ac4 <_dtoa_r+0x5e4>)
 8007878:	f7f9 f8a0 	bl	80009bc <__aeabi_dcmplt>
 800787c:	2800      	cmp	r0, #0
 800787e:	d07d      	beq.n	800797c <_dtoa_r+0x49c>
 8007880:	f1b8 0f00 	cmp.w	r8, #0
 8007884:	d07a      	beq.n	800797c <_dtoa_r+0x49c>
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	dd36      	ble.n	80078fa <_dtoa_r+0x41a>
 800788c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007890:	2200      	movs	r2, #0
 8007892:	4b8d      	ldr	r3, [pc, #564]	; (8007ac8 <_dtoa_r+0x5e8>)
 8007894:	f7f8 fe20 	bl	80004d8 <__aeabi_dmul>
 8007898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800789c:	9e04      	ldr	r6, [sp, #16]
 800789e:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80078a2:	3501      	adds	r5, #1
 80078a4:	4628      	mov	r0, r5
 80078a6:	f7f8 fdad 	bl	8000404 <__aeabi_i2d>
 80078aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078ae:	f7f8 fe13 	bl	80004d8 <__aeabi_dmul>
 80078b2:	2200      	movs	r2, #0
 80078b4:	4b85      	ldr	r3, [pc, #532]	; (8007acc <_dtoa_r+0x5ec>)
 80078b6:	f7f8 fc59 	bl	800016c <__adddf3>
 80078ba:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80078be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80078c2:	950b      	str	r5, [sp, #44]	; 0x2c
 80078c4:	2e00      	cmp	r6, #0
 80078c6:	d15c      	bne.n	8007982 <_dtoa_r+0x4a2>
 80078c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078cc:	2200      	movs	r2, #0
 80078ce:	4b80      	ldr	r3, [pc, #512]	; (8007ad0 <_dtoa_r+0x5f0>)
 80078d0:	f7f8 fc4a 	bl	8000168 <__aeabi_dsub>
 80078d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d6:	462b      	mov	r3, r5
 80078d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078dc:	f7f9 f88c 	bl	80009f8 <__aeabi_dcmpgt>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	f040 8282 	bne.w	8007dea <_dtoa_r+0x90a>
 80078e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ec:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80078f0:	f7f9 f864 	bl	80009bc <__aeabi_dcmplt>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	f040 8276 	bne.w	8007de6 <_dtoa_r+0x906>
 80078fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80078fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007902:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007904:	2b00      	cmp	r3, #0
 8007906:	f2c0 814c 	blt.w	8007ba2 <_dtoa_r+0x6c2>
 800790a:	f1ba 0f0e 	cmp.w	sl, #14
 800790e:	f300 8148 	bgt.w	8007ba2 <_dtoa_r+0x6c2>
 8007912:	4b6a      	ldr	r3, [pc, #424]	; (8007abc <_dtoa_r+0x5dc>)
 8007914:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007920:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007922:	2b00      	cmp	r3, #0
 8007924:	f280 80d8 	bge.w	8007ad8 <_dtoa_r+0x5f8>
 8007928:	f1b8 0f00 	cmp.w	r8, #0
 800792c:	f300 80d4 	bgt.w	8007ad8 <_dtoa_r+0x5f8>
 8007930:	f040 8258 	bne.w	8007de4 <_dtoa_r+0x904>
 8007934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007938:	2200      	movs	r2, #0
 800793a:	4b65      	ldr	r3, [pc, #404]	; (8007ad0 <_dtoa_r+0x5f0>)
 800793c:	f7f8 fdcc 	bl	80004d8 <__aeabi_dmul>
 8007940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007944:	f7f9 f84e 	bl	80009e4 <__aeabi_dcmpge>
 8007948:	4646      	mov	r6, r8
 800794a:	4647      	mov	r7, r8
 800794c:	2800      	cmp	r0, #0
 800794e:	f040 822e 	bne.w	8007dae <_dtoa_r+0x8ce>
 8007952:	2331      	movs	r3, #49	; 0x31
 8007954:	f10b 0501 	add.w	r5, fp, #1
 8007958:	f88b 3000 	strb.w	r3, [fp]
 800795c:	f10a 0a01 	add.w	sl, sl, #1
 8007960:	e229      	b.n	8007db6 <_dtoa_r+0x8d6>
 8007962:	07f2      	lsls	r2, r6, #31
 8007964:	d505      	bpl.n	8007972 <_dtoa_r+0x492>
 8007966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800796a:	f7f8 fdb5 	bl	80004d8 <__aeabi_dmul>
 800796e:	2301      	movs	r3, #1
 8007970:	3501      	adds	r5, #1
 8007972:	1076      	asrs	r6, r6, #1
 8007974:	3708      	adds	r7, #8
 8007976:	e76e      	b.n	8007856 <_dtoa_r+0x376>
 8007978:	2502      	movs	r5, #2
 800797a:	e771      	b.n	8007860 <_dtoa_r+0x380>
 800797c:	4657      	mov	r7, sl
 800797e:	4646      	mov	r6, r8
 8007980:	e790      	b.n	80078a4 <_dtoa_r+0x3c4>
 8007982:	4b4e      	ldr	r3, [pc, #312]	; (8007abc <_dtoa_r+0x5dc>)
 8007984:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007988:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800798c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798e:	2b00      	cmp	r3, #0
 8007990:	d048      	beq.n	8007a24 <_dtoa_r+0x544>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	2000      	movs	r0, #0
 8007998:	494e      	ldr	r1, [pc, #312]	; (8007ad4 <_dtoa_r+0x5f4>)
 800799a:	f7f8 fec7 	bl	800072c <__aeabi_ddiv>
 800799e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079a2:	f7f8 fbe1 	bl	8000168 <__aeabi_dsub>
 80079a6:	465d      	mov	r5, fp
 80079a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80079ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079b0:	f7f9 f842 	bl	8000a38 <__aeabi_d2iz>
 80079b4:	9011      	str	r0, [sp, #68]	; 0x44
 80079b6:	f7f8 fd25 	bl	8000404 <__aeabi_i2d>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c2:	f7f8 fbd1 	bl	8000168 <__aeabi_dsub>
 80079c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079cc:	3330      	adds	r3, #48	; 0x30
 80079ce:	f805 3b01 	strb.w	r3, [r5], #1
 80079d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079d6:	f7f8 fff1 	bl	80009bc <__aeabi_dcmplt>
 80079da:	2800      	cmp	r0, #0
 80079dc:	d163      	bne.n	8007aa6 <_dtoa_r+0x5c6>
 80079de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079e2:	2000      	movs	r0, #0
 80079e4:	4937      	ldr	r1, [pc, #220]	; (8007ac4 <_dtoa_r+0x5e4>)
 80079e6:	f7f8 fbbf 	bl	8000168 <__aeabi_dsub>
 80079ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079ee:	f7f8 ffe5 	bl	80009bc <__aeabi_dcmplt>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f040 80b6 	bne.w	8007b64 <_dtoa_r+0x684>
 80079f8:	eba5 030b 	sub.w	r3, r5, fp
 80079fc:	429e      	cmp	r6, r3
 80079fe:	f77f af7c 	ble.w	80078fa <_dtoa_r+0x41a>
 8007a02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a06:	2200      	movs	r2, #0
 8007a08:	4b2f      	ldr	r3, [pc, #188]	; (8007ac8 <_dtoa_r+0x5e8>)
 8007a0a:	f7f8 fd65 	bl	80004d8 <__aeabi_dmul>
 8007a0e:	2200      	movs	r2, #0
 8007a10:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a18:	4b2b      	ldr	r3, [pc, #172]	; (8007ac8 <_dtoa_r+0x5e8>)
 8007a1a:	f7f8 fd5d 	bl	80004d8 <__aeabi_dmul>
 8007a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a22:	e7c3      	b.n	80079ac <_dtoa_r+0x4cc>
 8007a24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a28:	f7f8 fd56 	bl	80004d8 <__aeabi_dmul>
 8007a2c:	eb0b 0506 	add.w	r5, fp, r6
 8007a30:	465e      	mov	r6, fp
 8007a32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a3a:	f7f8 fffd 	bl	8000a38 <__aeabi_d2iz>
 8007a3e:	9011      	str	r0, [sp, #68]	; 0x44
 8007a40:	f7f8 fce0 	bl	8000404 <__aeabi_i2d>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a4c:	f7f8 fb8c 	bl	8000168 <__aeabi_dsub>
 8007a50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a56:	3330      	adds	r3, #48	; 0x30
 8007a58:	f806 3b01 	strb.w	r3, [r6], #1
 8007a5c:	42ae      	cmp	r6, r5
 8007a5e:	f04f 0200 	mov.w	r2, #0
 8007a62:	d124      	bne.n	8007aae <_dtoa_r+0x5ce>
 8007a64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a68:	4b1a      	ldr	r3, [pc, #104]	; (8007ad4 <_dtoa_r+0x5f4>)
 8007a6a:	f7f8 fb7f 	bl	800016c <__adddf3>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a76:	f7f8 ffbf 	bl	80009f8 <__aeabi_dcmpgt>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d172      	bne.n	8007b64 <_dtoa_r+0x684>
 8007a7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a82:	2000      	movs	r0, #0
 8007a84:	4913      	ldr	r1, [pc, #76]	; (8007ad4 <_dtoa_r+0x5f4>)
 8007a86:	f7f8 fb6f 	bl	8000168 <__aeabi_dsub>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a92:	f7f8 ff93 	bl	80009bc <__aeabi_dcmplt>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f43f af2f 	beq.w	80078fa <_dtoa_r+0x41a>
 8007a9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007aa0:	1e6a      	subs	r2, r5, #1
 8007aa2:	2b30      	cmp	r3, #48	; 0x30
 8007aa4:	d001      	beq.n	8007aaa <_dtoa_r+0x5ca>
 8007aa6:	46ba      	mov	sl, r7
 8007aa8:	e04b      	b.n	8007b42 <_dtoa_r+0x662>
 8007aaa:	4615      	mov	r5, r2
 8007aac:	e7f6      	b.n	8007a9c <_dtoa_r+0x5bc>
 8007aae:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <_dtoa_r+0x5e8>)
 8007ab0:	f7f8 fd12 	bl	80004d8 <__aeabi_dmul>
 8007ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ab8:	e7bd      	b.n	8007a36 <_dtoa_r+0x556>
 8007aba:	bf00      	nop
 8007abc:	0800a1d0 	.word	0x0800a1d0
 8007ac0:	0800a1a8 	.word	0x0800a1a8
 8007ac4:	3ff00000 	.word	0x3ff00000
 8007ac8:	40240000 	.word	0x40240000
 8007acc:	401c0000 	.word	0x401c0000
 8007ad0:	40140000 	.word	0x40140000
 8007ad4:	3fe00000 	.word	0x3fe00000
 8007ad8:	465d      	mov	r5, fp
 8007ada:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	4639      	mov	r1, r7
 8007ae6:	f7f8 fe21 	bl	800072c <__aeabi_ddiv>
 8007aea:	f7f8 ffa5 	bl	8000a38 <__aeabi_d2iz>
 8007aee:	4681      	mov	r9, r0
 8007af0:	f7f8 fc88 	bl	8000404 <__aeabi_i2d>
 8007af4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007af8:	f7f8 fcee 	bl	80004d8 <__aeabi_dmul>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4630      	mov	r0, r6
 8007b02:	4639      	mov	r1, r7
 8007b04:	f7f8 fb30 	bl	8000168 <__aeabi_dsub>
 8007b08:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007b0c:	f805 6b01 	strb.w	r6, [r5], #1
 8007b10:	eba5 060b 	sub.w	r6, r5, fp
 8007b14:	45b0      	cmp	r8, r6
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	d135      	bne.n	8007b88 <_dtoa_r+0x6a8>
 8007b1c:	f7f8 fb26 	bl	800016c <__adddf3>
 8007b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b24:	4606      	mov	r6, r0
 8007b26:	460f      	mov	r7, r1
 8007b28:	f7f8 ff66 	bl	80009f8 <__aeabi_dcmpgt>
 8007b2c:	b9c8      	cbnz	r0, 8007b62 <_dtoa_r+0x682>
 8007b2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b32:	4630      	mov	r0, r6
 8007b34:	4639      	mov	r1, r7
 8007b36:	f7f8 ff37 	bl	80009a8 <__aeabi_dcmpeq>
 8007b3a:	b110      	cbz	r0, 8007b42 <_dtoa_r+0x662>
 8007b3c:	f019 0f01 	tst.w	r9, #1
 8007b40:	d10f      	bne.n	8007b62 <_dtoa_r+0x682>
 8007b42:	9906      	ldr	r1, [sp, #24]
 8007b44:	4620      	mov	r0, r4
 8007b46:	f001 f936 	bl	8008db6 <_Bfree>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b4e:	702b      	strb	r3, [r5, #0]
 8007b50:	f10a 0301 	add.w	r3, sl, #1
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f43f acf9 	beq.w	8007550 <_dtoa_r+0x70>
 8007b5e:	601d      	str	r5, [r3, #0]
 8007b60:	e4f6      	b.n	8007550 <_dtoa_r+0x70>
 8007b62:	4657      	mov	r7, sl
 8007b64:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b68:	1e6b      	subs	r3, r5, #1
 8007b6a:	2a39      	cmp	r2, #57	; 0x39
 8007b6c:	d106      	bne.n	8007b7c <_dtoa_r+0x69c>
 8007b6e:	459b      	cmp	fp, r3
 8007b70:	d108      	bne.n	8007b84 <_dtoa_r+0x6a4>
 8007b72:	2330      	movs	r3, #48	; 0x30
 8007b74:	f88b 3000 	strb.w	r3, [fp]
 8007b78:	465b      	mov	r3, fp
 8007b7a:	3701      	adds	r7, #1
 8007b7c:	781a      	ldrb	r2, [r3, #0]
 8007b7e:	3201      	adds	r2, #1
 8007b80:	701a      	strb	r2, [r3, #0]
 8007b82:	e790      	b.n	8007aa6 <_dtoa_r+0x5c6>
 8007b84:	461d      	mov	r5, r3
 8007b86:	e7ed      	b.n	8007b64 <_dtoa_r+0x684>
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4b99      	ldr	r3, [pc, #612]	; (8007df0 <_dtoa_r+0x910>)
 8007b8c:	f7f8 fca4 	bl	80004d8 <__aeabi_dmul>
 8007b90:	2200      	movs	r2, #0
 8007b92:	2300      	movs	r3, #0
 8007b94:	4606      	mov	r6, r0
 8007b96:	460f      	mov	r7, r1
 8007b98:	f7f8 ff06 	bl	80009a8 <__aeabi_dcmpeq>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d09e      	beq.n	8007ade <_dtoa_r+0x5fe>
 8007ba0:	e7cf      	b.n	8007b42 <_dtoa_r+0x662>
 8007ba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	f000 8088 	beq.w	8007cba <_dtoa_r+0x7da>
 8007baa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007bac:	2a01      	cmp	r2, #1
 8007bae:	dc6d      	bgt.n	8007c8c <_dtoa_r+0x7ac>
 8007bb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bb2:	2a00      	cmp	r2, #0
 8007bb4:	d066      	beq.n	8007c84 <_dtoa_r+0x7a4>
 8007bb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bba:	464d      	mov	r5, r9
 8007bbc:	9e08      	ldr	r6, [sp, #32]
 8007bbe:	9a07      	ldr	r2, [sp, #28]
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	441a      	add	r2, r3
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	4499      	add	r9, r3
 8007bc8:	9207      	str	r2, [sp, #28]
 8007bca:	f001 f986 	bl	8008eda <__i2b>
 8007bce:	4607      	mov	r7, r0
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	dd0b      	ble.n	8007bec <_dtoa_r+0x70c>
 8007bd4:	9b07      	ldr	r3, [sp, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dd08      	ble.n	8007bec <_dtoa_r+0x70c>
 8007bda:	42ab      	cmp	r3, r5
 8007bdc:	bfa8      	it	ge
 8007bde:	462b      	movge	r3, r5
 8007be0:	9a07      	ldr	r2, [sp, #28]
 8007be2:	eba9 0903 	sub.w	r9, r9, r3
 8007be6:	1aed      	subs	r5, r5, r3
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	9307      	str	r3, [sp, #28]
 8007bec:	9b08      	ldr	r3, [sp, #32]
 8007bee:	b1eb      	cbz	r3, 8007c2c <_dtoa_r+0x74c>
 8007bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d065      	beq.n	8007cc2 <_dtoa_r+0x7e2>
 8007bf6:	b18e      	cbz	r6, 8007c1c <_dtoa_r+0x73c>
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f001 fa0b 	bl	8009018 <__pow5mult>
 8007c02:	9a06      	ldr	r2, [sp, #24]
 8007c04:	4601      	mov	r1, r0
 8007c06:	4607      	mov	r7, r0
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f001 f96f 	bl	8008eec <__multiply>
 8007c0e:	9906      	ldr	r1, [sp, #24]
 8007c10:	900a      	str	r0, [sp, #40]	; 0x28
 8007c12:	4620      	mov	r0, r4
 8007c14:	f001 f8cf 	bl	8008db6 <_Bfree>
 8007c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1a:	9306      	str	r3, [sp, #24]
 8007c1c:	9b08      	ldr	r3, [sp, #32]
 8007c1e:	1b9a      	subs	r2, r3, r6
 8007c20:	d004      	beq.n	8007c2c <_dtoa_r+0x74c>
 8007c22:	9906      	ldr	r1, [sp, #24]
 8007c24:	4620      	mov	r0, r4
 8007c26:	f001 f9f7 	bl	8009018 <__pow5mult>
 8007c2a:	9006      	str	r0, [sp, #24]
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f001 f953 	bl	8008eda <__i2b>
 8007c34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c36:	4606      	mov	r6, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 81ca 	beq.w	8007fd2 <_dtoa_r+0xaf2>
 8007c3e:	461a      	mov	r2, r3
 8007c40:	4601      	mov	r1, r0
 8007c42:	4620      	mov	r0, r4
 8007c44:	f001 f9e8 	bl	8009018 <__pow5mult>
 8007c48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	dc3e      	bgt.n	8007cce <_dtoa_r+0x7ee>
 8007c50:	9b02      	ldr	r3, [sp, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d137      	bne.n	8007cc6 <_dtoa_r+0x7e6>
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d134      	bne.n	8007cca <_dtoa_r+0x7ea>
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c66:	0d1b      	lsrs	r3, r3, #20
 8007c68:	051b      	lsls	r3, r3, #20
 8007c6a:	b12b      	cbz	r3, 8007c78 <_dtoa_r+0x798>
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	f109 0901 	add.w	r9, r9, #1
 8007c72:	3301      	adds	r3, #1
 8007c74:	9307      	str	r3, [sp, #28]
 8007c76:	2301      	movs	r3, #1
 8007c78:	9308      	str	r3, [sp, #32]
 8007c7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d128      	bne.n	8007cd2 <_dtoa_r+0x7f2>
 8007c80:	2001      	movs	r0, #1
 8007c82:	e02e      	b.n	8007ce2 <_dtoa_r+0x802>
 8007c84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c8a:	e796      	b.n	8007bba <_dtoa_r+0x6da>
 8007c8c:	9b08      	ldr	r3, [sp, #32]
 8007c8e:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8007c92:	42b3      	cmp	r3, r6
 8007c94:	bfb7      	itett	lt
 8007c96:	9b08      	ldrlt	r3, [sp, #32]
 8007c98:	1b9e      	subge	r6, r3, r6
 8007c9a:	1af2      	sublt	r2, r6, r3
 8007c9c:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007c9e:	bfbf      	itttt	lt
 8007ca0:	9608      	strlt	r6, [sp, #32]
 8007ca2:	189b      	addlt	r3, r3, r2
 8007ca4:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007ca6:	2600      	movlt	r6, #0
 8007ca8:	f1b8 0f00 	cmp.w	r8, #0
 8007cac:	bfb9      	ittee	lt
 8007cae:	eba9 0508 	sublt.w	r5, r9, r8
 8007cb2:	2300      	movlt	r3, #0
 8007cb4:	464d      	movge	r5, r9
 8007cb6:	4643      	movge	r3, r8
 8007cb8:	e781      	b.n	8007bbe <_dtoa_r+0x6de>
 8007cba:	9e08      	ldr	r6, [sp, #32]
 8007cbc:	464d      	mov	r5, r9
 8007cbe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007cc0:	e786      	b.n	8007bd0 <_dtoa_r+0x6f0>
 8007cc2:	9a08      	ldr	r2, [sp, #32]
 8007cc4:	e7ad      	b.n	8007c22 <_dtoa_r+0x742>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e7d6      	b.n	8007c78 <_dtoa_r+0x798>
 8007cca:	9b02      	ldr	r3, [sp, #8]
 8007ccc:	e7d4      	b.n	8007c78 <_dtoa_r+0x798>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9308      	str	r3, [sp, #32]
 8007cd2:	6933      	ldr	r3, [r6, #16]
 8007cd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007cd8:	6918      	ldr	r0, [r3, #16]
 8007cda:	f001 f8b0 	bl	8008e3e <__hi0bits>
 8007cde:	f1c0 0020 	rsb	r0, r0, #32
 8007ce2:	9b07      	ldr	r3, [sp, #28]
 8007ce4:	4418      	add	r0, r3
 8007ce6:	f010 001f 	ands.w	r0, r0, #31
 8007cea:	d047      	beq.n	8007d7c <_dtoa_r+0x89c>
 8007cec:	f1c0 0320 	rsb	r3, r0, #32
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	dd3b      	ble.n	8007d6c <_dtoa_r+0x88c>
 8007cf4:	9b07      	ldr	r3, [sp, #28]
 8007cf6:	f1c0 001c 	rsb	r0, r0, #28
 8007cfa:	4481      	add	r9, r0
 8007cfc:	4405      	add	r5, r0
 8007cfe:	4403      	add	r3, r0
 8007d00:	9307      	str	r3, [sp, #28]
 8007d02:	f1b9 0f00 	cmp.w	r9, #0
 8007d06:	dd05      	ble.n	8007d14 <_dtoa_r+0x834>
 8007d08:	464a      	mov	r2, r9
 8007d0a:	9906      	ldr	r1, [sp, #24]
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f001 f9c3 	bl	8009098 <__lshift>
 8007d12:	9006      	str	r0, [sp, #24]
 8007d14:	9b07      	ldr	r3, [sp, #28]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	dd05      	ble.n	8007d26 <_dtoa_r+0x846>
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f001 f9ba 	bl	8009098 <__lshift>
 8007d24:	4606      	mov	r6, r0
 8007d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d28:	b353      	cbz	r3, 8007d80 <_dtoa_r+0x8a0>
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	9806      	ldr	r0, [sp, #24]
 8007d2e:	f001 fa07 	bl	8009140 <__mcmp>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	da24      	bge.n	8007d80 <_dtoa_r+0x8a0>
 8007d36:	2300      	movs	r3, #0
 8007d38:	220a      	movs	r2, #10
 8007d3a:	9906      	ldr	r1, [sp, #24]
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f001 f843 	bl	8008dc8 <__multadd>
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007d48:	9006      	str	r0, [sp, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 8148 	beq.w	8007fe0 <_dtoa_r+0xb00>
 8007d50:	2300      	movs	r3, #0
 8007d52:	4639      	mov	r1, r7
 8007d54:	220a      	movs	r2, #10
 8007d56:	4620      	mov	r0, r4
 8007d58:	f001 f836 	bl	8008dc8 <__multadd>
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	4607      	mov	r7, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	dc4d      	bgt.n	8007e00 <_dtoa_r+0x920>
 8007d64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	dd4a      	ble.n	8007e00 <_dtoa_r+0x920>
 8007d6a:	e011      	b.n	8007d90 <_dtoa_r+0x8b0>
 8007d6c:	d0c9      	beq.n	8007d02 <_dtoa_r+0x822>
 8007d6e:	9a07      	ldr	r2, [sp, #28]
 8007d70:	331c      	adds	r3, #28
 8007d72:	441a      	add	r2, r3
 8007d74:	4499      	add	r9, r3
 8007d76:	441d      	add	r5, r3
 8007d78:	4613      	mov	r3, r2
 8007d7a:	e7c1      	b.n	8007d00 <_dtoa_r+0x820>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	e7f6      	b.n	8007d6e <_dtoa_r+0x88e>
 8007d80:	f1b8 0f00 	cmp.w	r8, #0
 8007d84:	dc36      	bgt.n	8007df4 <_dtoa_r+0x914>
 8007d86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	dd33      	ble.n	8007df4 <_dtoa_r+0x914>
 8007d8c:	f8cd 8010 	str.w	r8, [sp, #16]
 8007d90:	9b04      	ldr	r3, [sp, #16]
 8007d92:	b963      	cbnz	r3, 8007dae <_dtoa_r+0x8ce>
 8007d94:	4631      	mov	r1, r6
 8007d96:	2205      	movs	r2, #5
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f001 f815 	bl	8008dc8 <__multadd>
 8007d9e:	4601      	mov	r1, r0
 8007da0:	4606      	mov	r6, r0
 8007da2:	9806      	ldr	r0, [sp, #24]
 8007da4:	f001 f9cc 	bl	8009140 <__mcmp>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	f73f add2 	bgt.w	8007952 <_dtoa_r+0x472>
 8007dae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007db0:	465d      	mov	r5, fp
 8007db2:	ea6f 0a03 	mvn.w	sl, r3
 8007db6:	f04f 0900 	mov.w	r9, #0
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 fffa 	bl	8008db6 <_Bfree>
 8007dc2:	2f00      	cmp	r7, #0
 8007dc4:	f43f aebd 	beq.w	8007b42 <_dtoa_r+0x662>
 8007dc8:	f1b9 0f00 	cmp.w	r9, #0
 8007dcc:	d005      	beq.n	8007dda <_dtoa_r+0x8fa>
 8007dce:	45b9      	cmp	r9, r7
 8007dd0:	d003      	beq.n	8007dda <_dtoa_r+0x8fa>
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 ffee 	bl	8008db6 <_Bfree>
 8007dda:	4639      	mov	r1, r7
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 ffea 	bl	8008db6 <_Bfree>
 8007de2:	e6ae      	b.n	8007b42 <_dtoa_r+0x662>
 8007de4:	2600      	movs	r6, #0
 8007de6:	4637      	mov	r7, r6
 8007de8:	e7e1      	b.n	8007dae <_dtoa_r+0x8ce>
 8007dea:	46ba      	mov	sl, r7
 8007dec:	4637      	mov	r7, r6
 8007dee:	e5b0      	b.n	8007952 <_dtoa_r+0x472>
 8007df0:	40240000 	.word	0x40240000
 8007df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df6:	f8cd 8010 	str.w	r8, [sp, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 80f7 	beq.w	8007fee <_dtoa_r+0xb0e>
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	dd05      	ble.n	8007e10 <_dtoa_r+0x930>
 8007e04:	4639      	mov	r1, r7
 8007e06:	462a      	mov	r2, r5
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f001 f945 	bl	8009098 <__lshift>
 8007e0e:	4607      	mov	r7, r0
 8007e10:	9b08      	ldr	r3, [sp, #32]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d04c      	beq.n	8007eb0 <_dtoa_r+0x9d0>
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 ffa7 	bl	8008d6c <_Balloc>
 8007e1e:	4605      	mov	r5, r0
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	f107 010c 	add.w	r1, r7, #12
 8007e26:	3202      	adds	r2, #2
 8007e28:	0092      	lsls	r2, r2, #2
 8007e2a:	300c      	adds	r0, #12
 8007e2c:	f000 ff6e 	bl	8008d0c <memcpy>
 8007e30:	2201      	movs	r2, #1
 8007e32:	4629      	mov	r1, r5
 8007e34:	4620      	mov	r0, r4
 8007e36:	f001 f92f 	bl	8009098 <__lshift>
 8007e3a:	46b9      	mov	r9, r7
 8007e3c:	4607      	mov	r7, r0
 8007e3e:	9b02      	ldr	r3, [sp, #8]
 8007e40:	f8cd b01c 	str.w	fp, [sp, #28]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	9308      	str	r3, [sp, #32]
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	9806      	ldr	r0, [sp, #24]
 8007e4e:	f7ff fab7 	bl	80073c0 <quorem>
 8007e52:	4649      	mov	r1, r9
 8007e54:	4605      	mov	r5, r0
 8007e56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007e5a:	9806      	ldr	r0, [sp, #24]
 8007e5c:	f001 f970 	bl	8009140 <__mcmp>
 8007e60:	463a      	mov	r2, r7
 8007e62:	9002      	str	r0, [sp, #8]
 8007e64:	4631      	mov	r1, r6
 8007e66:	4620      	mov	r0, r4
 8007e68:	f001 f984 	bl	8009174 <__mdiff>
 8007e6c:	68c3      	ldr	r3, [r0, #12]
 8007e6e:	4602      	mov	r2, r0
 8007e70:	bb03      	cbnz	r3, 8007eb4 <_dtoa_r+0x9d4>
 8007e72:	4601      	mov	r1, r0
 8007e74:	9009      	str	r0, [sp, #36]	; 0x24
 8007e76:	9806      	ldr	r0, [sp, #24]
 8007e78:	f001 f962 	bl	8009140 <__mcmp>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e80:	4611      	mov	r1, r2
 8007e82:	4620      	mov	r0, r4
 8007e84:	9309      	str	r3, [sp, #36]	; 0x24
 8007e86:	f000 ff96 	bl	8008db6 <_Bfree>
 8007e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8c:	b9a3      	cbnz	r3, 8007eb8 <_dtoa_r+0x9d8>
 8007e8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007e90:	b992      	cbnz	r2, 8007eb8 <_dtoa_r+0x9d8>
 8007e92:	9a08      	ldr	r2, [sp, #32]
 8007e94:	b982      	cbnz	r2, 8007eb8 <_dtoa_r+0x9d8>
 8007e96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e9a:	d029      	beq.n	8007ef0 <_dtoa_r+0xa10>
 8007e9c:	9b02      	ldr	r3, [sp, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	dd01      	ble.n	8007ea6 <_dtoa_r+0x9c6>
 8007ea2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ea6:	9b07      	ldr	r3, [sp, #28]
 8007ea8:	1c5d      	adds	r5, r3, #1
 8007eaa:	f883 8000 	strb.w	r8, [r3]
 8007eae:	e784      	b.n	8007dba <_dtoa_r+0x8da>
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	e7c2      	b.n	8007e3a <_dtoa_r+0x95a>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e7e3      	b.n	8007e80 <_dtoa_r+0x9a0>
 8007eb8:	9a02      	ldr	r2, [sp, #8]
 8007eba:	2a00      	cmp	r2, #0
 8007ebc:	db04      	blt.n	8007ec8 <_dtoa_r+0x9e8>
 8007ebe:	d124      	bne.n	8007f0a <_dtoa_r+0xa2a>
 8007ec0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ec2:	bb12      	cbnz	r2, 8007f0a <_dtoa_r+0xa2a>
 8007ec4:	9a08      	ldr	r2, [sp, #32]
 8007ec6:	bb02      	cbnz	r2, 8007f0a <_dtoa_r+0xa2a>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	ddec      	ble.n	8007ea6 <_dtoa_r+0x9c6>
 8007ecc:	2201      	movs	r2, #1
 8007ece:	9906      	ldr	r1, [sp, #24]
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f001 f8e1 	bl	8009098 <__lshift>
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	9006      	str	r0, [sp, #24]
 8007eda:	f001 f931 	bl	8009140 <__mcmp>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	dc03      	bgt.n	8007eea <_dtoa_r+0xa0a>
 8007ee2:	d1e0      	bne.n	8007ea6 <_dtoa_r+0x9c6>
 8007ee4:	f018 0f01 	tst.w	r8, #1
 8007ee8:	d0dd      	beq.n	8007ea6 <_dtoa_r+0x9c6>
 8007eea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007eee:	d1d8      	bne.n	8007ea2 <_dtoa_r+0x9c2>
 8007ef0:	9b07      	ldr	r3, [sp, #28]
 8007ef2:	9a07      	ldr	r2, [sp, #28]
 8007ef4:	1c5d      	adds	r5, r3, #1
 8007ef6:	2339      	movs	r3, #57	; 0x39
 8007ef8:	7013      	strb	r3, [r2, #0]
 8007efa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007efe:	1e6a      	subs	r2, r5, #1
 8007f00:	2b39      	cmp	r3, #57	; 0x39
 8007f02:	d04e      	beq.n	8007fa2 <_dtoa_r+0xac2>
 8007f04:	3301      	adds	r3, #1
 8007f06:	7013      	strb	r3, [r2, #0]
 8007f08:	e757      	b.n	8007dba <_dtoa_r+0x8da>
 8007f0a:	9a07      	ldr	r2, [sp, #28]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f102 0501 	add.w	r5, r2, #1
 8007f12:	dd06      	ble.n	8007f22 <_dtoa_r+0xa42>
 8007f14:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f18:	d0ea      	beq.n	8007ef0 <_dtoa_r+0xa10>
 8007f1a:	f108 0801 	add.w	r8, r8, #1
 8007f1e:	9b07      	ldr	r3, [sp, #28]
 8007f20:	e7c3      	b.n	8007eaa <_dtoa_r+0x9ca>
 8007f22:	9a04      	ldr	r2, [sp, #16]
 8007f24:	eba5 030b 	sub.w	r3, r5, fp
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007f2e:	d021      	beq.n	8007f74 <_dtoa_r+0xa94>
 8007f30:	2300      	movs	r3, #0
 8007f32:	220a      	movs	r2, #10
 8007f34:	9906      	ldr	r1, [sp, #24]
 8007f36:	4620      	mov	r0, r4
 8007f38:	f000 ff46 	bl	8008dc8 <__multadd>
 8007f3c:	45b9      	cmp	r9, r7
 8007f3e:	9006      	str	r0, [sp, #24]
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	f04f 020a 	mov.w	r2, #10
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	d105      	bne.n	8007f5a <_dtoa_r+0xa7a>
 8007f4e:	f000 ff3b 	bl	8008dc8 <__multadd>
 8007f52:	4681      	mov	r9, r0
 8007f54:	4607      	mov	r7, r0
 8007f56:	9507      	str	r5, [sp, #28]
 8007f58:	e777      	b.n	8007e4a <_dtoa_r+0x96a>
 8007f5a:	f000 ff35 	bl	8008dc8 <__multadd>
 8007f5e:	4639      	mov	r1, r7
 8007f60:	4681      	mov	r9, r0
 8007f62:	2300      	movs	r3, #0
 8007f64:	220a      	movs	r2, #10
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 ff2e 	bl	8008dc8 <__multadd>
 8007f6c:	4607      	mov	r7, r0
 8007f6e:	e7f2      	b.n	8007f56 <_dtoa_r+0xa76>
 8007f70:	f04f 0900 	mov.w	r9, #0
 8007f74:	2201      	movs	r2, #1
 8007f76:	9906      	ldr	r1, [sp, #24]
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f001 f88d 	bl	8009098 <__lshift>
 8007f7e:	4631      	mov	r1, r6
 8007f80:	9006      	str	r0, [sp, #24]
 8007f82:	f001 f8dd 	bl	8009140 <__mcmp>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	dcb7      	bgt.n	8007efa <_dtoa_r+0xa1a>
 8007f8a:	d102      	bne.n	8007f92 <_dtoa_r+0xab2>
 8007f8c:	f018 0f01 	tst.w	r8, #1
 8007f90:	d1b3      	bne.n	8007efa <_dtoa_r+0xa1a>
 8007f92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f96:	1e6a      	subs	r2, r5, #1
 8007f98:	2b30      	cmp	r3, #48	; 0x30
 8007f9a:	f47f af0e 	bne.w	8007dba <_dtoa_r+0x8da>
 8007f9e:	4615      	mov	r5, r2
 8007fa0:	e7f7      	b.n	8007f92 <_dtoa_r+0xab2>
 8007fa2:	4593      	cmp	fp, r2
 8007fa4:	d105      	bne.n	8007fb2 <_dtoa_r+0xad2>
 8007fa6:	2331      	movs	r3, #49	; 0x31
 8007fa8:	f10a 0a01 	add.w	sl, sl, #1
 8007fac:	f88b 3000 	strb.w	r3, [fp]
 8007fb0:	e703      	b.n	8007dba <_dtoa_r+0x8da>
 8007fb2:	4615      	mov	r5, r2
 8007fb4:	e7a1      	b.n	8007efa <_dtoa_r+0xa1a>
 8007fb6:	f8df b064 	ldr.w	fp, [pc, #100]	; 800801c <_dtoa_r+0xb3c>
 8007fba:	f7ff bac9 	b.w	8007550 <_dtoa_r+0x70>
 8007fbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fc0:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8008020 <_dtoa_r+0xb40>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f43f aac3 	beq.w	8007550 <_dtoa_r+0x70>
 8007fca:	f10b 0308 	add.w	r3, fp, #8
 8007fce:	f7ff babd 	b.w	800754c <_dtoa_r+0x6c>
 8007fd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	f77f ae3b 	ble.w	8007c50 <_dtoa_r+0x770>
 8007fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fdc:	9308      	str	r3, [sp, #32]
 8007fde:	e64f      	b.n	8007c80 <_dtoa_r+0x7a0>
 8007fe0:	9b04      	ldr	r3, [sp, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	dc03      	bgt.n	8007fee <_dtoa_r+0xb0e>
 8007fe6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	f73f aed1 	bgt.w	8007d90 <_dtoa_r+0x8b0>
 8007fee:	465d      	mov	r5, fp
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	9806      	ldr	r0, [sp, #24]
 8007ff4:	f7ff f9e4 	bl	80073c0 <quorem>
 8007ff8:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007ffc:	f805 8b01 	strb.w	r8, [r5], #1
 8008000:	9a04      	ldr	r2, [sp, #16]
 8008002:	eba5 030b 	sub.w	r3, r5, fp
 8008006:	429a      	cmp	r2, r3
 8008008:	ddb2      	ble.n	8007f70 <_dtoa_r+0xa90>
 800800a:	2300      	movs	r3, #0
 800800c:	220a      	movs	r2, #10
 800800e:	9906      	ldr	r1, [sp, #24]
 8008010:	4620      	mov	r0, r4
 8008012:	f000 fed9 	bl	8008dc8 <__multadd>
 8008016:	9006      	str	r0, [sp, #24]
 8008018:	e7ea      	b.n	8007ff0 <_dtoa_r+0xb10>
 800801a:	bf00      	nop
 800801c:	0800a154 	.word	0x0800a154
 8008020:	0800a196 	.word	0x0800a196

08008024 <__sflush_r>:
 8008024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802c:	b293      	uxth	r3, r2
 800802e:	4605      	mov	r5, r0
 8008030:	0718      	lsls	r0, r3, #28
 8008032:	460c      	mov	r4, r1
 8008034:	d45f      	bmi.n	80080f6 <__sflush_r+0xd2>
 8008036:	684b      	ldr	r3, [r1, #4]
 8008038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800803c:	2b00      	cmp	r3, #0
 800803e:	818a      	strh	r2, [r1, #12]
 8008040:	dc05      	bgt.n	800804e <__sflush_r+0x2a>
 8008042:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008044:	2b00      	cmp	r3, #0
 8008046:	dc02      	bgt.n	800804e <__sflush_r+0x2a>
 8008048:	2000      	movs	r0, #0
 800804a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800804e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008050:	2e00      	cmp	r6, #0
 8008052:	d0f9      	beq.n	8008048 <__sflush_r+0x24>
 8008054:	2300      	movs	r3, #0
 8008056:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800805a:	682f      	ldr	r7, [r5, #0]
 800805c:	69e1      	ldr	r1, [r4, #28]
 800805e:	602b      	str	r3, [r5, #0]
 8008060:	d036      	beq.n	80080d0 <__sflush_r+0xac>
 8008062:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	075a      	lsls	r2, r3, #29
 8008068:	d505      	bpl.n	8008076 <__sflush_r+0x52>
 800806a:	6863      	ldr	r3, [r4, #4]
 800806c:	1ac0      	subs	r0, r0, r3
 800806e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008070:	b10b      	cbz	r3, 8008076 <__sflush_r+0x52>
 8008072:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008074:	1ac0      	subs	r0, r0, r3
 8008076:	2300      	movs	r3, #0
 8008078:	4602      	mov	r2, r0
 800807a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800807c:	69e1      	ldr	r1, [r4, #28]
 800807e:	4628      	mov	r0, r5
 8008080:	47b0      	blx	r6
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	d106      	bne.n	8008096 <__sflush_r+0x72>
 8008088:	6829      	ldr	r1, [r5, #0]
 800808a:	291d      	cmp	r1, #29
 800808c:	d84c      	bhi.n	8008128 <__sflush_r+0x104>
 800808e:	4a2b      	ldr	r2, [pc, #172]	; (800813c <__sflush_r+0x118>)
 8008090:	40ca      	lsrs	r2, r1
 8008092:	07d6      	lsls	r6, r2, #31
 8008094:	d548      	bpl.n	8008128 <__sflush_r+0x104>
 8008096:	2200      	movs	r2, #0
 8008098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800809c:	b21b      	sxth	r3, r3
 800809e:	6062      	str	r2, [r4, #4]
 80080a0:	6922      	ldr	r2, [r4, #16]
 80080a2:	04d9      	lsls	r1, r3, #19
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	6022      	str	r2, [r4, #0]
 80080a8:	d504      	bpl.n	80080b4 <__sflush_r+0x90>
 80080aa:	1c42      	adds	r2, r0, #1
 80080ac:	d101      	bne.n	80080b2 <__sflush_r+0x8e>
 80080ae:	682b      	ldr	r3, [r5, #0]
 80080b0:	b903      	cbnz	r3, 80080b4 <__sflush_r+0x90>
 80080b2:	6520      	str	r0, [r4, #80]	; 0x50
 80080b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80080b6:	602f      	str	r7, [r5, #0]
 80080b8:	2900      	cmp	r1, #0
 80080ba:	d0c5      	beq.n	8008048 <__sflush_r+0x24>
 80080bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80080c0:	4299      	cmp	r1, r3
 80080c2:	d002      	beq.n	80080ca <__sflush_r+0xa6>
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 f937 	bl	8008338 <_free_r>
 80080ca:	2000      	movs	r0, #0
 80080cc:	6320      	str	r0, [r4, #48]	; 0x30
 80080ce:	e7bc      	b.n	800804a <__sflush_r+0x26>
 80080d0:	2301      	movs	r3, #1
 80080d2:	4628      	mov	r0, r5
 80080d4:	47b0      	blx	r6
 80080d6:	1c41      	adds	r1, r0, #1
 80080d8:	d1c4      	bne.n	8008064 <__sflush_r+0x40>
 80080da:	682b      	ldr	r3, [r5, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0c1      	beq.n	8008064 <__sflush_r+0x40>
 80080e0:	2b1d      	cmp	r3, #29
 80080e2:	d001      	beq.n	80080e8 <__sflush_r+0xc4>
 80080e4:	2b16      	cmp	r3, #22
 80080e6:	d101      	bne.n	80080ec <__sflush_r+0xc8>
 80080e8:	602f      	str	r7, [r5, #0]
 80080ea:	e7ad      	b.n	8008048 <__sflush_r+0x24>
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	e7a9      	b.n	800804a <__sflush_r+0x26>
 80080f6:	690f      	ldr	r7, [r1, #16]
 80080f8:	2f00      	cmp	r7, #0
 80080fa:	d0a5      	beq.n	8008048 <__sflush_r+0x24>
 80080fc:	079b      	lsls	r3, r3, #30
 80080fe:	bf18      	it	ne
 8008100:	2300      	movne	r3, #0
 8008102:	680e      	ldr	r6, [r1, #0]
 8008104:	bf08      	it	eq
 8008106:	694b      	ldreq	r3, [r1, #20]
 8008108:	eba6 0807 	sub.w	r8, r6, r7
 800810c:	600f      	str	r7, [r1, #0]
 800810e:	608b      	str	r3, [r1, #8]
 8008110:	f1b8 0f00 	cmp.w	r8, #0
 8008114:	dd98      	ble.n	8008048 <__sflush_r+0x24>
 8008116:	4643      	mov	r3, r8
 8008118:	463a      	mov	r2, r7
 800811a:	69e1      	ldr	r1, [r4, #28]
 800811c:	4628      	mov	r0, r5
 800811e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008120:	47b0      	blx	r6
 8008122:	2800      	cmp	r0, #0
 8008124:	dc06      	bgt.n	8008134 <__sflush_r+0x110>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008132:	e78a      	b.n	800804a <__sflush_r+0x26>
 8008134:	4407      	add	r7, r0
 8008136:	eba8 0800 	sub.w	r8, r8, r0
 800813a:	e7e9      	b.n	8008110 <__sflush_r+0xec>
 800813c:	20400001 	.word	0x20400001

08008140 <_fflush_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	460c      	mov	r4, r1
 8008144:	4605      	mov	r5, r0
 8008146:	b118      	cbz	r0, 8008150 <_fflush_r+0x10>
 8008148:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800814a:	b90b      	cbnz	r3, 8008150 <_fflush_r+0x10>
 800814c:	f000 f864 	bl	8008218 <__sinit>
 8008150:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8008154:	b1b8      	cbz	r0, 8008186 <_fflush_r+0x46>
 8008156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008158:	07db      	lsls	r3, r3, #31
 800815a:	d404      	bmi.n	8008166 <_fflush_r+0x26>
 800815c:	0581      	lsls	r1, r0, #22
 800815e:	d402      	bmi.n	8008166 <_fflush_r+0x26>
 8008160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008162:	f000 fb21 	bl	80087a8 <__retarget_lock_acquire_recursive>
 8008166:	4628      	mov	r0, r5
 8008168:	4621      	mov	r1, r4
 800816a:	f7ff ff5b 	bl	8008024 <__sflush_r>
 800816e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008170:	4605      	mov	r5, r0
 8008172:	07da      	lsls	r2, r3, #31
 8008174:	d405      	bmi.n	8008182 <_fflush_r+0x42>
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	059b      	lsls	r3, r3, #22
 800817a:	d402      	bmi.n	8008182 <_fflush_r+0x42>
 800817c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800817e:	f000 fb14 	bl	80087aa <__retarget_lock_release_recursive>
 8008182:	4628      	mov	r0, r5
 8008184:	bd38      	pop	{r3, r4, r5, pc}
 8008186:	4605      	mov	r5, r0
 8008188:	e7fb      	b.n	8008182 <_fflush_r+0x42>
	...

0800818c <std>:
 800818c:	2300      	movs	r3, #0
 800818e:	b510      	push	{r4, lr}
 8008190:	4604      	mov	r4, r0
 8008192:	e9c0 3300 	strd	r3, r3, [r0]
 8008196:	6083      	str	r3, [r0, #8]
 8008198:	8181      	strh	r1, [r0, #12]
 800819a:	6643      	str	r3, [r0, #100]	; 0x64
 800819c:	81c2      	strh	r2, [r0, #14]
 800819e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081a2:	6183      	str	r3, [r0, #24]
 80081a4:	4619      	mov	r1, r3
 80081a6:	2208      	movs	r2, #8
 80081a8:	305c      	adds	r0, #92	; 0x5c
 80081aa:	f7fc fb5d 	bl	8004868 <memset>
 80081ae:	4b07      	ldr	r3, [pc, #28]	; (80081cc <std+0x40>)
 80081b0:	61e4      	str	r4, [r4, #28]
 80081b2:	6223      	str	r3, [r4, #32]
 80081b4:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <std+0x44>)
 80081b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081ba:	6263      	str	r3, [r4, #36]	; 0x24
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <std+0x48>)
 80081be:	62a3      	str	r3, [r4, #40]	; 0x28
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <std+0x4c>)
 80081c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c8:	f000 baec 	b.w	80087a4 <__retarget_lock_init_recursive>
 80081cc:	08009715 	.word	0x08009715
 80081d0:	08009737 	.word	0x08009737
 80081d4:	0800976f 	.word	0x0800976f
 80081d8:	08009793 	.word	0x08009793

080081dc <_cleanup_r>:
 80081dc:	4901      	ldr	r1, [pc, #4]	; (80081e4 <_cleanup_r+0x8>)
 80081de:	f000 bab5 	b.w	800874c <_fwalk_reent>
 80081e2:	bf00      	nop
 80081e4:	08009b11 	.word	0x08009b11

080081e8 <__sfp_lock_acquire>:
 80081e8:	4801      	ldr	r0, [pc, #4]	; (80081f0 <__sfp_lock_acquire+0x8>)
 80081ea:	f000 badd 	b.w	80087a8 <__retarget_lock_acquire_recursive>
 80081ee:	bf00      	nop
 80081f0:	20000b68 	.word	0x20000b68

080081f4 <__sfp_lock_release>:
 80081f4:	4801      	ldr	r0, [pc, #4]	; (80081fc <__sfp_lock_release+0x8>)
 80081f6:	f000 bad8 	b.w	80087aa <__retarget_lock_release_recursive>
 80081fa:	bf00      	nop
 80081fc:	20000b68 	.word	0x20000b68

08008200 <__sinit_lock_acquire>:
 8008200:	4801      	ldr	r0, [pc, #4]	; (8008208 <__sinit_lock_acquire+0x8>)
 8008202:	f000 bad1 	b.w	80087a8 <__retarget_lock_acquire_recursive>
 8008206:	bf00      	nop
 8008208:	20000b63 	.word	0x20000b63

0800820c <__sinit_lock_release>:
 800820c:	4801      	ldr	r0, [pc, #4]	; (8008214 <__sinit_lock_release+0x8>)
 800820e:	f000 bacc 	b.w	80087aa <__retarget_lock_release_recursive>
 8008212:	bf00      	nop
 8008214:	20000b63 	.word	0x20000b63

08008218 <__sinit>:
 8008218:	b510      	push	{r4, lr}
 800821a:	4604      	mov	r4, r0
 800821c:	f7ff fff0 	bl	8008200 <__sinit_lock_acquire>
 8008220:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008222:	b11a      	cbz	r2, 800822c <__sinit+0x14>
 8008224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008228:	f7ff bff0 	b.w	800820c <__sinit_lock_release>
 800822c:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <__sinit+0x4c>)
 800822e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8008232:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008234:	2303      	movs	r3, #3
 8008236:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800823a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800823e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8008242:	2104      	movs	r1, #4
 8008244:	6860      	ldr	r0, [r4, #4]
 8008246:	f7ff ffa1 	bl	800818c <std>
 800824a:	2201      	movs	r2, #1
 800824c:	2109      	movs	r1, #9
 800824e:	68a0      	ldr	r0, [r4, #8]
 8008250:	f7ff ff9c 	bl	800818c <std>
 8008254:	2202      	movs	r2, #2
 8008256:	2112      	movs	r1, #18
 8008258:	68e0      	ldr	r0, [r4, #12]
 800825a:	f7ff ff97 	bl	800818c <std>
 800825e:	2301      	movs	r3, #1
 8008260:	63a3      	str	r3, [r4, #56]	; 0x38
 8008262:	e7df      	b.n	8008224 <__sinit+0xc>
 8008264:	080081dd 	.word	0x080081dd

08008268 <__libc_fini_array>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d07      	ldr	r5, [pc, #28]	; (8008288 <__libc_fini_array+0x20>)
 800826c:	4c07      	ldr	r4, [pc, #28]	; (800828c <__libc_fini_array+0x24>)
 800826e:	1b64      	subs	r4, r4, r5
 8008270:	10a4      	asrs	r4, r4, #2
 8008272:	b91c      	cbnz	r4, 800827c <__libc_fini_array+0x14>
 8008274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008278:	f001 bdaa 	b.w	8009dd0 <_fini>
 800827c:	3c01      	subs	r4, #1
 800827e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008282:	4798      	blx	r3
 8008284:	e7f5      	b.n	8008272 <__libc_fini_array+0xa>
 8008286:	bf00      	nop
 8008288:	0800a3c0 	.word	0x0800a3c0
 800828c:	0800a3c4 	.word	0x0800a3c4

08008290 <_malloc_trim_r>:
 8008290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008294:	4605      	mov	r5, r0
 8008296:	2008      	movs	r0, #8
 8008298:	460c      	mov	r4, r1
 800829a:	f001 fb0b 	bl	80098b4 <sysconf>
 800829e:	4680      	mov	r8, r0
 80082a0:	4f22      	ldr	r7, [pc, #136]	; (800832c <_malloc_trim_r+0x9c>)
 80082a2:	4628      	mov	r0, r5
 80082a4:	f000 fd56 	bl	8008d54 <__malloc_lock>
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	685e      	ldr	r6, [r3, #4]
 80082ac:	f026 0603 	bic.w	r6, r6, #3
 80082b0:	1b34      	subs	r4, r6, r4
 80082b2:	3c11      	subs	r4, #17
 80082b4:	4444      	add	r4, r8
 80082b6:	fbb4 f4f8 	udiv	r4, r4, r8
 80082ba:	3c01      	subs	r4, #1
 80082bc:	fb08 f404 	mul.w	r4, r8, r4
 80082c0:	45a0      	cmp	r8, r4
 80082c2:	dd05      	ble.n	80082d0 <_malloc_trim_r+0x40>
 80082c4:	4628      	mov	r0, r5
 80082c6:	f000 fd4b 	bl	8008d60 <__malloc_unlock>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d0:	2100      	movs	r1, #0
 80082d2:	4628      	mov	r0, r5
 80082d4:	f001 fa0e 	bl	80096f4 <_sbrk_r>
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	4433      	add	r3, r6
 80082dc:	4298      	cmp	r0, r3
 80082de:	d1f1      	bne.n	80082c4 <_malloc_trim_r+0x34>
 80082e0:	4261      	negs	r1, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	f001 fa06 	bl	80096f4 <_sbrk_r>
 80082e8:	3001      	adds	r0, #1
 80082ea:	d110      	bne.n	800830e <_malloc_trim_r+0x7e>
 80082ec:	2100      	movs	r1, #0
 80082ee:	4628      	mov	r0, r5
 80082f0:	f001 fa00 	bl	80096f4 <_sbrk_r>
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	1a83      	subs	r3, r0, r2
 80082f8:	2b0f      	cmp	r3, #15
 80082fa:	dde3      	ble.n	80082c4 <_malloc_trim_r+0x34>
 80082fc:	490c      	ldr	r1, [pc, #48]	; (8008330 <_malloc_trim_r+0xa0>)
 80082fe:	f043 0301 	orr.w	r3, r3, #1
 8008302:	6809      	ldr	r1, [r1, #0]
 8008304:	6053      	str	r3, [r2, #4]
 8008306:	1a40      	subs	r0, r0, r1
 8008308:	490a      	ldr	r1, [pc, #40]	; (8008334 <_malloc_trim_r+0xa4>)
 800830a:	6008      	str	r0, [r1, #0]
 800830c:	e7da      	b.n	80082c4 <_malloc_trim_r+0x34>
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	4a08      	ldr	r2, [pc, #32]	; (8008334 <_malloc_trim_r+0xa4>)
 8008312:	1b36      	subs	r6, r6, r4
 8008314:	f046 0601 	orr.w	r6, r6, #1
 8008318:	605e      	str	r6, [r3, #4]
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	4628      	mov	r0, r5
 800831e:	1b1c      	subs	r4, r3, r4
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	f000 fd1d 	bl	8008d60 <__malloc_unlock>
 8008326:	2001      	movs	r0, #1
 8008328:	e7d0      	b.n	80082cc <_malloc_trim_r+0x3c>
 800832a:	bf00      	nop
 800832c:	20000444 	.word	0x20000444
 8008330:	2000084c 	.word	0x2000084c
 8008334:	200009e0 	.word	0x200009e0

08008338 <_free_r>:
 8008338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833c:	4604      	mov	r4, r0
 800833e:	4688      	mov	r8, r1
 8008340:	2900      	cmp	r1, #0
 8008342:	f000 80ab 	beq.w	800849c <_free_r+0x164>
 8008346:	f000 fd05 	bl	8008d54 <__malloc_lock>
 800834a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800834e:	4d54      	ldr	r5, [pc, #336]	; (80084a0 <_free_r+0x168>)
 8008350:	f022 0001 	bic.w	r0, r2, #1
 8008354:	f1a8 0308 	sub.w	r3, r8, #8
 8008358:	181f      	adds	r7, r3, r0
 800835a:	68a9      	ldr	r1, [r5, #8]
 800835c:	687e      	ldr	r6, [r7, #4]
 800835e:	42b9      	cmp	r1, r7
 8008360:	f026 0603 	bic.w	r6, r6, #3
 8008364:	f002 0201 	and.w	r2, r2, #1
 8008368:	d11b      	bne.n	80083a2 <_free_r+0x6a>
 800836a:	4430      	add	r0, r6
 800836c:	b93a      	cbnz	r2, 800837e <_free_r+0x46>
 800836e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	4410      	add	r0, r2
 8008376:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800837a:	60ca      	str	r2, [r1, #12]
 800837c:	6091      	str	r1, [r2, #8]
 800837e:	f040 0201 	orr.w	r2, r0, #1
 8008382:	605a      	str	r2, [r3, #4]
 8008384:	60ab      	str	r3, [r5, #8]
 8008386:	4b47      	ldr	r3, [pc, #284]	; (80084a4 <_free_r+0x16c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4283      	cmp	r3, r0
 800838c:	d804      	bhi.n	8008398 <_free_r+0x60>
 800838e:	4b46      	ldr	r3, [pc, #280]	; (80084a8 <_free_r+0x170>)
 8008390:	4620      	mov	r0, r4
 8008392:	6819      	ldr	r1, [r3, #0]
 8008394:	f7ff ff7c 	bl	8008290 <_malloc_trim_r>
 8008398:	4620      	mov	r0, r4
 800839a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800839e:	f000 bcdf 	b.w	8008d60 <__malloc_unlock>
 80083a2:	607e      	str	r6, [r7, #4]
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	d139      	bne.n	800841c <_free_r+0xe4>
 80083a8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80083ac:	f105 0c08 	add.w	ip, r5, #8
 80083b0:	1a5b      	subs	r3, r3, r1
 80083b2:	4408      	add	r0, r1
 80083b4:	6899      	ldr	r1, [r3, #8]
 80083b6:	4561      	cmp	r1, ip
 80083b8:	d032      	beq.n	8008420 <_free_r+0xe8>
 80083ba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80083be:	f8c1 c00c 	str.w	ip, [r1, #12]
 80083c2:	f8cc 1008 	str.w	r1, [ip, #8]
 80083c6:	19b9      	adds	r1, r7, r6
 80083c8:	6849      	ldr	r1, [r1, #4]
 80083ca:	07c9      	lsls	r1, r1, #31
 80083cc:	d40a      	bmi.n	80083e4 <_free_r+0xac>
 80083ce:	4430      	add	r0, r6
 80083d0:	68b9      	ldr	r1, [r7, #8]
 80083d2:	bb3a      	cbnz	r2, 8008424 <_free_r+0xec>
 80083d4:	4e35      	ldr	r6, [pc, #212]	; (80084ac <_free_r+0x174>)
 80083d6:	42b1      	cmp	r1, r6
 80083d8:	d124      	bne.n	8008424 <_free_r+0xec>
 80083da:	2201      	movs	r2, #1
 80083dc:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80083e0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80083e4:	f040 0101 	orr.w	r1, r0, #1
 80083e8:	6059      	str	r1, [r3, #4]
 80083ea:	5018      	str	r0, [r3, r0]
 80083ec:	2a00      	cmp	r2, #0
 80083ee:	d1d3      	bne.n	8008398 <_free_r+0x60>
 80083f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80083f4:	d21a      	bcs.n	800842c <_free_r+0xf4>
 80083f6:	2201      	movs	r2, #1
 80083f8:	08c0      	lsrs	r0, r0, #3
 80083fa:	1081      	asrs	r1, r0, #2
 80083fc:	408a      	lsls	r2, r1
 80083fe:	6869      	ldr	r1, [r5, #4]
 8008400:	3001      	adds	r0, #1
 8008402:	430a      	orrs	r2, r1
 8008404:	606a      	str	r2, [r5, #4]
 8008406:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800840a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800840e:	3a08      	subs	r2, #8
 8008410:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8008414:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8008418:	60cb      	str	r3, [r1, #12]
 800841a:	e7bd      	b.n	8008398 <_free_r+0x60>
 800841c:	2200      	movs	r2, #0
 800841e:	e7d2      	b.n	80083c6 <_free_r+0x8e>
 8008420:	2201      	movs	r2, #1
 8008422:	e7d0      	b.n	80083c6 <_free_r+0x8e>
 8008424:	68fe      	ldr	r6, [r7, #12]
 8008426:	60ce      	str	r6, [r1, #12]
 8008428:	60b1      	str	r1, [r6, #8]
 800842a:	e7db      	b.n	80083e4 <_free_r+0xac>
 800842c:	0a42      	lsrs	r2, r0, #9
 800842e:	2a04      	cmp	r2, #4
 8008430:	d813      	bhi.n	800845a <_free_r+0x122>
 8008432:	0982      	lsrs	r2, r0, #6
 8008434:	3238      	adds	r2, #56	; 0x38
 8008436:	1c51      	adds	r1, r2, #1
 8008438:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800843c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8008440:	428e      	cmp	r6, r1
 8008442:	d124      	bne.n	800848e <_free_r+0x156>
 8008444:	2001      	movs	r0, #1
 8008446:	1092      	asrs	r2, r2, #2
 8008448:	fa00 f202 	lsl.w	r2, r0, r2
 800844c:	6868      	ldr	r0, [r5, #4]
 800844e:	4302      	orrs	r2, r0
 8008450:	606a      	str	r2, [r5, #4]
 8008452:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8008456:	60b3      	str	r3, [r6, #8]
 8008458:	e7de      	b.n	8008418 <_free_r+0xe0>
 800845a:	2a14      	cmp	r2, #20
 800845c:	d801      	bhi.n	8008462 <_free_r+0x12a>
 800845e:	325b      	adds	r2, #91	; 0x5b
 8008460:	e7e9      	b.n	8008436 <_free_r+0xfe>
 8008462:	2a54      	cmp	r2, #84	; 0x54
 8008464:	d802      	bhi.n	800846c <_free_r+0x134>
 8008466:	0b02      	lsrs	r2, r0, #12
 8008468:	326e      	adds	r2, #110	; 0x6e
 800846a:	e7e4      	b.n	8008436 <_free_r+0xfe>
 800846c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008470:	d802      	bhi.n	8008478 <_free_r+0x140>
 8008472:	0bc2      	lsrs	r2, r0, #15
 8008474:	3277      	adds	r2, #119	; 0x77
 8008476:	e7de      	b.n	8008436 <_free_r+0xfe>
 8008478:	f240 5154 	movw	r1, #1364	; 0x554
 800847c:	428a      	cmp	r2, r1
 800847e:	bf9a      	itte	ls
 8008480:	0c82      	lsrls	r2, r0, #18
 8008482:	327c      	addls	r2, #124	; 0x7c
 8008484:	227e      	movhi	r2, #126	; 0x7e
 8008486:	e7d6      	b.n	8008436 <_free_r+0xfe>
 8008488:	6889      	ldr	r1, [r1, #8]
 800848a:	428e      	cmp	r6, r1
 800848c:	d004      	beq.n	8008498 <_free_r+0x160>
 800848e:	684a      	ldr	r2, [r1, #4]
 8008490:	f022 0203 	bic.w	r2, r2, #3
 8008494:	4282      	cmp	r2, r0
 8008496:	d8f7      	bhi.n	8008488 <_free_r+0x150>
 8008498:	68ce      	ldr	r6, [r1, #12]
 800849a:	e7da      	b.n	8008452 <_free_r+0x11a>
 800849c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a0:	20000444 	.word	0x20000444
 80084a4:	20000850 	.word	0x20000850
 80084a8:	20000a10 	.word	0x20000a10
 80084ac:	2000044c 	.word	0x2000044c

080084b0 <__sfvwrite_r>:
 80084b0:	6893      	ldr	r3, [r2, #8]
 80084b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b6:	4680      	mov	r8, r0
 80084b8:	460c      	mov	r4, r1
 80084ba:	4691      	mov	r9, r2
 80084bc:	b91b      	cbnz	r3, 80084c6 <__sfvwrite_r+0x16>
 80084be:	2000      	movs	r0, #0
 80084c0:	b003      	add	sp, #12
 80084c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c6:	898b      	ldrh	r3, [r1, #12]
 80084c8:	0718      	lsls	r0, r3, #28
 80084ca:	d54f      	bpl.n	800856c <__sfvwrite_r+0xbc>
 80084cc:	690b      	ldr	r3, [r1, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d04c      	beq.n	800856c <__sfvwrite_r+0xbc>
 80084d2:	89a5      	ldrh	r5, [r4, #12]
 80084d4:	f8d9 6000 	ldr.w	r6, [r9]
 80084d8:	f015 0702 	ands.w	r7, r5, #2
 80084dc:	d169      	bne.n	80085b2 <__sfvwrite_r+0x102>
 80084de:	f015 0501 	ands.w	r5, r5, #1
 80084e2:	f000 809a 	beq.w	800861a <__sfvwrite_r+0x16a>
 80084e6:	4638      	mov	r0, r7
 80084e8:	46ba      	mov	sl, r7
 80084ea:	46bb      	mov	fp, r7
 80084ec:	f1bb 0f00 	cmp.w	fp, #0
 80084f0:	f000 8103 	beq.w	80086fa <__sfvwrite_r+0x24a>
 80084f4:	b950      	cbnz	r0, 800850c <__sfvwrite_r+0x5c>
 80084f6:	465a      	mov	r2, fp
 80084f8:	210a      	movs	r1, #10
 80084fa:	4650      	mov	r0, sl
 80084fc:	f000 fbf8 	bl	8008cf0 <memchr>
 8008500:	2800      	cmp	r0, #0
 8008502:	f000 80ff 	beq.w	8008704 <__sfvwrite_r+0x254>
 8008506:	3001      	adds	r0, #1
 8008508:	eba0 070a 	sub.w	r7, r0, sl
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	6921      	ldr	r1, [r4, #16]
 8008510:	455f      	cmp	r7, fp
 8008512:	463b      	mov	r3, r7
 8008514:	bf28      	it	cs
 8008516:	465b      	movcs	r3, fp
 8008518:	4288      	cmp	r0, r1
 800851a:	6962      	ldr	r2, [r4, #20]
 800851c:	f240 80f5 	bls.w	800870a <__sfvwrite_r+0x25a>
 8008520:	68a5      	ldr	r5, [r4, #8]
 8008522:	4415      	add	r5, r2
 8008524:	42ab      	cmp	r3, r5
 8008526:	f340 80f0 	ble.w	800870a <__sfvwrite_r+0x25a>
 800852a:	4651      	mov	r1, sl
 800852c:	462a      	mov	r2, r5
 800852e:	f000 fbf8 	bl	8008d22 <memmove>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	4621      	mov	r1, r4
 8008536:	442b      	add	r3, r5
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	4640      	mov	r0, r8
 800853c:	f7ff fe00 	bl	8008140 <_fflush_r>
 8008540:	2800      	cmp	r0, #0
 8008542:	d165      	bne.n	8008610 <__sfvwrite_r+0x160>
 8008544:	1b7f      	subs	r7, r7, r5
 8008546:	f040 80fa 	bne.w	800873e <__sfvwrite_r+0x28e>
 800854a:	4621      	mov	r1, r4
 800854c:	4640      	mov	r0, r8
 800854e:	f7ff fdf7 	bl	8008140 <_fflush_r>
 8008552:	2800      	cmp	r0, #0
 8008554:	d15c      	bne.n	8008610 <__sfvwrite_r+0x160>
 8008556:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800855a:	44aa      	add	sl, r5
 800855c:	ebab 0b05 	sub.w	fp, fp, r5
 8008560:	1b5d      	subs	r5, r3, r5
 8008562:	f8c9 5008 	str.w	r5, [r9, #8]
 8008566:	2d00      	cmp	r5, #0
 8008568:	d1c0      	bne.n	80084ec <__sfvwrite_r+0x3c>
 800856a:	e7a8      	b.n	80084be <__sfvwrite_r+0xe>
 800856c:	4621      	mov	r1, r4
 800856e:	4640      	mov	r0, r8
 8008570:	f7fe febe 	bl	80072f0 <__swsetup_r>
 8008574:	2800      	cmp	r0, #0
 8008576:	d0ac      	beq.n	80084d2 <__sfvwrite_r+0x22>
 8008578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800857c:	e7a0      	b.n	80084c0 <__sfvwrite_r+0x10>
 800857e:	e9d6 a700 	ldrd	sl, r7, [r6]
 8008582:	3608      	adds	r6, #8
 8008584:	2f00      	cmp	r7, #0
 8008586:	d0fa      	beq.n	800857e <__sfvwrite_r+0xce>
 8008588:	455f      	cmp	r7, fp
 800858a:	463b      	mov	r3, r7
 800858c:	4652      	mov	r2, sl
 800858e:	bf28      	it	cs
 8008590:	465b      	movcs	r3, fp
 8008592:	69e1      	ldr	r1, [r4, #28]
 8008594:	4640      	mov	r0, r8
 8008596:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008598:	47a8      	blx	r5
 800859a:	2800      	cmp	r0, #0
 800859c:	dd38      	ble.n	8008610 <__sfvwrite_r+0x160>
 800859e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80085a2:	4482      	add	sl, r0
 80085a4:	1a3f      	subs	r7, r7, r0
 80085a6:	1a18      	subs	r0, r3, r0
 80085a8:	f8c9 0008 	str.w	r0, [r9, #8]
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d1e9      	bne.n	8008584 <__sfvwrite_r+0xd4>
 80085b0:	e785      	b.n	80084be <__sfvwrite_r+0xe>
 80085b2:	f04f 0a00 	mov.w	sl, #0
 80085b6:	f8df b190 	ldr.w	fp, [pc, #400]	; 8008748 <__sfvwrite_r+0x298>
 80085ba:	4657      	mov	r7, sl
 80085bc:	e7e2      	b.n	8008584 <__sfvwrite_r+0xd4>
 80085be:	e9d6 5a00 	ldrd	r5, sl, [r6]
 80085c2:	3608      	adds	r6, #8
 80085c4:	f1ba 0f00 	cmp.w	sl, #0
 80085c8:	d0f9      	beq.n	80085be <__sfvwrite_r+0x10e>
 80085ca:	89a2      	ldrh	r2, [r4, #12]
 80085cc:	68a3      	ldr	r3, [r4, #8]
 80085ce:	0591      	lsls	r1, r2, #22
 80085d0:	6820      	ldr	r0, [r4, #0]
 80085d2:	d564      	bpl.n	800869e <__sfvwrite_r+0x1ee>
 80085d4:	4553      	cmp	r3, sl
 80085d6:	d836      	bhi.n	8008646 <__sfvwrite_r+0x196>
 80085d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085dc:	d033      	beq.n	8008646 <__sfvwrite_r+0x196>
 80085de:	2302      	movs	r3, #2
 80085e0:	6967      	ldr	r7, [r4, #20]
 80085e2:	6921      	ldr	r1, [r4, #16]
 80085e4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80085e8:	fb97 f7f3 	sdiv	r7, r7, r3
 80085ec:	eba0 0b01 	sub.w	fp, r0, r1
 80085f0:	f10b 0301 	add.w	r3, fp, #1
 80085f4:	4453      	add	r3, sl
 80085f6:	429f      	cmp	r7, r3
 80085f8:	bf38      	it	cc
 80085fa:	461f      	movcc	r7, r3
 80085fc:	0553      	lsls	r3, r2, #21
 80085fe:	d53e      	bpl.n	800867e <__sfvwrite_r+0x1ce>
 8008600:	4639      	mov	r1, r7
 8008602:	4640      	mov	r0, r8
 8008604:	f000 f93e 	bl	8008884 <_malloc_r>
 8008608:	b948      	cbnz	r0, 800861e <__sfvwrite_r+0x16e>
 800860a:	230c      	movs	r3, #12
 800860c:	f8c8 3000 	str.w	r3, [r8]
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008616:	81a3      	strh	r3, [r4, #12]
 8008618:	e7ae      	b.n	8008578 <__sfvwrite_r+0xc8>
 800861a:	46aa      	mov	sl, r5
 800861c:	e7d2      	b.n	80085c4 <__sfvwrite_r+0x114>
 800861e:	465a      	mov	r2, fp
 8008620:	6921      	ldr	r1, [r4, #16]
 8008622:	9001      	str	r0, [sp, #4]
 8008624:	f000 fb72 	bl	8008d0c <memcpy>
 8008628:	89a2      	ldrh	r2, [r4, #12]
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008630:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008634:	81a2      	strh	r2, [r4, #12]
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	445b      	add	r3, fp
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	4653      	mov	r3, sl
 800863e:	6167      	str	r7, [r4, #20]
 8008640:	eba7 070b 	sub.w	r7, r7, fp
 8008644:	60a7      	str	r7, [r4, #8]
 8008646:	4553      	cmp	r3, sl
 8008648:	bf28      	it	cs
 800864a:	4653      	movcs	r3, sl
 800864c:	4657      	mov	r7, sl
 800864e:	461a      	mov	r2, r3
 8008650:	4629      	mov	r1, r5
 8008652:	6820      	ldr	r0, [r4, #0]
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	f000 fb64 	bl	8008d22 <memmove>
 800865a:	68a2      	ldr	r2, [r4, #8]
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	60a2      	str	r2, [r4, #8]
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	4413      	add	r3, r2
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800866c:	443d      	add	r5, r7
 800866e:	ebaa 0a07 	sub.w	sl, sl, r7
 8008672:	1bdf      	subs	r7, r3, r7
 8008674:	f8c9 7008 	str.w	r7, [r9, #8]
 8008678:	2f00      	cmp	r7, #0
 800867a:	d1a3      	bne.n	80085c4 <__sfvwrite_r+0x114>
 800867c:	e71f      	b.n	80084be <__sfvwrite_r+0xe>
 800867e:	463a      	mov	r2, r7
 8008680:	4640      	mov	r0, r8
 8008682:	f000 fe59 	bl	8009338 <_realloc_r>
 8008686:	4603      	mov	r3, r0
 8008688:	2800      	cmp	r0, #0
 800868a:	d1d4      	bne.n	8008636 <__sfvwrite_r+0x186>
 800868c:	6921      	ldr	r1, [r4, #16]
 800868e:	4640      	mov	r0, r8
 8008690:	f7ff fe52 	bl	8008338 <_free_r>
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	e7b5      	b.n	800860a <__sfvwrite_r+0x15a>
 800869e:	6922      	ldr	r2, [r4, #16]
 80086a0:	4282      	cmp	r2, r0
 80086a2:	d302      	bcc.n	80086aa <__sfvwrite_r+0x1fa>
 80086a4:	6962      	ldr	r2, [r4, #20]
 80086a6:	4552      	cmp	r2, sl
 80086a8:	d916      	bls.n	80086d8 <__sfvwrite_r+0x228>
 80086aa:	4553      	cmp	r3, sl
 80086ac:	bf28      	it	cs
 80086ae:	4653      	movcs	r3, sl
 80086b0:	461f      	mov	r7, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	4629      	mov	r1, r5
 80086b6:	f000 fb34 	bl	8008d22 <memmove>
 80086ba:	68a3      	ldr	r3, [r4, #8]
 80086bc:	6822      	ldr	r2, [r4, #0]
 80086be:	1bdb      	subs	r3, r3, r7
 80086c0:	443a      	add	r2, r7
 80086c2:	60a3      	str	r3, [r4, #8]
 80086c4:	6022      	str	r2, [r4, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1ce      	bne.n	8008668 <__sfvwrite_r+0x1b8>
 80086ca:	4621      	mov	r1, r4
 80086cc:	4640      	mov	r0, r8
 80086ce:	f7ff fd37 	bl	8008140 <_fflush_r>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d0c8      	beq.n	8008668 <__sfvwrite_r+0x1b8>
 80086d6:	e79b      	b.n	8008610 <__sfvwrite_r+0x160>
 80086d8:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <__sfvwrite_r+0x294>)
 80086da:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80086dc:	459a      	cmp	sl, r3
 80086de:	bf94      	ite	ls
 80086e0:	4653      	movls	r3, sl
 80086e2:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 80086e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80086ea:	69e1      	ldr	r1, [r4, #28]
 80086ec:	4353      	muls	r3, r2
 80086ee:	4640      	mov	r0, r8
 80086f0:	462a      	mov	r2, r5
 80086f2:	47b8      	blx	r7
 80086f4:	1e07      	subs	r7, r0, #0
 80086f6:	dcb7      	bgt.n	8008668 <__sfvwrite_r+0x1b8>
 80086f8:	e78a      	b.n	8008610 <__sfvwrite_r+0x160>
 80086fa:	e9d6 ab00 	ldrd	sl, fp, [r6]
 80086fe:	2000      	movs	r0, #0
 8008700:	3608      	adds	r6, #8
 8008702:	e6f3      	b.n	80084ec <__sfvwrite_r+0x3c>
 8008704:	f10b 0701 	add.w	r7, fp, #1
 8008708:	e700      	b.n	800850c <__sfvwrite_r+0x5c>
 800870a:	429a      	cmp	r2, r3
 800870c:	dc09      	bgt.n	8008722 <__sfvwrite_r+0x272>
 800870e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008710:	4613      	mov	r3, r2
 8008712:	69e1      	ldr	r1, [r4, #28]
 8008714:	4652      	mov	r2, sl
 8008716:	4640      	mov	r0, r8
 8008718:	47a8      	blx	r5
 800871a:	1e05      	subs	r5, r0, #0
 800871c:	f73f af12 	bgt.w	8008544 <__sfvwrite_r+0x94>
 8008720:	e776      	b.n	8008610 <__sfvwrite_r+0x160>
 8008722:	461a      	mov	r2, r3
 8008724:	4651      	mov	r1, sl
 8008726:	9301      	str	r3, [sp, #4]
 8008728:	f000 fafb 	bl	8008d22 <memmove>
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	68a2      	ldr	r2, [r4, #8]
 8008730:	461d      	mov	r5, r3
 8008732:	1ad2      	subs	r2, r2, r3
 8008734:	60a2      	str	r2, [r4, #8]
 8008736:	6822      	ldr	r2, [r4, #0]
 8008738:	441a      	add	r2, r3
 800873a:	6022      	str	r2, [r4, #0]
 800873c:	e702      	b.n	8008544 <__sfvwrite_r+0x94>
 800873e:	2001      	movs	r0, #1
 8008740:	e709      	b.n	8008556 <__sfvwrite_r+0xa6>
 8008742:	bf00      	nop
 8008744:	7ffffffe 	.word	0x7ffffffe
 8008748:	7ffffc00 	.word	0x7ffffc00

0800874c <_fwalk_reent>:
 800874c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008750:	4680      	mov	r8, r0
 8008752:	4689      	mov	r9, r1
 8008754:	2600      	movs	r6, #0
 8008756:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800875a:	b914      	cbnz	r4, 8008762 <_fwalk_reent+0x16>
 800875c:	4630      	mov	r0, r6
 800875e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008762:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008766:	3f01      	subs	r7, #1
 8008768:	d501      	bpl.n	800876e <_fwalk_reent+0x22>
 800876a:	6824      	ldr	r4, [r4, #0]
 800876c:	e7f5      	b.n	800875a <_fwalk_reent+0xe>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d907      	bls.n	8008784 <_fwalk_reent+0x38>
 8008774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008778:	3301      	adds	r3, #1
 800877a:	d003      	beq.n	8008784 <_fwalk_reent+0x38>
 800877c:	4629      	mov	r1, r5
 800877e:	4640      	mov	r0, r8
 8008780:	47c8      	blx	r9
 8008782:	4306      	orrs	r6, r0
 8008784:	3568      	adds	r5, #104	; 0x68
 8008786:	e7ee      	b.n	8008766 <_fwalk_reent+0x1a>

08008788 <_localeconv_r>:
 8008788:	4b04      	ldr	r3, [pc, #16]	; (800879c <_localeconv_r+0x14>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800878e:	4b04      	ldr	r3, [pc, #16]	; (80087a0 <_localeconv_r+0x18>)
 8008790:	2800      	cmp	r0, #0
 8008792:	bf08      	it	eq
 8008794:	4618      	moveq	r0, r3
 8008796:	30f0      	adds	r0, #240	; 0xf0
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	20000014 	.word	0x20000014
 80087a0:	20000854 	.word	0x20000854

080087a4 <__retarget_lock_init_recursive>:
 80087a4:	4770      	bx	lr

080087a6 <__retarget_lock_close_recursive>:
 80087a6:	4770      	bx	lr

080087a8 <__retarget_lock_acquire_recursive>:
 80087a8:	4770      	bx	lr

080087aa <__retarget_lock_release_recursive>:
 80087aa:	4770      	bx	lr

080087ac <__swhatbuf_r>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	460e      	mov	r6, r1
 80087b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b4:	b096      	sub	sp, #88	; 0x58
 80087b6:	2900      	cmp	r1, #0
 80087b8:	4614      	mov	r4, r2
 80087ba:	461d      	mov	r5, r3
 80087bc:	da09      	bge.n	80087d2 <__swhatbuf_r+0x26>
 80087be:	2200      	movs	r2, #0
 80087c0:	89b3      	ldrh	r3, [r6, #12]
 80087c2:	602a      	str	r2, [r5, #0]
 80087c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80087c8:	d116      	bne.n	80087f8 <__swhatbuf_r+0x4c>
 80087ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	e015      	b.n	80087fe <__swhatbuf_r+0x52>
 80087d2:	466a      	mov	r2, sp
 80087d4:	f001 fa5e 	bl	8009c94 <_fstat_r>
 80087d8:	2800      	cmp	r0, #0
 80087da:	dbf0      	blt.n	80087be <__swhatbuf_r+0x12>
 80087dc:	9a01      	ldr	r2, [sp, #4]
 80087de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80087e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087ea:	425a      	negs	r2, r3
 80087ec:	415a      	adcs	r2, r3
 80087ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f2:	602a      	str	r2, [r5, #0]
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	e002      	b.n	80087fe <__swhatbuf_r+0x52>
 80087f8:	2340      	movs	r3, #64	; 0x40
 80087fa:	4610      	mov	r0, r2
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	b016      	add	sp, #88	; 0x58
 8008800:	bd70      	pop	{r4, r5, r6, pc}
	...

08008804 <__smakebuf_r>:
 8008804:	898b      	ldrh	r3, [r1, #12]
 8008806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008808:	079d      	lsls	r5, r3, #30
 800880a:	4606      	mov	r6, r0
 800880c:	460c      	mov	r4, r1
 800880e:	d507      	bpl.n	8008820 <__smakebuf_r+0x1c>
 8008810:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	2301      	movs	r3, #1
 800881a:	6163      	str	r3, [r4, #20]
 800881c:	b002      	add	sp, #8
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	ab01      	add	r3, sp, #4
 8008822:	466a      	mov	r2, sp
 8008824:	f7ff ffc2 	bl	80087ac <__swhatbuf_r>
 8008828:	9900      	ldr	r1, [sp, #0]
 800882a:	4605      	mov	r5, r0
 800882c:	4630      	mov	r0, r6
 800882e:	f000 f829 	bl	8008884 <_malloc_r>
 8008832:	b948      	cbnz	r0, 8008848 <__smakebuf_r+0x44>
 8008834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008838:	059a      	lsls	r2, r3, #22
 800883a:	d4ef      	bmi.n	800881c <__smakebuf_r+0x18>
 800883c:	f023 0303 	bic.w	r3, r3, #3
 8008840:	f043 0302 	orr.w	r3, r3, #2
 8008844:	81a3      	strh	r3, [r4, #12]
 8008846:	e7e3      	b.n	8008810 <__smakebuf_r+0xc>
 8008848:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <__smakebuf_r+0x7c>)
 800884a:	63f3      	str	r3, [r6, #60]	; 0x3c
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	6020      	str	r0, [r4, #0]
 8008850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	9b00      	ldr	r3, [sp, #0]
 8008858:	6120      	str	r0, [r4, #16]
 800885a:	6163      	str	r3, [r4, #20]
 800885c:	9b01      	ldr	r3, [sp, #4]
 800885e:	b15b      	cbz	r3, 8008878 <__smakebuf_r+0x74>
 8008860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008864:	4630      	mov	r0, r6
 8008866:	f001 fa27 	bl	8009cb8 <_isatty_r>
 800886a:	b128      	cbz	r0, 8008878 <__smakebuf_r+0x74>
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	f023 0303 	bic.w	r3, r3, #3
 8008872:	f043 0301 	orr.w	r3, r3, #1
 8008876:	81a3      	strh	r3, [r4, #12]
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	431d      	orrs	r5, r3
 800887c:	81a5      	strh	r5, [r4, #12]
 800887e:	e7cd      	b.n	800881c <__smakebuf_r+0x18>
 8008880:	080081dd 	.word	0x080081dd

08008884 <_malloc_r>:
 8008884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	f101 050b 	add.w	r5, r1, #11
 800888c:	2d16      	cmp	r5, #22
 800888e:	4606      	mov	r6, r0
 8008890:	d906      	bls.n	80088a0 <_malloc_r+0x1c>
 8008892:	f035 0507 	bics.w	r5, r5, #7
 8008896:	d504      	bpl.n	80088a2 <_malloc_r+0x1e>
 8008898:	230c      	movs	r3, #12
 800889a:	6033      	str	r3, [r6, #0]
 800889c:	2400      	movs	r4, #0
 800889e:	e1a8      	b.n	8008bf2 <_malloc_r+0x36e>
 80088a0:	2510      	movs	r5, #16
 80088a2:	428d      	cmp	r5, r1
 80088a4:	d3f8      	bcc.n	8008898 <_malloc_r+0x14>
 80088a6:	4630      	mov	r0, r6
 80088a8:	f000 fa54 	bl	8008d54 <__malloc_lock>
 80088ac:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80088b0:	4fc0      	ldr	r7, [pc, #768]	; (8008bb4 <_malloc_r+0x330>)
 80088b2:	d238      	bcs.n	8008926 <_malloc_r+0xa2>
 80088b4:	f105 0208 	add.w	r2, r5, #8
 80088b8:	443a      	add	r2, r7
 80088ba:	6854      	ldr	r4, [r2, #4]
 80088bc:	f1a2 0108 	sub.w	r1, r2, #8
 80088c0:	428c      	cmp	r4, r1
 80088c2:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 80088c6:	d102      	bne.n	80088ce <_malloc_r+0x4a>
 80088c8:	68d4      	ldr	r4, [r2, #12]
 80088ca:	42a2      	cmp	r2, r4
 80088cc:	d010      	beq.n	80088f0 <_malloc_r+0x6c>
 80088ce:	6863      	ldr	r3, [r4, #4]
 80088d0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80088d4:	f023 0303 	bic.w	r3, r3, #3
 80088d8:	60ca      	str	r2, [r1, #12]
 80088da:	4423      	add	r3, r4
 80088dc:	6091      	str	r1, [r2, #8]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	f042 0201 	orr.w	r2, r2, #1
 80088e4:	605a      	str	r2, [r3, #4]
 80088e6:	4630      	mov	r0, r6
 80088e8:	f000 fa3a 	bl	8008d60 <__malloc_unlock>
 80088ec:	3408      	adds	r4, #8
 80088ee:	e180      	b.n	8008bf2 <_malloc_r+0x36e>
 80088f0:	3302      	adds	r3, #2
 80088f2:	4ab1      	ldr	r2, [pc, #708]	; (8008bb8 <_malloc_r+0x334>)
 80088f4:	693c      	ldr	r4, [r7, #16]
 80088f6:	4611      	mov	r1, r2
 80088f8:	4294      	cmp	r4, r2
 80088fa:	d075      	beq.n	80089e8 <_malloc_r+0x164>
 80088fc:	6860      	ldr	r0, [r4, #4]
 80088fe:	f020 0c03 	bic.w	ip, r0, #3
 8008902:	ebac 0005 	sub.w	r0, ip, r5
 8008906:	280f      	cmp	r0, #15
 8008908:	dd48      	ble.n	800899c <_malloc_r+0x118>
 800890a:	1963      	adds	r3, r4, r5
 800890c:	f045 0501 	orr.w	r5, r5, #1
 8008910:	6065      	str	r5, [r4, #4]
 8008912:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8008916:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800891a:	f040 0201 	orr.w	r2, r0, #1
 800891e:	605a      	str	r2, [r3, #4]
 8008920:	f844 000c 	str.w	r0, [r4, ip]
 8008924:	e7df      	b.n	80088e6 <_malloc_r+0x62>
 8008926:	0a6b      	lsrs	r3, r5, #9
 8008928:	d02a      	beq.n	8008980 <_malloc_r+0xfc>
 800892a:	2b04      	cmp	r3, #4
 800892c:	d812      	bhi.n	8008954 <_malloc_r+0xd0>
 800892e:	09ab      	lsrs	r3, r5, #6
 8008930:	3338      	adds	r3, #56	; 0x38
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8008938:	6854      	ldr	r4, [r2, #4]
 800893a:	f1a2 0c08 	sub.w	ip, r2, #8
 800893e:	4564      	cmp	r4, ip
 8008940:	d006      	beq.n	8008950 <_malloc_r+0xcc>
 8008942:	6862      	ldr	r2, [r4, #4]
 8008944:	f022 0203 	bic.w	r2, r2, #3
 8008948:	1b50      	subs	r0, r2, r5
 800894a:	280f      	cmp	r0, #15
 800894c:	dd1c      	ble.n	8008988 <_malloc_r+0x104>
 800894e:	3b01      	subs	r3, #1
 8008950:	3301      	adds	r3, #1
 8008952:	e7ce      	b.n	80088f2 <_malloc_r+0x6e>
 8008954:	2b14      	cmp	r3, #20
 8008956:	d801      	bhi.n	800895c <_malloc_r+0xd8>
 8008958:	335b      	adds	r3, #91	; 0x5b
 800895a:	e7ea      	b.n	8008932 <_malloc_r+0xae>
 800895c:	2b54      	cmp	r3, #84	; 0x54
 800895e:	d802      	bhi.n	8008966 <_malloc_r+0xe2>
 8008960:	0b2b      	lsrs	r3, r5, #12
 8008962:	336e      	adds	r3, #110	; 0x6e
 8008964:	e7e5      	b.n	8008932 <_malloc_r+0xae>
 8008966:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800896a:	d802      	bhi.n	8008972 <_malloc_r+0xee>
 800896c:	0beb      	lsrs	r3, r5, #15
 800896e:	3377      	adds	r3, #119	; 0x77
 8008970:	e7df      	b.n	8008932 <_malloc_r+0xae>
 8008972:	f240 5254 	movw	r2, #1364	; 0x554
 8008976:	4293      	cmp	r3, r2
 8008978:	d804      	bhi.n	8008984 <_malloc_r+0x100>
 800897a:	0cab      	lsrs	r3, r5, #18
 800897c:	337c      	adds	r3, #124	; 0x7c
 800897e:	e7d8      	b.n	8008932 <_malloc_r+0xae>
 8008980:	233f      	movs	r3, #63	; 0x3f
 8008982:	e7d6      	b.n	8008932 <_malloc_r+0xae>
 8008984:	237e      	movs	r3, #126	; 0x7e
 8008986:	e7d4      	b.n	8008932 <_malloc_r+0xae>
 8008988:	2800      	cmp	r0, #0
 800898a:	68e1      	ldr	r1, [r4, #12]
 800898c:	db04      	blt.n	8008998 <_malloc_r+0x114>
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	60d9      	str	r1, [r3, #12]
 8008992:	608b      	str	r3, [r1, #8]
 8008994:	18a3      	adds	r3, r4, r2
 8008996:	e7a2      	b.n	80088de <_malloc_r+0x5a>
 8008998:	460c      	mov	r4, r1
 800899a:	e7d0      	b.n	800893e <_malloc_r+0xba>
 800899c:	2800      	cmp	r0, #0
 800899e:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80089a2:	db07      	blt.n	80089b4 <_malloc_r+0x130>
 80089a4:	44a4      	add	ip, r4
 80089a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	f8cc 3004 	str.w	r3, [ip, #4]
 80089b2:	e798      	b.n	80088e6 <_malloc_r+0x62>
 80089b4:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f080 8099 	bcs.w	8008af0 <_malloc_r+0x26c>
 80089be:	2201      	movs	r2, #1
 80089c0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80089c4:	ea4f 0eac 	mov.w	lr, ip, asr #2
 80089c8:	fa02 f20e 	lsl.w	r2, r2, lr
 80089cc:	4310      	orrs	r0, r2
 80089ce:	f10c 0c01 	add.w	ip, ip, #1
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 80089d8:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 80089dc:	3a08      	subs	r2, #8
 80089de:	e9c4 0202 	strd	r0, r2, [r4, #8]
 80089e2:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 80089e6:	60c4      	str	r4, [r0, #12]
 80089e8:	2001      	movs	r0, #1
 80089ea:	109a      	asrs	r2, r3, #2
 80089ec:	fa00 f202 	lsl.w	r2, r0, r2
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	4290      	cmp	r0, r2
 80089f4:	d326      	bcc.n	8008a44 <_malloc_r+0x1c0>
 80089f6:	4210      	tst	r0, r2
 80089f8:	d106      	bne.n	8008a08 <_malloc_r+0x184>
 80089fa:	f023 0303 	bic.w	r3, r3, #3
 80089fe:	0052      	lsls	r2, r2, #1
 8008a00:	4210      	tst	r0, r2
 8008a02:	f103 0304 	add.w	r3, r3, #4
 8008a06:	d0fa      	beq.n	80089fe <_malloc_r+0x17a>
 8008a08:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8008a0c:	46e1      	mov	r9, ip
 8008a0e:	4698      	mov	r8, r3
 8008a10:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8008a14:	454c      	cmp	r4, r9
 8008a16:	f040 80af 	bne.w	8008b78 <_malloc_r+0x2f4>
 8008a1a:	f108 0801 	add.w	r8, r8, #1
 8008a1e:	f018 0f03 	tst.w	r8, #3
 8008a22:	f109 0908 	add.w	r9, r9, #8
 8008a26:	d1f3      	bne.n	8008a10 <_malloc_r+0x18c>
 8008a28:	0798      	lsls	r0, r3, #30
 8008a2a:	f040 80e8 	bne.w	8008bfe <_malloc_r+0x37a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	ea23 0302 	bic.w	r3, r3, r2
 8008a34:	607b      	str	r3, [r7, #4]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	0052      	lsls	r2, r2, #1
 8008a3a:	4290      	cmp	r0, r2
 8008a3c:	d302      	bcc.n	8008a44 <_malloc_r+0x1c0>
 8008a3e:	2a00      	cmp	r2, #0
 8008a40:	f040 80eb 	bne.w	8008c1a <_malloc_r+0x396>
 8008a44:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8008a48:	f8da 4004 	ldr.w	r4, [sl, #4]
 8008a4c:	f024 0203 	bic.w	r2, r4, #3
 8008a50:	42aa      	cmp	r2, r5
 8008a52:	d303      	bcc.n	8008a5c <_malloc_r+0x1d8>
 8008a54:	1b53      	subs	r3, r2, r5
 8008a56:	2b0f      	cmp	r3, #15
 8008a58:	f300 813f 	bgt.w	8008cda <_malloc_r+0x456>
 8008a5c:	4b57      	ldr	r3, [pc, #348]	; (8008bbc <_malloc_r+0x338>)
 8008a5e:	2008      	movs	r0, #8
 8008a60:	681c      	ldr	r4, [r3, #0]
 8008a62:	9200      	str	r2, [sp, #0]
 8008a64:	f000 ff26 	bl	80098b4 <sysconf>
 8008a68:	4b55      	ldr	r3, [pc, #340]	; (8008bc0 <_malloc_r+0x33c>)
 8008a6a:	3410      	adds	r4, #16
 8008a6c:	6819      	ldr	r1, [r3, #0]
 8008a6e:	442c      	add	r4, r5
 8008a70:	3101      	adds	r1, #1
 8008a72:	bf1f      	itttt	ne
 8008a74:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 8008a78:	1824      	addne	r4, r4, r0
 8008a7a:	4241      	negne	r1, r0
 8008a7c:	400c      	andne	r4, r1
 8008a7e:	9a00      	ldr	r2, [sp, #0]
 8008a80:	4680      	mov	r8, r0
 8008a82:	4621      	mov	r1, r4
 8008a84:	4630      	mov	r0, r6
 8008a86:	e9cd 2300 	strd	r2, r3, [sp]
 8008a8a:	f000 fe33 	bl	80096f4 <_sbrk_r>
 8008a8e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008a92:	4683      	mov	fp, r0
 8008a94:	f000 80fa 	beq.w	8008c8c <_malloc_r+0x408>
 8008a98:	9a00      	ldr	r2, [sp, #0]
 8008a9a:	9b01      	ldr	r3, [sp, #4]
 8008a9c:	eb0a 0102 	add.w	r1, sl, r2
 8008aa0:	4281      	cmp	r1, r0
 8008aa2:	d902      	bls.n	8008aaa <_malloc_r+0x226>
 8008aa4:	45ba      	cmp	sl, r7
 8008aa6:	f040 80f1 	bne.w	8008c8c <_malloc_r+0x408>
 8008aaa:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8008bcc <_malloc_r+0x348>
 8008aae:	4559      	cmp	r1, fp
 8008ab0:	f8d9 0000 	ldr.w	r0, [r9]
 8008ab4:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8008ab8:	eb00 0e04 	add.w	lr, r0, r4
 8008abc:	f8c9 e000 	str.w	lr, [r9]
 8008ac0:	f040 80ad 	bne.w	8008c1e <_malloc_r+0x39a>
 8008ac4:	ea11 0f0c 	tst.w	r1, ip
 8008ac8:	f040 80a9 	bne.w	8008c1e <_malloc_r+0x39a>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4414      	add	r4, r2
 8008ad0:	f044 0401 	orr.w	r4, r4, #1
 8008ad4:	605c      	str	r4, [r3, #4]
 8008ad6:	4a3b      	ldr	r2, [pc, #236]	; (8008bc4 <_malloc_r+0x340>)
 8008ad8:	f8d9 3000 	ldr.w	r3, [r9]
 8008adc:	6811      	ldr	r1, [r2, #0]
 8008ade:	428b      	cmp	r3, r1
 8008ae0:	bf88      	it	hi
 8008ae2:	6013      	strhi	r3, [r2, #0]
 8008ae4:	4a38      	ldr	r2, [pc, #224]	; (8008bc8 <_malloc_r+0x344>)
 8008ae6:	6811      	ldr	r1, [r2, #0]
 8008ae8:	428b      	cmp	r3, r1
 8008aea:	bf88      	it	hi
 8008aec:	6013      	strhi	r3, [r2, #0]
 8008aee:	e0cd      	b.n	8008c8c <_malloc_r+0x408>
 8008af0:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8008af4:	2a04      	cmp	r2, #4
 8008af6:	d818      	bhi.n	8008b2a <_malloc_r+0x2a6>
 8008af8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8008afc:	3238      	adds	r2, #56	; 0x38
 8008afe:	f102 0e01 	add.w	lr, r2, #1
 8008b02:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8008b06:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8008b0a:	45f0      	cmp	r8, lr
 8008b0c:	d12b      	bne.n	8008b66 <_malloc_r+0x2e2>
 8008b0e:	f04f 0c01 	mov.w	ip, #1
 8008b12:	1092      	asrs	r2, r2, #2
 8008b14:	fa0c f202 	lsl.w	r2, ip, r2
 8008b18:	4310      	orrs	r0, r2
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8008b20:	f8c8 4008 	str.w	r4, [r8, #8]
 8008b24:	f8ce 400c 	str.w	r4, [lr, #12]
 8008b28:	e75e      	b.n	80089e8 <_malloc_r+0x164>
 8008b2a:	2a14      	cmp	r2, #20
 8008b2c:	d801      	bhi.n	8008b32 <_malloc_r+0x2ae>
 8008b2e:	325b      	adds	r2, #91	; 0x5b
 8008b30:	e7e5      	b.n	8008afe <_malloc_r+0x27a>
 8008b32:	2a54      	cmp	r2, #84	; 0x54
 8008b34:	d803      	bhi.n	8008b3e <_malloc_r+0x2ba>
 8008b36:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8008b3a:	326e      	adds	r2, #110	; 0x6e
 8008b3c:	e7df      	b.n	8008afe <_malloc_r+0x27a>
 8008b3e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008b42:	d803      	bhi.n	8008b4c <_malloc_r+0x2c8>
 8008b44:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8008b48:	3277      	adds	r2, #119	; 0x77
 8008b4a:	e7d8      	b.n	8008afe <_malloc_r+0x27a>
 8008b4c:	f240 5e54 	movw	lr, #1364	; 0x554
 8008b50:	4572      	cmp	r2, lr
 8008b52:	bf9a      	itte	ls
 8008b54:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8008b58:	327c      	addls	r2, #124	; 0x7c
 8008b5a:	227e      	movhi	r2, #126	; 0x7e
 8008b5c:	e7cf      	b.n	8008afe <_malloc_r+0x27a>
 8008b5e:	f8de e008 	ldr.w	lr, [lr, #8]
 8008b62:	45f0      	cmp	r8, lr
 8008b64:	d005      	beq.n	8008b72 <_malloc_r+0x2ee>
 8008b66:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008b6a:	f022 0203 	bic.w	r2, r2, #3
 8008b6e:	4562      	cmp	r2, ip
 8008b70:	d8f5      	bhi.n	8008b5e <_malloc_r+0x2da>
 8008b72:	f8de 800c 	ldr.w	r8, [lr, #12]
 8008b76:	e7d1      	b.n	8008b1c <_malloc_r+0x298>
 8008b78:	6860      	ldr	r0, [r4, #4]
 8008b7a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8008b7e:	f020 0003 	bic.w	r0, r0, #3
 8008b82:	eba0 0a05 	sub.w	sl, r0, r5
 8008b86:	f1ba 0f0f 	cmp.w	sl, #15
 8008b8a:	dd21      	ble.n	8008bd0 <_malloc_r+0x34c>
 8008b8c:	68a2      	ldr	r2, [r4, #8]
 8008b8e:	1963      	adds	r3, r4, r5
 8008b90:	f045 0501 	orr.w	r5, r5, #1
 8008b94:	6065      	str	r5, [r4, #4]
 8008b96:	f8c2 e00c 	str.w	lr, [r2, #12]
 8008b9a:	f8ce 2008 	str.w	r2, [lr, #8]
 8008b9e:	f04a 0201 	orr.w	r2, sl, #1
 8008ba2:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8008ba6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008baa:	605a      	str	r2, [r3, #4]
 8008bac:	f844 a000 	str.w	sl, [r4, r0]
 8008bb0:	e699      	b.n	80088e6 <_malloc_r+0x62>
 8008bb2:	bf00      	nop
 8008bb4:	20000444 	.word	0x20000444
 8008bb8:	2000044c 	.word	0x2000044c
 8008bbc:	20000a10 	.word	0x20000a10
 8008bc0:	2000084c 	.word	0x2000084c
 8008bc4:	20000a08 	.word	0x20000a08
 8008bc8:	20000a0c 	.word	0x20000a0c
 8008bcc:	200009e0 	.word	0x200009e0
 8008bd0:	f1ba 0f00 	cmp.w	sl, #0
 8008bd4:	db11      	blt.n	8008bfa <_malloc_r+0x376>
 8008bd6:	4420      	add	r0, r4
 8008bd8:	6843      	ldr	r3, [r0, #4]
 8008bda:	f043 0301 	orr.w	r3, r3, #1
 8008bde:	6043      	str	r3, [r0, #4]
 8008be0:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8008be4:	4630      	mov	r0, r6
 8008be6:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008bea:	f8ce 3008 	str.w	r3, [lr, #8]
 8008bee:	f000 f8b7 	bl	8008d60 <__malloc_unlock>
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	b003      	add	sp, #12
 8008bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfa:	4674      	mov	r4, lr
 8008bfc:	e70a      	b.n	8008a14 <_malloc_r+0x190>
 8008bfe:	f1ac 0008 	sub.w	r0, ip, #8
 8008c02:	f8dc c000 	ldr.w	ip, [ip]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	4584      	cmp	ip, r0
 8008c0a:	f43f af0d 	beq.w	8008a28 <_malloc_r+0x1a4>
 8008c0e:	e712      	b.n	8008a36 <_malloc_r+0x1b2>
 8008c10:	3304      	adds	r3, #4
 8008c12:	0052      	lsls	r2, r2, #1
 8008c14:	4210      	tst	r0, r2
 8008c16:	d0fb      	beq.n	8008c10 <_malloc_r+0x38c>
 8008c18:	e6f6      	b.n	8008a08 <_malloc_r+0x184>
 8008c1a:	4643      	mov	r3, r8
 8008c1c:	e7fa      	b.n	8008c14 <_malloc_r+0x390>
 8008c1e:	6818      	ldr	r0, [r3, #0]
 8008c20:	9200      	str	r2, [sp, #0]
 8008c22:	3001      	adds	r0, #1
 8008c24:	bf1b      	ittet	ne
 8008c26:	ebab 0101 	subne.w	r1, fp, r1
 8008c2a:	4471      	addne	r1, lr
 8008c2c:	f8c3 b000 	streq.w	fp, [r3]
 8008c30:	f8c9 1000 	strne.w	r1, [r9]
 8008c34:	f01b 0307 	ands.w	r3, fp, #7
 8008c38:	bf1c      	itt	ne
 8008c3a:	f1c3 0308 	rsbne	r3, r3, #8
 8008c3e:	449b      	addne	fp, r3
 8008c40:	445c      	add	r4, fp
 8008c42:	4498      	add	r8, r3
 8008c44:	ea04 030c 	and.w	r3, r4, ip
 8008c48:	eba8 0803 	sub.w	r8, r8, r3
 8008c4c:	4641      	mov	r1, r8
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f000 fd50 	bl	80096f4 <_sbrk_r>
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	bf04      	itt	eq
 8008c58:	4658      	moveq	r0, fp
 8008c5a:	f04f 0800 	moveq.w	r8, #0
 8008c5e:	f8d9 3000 	ldr.w	r3, [r9]
 8008c62:	eba0 000b 	sub.w	r0, r0, fp
 8008c66:	4440      	add	r0, r8
 8008c68:	4443      	add	r3, r8
 8008c6a:	f040 0001 	orr.w	r0, r0, #1
 8008c6e:	45ba      	cmp	sl, r7
 8008c70:	f8c7 b008 	str.w	fp, [r7, #8]
 8008c74:	9a00      	ldr	r2, [sp, #0]
 8008c76:	f8c9 3000 	str.w	r3, [r9]
 8008c7a:	f8cb 0004 	str.w	r0, [fp, #4]
 8008c7e:	f43f af2a 	beq.w	8008ad6 <_malloc_r+0x252>
 8008c82:	2a0f      	cmp	r2, #15
 8008c84:	d810      	bhi.n	8008ca8 <_malloc_r+0x424>
 8008c86:	2301      	movs	r3, #1
 8008c88:	f8cb 3004 	str.w	r3, [fp, #4]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	f022 0203 	bic.w	r2, r2, #3
 8008c94:	42aa      	cmp	r2, r5
 8008c96:	eba2 0305 	sub.w	r3, r2, r5
 8008c9a:	d301      	bcc.n	8008ca0 <_malloc_r+0x41c>
 8008c9c:	2b0f      	cmp	r3, #15
 8008c9e:	dc1c      	bgt.n	8008cda <_malloc_r+0x456>
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f000 f85d 	bl	8008d60 <__malloc_unlock>
 8008ca6:	e5f9      	b.n	800889c <_malloc_r+0x18>
 8008ca8:	f1a2 040c 	sub.w	r4, r2, #12
 8008cac:	2205      	movs	r2, #5
 8008cae:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008cb2:	f024 0407 	bic.w	r4, r4, #7
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	4323      	orrs	r3, r4
 8008cbc:	f8ca 3004 	str.w	r3, [sl, #4]
 8008cc0:	2c0f      	cmp	r4, #15
 8008cc2:	eb0a 0304 	add.w	r3, sl, r4
 8008cc6:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8008cca:	f67f af04 	bls.w	8008ad6 <_malloc_r+0x252>
 8008cce:	f10a 0108 	add.w	r1, sl, #8
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f7ff fb30 	bl	8008338 <_free_r>
 8008cd8:	e6fd      	b.n	8008ad6 <_malloc_r+0x252>
 8008cda:	68bc      	ldr	r4, [r7, #8]
 8008cdc:	f045 0201 	orr.w	r2, r5, #1
 8008ce0:	f043 0301 	orr.w	r3, r3, #1
 8008ce4:	4425      	add	r5, r4
 8008ce6:	6062      	str	r2, [r4, #4]
 8008ce8:	60bd      	str	r5, [r7, #8]
 8008cea:	606b      	str	r3, [r5, #4]
 8008cec:	e5fb      	b.n	80088e6 <_malloc_r+0x62>
 8008cee:	bf00      	nop

08008cf0 <memchr>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	b2c9      	uxtb	r1, r1
 8008cf4:	4402      	add	r2, r0
 8008cf6:	4290      	cmp	r0, r2
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	d101      	bne.n	8008d00 <memchr+0x10>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e003      	b.n	8008d08 <memchr+0x18>
 8008d00:	781c      	ldrb	r4, [r3, #0]
 8008d02:	3001      	adds	r0, #1
 8008d04:	428c      	cmp	r4, r1
 8008d06:	d1f6      	bne.n	8008cf6 <memchr+0x6>
 8008d08:	4618      	mov	r0, r3
 8008d0a:	bd10      	pop	{r4, pc}

08008d0c <memcpy>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	1e43      	subs	r3, r0, #1
 8008d10:	440a      	add	r2, r1
 8008d12:	4291      	cmp	r1, r2
 8008d14:	d100      	bne.n	8008d18 <memcpy+0xc>
 8008d16:	bd10      	pop	{r4, pc}
 8008d18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d20:	e7f7      	b.n	8008d12 <memcpy+0x6>

08008d22 <memmove>:
 8008d22:	4288      	cmp	r0, r1
 8008d24:	b510      	push	{r4, lr}
 8008d26:	eb01 0302 	add.w	r3, r1, r2
 8008d2a:	d807      	bhi.n	8008d3c <memmove+0x1a>
 8008d2c:	1e42      	subs	r2, r0, #1
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	d00a      	beq.n	8008d48 <memmove+0x26>
 8008d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d36:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d3a:	e7f8      	b.n	8008d2e <memmove+0xc>
 8008d3c:	4283      	cmp	r3, r0
 8008d3e:	d9f5      	bls.n	8008d2c <memmove+0xa>
 8008d40:	1881      	adds	r1, r0, r2
 8008d42:	1ad2      	subs	r2, r2, r3
 8008d44:	42d3      	cmn	r3, r2
 8008d46:	d100      	bne.n	8008d4a <memmove+0x28>
 8008d48:	bd10      	pop	{r4, pc}
 8008d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d52:	e7f7      	b.n	8008d44 <memmove+0x22>

08008d54 <__malloc_lock>:
 8008d54:	4801      	ldr	r0, [pc, #4]	; (8008d5c <__malloc_lock+0x8>)
 8008d56:	f7ff bd27 	b.w	80087a8 <__retarget_lock_acquire_recursive>
 8008d5a:	bf00      	nop
 8008d5c:	20000b64 	.word	0x20000b64

08008d60 <__malloc_unlock>:
 8008d60:	4801      	ldr	r0, [pc, #4]	; (8008d68 <__malloc_unlock+0x8>)
 8008d62:	f7ff bd22 	b.w	80087aa <__retarget_lock_release_recursive>
 8008d66:	bf00      	nop
 8008d68:	20000b64 	.word	0x20000b64

08008d6c <_Balloc>:
 8008d6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008d6e:	b570      	push	{r4, r5, r6, lr}
 8008d70:	4605      	mov	r5, r0
 8008d72:	460c      	mov	r4, r1
 8008d74:	b17b      	cbz	r3, 8008d96 <_Balloc+0x2a>
 8008d76:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008d78:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008d7c:	b9a0      	cbnz	r0, 8008da8 <_Balloc+0x3c>
 8008d7e:	2101      	movs	r1, #1
 8008d80:	fa01 f604 	lsl.w	r6, r1, r4
 8008d84:	1d72      	adds	r2, r6, #5
 8008d86:	0092      	lsls	r2, r2, #2
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f000 fe83 	bl	8009a94 <_calloc_r>
 8008d8e:	b148      	cbz	r0, 8008da4 <_Balloc+0x38>
 8008d90:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8008d94:	e00b      	b.n	8008dae <_Balloc+0x42>
 8008d96:	2221      	movs	r2, #33	; 0x21
 8008d98:	2104      	movs	r1, #4
 8008d9a:	f000 fe7b 	bl	8009a94 <_calloc_r>
 8008d9e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d1e8      	bne.n	8008d76 <_Balloc+0xa>
 8008da4:	2000      	movs	r0, #0
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	6802      	ldr	r2, [r0, #0]
 8008daa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008dae:	2300      	movs	r3, #0
 8008db0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008db4:	e7f7      	b.n	8008da6 <_Balloc+0x3a>

08008db6 <_Bfree>:
 8008db6:	b131      	cbz	r1, 8008dc6 <_Bfree+0x10>
 8008db8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008dba:	684a      	ldr	r2, [r1, #4]
 8008dbc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008dc0:	6008      	str	r0, [r1, #0]
 8008dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008dc6:	4770      	bx	lr

08008dc8 <__multadd>:
 8008dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dcc:	461f      	mov	r7, r3
 8008dce:	4606      	mov	r6, r0
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	690d      	ldr	r5, [r1, #16]
 8008dd6:	f101 0c14 	add.w	ip, r1, #20
 8008dda:	f8dc 0000 	ldr.w	r0, [ip]
 8008dde:	3301      	adds	r3, #1
 8008de0:	b281      	uxth	r1, r0
 8008de2:	fb02 7101 	mla	r1, r2, r1, r7
 8008de6:	0c00      	lsrs	r0, r0, #16
 8008de8:	0c0f      	lsrs	r7, r1, #16
 8008dea:	fb02 7000 	mla	r0, r2, r0, r7
 8008dee:	b289      	uxth	r1, r1
 8008df0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008df4:	429d      	cmp	r5, r3
 8008df6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008dfa:	f84c 1b04 	str.w	r1, [ip], #4
 8008dfe:	dcec      	bgt.n	8008dda <__multadd+0x12>
 8008e00:	b1d7      	cbz	r7, 8008e38 <__multadd+0x70>
 8008e02:	68a3      	ldr	r3, [r4, #8]
 8008e04:	42ab      	cmp	r3, r5
 8008e06:	dc12      	bgt.n	8008e2e <__multadd+0x66>
 8008e08:	6861      	ldr	r1, [r4, #4]
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	3101      	adds	r1, #1
 8008e0e:	f7ff ffad 	bl	8008d6c <_Balloc>
 8008e12:	4680      	mov	r8, r0
 8008e14:	6922      	ldr	r2, [r4, #16]
 8008e16:	f104 010c 	add.w	r1, r4, #12
 8008e1a:	3202      	adds	r2, #2
 8008e1c:	0092      	lsls	r2, r2, #2
 8008e1e:	300c      	adds	r0, #12
 8008e20:	f7ff ff74 	bl	8008d0c <memcpy>
 8008e24:	4621      	mov	r1, r4
 8008e26:	4630      	mov	r0, r6
 8008e28:	f7ff ffc5 	bl	8008db6 <_Bfree>
 8008e2c:	4644      	mov	r4, r8
 8008e2e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e32:	3501      	adds	r5, #1
 8008e34:	615f      	str	r7, [r3, #20]
 8008e36:	6125      	str	r5, [r4, #16]
 8008e38:	4620      	mov	r0, r4
 8008e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e3e <__hi0bits>:
 8008e3e:	0c02      	lsrs	r2, r0, #16
 8008e40:	0412      	lsls	r2, r2, #16
 8008e42:	4603      	mov	r3, r0
 8008e44:	b9b2      	cbnz	r2, 8008e74 <__hi0bits+0x36>
 8008e46:	0403      	lsls	r3, r0, #16
 8008e48:	2010      	movs	r0, #16
 8008e4a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e4e:	bf04      	itt	eq
 8008e50:	021b      	lsleq	r3, r3, #8
 8008e52:	3008      	addeq	r0, #8
 8008e54:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e58:	bf04      	itt	eq
 8008e5a:	011b      	lsleq	r3, r3, #4
 8008e5c:	3004      	addeq	r0, #4
 8008e5e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e62:	bf04      	itt	eq
 8008e64:	009b      	lsleq	r3, r3, #2
 8008e66:	3002      	addeq	r0, #2
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	db06      	blt.n	8008e7a <__hi0bits+0x3c>
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	d503      	bpl.n	8008e78 <__hi0bits+0x3a>
 8008e70:	3001      	adds	r0, #1
 8008e72:	4770      	bx	lr
 8008e74:	2000      	movs	r0, #0
 8008e76:	e7e8      	b.n	8008e4a <__hi0bits+0xc>
 8008e78:	2020      	movs	r0, #32
 8008e7a:	4770      	bx	lr

08008e7c <__lo0bits>:
 8008e7c:	6803      	ldr	r3, [r0, #0]
 8008e7e:	4601      	mov	r1, r0
 8008e80:	f013 0207 	ands.w	r2, r3, #7
 8008e84:	d00b      	beq.n	8008e9e <__lo0bits+0x22>
 8008e86:	07da      	lsls	r2, r3, #31
 8008e88:	d423      	bmi.n	8008ed2 <__lo0bits+0x56>
 8008e8a:	0798      	lsls	r0, r3, #30
 8008e8c:	bf49      	itett	mi
 8008e8e:	085b      	lsrmi	r3, r3, #1
 8008e90:	089b      	lsrpl	r3, r3, #2
 8008e92:	2001      	movmi	r0, #1
 8008e94:	600b      	strmi	r3, [r1, #0]
 8008e96:	bf5c      	itt	pl
 8008e98:	600b      	strpl	r3, [r1, #0]
 8008e9a:	2002      	movpl	r0, #2
 8008e9c:	4770      	bx	lr
 8008e9e:	b298      	uxth	r0, r3
 8008ea0:	b9a8      	cbnz	r0, 8008ece <__lo0bits+0x52>
 8008ea2:	2010      	movs	r0, #16
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008eaa:	bf04      	itt	eq
 8008eac:	0a1b      	lsreq	r3, r3, #8
 8008eae:	3008      	addeq	r0, #8
 8008eb0:	071a      	lsls	r2, r3, #28
 8008eb2:	bf04      	itt	eq
 8008eb4:	091b      	lsreq	r3, r3, #4
 8008eb6:	3004      	addeq	r0, #4
 8008eb8:	079a      	lsls	r2, r3, #30
 8008eba:	bf04      	itt	eq
 8008ebc:	089b      	lsreq	r3, r3, #2
 8008ebe:	3002      	addeq	r0, #2
 8008ec0:	07da      	lsls	r2, r3, #31
 8008ec2:	d402      	bmi.n	8008eca <__lo0bits+0x4e>
 8008ec4:	085b      	lsrs	r3, r3, #1
 8008ec6:	d006      	beq.n	8008ed6 <__lo0bits+0x5a>
 8008ec8:	3001      	adds	r0, #1
 8008eca:	600b      	str	r3, [r1, #0]
 8008ecc:	4770      	bx	lr
 8008ece:	4610      	mov	r0, r2
 8008ed0:	e7e9      	b.n	8008ea6 <__lo0bits+0x2a>
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	4770      	bx	lr
 8008ed6:	2020      	movs	r0, #32
 8008ed8:	4770      	bx	lr

08008eda <__i2b>:
 8008eda:	b510      	push	{r4, lr}
 8008edc:	460c      	mov	r4, r1
 8008ede:	2101      	movs	r1, #1
 8008ee0:	f7ff ff44 	bl	8008d6c <_Balloc>
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	6144      	str	r4, [r0, #20]
 8008ee8:	6102      	str	r2, [r0, #16]
 8008eea:	bd10      	pop	{r4, pc}

08008eec <__multiply>:
 8008eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	690a      	ldr	r2, [r1, #16]
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	4688      	mov	r8, r1
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	bfbe      	ittt	lt
 8008efc:	460b      	movlt	r3, r1
 8008efe:	46a0      	movlt	r8, r4
 8008f00:	461c      	movlt	r4, r3
 8008f02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f12:	eb07 0609 	add.w	r6, r7, r9
 8008f16:	42b3      	cmp	r3, r6
 8008f18:	bfb8      	it	lt
 8008f1a:	3101      	addlt	r1, #1
 8008f1c:	f7ff ff26 	bl	8008d6c <_Balloc>
 8008f20:	f100 0514 	add.w	r5, r0, #20
 8008f24:	462b      	mov	r3, r5
 8008f26:	2200      	movs	r2, #0
 8008f28:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008f2c:	4573      	cmp	r3, lr
 8008f2e:	d316      	bcc.n	8008f5e <__multiply+0x72>
 8008f30:	f104 0214 	add.w	r2, r4, #20
 8008f34:	f108 0114 	add.w	r1, r8, #20
 8008f38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008f3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	9b00      	ldr	r3, [sp, #0]
 8008f44:	9201      	str	r2, [sp, #4]
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d80c      	bhi.n	8008f64 <__multiply+0x78>
 8008f4a:	2e00      	cmp	r6, #0
 8008f4c:	dd03      	ble.n	8008f56 <__multiply+0x6a>
 8008f4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d05d      	beq.n	8009012 <__multiply+0x126>
 8008f56:	6106      	str	r6, [r0, #16]
 8008f58:	b003      	add	sp, #12
 8008f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5e:	f843 2b04 	str.w	r2, [r3], #4
 8008f62:	e7e3      	b.n	8008f2c <__multiply+0x40>
 8008f64:	f8b2 b000 	ldrh.w	fp, [r2]
 8008f68:	f1bb 0f00 	cmp.w	fp, #0
 8008f6c:	d023      	beq.n	8008fb6 <__multiply+0xca>
 8008f6e:	4689      	mov	r9, r1
 8008f70:	46ac      	mov	ip, r5
 8008f72:	f04f 0800 	mov.w	r8, #0
 8008f76:	f859 4b04 	ldr.w	r4, [r9], #4
 8008f7a:	f8dc a000 	ldr.w	sl, [ip]
 8008f7e:	b2a3      	uxth	r3, r4
 8008f80:	fa1f fa8a 	uxth.w	sl, sl
 8008f84:	fb0b a303 	mla	r3, fp, r3, sl
 8008f88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f8c:	f8dc 4000 	ldr.w	r4, [ip]
 8008f90:	4443      	add	r3, r8
 8008f92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f96:	fb0b 840a 	mla	r4, fp, sl, r8
 8008f9a:	46e2      	mov	sl, ip
 8008f9c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fa6:	454f      	cmp	r7, r9
 8008fa8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008fac:	f84a 3b04 	str.w	r3, [sl], #4
 8008fb0:	d82b      	bhi.n	800900a <__multiply+0x11e>
 8008fb2:	f8cc 8004 	str.w	r8, [ip, #4]
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	3204      	adds	r2, #4
 8008fba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008fbe:	f1ba 0f00 	cmp.w	sl, #0
 8008fc2:	d020      	beq.n	8009006 <__multiply+0x11a>
 8008fc4:	4689      	mov	r9, r1
 8008fc6:	46a8      	mov	r8, r5
 8008fc8:	f04f 0b00 	mov.w	fp, #0
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	f8b9 c000 	ldrh.w	ip, [r9]
 8008fd2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	fb0a 440c 	mla	r4, sl, ip, r4
 8008fdc:	46c4      	mov	ip, r8
 8008fde:	445c      	add	r4, fp
 8008fe0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fe4:	f84c 3b04 	str.w	r3, [ip], #4
 8008fe8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008ff0:	0c1b      	lsrs	r3, r3, #16
 8008ff2:	fb0a b303 	mla	r3, sl, r3, fp
 8008ff6:	454f      	cmp	r7, r9
 8008ff8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008ffc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009000:	d805      	bhi.n	800900e <__multiply+0x122>
 8009002:	f8c8 3004 	str.w	r3, [r8, #4]
 8009006:	3504      	adds	r5, #4
 8009008:	e79b      	b.n	8008f42 <__multiply+0x56>
 800900a:	46d4      	mov	ip, sl
 800900c:	e7b3      	b.n	8008f76 <__multiply+0x8a>
 800900e:	46e0      	mov	r8, ip
 8009010:	e7dd      	b.n	8008fce <__multiply+0xe2>
 8009012:	3e01      	subs	r6, #1
 8009014:	e799      	b.n	8008f4a <__multiply+0x5e>
	...

08009018 <__pow5mult>:
 8009018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800901c:	4615      	mov	r5, r2
 800901e:	f012 0203 	ands.w	r2, r2, #3
 8009022:	4606      	mov	r6, r0
 8009024:	460f      	mov	r7, r1
 8009026:	d007      	beq.n	8009038 <__pow5mult+0x20>
 8009028:	4c1a      	ldr	r4, [pc, #104]	; (8009094 <__pow5mult+0x7c>)
 800902a:	3a01      	subs	r2, #1
 800902c:	2300      	movs	r3, #0
 800902e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009032:	f7ff fec9 	bl	8008dc8 <__multadd>
 8009036:	4607      	mov	r7, r0
 8009038:	10ad      	asrs	r5, r5, #2
 800903a:	d027      	beq.n	800908c <__pow5mult+0x74>
 800903c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800903e:	b944      	cbnz	r4, 8009052 <__pow5mult+0x3a>
 8009040:	f240 2171 	movw	r1, #625	; 0x271
 8009044:	4630      	mov	r0, r6
 8009046:	f7ff ff48 	bl	8008eda <__i2b>
 800904a:	2300      	movs	r3, #0
 800904c:	4604      	mov	r4, r0
 800904e:	64b0      	str	r0, [r6, #72]	; 0x48
 8009050:	6003      	str	r3, [r0, #0]
 8009052:	f04f 0800 	mov.w	r8, #0
 8009056:	07eb      	lsls	r3, r5, #31
 8009058:	d50a      	bpl.n	8009070 <__pow5mult+0x58>
 800905a:	4639      	mov	r1, r7
 800905c:	4622      	mov	r2, r4
 800905e:	4630      	mov	r0, r6
 8009060:	f7ff ff44 	bl	8008eec <__multiply>
 8009064:	4681      	mov	r9, r0
 8009066:	4639      	mov	r1, r7
 8009068:	4630      	mov	r0, r6
 800906a:	f7ff fea4 	bl	8008db6 <_Bfree>
 800906e:	464f      	mov	r7, r9
 8009070:	106d      	asrs	r5, r5, #1
 8009072:	d00b      	beq.n	800908c <__pow5mult+0x74>
 8009074:	6820      	ldr	r0, [r4, #0]
 8009076:	b938      	cbnz	r0, 8009088 <__pow5mult+0x70>
 8009078:	4622      	mov	r2, r4
 800907a:	4621      	mov	r1, r4
 800907c:	4630      	mov	r0, r6
 800907e:	f7ff ff35 	bl	8008eec <__multiply>
 8009082:	6020      	str	r0, [r4, #0]
 8009084:	f8c0 8000 	str.w	r8, [r0]
 8009088:	4604      	mov	r4, r0
 800908a:	e7e4      	b.n	8009056 <__pow5mult+0x3e>
 800908c:	4638      	mov	r0, r7
 800908e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009092:	bf00      	nop
 8009094:	0800a298 	.word	0x0800a298

08009098 <__lshift>:
 8009098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	460c      	mov	r4, r1
 800909e:	4607      	mov	r7, r0
 80090a0:	4616      	mov	r6, r2
 80090a2:	6923      	ldr	r3, [r4, #16]
 80090a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090a8:	eb0a 0903 	add.w	r9, sl, r3
 80090ac:	6849      	ldr	r1, [r1, #4]
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	f109 0501 	add.w	r5, r9, #1
 80090b4:	42ab      	cmp	r3, r5
 80090b6:	db32      	blt.n	800911e <__lshift+0x86>
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff fe57 	bl	8008d6c <_Balloc>
 80090be:	2300      	movs	r3, #0
 80090c0:	4680      	mov	r8, r0
 80090c2:	461a      	mov	r2, r3
 80090c4:	f100 0114 	add.w	r1, r0, #20
 80090c8:	4553      	cmp	r3, sl
 80090ca:	db2b      	blt.n	8009124 <__lshift+0x8c>
 80090cc:	6920      	ldr	r0, [r4, #16]
 80090ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d2:	f104 0314 	add.w	r3, r4, #20
 80090d6:	f016 021f 	ands.w	r2, r6, #31
 80090da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090e2:	d025      	beq.n	8009130 <__lshift+0x98>
 80090e4:	2000      	movs	r0, #0
 80090e6:	f1c2 0e20 	rsb	lr, r2, #32
 80090ea:	468a      	mov	sl, r1
 80090ec:	681e      	ldr	r6, [r3, #0]
 80090ee:	4096      	lsls	r6, r2
 80090f0:	4330      	orrs	r0, r6
 80090f2:	f84a 0b04 	str.w	r0, [sl], #4
 80090f6:	f853 0b04 	ldr.w	r0, [r3], #4
 80090fa:	459c      	cmp	ip, r3
 80090fc:	fa20 f00e 	lsr.w	r0, r0, lr
 8009100:	d814      	bhi.n	800912c <__lshift+0x94>
 8009102:	6048      	str	r0, [r1, #4]
 8009104:	b108      	cbz	r0, 800910a <__lshift+0x72>
 8009106:	f109 0502 	add.w	r5, r9, #2
 800910a:	3d01      	subs	r5, #1
 800910c:	4638      	mov	r0, r7
 800910e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009112:	4621      	mov	r1, r4
 8009114:	f7ff fe4f 	bl	8008db6 <_Bfree>
 8009118:	4640      	mov	r0, r8
 800911a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911e:	3101      	adds	r1, #1
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	e7c7      	b.n	80090b4 <__lshift+0x1c>
 8009124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009128:	3301      	adds	r3, #1
 800912a:	e7cd      	b.n	80090c8 <__lshift+0x30>
 800912c:	4651      	mov	r1, sl
 800912e:	e7dc      	b.n	80090ea <__lshift+0x52>
 8009130:	3904      	subs	r1, #4
 8009132:	f853 2b04 	ldr.w	r2, [r3], #4
 8009136:	459c      	cmp	ip, r3
 8009138:	f841 2f04 	str.w	r2, [r1, #4]!
 800913c:	d8f9      	bhi.n	8009132 <__lshift+0x9a>
 800913e:	e7e4      	b.n	800910a <__lshift+0x72>

08009140 <__mcmp>:
 8009140:	6903      	ldr	r3, [r0, #16]
 8009142:	690a      	ldr	r2, [r1, #16]
 8009144:	b530      	push	{r4, r5, lr}
 8009146:	1a9b      	subs	r3, r3, r2
 8009148:	d10c      	bne.n	8009164 <__mcmp+0x24>
 800914a:	0092      	lsls	r2, r2, #2
 800914c:	3014      	adds	r0, #20
 800914e:	3114      	adds	r1, #20
 8009150:	1884      	adds	r4, r0, r2
 8009152:	4411      	add	r1, r2
 8009154:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009158:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800915c:	4295      	cmp	r5, r2
 800915e:	d003      	beq.n	8009168 <__mcmp+0x28>
 8009160:	d305      	bcc.n	800916e <__mcmp+0x2e>
 8009162:	2301      	movs	r3, #1
 8009164:	4618      	mov	r0, r3
 8009166:	bd30      	pop	{r4, r5, pc}
 8009168:	42a0      	cmp	r0, r4
 800916a:	d3f3      	bcc.n	8009154 <__mcmp+0x14>
 800916c:	e7fa      	b.n	8009164 <__mcmp+0x24>
 800916e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009172:	e7f7      	b.n	8009164 <__mcmp+0x24>

08009174 <__mdiff>:
 8009174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009178:	460d      	mov	r5, r1
 800917a:	4607      	mov	r7, r0
 800917c:	4611      	mov	r1, r2
 800917e:	4628      	mov	r0, r5
 8009180:	4614      	mov	r4, r2
 8009182:	f7ff ffdd 	bl	8009140 <__mcmp>
 8009186:	1e06      	subs	r6, r0, #0
 8009188:	d108      	bne.n	800919c <__mdiff+0x28>
 800918a:	4631      	mov	r1, r6
 800918c:	4638      	mov	r0, r7
 800918e:	f7ff fded 	bl	8008d6c <_Balloc>
 8009192:	2301      	movs	r3, #1
 8009194:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919c:	bfa4      	itt	ge
 800919e:	4623      	movge	r3, r4
 80091a0:	462c      	movge	r4, r5
 80091a2:	4638      	mov	r0, r7
 80091a4:	6861      	ldr	r1, [r4, #4]
 80091a6:	bfa6      	itte	ge
 80091a8:	461d      	movge	r5, r3
 80091aa:	2600      	movge	r6, #0
 80091ac:	2601      	movlt	r6, #1
 80091ae:	f7ff fddd 	bl	8008d6c <_Balloc>
 80091b2:	f04f 0e00 	mov.w	lr, #0
 80091b6:	60c6      	str	r6, [r0, #12]
 80091b8:	692b      	ldr	r3, [r5, #16]
 80091ba:	6926      	ldr	r6, [r4, #16]
 80091bc:	f104 0214 	add.w	r2, r4, #20
 80091c0:	f105 0914 	add.w	r9, r5, #20
 80091c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80091c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80091cc:	f100 0114 	add.w	r1, r0, #20
 80091d0:	f852 ab04 	ldr.w	sl, [r2], #4
 80091d4:	f859 5b04 	ldr.w	r5, [r9], #4
 80091d8:	fa1f f38a 	uxth.w	r3, sl
 80091dc:	4473      	add	r3, lr
 80091de:	b2ac      	uxth	r4, r5
 80091e0:	1b1b      	subs	r3, r3, r4
 80091e2:	0c2c      	lsrs	r4, r5, #16
 80091e4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80091e8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80091f2:	45c8      	cmp	r8, r9
 80091f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80091f8:	4694      	mov	ip, r2
 80091fa:	f841 4b04 	str.w	r4, [r1], #4
 80091fe:	d8e7      	bhi.n	80091d0 <__mdiff+0x5c>
 8009200:	45bc      	cmp	ip, r7
 8009202:	d304      	bcc.n	800920e <__mdiff+0x9a>
 8009204:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009208:	b183      	cbz	r3, 800922c <__mdiff+0xb8>
 800920a:	6106      	str	r6, [r0, #16]
 800920c:	e7c4      	b.n	8009198 <__mdiff+0x24>
 800920e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009212:	b2a2      	uxth	r2, r4
 8009214:	4472      	add	r2, lr
 8009216:	1413      	asrs	r3, r2, #16
 8009218:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800921c:	b292      	uxth	r2, r2
 800921e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009222:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009226:	f841 2b04 	str.w	r2, [r1], #4
 800922a:	e7e9      	b.n	8009200 <__mdiff+0x8c>
 800922c:	3e01      	subs	r6, #1
 800922e:	e7e9      	b.n	8009204 <__mdiff+0x90>

08009230 <__d2b>:
 8009230:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009234:	461c      	mov	r4, r3
 8009236:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800923a:	2101      	movs	r1, #1
 800923c:	4690      	mov	r8, r2
 800923e:	f7ff fd95 	bl	8008d6c <_Balloc>
 8009242:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009246:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800924a:	4607      	mov	r7, r0
 800924c:	bb34      	cbnz	r4, 800929c <__d2b+0x6c>
 800924e:	9201      	str	r2, [sp, #4]
 8009250:	f1b8 0200 	subs.w	r2, r8, #0
 8009254:	d027      	beq.n	80092a6 <__d2b+0x76>
 8009256:	a802      	add	r0, sp, #8
 8009258:	f840 2d08 	str.w	r2, [r0, #-8]!
 800925c:	f7ff fe0e 	bl	8008e7c <__lo0bits>
 8009260:	9900      	ldr	r1, [sp, #0]
 8009262:	b1f0      	cbz	r0, 80092a2 <__d2b+0x72>
 8009264:	9a01      	ldr	r2, [sp, #4]
 8009266:	f1c0 0320 	rsb	r3, r0, #32
 800926a:	fa02 f303 	lsl.w	r3, r2, r3
 800926e:	430b      	orrs	r3, r1
 8009270:	40c2      	lsrs	r2, r0
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	9201      	str	r2, [sp, #4]
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	bf14      	ite	ne
 800927c:	2102      	movne	r1, #2
 800927e:	2101      	moveq	r1, #1
 8009280:	61bb      	str	r3, [r7, #24]
 8009282:	6139      	str	r1, [r7, #16]
 8009284:	b1c4      	cbz	r4, 80092b8 <__d2b+0x88>
 8009286:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800928a:	4404      	add	r4, r0
 800928c:	6034      	str	r4, [r6, #0]
 800928e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009292:	6028      	str	r0, [r5, #0]
 8009294:	4638      	mov	r0, r7
 8009296:	b002      	add	sp, #8
 8009298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800929c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80092a0:	e7d5      	b.n	800924e <__d2b+0x1e>
 80092a2:	6179      	str	r1, [r7, #20]
 80092a4:	e7e7      	b.n	8009276 <__d2b+0x46>
 80092a6:	a801      	add	r0, sp, #4
 80092a8:	f7ff fde8 	bl	8008e7c <__lo0bits>
 80092ac:	2101      	movs	r1, #1
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	6139      	str	r1, [r7, #16]
 80092b2:	617b      	str	r3, [r7, #20]
 80092b4:	3020      	adds	r0, #32
 80092b6:	e7e5      	b.n	8009284 <__d2b+0x54>
 80092b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092bc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80092c0:	6030      	str	r0, [r6, #0]
 80092c2:	6918      	ldr	r0, [r3, #16]
 80092c4:	f7ff fdbb 	bl	8008e3e <__hi0bits>
 80092c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80092cc:	e7e1      	b.n	8009292 <__d2b+0x62>

080092ce <_putc_r>:
 80092ce:	b570      	push	{r4, r5, r6, lr}
 80092d0:	460d      	mov	r5, r1
 80092d2:	4614      	mov	r4, r2
 80092d4:	4606      	mov	r6, r0
 80092d6:	b118      	cbz	r0, 80092e0 <_putc_r+0x12>
 80092d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80092da:	b90b      	cbnz	r3, 80092e0 <_putc_r+0x12>
 80092dc:	f7fe ff9c 	bl	8008218 <__sinit>
 80092e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092e2:	07d8      	lsls	r0, r3, #31
 80092e4:	d405      	bmi.n	80092f2 <_putc_r+0x24>
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	0599      	lsls	r1, r3, #22
 80092ea:	d402      	bmi.n	80092f2 <_putc_r+0x24>
 80092ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ee:	f7ff fa5b 	bl	80087a8 <__retarget_lock_acquire_recursive>
 80092f2:	68a3      	ldr	r3, [r4, #8]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	60a3      	str	r3, [r4, #8]
 80092fa:	da05      	bge.n	8009308 <_putc_r+0x3a>
 80092fc:	69a2      	ldr	r2, [r4, #24]
 80092fe:	4293      	cmp	r3, r2
 8009300:	db12      	blt.n	8009328 <_putc_r+0x5a>
 8009302:	b2eb      	uxtb	r3, r5
 8009304:	2b0a      	cmp	r3, #10
 8009306:	d00f      	beq.n	8009328 <_putc_r+0x5a>
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	6022      	str	r2, [r4, #0]
 800930e:	701d      	strb	r5, [r3, #0]
 8009310:	b2ed      	uxtb	r5, r5
 8009312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009314:	07da      	lsls	r2, r3, #31
 8009316:	d405      	bmi.n	8009324 <_putc_r+0x56>
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	059b      	lsls	r3, r3, #22
 800931c:	d402      	bmi.n	8009324 <_putc_r+0x56>
 800931e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009320:	f7ff fa43 	bl	80087aa <__retarget_lock_release_recursive>
 8009324:	4628      	mov	r0, r5
 8009326:	bd70      	pop	{r4, r5, r6, pc}
 8009328:	4629      	mov	r1, r5
 800932a:	4622      	mov	r2, r4
 800932c:	4630      	mov	r0, r6
 800932e:	f000 fb00 	bl	8009932 <__swbuf_r>
 8009332:	4605      	mov	r5, r0
 8009334:	e7ed      	b.n	8009312 <_putc_r+0x44>
	...

08009338 <_realloc_r>:
 8009338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	4682      	mov	sl, r0
 800933e:	460c      	mov	r4, r1
 8009340:	b929      	cbnz	r1, 800934e <_realloc_r+0x16>
 8009342:	4611      	mov	r1, r2
 8009344:	b003      	add	sp, #12
 8009346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934a:	f7ff ba9b 	b.w	8008884 <_malloc_r>
 800934e:	9201      	str	r2, [sp, #4]
 8009350:	f7ff fd00 	bl	8008d54 <__malloc_lock>
 8009354:	9a01      	ldr	r2, [sp, #4]
 8009356:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800935a:	f102 080b 	add.w	r8, r2, #11
 800935e:	f1b8 0f16 	cmp.w	r8, #22
 8009362:	f1a4 0908 	sub.w	r9, r4, #8
 8009366:	f025 0603 	bic.w	r6, r5, #3
 800936a:	d90b      	bls.n	8009384 <_realloc_r+0x4c>
 800936c:	f038 0807 	bics.w	r8, r8, #7
 8009370:	d50a      	bpl.n	8009388 <_realloc_r+0x50>
 8009372:	230c      	movs	r3, #12
 8009374:	f04f 0b00 	mov.w	fp, #0
 8009378:	f8ca 3000 	str.w	r3, [sl]
 800937c:	4658      	mov	r0, fp
 800937e:	b003      	add	sp, #12
 8009380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009384:	f04f 0810 	mov.w	r8, #16
 8009388:	4590      	cmp	r8, r2
 800938a:	d3f2      	bcc.n	8009372 <_realloc_r+0x3a>
 800938c:	45b0      	cmp	r8, r6
 800938e:	f340 8175 	ble.w	800967c <_realloc_r+0x344>
 8009392:	49ab      	ldr	r1, [pc, #684]	; (8009640 <_realloc_r+0x308>)
 8009394:	eb09 0306 	add.w	r3, r9, r6
 8009398:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800939c:	6858      	ldr	r0, [r3, #4]
 800939e:	459c      	cmp	ip, r3
 80093a0:	9101      	str	r1, [sp, #4]
 80093a2:	d005      	beq.n	80093b0 <_realloc_r+0x78>
 80093a4:	f020 0101 	bic.w	r1, r0, #1
 80093a8:	4419      	add	r1, r3
 80093aa:	6849      	ldr	r1, [r1, #4]
 80093ac:	07cf      	lsls	r7, r1, #31
 80093ae:	d447      	bmi.n	8009440 <_realloc_r+0x108>
 80093b0:	f020 0003 	bic.w	r0, r0, #3
 80093b4:	459c      	cmp	ip, r3
 80093b6:	eb06 0700 	add.w	r7, r6, r0
 80093ba:	d119      	bne.n	80093f0 <_realloc_r+0xb8>
 80093bc:	f108 0110 	add.w	r1, r8, #16
 80093c0:	42b9      	cmp	r1, r7
 80093c2:	dc3f      	bgt.n	8009444 <_realloc_r+0x10c>
 80093c4:	9a01      	ldr	r2, [sp, #4]
 80093c6:	eba7 0708 	sub.w	r7, r7, r8
 80093ca:	eb09 0308 	add.w	r3, r9, r8
 80093ce:	f047 0701 	orr.w	r7, r7, #1
 80093d2:	6093      	str	r3, [r2, #8]
 80093d4:	605f      	str	r7, [r3, #4]
 80093d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80093da:	4650      	mov	r0, sl
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	ea43 0308 	orr.w	r3, r3, r8
 80093e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80093e8:	f7ff fcba 	bl	8008d60 <__malloc_unlock>
 80093ec:	46a3      	mov	fp, r4
 80093ee:	e7c5      	b.n	800937c <_realloc_r+0x44>
 80093f0:	45b8      	cmp	r8, r7
 80093f2:	dc27      	bgt.n	8009444 <_realloc_r+0x10c>
 80093f4:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80093f8:	60da      	str	r2, [r3, #12]
 80093fa:	6093      	str	r3, [r2, #8]
 80093fc:	eba7 0008 	sub.w	r0, r7, r8
 8009400:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009404:	280f      	cmp	r0, #15
 8009406:	f002 0201 	and.w	r2, r2, #1
 800940a:	eb09 0307 	add.w	r3, r9, r7
 800940e:	f240 8137 	bls.w	8009680 <_realloc_r+0x348>
 8009412:	eb09 0108 	add.w	r1, r9, r8
 8009416:	ea48 0202 	orr.w	r2, r8, r2
 800941a:	f040 0001 	orr.w	r0, r0, #1
 800941e:	f8c9 2004 	str.w	r2, [r9, #4]
 8009422:	6048      	str	r0, [r1, #4]
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	3108      	adds	r1, #8
 8009428:	f042 0201 	orr.w	r2, r2, #1
 800942c:	605a      	str	r2, [r3, #4]
 800942e:	4650      	mov	r0, sl
 8009430:	f7fe ff82 	bl	8008338 <_free_r>
 8009434:	4650      	mov	r0, sl
 8009436:	f7ff fc93 	bl	8008d60 <__malloc_unlock>
 800943a:	f109 0b08 	add.w	fp, r9, #8
 800943e:	e79d      	b.n	800937c <_realloc_r+0x44>
 8009440:	2000      	movs	r0, #0
 8009442:	4603      	mov	r3, r0
 8009444:	07e9      	lsls	r1, r5, #31
 8009446:	f100 80c9 	bmi.w	80095dc <_realloc_r+0x2a4>
 800944a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800944e:	eba9 0505 	sub.w	r5, r9, r5
 8009452:	6869      	ldr	r1, [r5, #4]
 8009454:	f021 0103 	bic.w	r1, r1, #3
 8009458:	eb01 0b06 	add.w	fp, r1, r6
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 8088 	beq.w	8009572 <_realloc_r+0x23a>
 8009462:	459c      	cmp	ip, r3
 8009464:	eb00 070b 	add.w	r7, r0, fp
 8009468:	d14a      	bne.n	8009500 <_realloc_r+0x1c8>
 800946a:	f108 0310 	add.w	r3, r8, #16
 800946e:	42bb      	cmp	r3, r7
 8009470:	dc7f      	bgt.n	8009572 <_realloc_r+0x23a>
 8009472:	46ab      	mov	fp, r5
 8009474:	68eb      	ldr	r3, [r5, #12]
 8009476:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800947a:	60d3      	str	r3, [r2, #12]
 800947c:	609a      	str	r2, [r3, #8]
 800947e:	1f32      	subs	r2, r6, #4
 8009480:	2a24      	cmp	r2, #36	; 0x24
 8009482:	d838      	bhi.n	80094f6 <_realloc_r+0x1be>
 8009484:	2a13      	cmp	r2, #19
 8009486:	d934      	bls.n	80094f2 <_realloc_r+0x1ba>
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	2a1b      	cmp	r2, #27
 800948c:	60ab      	str	r3, [r5, #8]
 800948e:	6863      	ldr	r3, [r4, #4]
 8009490:	60eb      	str	r3, [r5, #12]
 8009492:	d81b      	bhi.n	80094cc <_realloc_r+0x194>
 8009494:	3408      	adds	r4, #8
 8009496:	f105 0310 	add.w	r3, r5, #16
 800949a:	6822      	ldr	r2, [r4, #0]
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	6862      	ldr	r2, [r4, #4]
 80094a0:	605a      	str	r2, [r3, #4]
 80094a2:	68a2      	ldr	r2, [r4, #8]
 80094a4:	609a      	str	r2, [r3, #8]
 80094a6:	9a01      	ldr	r2, [sp, #4]
 80094a8:	eba7 0708 	sub.w	r7, r7, r8
 80094ac:	eb05 0308 	add.w	r3, r5, r8
 80094b0:	f047 0701 	orr.w	r7, r7, #1
 80094b4:	6093      	str	r3, [r2, #8]
 80094b6:	605f      	str	r7, [r3, #4]
 80094b8:	686b      	ldr	r3, [r5, #4]
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	ea43 0308 	orr.w	r3, r3, r8
 80094c2:	606b      	str	r3, [r5, #4]
 80094c4:	4650      	mov	r0, sl
 80094c6:	f7ff fc4b 	bl	8008d60 <__malloc_unlock>
 80094ca:	e757      	b.n	800937c <_realloc_r+0x44>
 80094cc:	68a3      	ldr	r3, [r4, #8]
 80094ce:	2a24      	cmp	r2, #36	; 0x24
 80094d0:	612b      	str	r3, [r5, #16]
 80094d2:	68e3      	ldr	r3, [r4, #12]
 80094d4:	bf18      	it	ne
 80094d6:	3410      	addne	r4, #16
 80094d8:	616b      	str	r3, [r5, #20]
 80094da:	bf09      	itett	eq
 80094dc:	6923      	ldreq	r3, [r4, #16]
 80094de:	f105 0318 	addne.w	r3, r5, #24
 80094e2:	61ab      	streq	r3, [r5, #24]
 80094e4:	6962      	ldreq	r2, [r4, #20]
 80094e6:	bf02      	ittt	eq
 80094e8:	f105 0320 	addeq.w	r3, r5, #32
 80094ec:	61ea      	streq	r2, [r5, #28]
 80094ee:	3418      	addeq	r4, #24
 80094f0:	e7d3      	b.n	800949a <_realloc_r+0x162>
 80094f2:	465b      	mov	r3, fp
 80094f4:	e7d1      	b.n	800949a <_realloc_r+0x162>
 80094f6:	4621      	mov	r1, r4
 80094f8:	4658      	mov	r0, fp
 80094fa:	f7ff fc12 	bl	8008d22 <memmove>
 80094fe:	e7d2      	b.n	80094a6 <_realloc_r+0x16e>
 8009500:	45b8      	cmp	r8, r7
 8009502:	dc36      	bgt.n	8009572 <_realloc_r+0x23a>
 8009504:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009508:	4628      	mov	r0, r5
 800950a:	60da      	str	r2, [r3, #12]
 800950c:	6093      	str	r3, [r2, #8]
 800950e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009512:	68eb      	ldr	r3, [r5, #12]
 8009514:	60d3      	str	r3, [r2, #12]
 8009516:	609a      	str	r2, [r3, #8]
 8009518:	1f32      	subs	r2, r6, #4
 800951a:	2a24      	cmp	r2, #36	; 0x24
 800951c:	d825      	bhi.n	800956a <_realloc_r+0x232>
 800951e:	2a13      	cmp	r2, #19
 8009520:	d908      	bls.n	8009534 <_realloc_r+0x1fc>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	2a1b      	cmp	r2, #27
 8009526:	60ab      	str	r3, [r5, #8]
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	60eb      	str	r3, [r5, #12]
 800952c:	d80a      	bhi.n	8009544 <_realloc_r+0x20c>
 800952e:	3408      	adds	r4, #8
 8009530:	f105 0010 	add.w	r0, r5, #16
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	6003      	str	r3, [r0, #0]
 8009538:	6863      	ldr	r3, [r4, #4]
 800953a:	6043      	str	r3, [r0, #4]
 800953c:	68a3      	ldr	r3, [r4, #8]
 800953e:	6083      	str	r3, [r0, #8]
 8009540:	46a9      	mov	r9, r5
 8009542:	e75b      	b.n	80093fc <_realloc_r+0xc4>
 8009544:	68a3      	ldr	r3, [r4, #8]
 8009546:	2a24      	cmp	r2, #36	; 0x24
 8009548:	612b      	str	r3, [r5, #16]
 800954a:	68e3      	ldr	r3, [r4, #12]
 800954c:	bf18      	it	ne
 800954e:	f105 0018 	addne.w	r0, r5, #24
 8009552:	616b      	str	r3, [r5, #20]
 8009554:	bf09      	itett	eq
 8009556:	6923      	ldreq	r3, [r4, #16]
 8009558:	3410      	addne	r4, #16
 800955a:	61ab      	streq	r3, [r5, #24]
 800955c:	6963      	ldreq	r3, [r4, #20]
 800955e:	bf02      	ittt	eq
 8009560:	f105 0020 	addeq.w	r0, r5, #32
 8009564:	61eb      	streq	r3, [r5, #28]
 8009566:	3418      	addeq	r4, #24
 8009568:	e7e4      	b.n	8009534 <_realloc_r+0x1fc>
 800956a:	4621      	mov	r1, r4
 800956c:	f7ff fbd9 	bl	8008d22 <memmove>
 8009570:	e7e6      	b.n	8009540 <_realloc_r+0x208>
 8009572:	45d8      	cmp	r8, fp
 8009574:	dc32      	bgt.n	80095dc <_realloc_r+0x2a4>
 8009576:	4628      	mov	r0, r5
 8009578:	68eb      	ldr	r3, [r5, #12]
 800957a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800957e:	60d3      	str	r3, [r2, #12]
 8009580:	609a      	str	r2, [r3, #8]
 8009582:	1f32      	subs	r2, r6, #4
 8009584:	2a24      	cmp	r2, #36	; 0x24
 8009586:	d825      	bhi.n	80095d4 <_realloc_r+0x29c>
 8009588:	2a13      	cmp	r2, #19
 800958a:	d908      	bls.n	800959e <_realloc_r+0x266>
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	2a1b      	cmp	r2, #27
 8009590:	60ab      	str	r3, [r5, #8]
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	60eb      	str	r3, [r5, #12]
 8009596:	d80a      	bhi.n	80095ae <_realloc_r+0x276>
 8009598:	3408      	adds	r4, #8
 800959a:	f105 0010 	add.w	r0, r5, #16
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	6003      	str	r3, [r0, #0]
 80095a2:	6863      	ldr	r3, [r4, #4]
 80095a4:	6043      	str	r3, [r0, #4]
 80095a6:	68a3      	ldr	r3, [r4, #8]
 80095a8:	6083      	str	r3, [r0, #8]
 80095aa:	465f      	mov	r7, fp
 80095ac:	e7c8      	b.n	8009540 <_realloc_r+0x208>
 80095ae:	68a3      	ldr	r3, [r4, #8]
 80095b0:	2a24      	cmp	r2, #36	; 0x24
 80095b2:	612b      	str	r3, [r5, #16]
 80095b4:	68e3      	ldr	r3, [r4, #12]
 80095b6:	bf18      	it	ne
 80095b8:	f105 0018 	addne.w	r0, r5, #24
 80095bc:	616b      	str	r3, [r5, #20]
 80095be:	bf09      	itett	eq
 80095c0:	6923      	ldreq	r3, [r4, #16]
 80095c2:	3410      	addne	r4, #16
 80095c4:	61ab      	streq	r3, [r5, #24]
 80095c6:	6963      	ldreq	r3, [r4, #20]
 80095c8:	bf02      	ittt	eq
 80095ca:	f105 0020 	addeq.w	r0, r5, #32
 80095ce:	61eb      	streq	r3, [r5, #28]
 80095d0:	3418      	addeq	r4, #24
 80095d2:	e7e4      	b.n	800959e <_realloc_r+0x266>
 80095d4:	4621      	mov	r1, r4
 80095d6:	f7ff fba4 	bl	8008d22 <memmove>
 80095da:	e7e6      	b.n	80095aa <_realloc_r+0x272>
 80095dc:	4611      	mov	r1, r2
 80095de:	4650      	mov	r0, sl
 80095e0:	f7ff f950 	bl	8008884 <_malloc_r>
 80095e4:	4683      	mov	fp, r0
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f43f af6c 	beq.w	80094c4 <_realloc_r+0x18c>
 80095ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80095f0:	f1a0 0208 	sub.w	r2, r0, #8
 80095f4:	f023 0301 	bic.w	r3, r3, #1
 80095f8:	444b      	add	r3, r9
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d105      	bne.n	800960a <_realloc_r+0x2d2>
 80095fe:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009602:	f027 0703 	bic.w	r7, r7, #3
 8009606:	4437      	add	r7, r6
 8009608:	e6f8      	b.n	80093fc <_realloc_r+0xc4>
 800960a:	1f32      	subs	r2, r6, #4
 800960c:	2a24      	cmp	r2, #36	; 0x24
 800960e:	d831      	bhi.n	8009674 <_realloc_r+0x33c>
 8009610:	2a13      	cmp	r2, #19
 8009612:	d92c      	bls.n	800966e <_realloc_r+0x336>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	2a1b      	cmp	r2, #27
 8009618:	6003      	str	r3, [r0, #0]
 800961a:	6863      	ldr	r3, [r4, #4]
 800961c:	6043      	str	r3, [r0, #4]
 800961e:	d811      	bhi.n	8009644 <_realloc_r+0x30c>
 8009620:	f104 0208 	add.w	r2, r4, #8
 8009624:	f100 0308 	add.w	r3, r0, #8
 8009628:	6811      	ldr	r1, [r2, #0]
 800962a:	6019      	str	r1, [r3, #0]
 800962c:	6851      	ldr	r1, [r2, #4]
 800962e:	6059      	str	r1, [r3, #4]
 8009630:	6892      	ldr	r2, [r2, #8]
 8009632:	609a      	str	r2, [r3, #8]
 8009634:	4621      	mov	r1, r4
 8009636:	4650      	mov	r0, sl
 8009638:	f7fe fe7e 	bl	8008338 <_free_r>
 800963c:	e742      	b.n	80094c4 <_realloc_r+0x18c>
 800963e:	bf00      	nop
 8009640:	20000444 	.word	0x20000444
 8009644:	68a3      	ldr	r3, [r4, #8]
 8009646:	2a24      	cmp	r2, #36	; 0x24
 8009648:	6083      	str	r3, [r0, #8]
 800964a:	68e3      	ldr	r3, [r4, #12]
 800964c:	bf18      	it	ne
 800964e:	f104 0210 	addne.w	r2, r4, #16
 8009652:	60c3      	str	r3, [r0, #12]
 8009654:	bf09      	itett	eq
 8009656:	6923      	ldreq	r3, [r4, #16]
 8009658:	f100 0310 	addne.w	r3, r0, #16
 800965c:	6103      	streq	r3, [r0, #16]
 800965e:	6961      	ldreq	r1, [r4, #20]
 8009660:	bf02      	ittt	eq
 8009662:	f104 0218 	addeq.w	r2, r4, #24
 8009666:	f100 0318 	addeq.w	r3, r0, #24
 800966a:	6141      	streq	r1, [r0, #20]
 800966c:	e7dc      	b.n	8009628 <_realloc_r+0x2f0>
 800966e:	4603      	mov	r3, r0
 8009670:	4622      	mov	r2, r4
 8009672:	e7d9      	b.n	8009628 <_realloc_r+0x2f0>
 8009674:	4621      	mov	r1, r4
 8009676:	f7ff fb54 	bl	8008d22 <memmove>
 800967a:	e7db      	b.n	8009634 <_realloc_r+0x2fc>
 800967c:	4637      	mov	r7, r6
 800967e:	e6bd      	b.n	80093fc <_realloc_r+0xc4>
 8009680:	4317      	orrs	r7, r2
 8009682:	f8c9 7004 	str.w	r7, [r9, #4]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	f042 0201 	orr.w	r2, r2, #1
 800968c:	605a      	str	r2, [r3, #4]
 800968e:	e6d1      	b.n	8009434 <_realloc_r+0xfc>

08009690 <frexp>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	4616      	mov	r6, r2
 8009694:	2700      	movs	r7, #0
 8009696:	6037      	str	r7, [r6, #0]
 8009698:	4f14      	ldr	r7, [pc, #80]	; (80096ec <frexp+0x5c>)
 800969a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800969e:	42bb      	cmp	r3, r7
 80096a0:	4604      	mov	r4, r0
 80096a2:	460d      	mov	r5, r1
 80096a4:	460a      	mov	r2, r1
 80096a6:	dc1e      	bgt.n	80096e6 <frexp+0x56>
 80096a8:	4607      	mov	r7, r0
 80096aa:	431f      	orrs	r7, r3
 80096ac:	d01b      	beq.n	80096e6 <frexp+0x56>
 80096ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096b2:	da0a      	bge.n	80096ca <frexp+0x3a>
 80096b4:	2200      	movs	r2, #0
 80096b6:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <frexp+0x60>)
 80096b8:	f7f6 ff0e 	bl	80004d8 <__aeabi_dmul>
 80096bc:	460a      	mov	r2, r1
 80096be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096c2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80096c6:	4604      	mov	r4, r0
 80096c8:	6031      	str	r1, [r6, #0]
 80096ca:	6831      	ldr	r1, [r6, #0]
 80096cc:	151b      	asrs	r3, r3, #20
 80096ce:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80096d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80096d6:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80096da:	440b      	add	r3, r1
 80096dc:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80096e0:	6033      	str	r3, [r6, #0]
 80096e2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80096e6:	4620      	mov	r0, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ec:	7fefffff 	.word	0x7fefffff
 80096f0:	43500000 	.word	0x43500000

080096f4 <_sbrk_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	2300      	movs	r3, #0
 80096f8:	4c05      	ldr	r4, [pc, #20]	; (8009710 <_sbrk_r+0x1c>)
 80096fa:	4605      	mov	r5, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	f7f8 fff4 	bl	80026ec <_sbrk>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_sbrk_r+0x1a>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	b103      	cbz	r3, 800970e <_sbrk_r+0x1a>
 800970c:	602b      	str	r3, [r5, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	20000b6c 	.word	0x20000b6c

08009714 <__sread>:
 8009714:	b510      	push	{r4, lr}
 8009716:	460c      	mov	r4, r1
 8009718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971c:	f000 fb0e 	bl	8009d3c <_read_r>
 8009720:	2800      	cmp	r0, #0
 8009722:	bfab      	itete	ge
 8009724:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8009726:	89a3      	ldrhlt	r3, [r4, #12]
 8009728:	181b      	addge	r3, r3, r0
 800972a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800972e:	bfac      	ite	ge
 8009730:	6523      	strge	r3, [r4, #80]	; 0x50
 8009732:	81a3      	strhlt	r3, [r4, #12]
 8009734:	bd10      	pop	{r4, pc}

08009736 <__swrite>:
 8009736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973a:	461f      	mov	r7, r3
 800973c:	898b      	ldrh	r3, [r1, #12]
 800973e:	4605      	mov	r5, r0
 8009740:	05db      	lsls	r3, r3, #23
 8009742:	460c      	mov	r4, r1
 8009744:	4616      	mov	r6, r2
 8009746:	d505      	bpl.n	8009754 <__swrite+0x1e>
 8009748:	2302      	movs	r3, #2
 800974a:	2200      	movs	r2, #0
 800974c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009750:	f000 fad0 	bl	8009cf4 <_lseek_r>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	4632      	mov	r2, r6
 8009758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009762:	463b      	mov	r3, r7
 8009764:	4628      	mov	r0, r5
 8009766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800976a:	f000 b92b 	b.w	80099c4 <_write_r>

0800976e <__sseek>:
 800976e:	b510      	push	{r4, lr}
 8009770:	460c      	mov	r4, r1
 8009772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009776:	f000 fabd 	bl	8009cf4 <_lseek_r>
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	bf15      	itete	ne
 8009780:	6520      	strne	r0, [r4, #80]	; 0x50
 8009782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800978a:	81a3      	strheq	r3, [r4, #12]
 800978c:	bf18      	it	ne
 800978e:	81a3      	strhne	r3, [r4, #12]
 8009790:	bd10      	pop	{r4, pc}

08009792 <__sclose>:
 8009792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009796:	f000 b9ab 	b.w	8009af0 <_close_r>

0800979a <strncpy>:
 800979a:	b570      	push	{r4, r5, r6, lr}
 800979c:	4604      	mov	r4, r0
 800979e:	3901      	subs	r1, #1
 80097a0:	b902      	cbnz	r2, 80097a4 <strncpy+0xa>
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	4623      	mov	r3, r4
 80097a6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80097aa:	1e56      	subs	r6, r2, #1
 80097ac:	f803 5b01 	strb.w	r5, [r3], #1
 80097b0:	b92d      	cbnz	r5, 80097be <strncpy+0x24>
 80097b2:	4414      	add	r4, r2
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	d0f4      	beq.n	80097a2 <strncpy+0x8>
 80097b8:	f803 5b01 	strb.w	r5, [r3], #1
 80097bc:	e7fa      	b.n	80097b4 <strncpy+0x1a>
 80097be:	461c      	mov	r4, r3
 80097c0:	4632      	mov	r2, r6
 80097c2:	e7ed      	b.n	80097a0 <strncpy+0x6>

080097c4 <__ssprint_r>:
 80097c4:	6893      	ldr	r3, [r2, #8]
 80097c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ca:	4681      	mov	r9, r0
 80097cc:	460c      	mov	r4, r1
 80097ce:	4616      	mov	r6, r2
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d05e      	beq.n	8009892 <__ssprint_r+0xce>
 80097d4:	f04f 0b00 	mov.w	fp, #0
 80097d8:	465f      	mov	r7, fp
 80097da:	f8d2 a000 	ldr.w	sl, [r2]
 80097de:	b357      	cbz	r7, 8009836 <__ssprint_r+0x72>
 80097e0:	68a3      	ldr	r3, [r4, #8]
 80097e2:	429f      	cmp	r7, r3
 80097e4:	d340      	bcc.n	8009868 <__ssprint_r+0xa4>
 80097e6:	89a2      	ldrh	r2, [r4, #12]
 80097e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097ec:	d03c      	beq.n	8009868 <__ssprint_r+0xa4>
 80097ee:	2302      	movs	r3, #2
 80097f0:	6825      	ldr	r5, [r4, #0]
 80097f2:	6921      	ldr	r1, [r4, #16]
 80097f4:	eba5 0801 	sub.w	r8, r5, r1
 80097f8:	6965      	ldr	r5, [r4, #20]
 80097fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097fe:	fb95 f5f3 	sdiv	r5, r5, r3
 8009802:	f108 0301 	add.w	r3, r8, #1
 8009806:	443b      	add	r3, r7
 8009808:	429d      	cmp	r5, r3
 800980a:	bf38      	it	cc
 800980c:	461d      	movcc	r5, r3
 800980e:	0553      	lsls	r3, r2, #21
 8009810:	d544      	bpl.n	800989c <__ssprint_r+0xd8>
 8009812:	4629      	mov	r1, r5
 8009814:	4648      	mov	r0, r9
 8009816:	f7ff f835 	bl	8008884 <_malloc_r>
 800981a:	b988      	cbnz	r0, 8009840 <__ssprint_r+0x7c>
 800981c:	230c      	movs	r3, #12
 800981e:	f8c9 3000 	str.w	r3, [r9]
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	2300      	movs	r3, #0
 8009830:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8009834:	e02f      	b.n	8009896 <__ssprint_r+0xd2>
 8009836:	e9da b700 	ldrd	fp, r7, [sl]
 800983a:	f10a 0a08 	add.w	sl, sl, #8
 800983e:	e7ce      	b.n	80097de <__ssprint_r+0x1a>
 8009840:	4642      	mov	r2, r8
 8009842:	6921      	ldr	r1, [r4, #16]
 8009844:	9001      	str	r0, [sp, #4]
 8009846:	f7ff fa61 	bl	8008d0c <memcpy>
 800984a:	89a2      	ldrh	r2, [r4, #12]
 800984c:	9b01      	ldr	r3, [sp, #4]
 800984e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009856:	81a2      	strh	r2, [r4, #12]
 8009858:	6123      	str	r3, [r4, #16]
 800985a:	4443      	add	r3, r8
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	463b      	mov	r3, r7
 8009860:	6165      	str	r5, [r4, #20]
 8009862:	eba5 0508 	sub.w	r5, r5, r8
 8009866:	60a5      	str	r5, [r4, #8]
 8009868:	42bb      	cmp	r3, r7
 800986a:	bf28      	it	cs
 800986c:	463b      	movcs	r3, r7
 800986e:	4659      	mov	r1, fp
 8009870:	461a      	mov	r2, r3
 8009872:	6820      	ldr	r0, [r4, #0]
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	f7ff fa54 	bl	8008d22 <memmove>
 800987a:	68a2      	ldr	r2, [r4, #8]
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	60a2      	str	r2, [r4, #8]
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	4413      	add	r3, r2
 8009886:	6023      	str	r3, [r4, #0]
 8009888:	68b3      	ldr	r3, [r6, #8]
 800988a:	1bdf      	subs	r7, r3, r7
 800988c:	60b7      	str	r7, [r6, #8]
 800988e:	2f00      	cmp	r7, #0
 8009890:	d1d1      	bne.n	8009836 <__ssprint_r+0x72>
 8009892:	2000      	movs	r0, #0
 8009894:	6070      	str	r0, [r6, #4]
 8009896:	b003      	add	sp, #12
 8009898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989c:	462a      	mov	r2, r5
 800989e:	4648      	mov	r0, r9
 80098a0:	f7ff fd4a 	bl	8009338 <_realloc_r>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d1d6      	bne.n	8009858 <__ssprint_r+0x94>
 80098aa:	6921      	ldr	r1, [r4, #16]
 80098ac:	4648      	mov	r0, r9
 80098ae:	f7fe fd43 	bl	8008338 <_free_r>
 80098b2:	e7b3      	b.n	800981c <__ssprint_r+0x58>

080098b4 <sysconf>:
 80098b4:	2808      	cmp	r0, #8
 80098b6:	b508      	push	{r3, lr}
 80098b8:	d006      	beq.n	80098c8 <sysconf+0x14>
 80098ba:	f7fa ffab 	bl	8004814 <__errno>
 80098be:	2316      	movs	r3, #22
 80098c0:	6003      	str	r3, [r0, #0]
 80098c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098c6:	bd08      	pop	{r3, pc}
 80098c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80098cc:	e7fb      	b.n	80098c6 <sysconf+0x12>

080098ce <__sprint_r>:
 80098ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d2:	6893      	ldr	r3, [r2, #8]
 80098d4:	4680      	mov	r8, r0
 80098d6:	460f      	mov	r7, r1
 80098d8:	4614      	mov	r4, r2
 80098da:	b91b      	cbnz	r3, 80098e4 <__sprint_r+0x16>
 80098dc:	4618      	mov	r0, r3
 80098de:	6053      	str	r3, [r2, #4]
 80098e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80098e6:	049d      	lsls	r5, r3, #18
 80098e8:	d520      	bpl.n	800992c <__sprint_r+0x5e>
 80098ea:	6815      	ldr	r5, [r2, #0]
 80098ec:	68a0      	ldr	r0, [r4, #8]
 80098ee:	3508      	adds	r5, #8
 80098f0:	b918      	cbnz	r0, 80098fa <__sprint_r+0x2c>
 80098f2:	2300      	movs	r3, #0
 80098f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80098f8:	e7f2      	b.n	80098e0 <__sprint_r+0x12>
 80098fa:	f04f 0900 	mov.w	r9, #0
 80098fe:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8009902:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8009906:	45ca      	cmp	sl, r9
 8009908:	dc05      	bgt.n	8009916 <__sprint_r+0x48>
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	f026 0603 	bic.w	r6, r6, #3
 8009910:	1b9e      	subs	r6, r3, r6
 8009912:	60a6      	str	r6, [r4, #8]
 8009914:	e7ea      	b.n	80098ec <__sprint_r+0x1e>
 8009916:	463a      	mov	r2, r7
 8009918:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800991c:	4640      	mov	r0, r8
 800991e:	f000 f98f 	bl	8009c40 <_fputwc_r>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d0e5      	beq.n	80098f2 <__sprint_r+0x24>
 8009926:	f109 0901 	add.w	r9, r9, #1
 800992a:	e7ec      	b.n	8009906 <__sprint_r+0x38>
 800992c:	f7fe fdc0 	bl	80084b0 <__sfvwrite_r>
 8009930:	e7df      	b.n	80098f2 <__sprint_r+0x24>

08009932 <__swbuf_r>:
 8009932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009934:	460d      	mov	r5, r1
 8009936:	4614      	mov	r4, r2
 8009938:	4606      	mov	r6, r0
 800993a:	b118      	cbz	r0, 8009944 <__swbuf_r+0x12>
 800993c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800993e:	b90b      	cbnz	r3, 8009944 <__swbuf_r+0x12>
 8009940:	f7fe fc6a 	bl	8008218 <__sinit>
 8009944:	69a3      	ldr	r3, [r4, #24]
 8009946:	60a3      	str	r3, [r4, #8]
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	0719      	lsls	r1, r3, #28
 800994c:	d528      	bpl.n	80099a0 <__swbuf_r+0x6e>
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	b333      	cbz	r3, 80099a0 <__swbuf_r+0x6e>
 8009952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009956:	b2ed      	uxtb	r5, r5
 8009958:	049a      	lsls	r2, r3, #18
 800995a:	462f      	mov	r7, r5
 800995c:	d52a      	bpl.n	80099b4 <__swbuf_r+0x82>
 800995e:	6923      	ldr	r3, [r4, #16]
 8009960:	6820      	ldr	r0, [r4, #0]
 8009962:	1ac0      	subs	r0, r0, r3
 8009964:	6963      	ldr	r3, [r4, #20]
 8009966:	4283      	cmp	r3, r0
 8009968:	dc04      	bgt.n	8009974 <__swbuf_r+0x42>
 800996a:	4621      	mov	r1, r4
 800996c:	4630      	mov	r0, r6
 800996e:	f7fe fbe7 	bl	8008140 <_fflush_r>
 8009972:	b9d8      	cbnz	r0, 80099ac <__swbuf_r+0x7a>
 8009974:	68a3      	ldr	r3, [r4, #8]
 8009976:	3001      	adds	r0, #1
 8009978:	3b01      	subs	r3, #1
 800997a:	60a3      	str	r3, [r4, #8]
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	1c5a      	adds	r2, r3, #1
 8009980:	6022      	str	r2, [r4, #0]
 8009982:	701d      	strb	r5, [r3, #0]
 8009984:	6963      	ldr	r3, [r4, #20]
 8009986:	4283      	cmp	r3, r0
 8009988:	d004      	beq.n	8009994 <__swbuf_r+0x62>
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	07db      	lsls	r3, r3, #31
 800998e:	d50f      	bpl.n	80099b0 <__swbuf_r+0x7e>
 8009990:	2d0a      	cmp	r5, #10
 8009992:	d10d      	bne.n	80099b0 <__swbuf_r+0x7e>
 8009994:	4621      	mov	r1, r4
 8009996:	4630      	mov	r0, r6
 8009998:	f7fe fbd2 	bl	8008140 <_fflush_r>
 800999c:	b140      	cbz	r0, 80099b0 <__swbuf_r+0x7e>
 800999e:	e005      	b.n	80099ac <__swbuf_r+0x7a>
 80099a0:	4621      	mov	r1, r4
 80099a2:	4630      	mov	r0, r6
 80099a4:	f7fd fca4 	bl	80072f0 <__swsetup_r>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d0d2      	beq.n	8009952 <__swbuf_r+0x20>
 80099ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80099b0:	4638      	mov	r0, r7
 80099b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099c0:	6663      	str	r3, [r4, #100]	; 0x64
 80099c2:	e7cc      	b.n	800995e <__swbuf_r+0x2c>

080099c4 <_write_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4605      	mov	r5, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	2200      	movs	r2, #0
 80099ce:	4c05      	ldr	r4, [pc, #20]	; (80099e4 <_write_r+0x20>)
 80099d0:	6022      	str	r2, [r4, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	f7f8 fe3d 	bl	8002652 <_write>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d102      	bne.n	80099e2 <_write_r+0x1e>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	b103      	cbz	r3, 80099e2 <_write_r+0x1e>
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	20000b6c 	.word	0x20000b6c

080099e8 <__register_exitproc>:
 80099e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ec:	4c26      	ldr	r4, [pc, #152]	; (8009a88 <__register_exitproc+0xa0>)
 80099ee:	4606      	mov	r6, r0
 80099f0:	6820      	ldr	r0, [r4, #0]
 80099f2:	4698      	mov	r8, r3
 80099f4:	460f      	mov	r7, r1
 80099f6:	4691      	mov	r9, r2
 80099f8:	f7fe fed6 	bl	80087a8 <__retarget_lock_acquire_recursive>
 80099fc:	4b23      	ldr	r3, [pc, #140]	; (8009a8c <__register_exitproc+0xa4>)
 80099fe:	681d      	ldr	r5, [r3, #0]
 8009a00:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8009a04:	b918      	cbnz	r0, 8009a0e <__register_exitproc+0x26>
 8009a06:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8009a0a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8009a0e:	6843      	ldr	r3, [r0, #4]
 8009a10:	2b1f      	cmp	r3, #31
 8009a12:	dd19      	ble.n	8009a48 <__register_exitproc+0x60>
 8009a14:	4b1e      	ldr	r3, [pc, #120]	; (8009a90 <__register_exitproc+0xa8>)
 8009a16:	b933      	cbnz	r3, 8009a26 <__register_exitproc+0x3e>
 8009a18:	6820      	ldr	r0, [r4, #0]
 8009a1a:	f7fe fec6 	bl	80087aa <__retarget_lock_release_recursive>
 8009a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a26:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009a2a:	f3af 8000 	nop.w
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d0f2      	beq.n	8009a18 <__register_exitproc+0x30>
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8009a38:	6042      	str	r2, [r0, #4]
 8009a3a:	6003      	str	r3, [r0, #0]
 8009a3c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8009a40:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8009a44:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8009a48:	6843      	ldr	r3, [r0, #4]
 8009a4a:	b19e      	cbz	r6, 8009a74 <__register_exitproc+0x8c>
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8009a52:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8009a56:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8009a5a:	409a      	lsls	r2, r3
 8009a5c:	4311      	orrs	r1, r2
 8009a5e:	2e02      	cmp	r6, #2
 8009a60:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8009a64:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8009a68:	bf02      	ittt	eq
 8009a6a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8009a6e:	430a      	orreq	r2, r1
 8009a70:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	3302      	adds	r3, #2
 8009a78:	6042      	str	r2, [r0, #4]
 8009a7a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8009a7e:	6820      	ldr	r0, [r4, #0]
 8009a80:	f7fe fe93 	bl	80087aa <__retarget_lock_release_recursive>
 8009a84:	2000      	movs	r0, #0
 8009a86:	e7cc      	b.n	8009a22 <__register_exitproc+0x3a>
 8009a88:	20000440 	.word	0x20000440
 8009a8c:	0800a11c 	.word	0x0800a11c
 8009a90:	00000000 	.word	0x00000000

08009a94 <_calloc_r>:
 8009a94:	b510      	push	{r4, lr}
 8009a96:	4351      	muls	r1, r2
 8009a98:	f7fe fef4 	bl	8008884 <_malloc_r>
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	b198      	cbz	r0, 8009ac8 <_calloc_r+0x34>
 8009aa0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009aa4:	f022 0203 	bic.w	r2, r2, #3
 8009aa8:	3a04      	subs	r2, #4
 8009aaa:	2a24      	cmp	r2, #36	; 0x24
 8009aac:	d81b      	bhi.n	8009ae6 <_calloc_r+0x52>
 8009aae:	2a13      	cmp	r2, #19
 8009ab0:	d917      	bls.n	8009ae2 <_calloc_r+0x4e>
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	2a1b      	cmp	r2, #27
 8009ab6:	e9c0 1100 	strd	r1, r1, [r0]
 8009aba:	d807      	bhi.n	8009acc <_calloc_r+0x38>
 8009abc:	f100 0308 	add.w	r3, r0, #8
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	e9c3 2200 	strd	r2, r2, [r3]
 8009ac6:	609a      	str	r2, [r3, #8]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	bd10      	pop	{r4, pc}
 8009acc:	2a24      	cmp	r2, #36	; 0x24
 8009ace:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8009ad2:	bf11      	iteee	ne
 8009ad4:	f100 0310 	addne.w	r3, r0, #16
 8009ad8:	6101      	streq	r1, [r0, #16]
 8009ada:	f100 0318 	addeq.w	r3, r0, #24
 8009ade:	6141      	streq	r1, [r0, #20]
 8009ae0:	e7ee      	b.n	8009ac0 <_calloc_r+0x2c>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	e7ec      	b.n	8009ac0 <_calloc_r+0x2c>
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	f7fa febe 	bl	8004868 <memset>
 8009aec:	e7ec      	b.n	8009ac8 <_calloc_r+0x34>
	...

08009af0 <_close_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	2300      	movs	r3, #0
 8009af4:	4c05      	ldr	r4, [pc, #20]	; (8009b0c <_close_r+0x1c>)
 8009af6:	4605      	mov	r5, r0
 8009af8:	4608      	mov	r0, r1
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	f7f8 fdc5 	bl	800268a <_close>
 8009b00:	1c43      	adds	r3, r0, #1
 8009b02:	d102      	bne.n	8009b0a <_close_r+0x1a>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	b103      	cbz	r3, 8009b0a <_close_r+0x1a>
 8009b08:	602b      	str	r3, [r5, #0]
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	20000b6c 	.word	0x20000b6c

08009b10 <_fclose_r>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	4606      	mov	r6, r0
 8009b14:	460c      	mov	r4, r1
 8009b16:	b911      	cbnz	r1, 8009b1e <_fclose_r+0xe>
 8009b18:	2500      	movs	r5, #0
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	bd70      	pop	{r4, r5, r6, pc}
 8009b1e:	b118      	cbz	r0, 8009b28 <_fclose_r+0x18>
 8009b20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b22:	b90b      	cbnz	r3, 8009b28 <_fclose_r+0x18>
 8009b24:	f7fe fb78 	bl	8008218 <__sinit>
 8009b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b2a:	07d8      	lsls	r0, r3, #31
 8009b2c:	d405      	bmi.n	8009b3a <_fclose_r+0x2a>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	0599      	lsls	r1, r3, #22
 8009b32:	d402      	bmi.n	8009b3a <_fclose_r+0x2a>
 8009b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b36:	f7fe fe37 	bl	80087a8 <__retarget_lock_acquire_recursive>
 8009b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b3e:	b93b      	cbnz	r3, 8009b50 <_fclose_r+0x40>
 8009b40:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009b42:	f015 0501 	ands.w	r5, r5, #1
 8009b46:	d1e7      	bne.n	8009b18 <_fclose_r+0x8>
 8009b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b4a:	f7fe fe2e 	bl	80087aa <__retarget_lock_release_recursive>
 8009b4e:	e7e4      	b.n	8009b1a <_fclose_r+0xa>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7fe fa66 	bl	8008024 <__sflush_r>
 8009b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	b133      	cbz	r3, 8009b6c <_fclose_r+0x5c>
 8009b5e:	69e1      	ldr	r1, [r4, #28]
 8009b60:	4630      	mov	r0, r6
 8009b62:	4798      	blx	r3
 8009b64:	2800      	cmp	r0, #0
 8009b66:	bfb8      	it	lt
 8009b68:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	061a      	lsls	r2, r3, #24
 8009b70:	d503      	bpl.n	8009b7a <_fclose_r+0x6a>
 8009b72:	6921      	ldr	r1, [r4, #16]
 8009b74:	4630      	mov	r0, r6
 8009b76:	f7fe fbdf 	bl	8008338 <_free_r>
 8009b7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b7c:	b141      	cbz	r1, 8009b90 <_fclose_r+0x80>
 8009b7e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009b82:	4299      	cmp	r1, r3
 8009b84:	d002      	beq.n	8009b8c <_fclose_r+0x7c>
 8009b86:	4630      	mov	r0, r6
 8009b88:	f7fe fbd6 	bl	8008338 <_free_r>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8009b90:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009b92:	b121      	cbz	r1, 8009b9e <_fclose_r+0x8e>
 8009b94:	4630      	mov	r0, r6
 8009b96:	f7fe fbcf 	bl	8008338 <_free_r>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	6463      	str	r3, [r4, #68]	; 0x44
 8009b9e:	f7fe fb23 	bl	80081e8 <__sfp_lock_acquire>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	81a3      	strh	r3, [r4, #12]
 8009ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ba8:	07db      	lsls	r3, r3, #31
 8009baa:	d402      	bmi.n	8009bb2 <_fclose_r+0xa2>
 8009bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bae:	f7fe fdfc 	bl	80087aa <__retarget_lock_release_recursive>
 8009bb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bb4:	f7fe fdf7 	bl	80087a6 <__retarget_lock_close_recursive>
 8009bb8:	f7fe fb1c 	bl	80081f4 <__sfp_lock_release>
 8009bbc:	e7ad      	b.n	8009b1a <_fclose_r+0xa>

08009bbe <__fputwc>:
 8009bbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bc2:	4680      	mov	r8, r0
 8009bc4:	460e      	mov	r6, r1
 8009bc6:	4614      	mov	r4, r2
 8009bc8:	f000 f886 	bl	8009cd8 <__locale_mb_cur_max>
 8009bcc:	2801      	cmp	r0, #1
 8009bce:	d11c      	bne.n	8009c0a <__fputwc+0x4c>
 8009bd0:	1e73      	subs	r3, r6, #1
 8009bd2:	2bfe      	cmp	r3, #254	; 0xfe
 8009bd4:	d819      	bhi.n	8009c0a <__fputwc+0x4c>
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	f88d 6004 	strb.w	r6, [sp, #4]
 8009bdc:	2700      	movs	r7, #0
 8009bde:	f10d 0904 	add.w	r9, sp, #4
 8009be2:	42af      	cmp	r7, r5
 8009be4:	d020      	beq.n	8009c28 <__fputwc+0x6a>
 8009be6:	68a3      	ldr	r3, [r4, #8]
 8009be8:	f817 1009 	ldrb.w	r1, [r7, r9]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	60a3      	str	r3, [r4, #8]
 8009bf2:	da04      	bge.n	8009bfe <__fputwc+0x40>
 8009bf4:	69a2      	ldr	r2, [r4, #24]
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	db1a      	blt.n	8009c30 <__fputwc+0x72>
 8009bfa:	290a      	cmp	r1, #10
 8009bfc:	d018      	beq.n	8009c30 <__fputwc+0x72>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	1c5a      	adds	r2, r3, #1
 8009c02:	6022      	str	r2, [r4, #0]
 8009c04:	7019      	strb	r1, [r3, #0]
 8009c06:	3701      	adds	r7, #1
 8009c08:	e7eb      	b.n	8009be2 <__fputwc+0x24>
 8009c0a:	4632      	mov	r2, r6
 8009c0c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8009c10:	a901      	add	r1, sp, #4
 8009c12:	4640      	mov	r0, r8
 8009c14:	f000 f8a4 	bl	8009d60 <_wcrtomb_r>
 8009c18:	1c42      	adds	r2, r0, #1
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	d1de      	bne.n	8009bdc <__fputwc+0x1e>
 8009c1e:	4606      	mov	r6, r0
 8009c20:	89a3      	ldrh	r3, [r4, #12]
 8009c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	4630      	mov	r0, r6
 8009c2a:	b003      	add	sp, #12
 8009c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c30:	4622      	mov	r2, r4
 8009c32:	4640      	mov	r0, r8
 8009c34:	f7ff fe7d 	bl	8009932 <__swbuf_r>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d1e4      	bne.n	8009c06 <__fputwc+0x48>
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	e7f3      	b.n	8009c28 <__fputwc+0x6a>

08009c40 <_fputwc_r>:
 8009c40:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009c42:	b570      	push	{r4, r5, r6, lr}
 8009c44:	07db      	lsls	r3, r3, #31
 8009c46:	4605      	mov	r5, r0
 8009c48:	460e      	mov	r6, r1
 8009c4a:	4614      	mov	r4, r2
 8009c4c:	d405      	bmi.n	8009c5a <_fputwc_r+0x1a>
 8009c4e:	8993      	ldrh	r3, [r2, #12]
 8009c50:	0598      	lsls	r0, r3, #22
 8009c52:	d402      	bmi.n	8009c5a <_fputwc_r+0x1a>
 8009c54:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8009c56:	f7fe fda7 	bl	80087a8 <__retarget_lock_acquire_recursive>
 8009c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5e:	0499      	lsls	r1, r3, #18
 8009c60:	d406      	bmi.n	8009c70 <_fputwc_r+0x30>
 8009c62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c66:	81a3      	strh	r3, [r4, #12]
 8009c68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c6e:	6663      	str	r3, [r4, #100]	; 0x64
 8009c70:	4622      	mov	r2, r4
 8009c72:	4628      	mov	r0, r5
 8009c74:	4631      	mov	r1, r6
 8009c76:	f7ff ffa2 	bl	8009bbe <__fputwc>
 8009c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	07da      	lsls	r2, r3, #31
 8009c80:	d405      	bmi.n	8009c8e <_fputwc_r+0x4e>
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	059b      	lsls	r3, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_fputwc_r+0x4e>
 8009c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c8a:	f7fe fd8e 	bl	80087aa <__retarget_lock_release_recursive>
 8009c8e:	4628      	mov	r0, r5
 8009c90:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c94 <_fstat_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	2300      	movs	r3, #0
 8009c98:	4c06      	ldr	r4, [pc, #24]	; (8009cb4 <_fstat_r+0x20>)
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	f7f8 fcfd 	bl	80026a0 <_fstat>
 8009ca6:	1c43      	adds	r3, r0, #1
 8009ca8:	d102      	bne.n	8009cb0 <_fstat_r+0x1c>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	b103      	cbz	r3, 8009cb0 <_fstat_r+0x1c>
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	bd38      	pop	{r3, r4, r5, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000b6c 	.word	0x20000b6c

08009cb8 <_isatty_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	2300      	movs	r3, #0
 8009cbc:	4c05      	ldr	r4, [pc, #20]	; (8009cd4 <_isatty_r+0x1c>)
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	6023      	str	r3, [r4, #0]
 8009cc4:	f7f8 fcfb 	bl	80026be <_isatty>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d102      	bne.n	8009cd2 <_isatty_r+0x1a>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	b103      	cbz	r3, 8009cd2 <_isatty_r+0x1a>
 8009cd0:	602b      	str	r3, [r5, #0]
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	20000b6c 	.word	0x20000b6c

08009cd8 <__locale_mb_cur_max>:
 8009cd8:	4b04      	ldr	r3, [pc, #16]	; (8009cec <__locale_mb_cur_max+0x14>)
 8009cda:	4a05      	ldr	r2, [pc, #20]	; (8009cf0 <__locale_mb_cur_max+0x18>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bf08      	it	eq
 8009ce4:	4613      	moveq	r3, r2
 8009ce6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009cea:	4770      	bx	lr
 8009cec:	20000014 	.word	0x20000014
 8009cf0:	20000854 	.word	0x20000854

08009cf4 <_lseek_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	4c05      	ldr	r4, [pc, #20]	; (8009d14 <_lseek_r+0x20>)
 8009d00:	6022      	str	r2, [r4, #0]
 8009d02:	461a      	mov	r2, r3
 8009d04:	f7f8 fce5 	bl	80026d2 <_lseek>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_lseek_r+0x1e>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_lseek_r+0x1e>
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	20000b6c 	.word	0x20000b6c

08009d18 <__ascii_mbtowc>:
 8009d18:	b082      	sub	sp, #8
 8009d1a:	b901      	cbnz	r1, 8009d1e <__ascii_mbtowc+0x6>
 8009d1c:	a901      	add	r1, sp, #4
 8009d1e:	b142      	cbz	r2, 8009d32 <__ascii_mbtowc+0x1a>
 8009d20:	b14b      	cbz	r3, 8009d36 <__ascii_mbtowc+0x1e>
 8009d22:	7813      	ldrb	r3, [r2, #0]
 8009d24:	600b      	str	r3, [r1, #0]
 8009d26:	7812      	ldrb	r2, [r2, #0]
 8009d28:	1c10      	adds	r0, r2, #0
 8009d2a:	bf18      	it	ne
 8009d2c:	2001      	movne	r0, #1
 8009d2e:	b002      	add	sp, #8
 8009d30:	4770      	bx	lr
 8009d32:	4610      	mov	r0, r2
 8009d34:	e7fb      	b.n	8009d2e <__ascii_mbtowc+0x16>
 8009d36:	f06f 0001 	mvn.w	r0, #1
 8009d3a:	e7f8      	b.n	8009d2e <__ascii_mbtowc+0x16>

08009d3c <_read_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4605      	mov	r5, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	4611      	mov	r1, r2
 8009d44:	2200      	movs	r2, #0
 8009d46:	4c05      	ldr	r4, [pc, #20]	; (8009d5c <_read_r+0x20>)
 8009d48:	6022      	str	r2, [r4, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f7f8 fc64 	bl	8002618 <_read>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_read_r+0x1e>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_read_r+0x1e>
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	20000b6c 	.word	0x20000b6c

08009d60 <_wcrtomb_r>:
 8009d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d62:	4c0f      	ldr	r4, [pc, #60]	; (8009da0 <_wcrtomb_r+0x40>)
 8009d64:	b085      	sub	sp, #20
 8009d66:	6824      	ldr	r4, [r4, #0]
 8009d68:	4605      	mov	r5, r0
 8009d6a:	461e      	mov	r6, r3
 8009d6c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8009d6e:	b981      	cbnz	r1, 8009d92 <_wcrtomb_r+0x32>
 8009d70:	4a0c      	ldr	r2, [pc, #48]	; (8009da4 <_wcrtomb_r+0x44>)
 8009d72:	2c00      	cmp	r4, #0
 8009d74:	bf08      	it	eq
 8009d76:	4614      	moveq	r4, r2
 8009d78:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8009d7c:	460a      	mov	r2, r1
 8009d7e:	a901      	add	r1, sp, #4
 8009d80:	47a0      	blx	r4
 8009d82:	1c43      	adds	r3, r0, #1
 8009d84:	bf01      	itttt	eq
 8009d86:	2300      	moveq	r3, #0
 8009d88:	6033      	streq	r3, [r6, #0]
 8009d8a:	238a      	moveq	r3, #138	; 0x8a
 8009d8c:	602b      	streq	r3, [r5, #0]
 8009d8e:	b005      	add	sp, #20
 8009d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d92:	4f04      	ldr	r7, [pc, #16]	; (8009da4 <_wcrtomb_r+0x44>)
 8009d94:	2c00      	cmp	r4, #0
 8009d96:	bf08      	it	eq
 8009d98:	463c      	moveq	r4, r7
 8009d9a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8009d9e:	e7ef      	b.n	8009d80 <_wcrtomb_r+0x20>
 8009da0:	20000014 	.word	0x20000014
 8009da4:	20000854 	.word	0x20000854

08009da8 <__ascii_wctomb>:
 8009da8:	b149      	cbz	r1, 8009dbe <__ascii_wctomb+0x16>
 8009daa:	2aff      	cmp	r2, #255	; 0xff
 8009dac:	bf8b      	itete	hi
 8009dae:	238a      	movhi	r3, #138	; 0x8a
 8009db0:	700a      	strbls	r2, [r1, #0]
 8009db2:	6003      	strhi	r3, [r0, #0]
 8009db4:	2001      	movls	r0, #1
 8009db6:	bf88      	it	hi
 8009db8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009dbc:	4770      	bx	lr
 8009dbe:	4608      	mov	r0, r1
 8009dc0:	4770      	bx	lr
	...

08009dc4 <_init>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	bf00      	nop
 8009dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dca:	bc08      	pop	{r3}
 8009dcc:	469e      	mov	lr, r3
 8009dce:	4770      	bx	lr

08009dd0 <_fini>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	bf00      	nop
 8009dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd6:	bc08      	pop	{r3}
 8009dd8:	469e      	mov	lr, r3
 8009dda:	4770      	bx	lr
