
TEA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af38  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800b048  0800b048  0001b048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3f0  0800b3f0  00020b28  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3f0  0800b3f0  0001b3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3f8  0800b3f8  00020b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b3f8  0800b3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b400  0800b400  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b28  20000000  0800b404  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b8  20000b28  0800bf2c  00020b28  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  0800bf2c  00021de0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020b28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cae7  00000000  00000000  00020b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c23  00000000  00000000  0003d638  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e0  00000000  00000000  00041260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001538  00000000  00000000  00042940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001962b  00000000  00000000  00043e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013668  00000000  00000000  0005d4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cc2a  00000000  00000000  00070b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed735  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071d4  00000000  00000000  000ed7b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000b28 	.word	0x20000b28
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b030 	.word	0x0800b030

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000b2c 	.word	0x20000b2c
 800014c:	0800b030 	.word	0x0800b030

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b974 	b.w	8000d88 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	468c      	mov	ip, r1
 8000abe:	4604      	mov	r4, r0
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d14b      	bne.n	8000b5e <__udivmoddi4+0xa6>
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	4615      	mov	r5, r2
 8000aca:	d967      	bls.n	8000b9c <__udivmoddi4+0xe4>
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	b14a      	cbz	r2, 8000ae6 <__udivmoddi4+0x2e>
 8000ad2:	f1c2 0720 	rsb	r7, r2, #32
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	fa20 f707 	lsr.w	r7, r0, r7
 8000ade:	4095      	lsls	r5, r2
 8000ae0:	ea47 0c03 	orr.w	ip, r7, r3
 8000ae4:	4094      	lsls	r4, r2
 8000ae6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aea:	fbbc f7fe 	udiv	r7, ip, lr
 8000aee:	fa1f f885 	uxth.w	r8, r5
 8000af2:	fb0e c317 	mls	r3, lr, r7, ip
 8000af6:	fb07 f908 	mul.w	r9, r7, r8
 8000afa:	0c21      	lsrs	r1, r4, #16
 8000afc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b00:	4599      	cmp	r9, r3
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x60>
 8000b04:	18eb      	adds	r3, r5, r3
 8000b06:	f107 31ff 	add.w	r1, r7, #4294967295
 8000b0a:	f080 811c 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b0e:	4599      	cmp	r9, r3
 8000b10:	f240 8119 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	3f02      	subs	r7, #2
 8000b16:	442b      	add	r3, r5
 8000b18:	eba3 0309 	sub.w	r3, r3, r9
 8000b1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b24:	fb00 f108 	mul.w	r1, r0, r8
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2e:	42a1      	cmp	r1, r4
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0x8e>
 8000b32:	192c      	adds	r4, r5, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b38:	f080 8107 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b3c:	42a1      	cmp	r1, r4
 8000b3e:	f240 8104 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	3802      	subs	r0, #2
 8000b44:	442c      	add	r4, r5
 8000b46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4a:	2700      	movs	r7, #0
 8000b4c:	1a64      	subs	r4, r4, r1
 8000b4e:	b11e      	cbz	r6, 8000b58 <__udivmoddi4+0xa0>
 8000b50:	2300      	movs	r3, #0
 8000b52:	40d4      	lsrs	r4, r2
 8000b54:	e9c6 4300 	strd	r4, r3, [r6]
 8000b58:	4639      	mov	r1, r7
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xbe>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f000 80ec 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b68:	2700      	movs	r7, #0
 8000b6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000b6e:	4638      	mov	r0, r7
 8000b70:	4639      	mov	r1, r7
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f783 	clz	r7, r3
 8000b7a:	2f00      	cmp	r7, #0
 8000b7c:	d148      	bne.n	8000c10 <__udivmoddi4+0x158>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd0>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80fb 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469c      	mov	ip, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa0>
 8000b96:	e9c6 4c00 	strd	r4, ip, [r6]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xe8>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 808f 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000baa:	2701      	movs	r7, #1
 8000bac:	1b49      	subs	r1, r1, r5
 8000bae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bb2:	fa1f f985 	uxth.w	r9, r5
 8000bb6:	fbb1 fef8 	udiv	lr, r1, r8
 8000bba:	fb08 111e 	mls	r1, r8, lr, r1
 8000bbe:	fb09 f00e 	mul.w	r0, r9, lr
 8000bc2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000bc6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bce:	18eb      	adds	r3, r5, r3
 8000bd0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	f200 80cd 	bhi.w	8000d76 <__udivmoddi4+0x2be>
 8000bdc:	468e      	mov	lr, r1
 8000bde:	1a1b      	subs	r3, r3, r0
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	fb09 f900 	mul.w	r9, r9, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf2:	45a1      	cmp	r9, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x14e>
 8000bf6:	192c      	adds	r4, r5, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfc:	d202      	bcs.n	8000c04 <__udivmoddi4+0x14c>
 8000bfe:	45a1      	cmp	r9, r4
 8000c00:	f200 80b6 	bhi.w	8000d70 <__udivmoddi4+0x2b8>
 8000c04:	4618      	mov	r0, r3
 8000c06:	eba4 0409 	sub.w	r4, r4, r9
 8000c0a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c0e:	e79e      	b.n	8000b4e <__udivmoddi4+0x96>
 8000c10:	f1c7 0520 	rsb	r5, r7, #32
 8000c14:	40bb      	lsls	r3, r7
 8000c16:	fa22 fc05 	lsr.w	ip, r2, r5
 8000c1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1e:	fa21 f405 	lsr.w	r4, r1, r5
 8000c22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c26:	fbb4 f9fe 	udiv	r9, r4, lr
 8000c2a:	fa1f f88c 	uxth.w	r8, ip
 8000c2e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000c32:	fa20 f305 	lsr.w	r3, r0, r5
 8000c36:	40b9      	lsls	r1, r7
 8000c38:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	0c0b      	lsrs	r3, r1, #16
 8000c40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c44:	45a2      	cmp	sl, r4
 8000c46:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4a:	fa00 f307 	lsl.w	r3, r0, r7
 8000c4e:	d90b      	bls.n	8000c68 <__udivmoddi4+0x1b0>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c58:	f080 8088 	bcs.w	8000d6c <__udivmoddi4+0x2b4>
 8000c5c:	45a2      	cmp	sl, r4
 8000c5e:	f240 8085 	bls.w	8000d6c <__udivmoddi4+0x2b4>
 8000c62:	f1a9 0902 	sub.w	r9, r9, #2
 8000c66:	4464      	add	r4, ip
 8000c68:	eba4 040a 	sub.w	r4, r4, sl
 8000c6c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000c70:	fb0e 4410 	mls	r4, lr, r0, r4
 8000c74:	fb00 fa08 	mul.w	sl, r0, r8
 8000c78:	b289      	uxth	r1, r1
 8000c7a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8a:	d26b      	bcs.n	8000d64 <__udivmoddi4+0x2ac>
 8000c8c:	45a2      	cmp	sl, r4
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0x2ac>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c98:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9c:	eba4 040a 	sub.w	r4, r4, sl
 8000ca0:	454c      	cmp	r4, r9
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d069      	beq.n	8000d82 <__udivmoddi4+0x2ca>
 8000cae:	1a5a      	subs	r2, r3, r1
 8000cb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb4:	fa04 f505 	lsl.w	r5, r4, r5
 8000cb8:	fa22 f307 	lsr.w	r3, r2, r7
 8000cbc:	40fc      	lsrs	r4, r7
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	e747      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000cc8:	4095      	lsls	r5, r2
 8000cca:	f1c2 0320 	rsb	r3, r2, #32
 8000cce:	fa21 f003 	lsr.w	r0, r1, r3
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000cda:	fa1f f985 	uxth.w	r9, r5
 8000cde:	fb08 0017 	mls	r0, r8, r7, r0
 8000ce2:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fb07 fc09 	mul.w	ip, r7, r9
 8000cec:	430b      	orrs	r3, r1
 8000cee:	0c19      	lsrs	r1, r3, #16
 8000cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf4:	458c      	cmp	ip, r1
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x254>
 8000cfc:	1869      	adds	r1, r5, r1
 8000cfe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d02:	d231      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d04:	458c      	cmp	ip, r1
 8000d06:	d92f      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d08:	3f02      	subs	r7, #2
 8000d0a:	4429      	add	r1, r5
 8000d0c:	eba1 010c 	sub.w	r1, r1, ip
 8000d10:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d14:	fb08 1c10 	mls	ip, r8, r0, r1
 8000d18:	fb00 fe09 	mul.w	lr, r0, r9
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d22:	458e      	cmp	lr, r1
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x27e>
 8000d26:	1869      	adds	r1, r5, r1
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d218      	bcs.n	8000d60 <__udivmoddi4+0x2a8>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d916      	bls.n	8000d60 <__udivmoddi4+0x2a8>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4429      	add	r1, r5
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4637      	mov	r7, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e708      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d46:	460f      	mov	r7, r1
 8000d48:	e6e6      	b.n	8000b18 <__udivmoddi4+0x60>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	e6fb      	b.n	8000b46 <__udivmoddi4+0x8e>
 8000d4e:	4543      	cmp	r3, r8
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb8 0102 	subs.w	r1, r8, r2
 8000d56:	eb69 020c 	sbc.w	r2, r9, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	4696      	mov	lr, r2
 8000d5e:	e7a4      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e7e8      	b.n	8000d36 <__udivmoddi4+0x27e>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e795      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e7cf      	b.n	8000d0c <__udivmoddi4+0x254>
 8000d6c:	4681      	mov	r9, r0
 8000d6e:	e77b      	b.n	8000c68 <__udivmoddi4+0x1b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	e747      	b.n	8000c06 <__udivmoddi4+0x14e>
 8000d76:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7a:	442b      	add	r3, r5
 8000d7c:	e72f      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7e:	4638      	mov	r0, r7
 8000d80:	e707      	b.n	8000b92 <__udivmoddi4+0xda>
 8000d82:	4637      	mov	r7, r6
 8000d84:	e6e8      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fc34 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f826 	bl	8000de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 f90e 	bl	8000fb8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000d9c:	f005 fcfa 	bl	8006794 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000da0:	f000 f87c 	bl	8000e9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000da4:	f000 f8a8 	bl	8000ef8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000da8:	f000 f8dc 	bl	8000f64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <main+0x48>)
 8000dae:	f006 f98d 	bl	80070cc <printf>
  printf("** Test finished successfully. ** \n\r");
 8000db2:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <main+0x4c>)
 8000db4:	f006 f98a 	bl	80070cc <printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("hello world \n\r");
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <main+0x50>)
 8000dba:	f006 f987 	bl	80070cc <printf>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <main+0x54>)
 8000dc4:	f000 fec0 	bl	8001b48 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000dc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dcc:	f000 fc48 	bl	8001660 <HAL_Delay>
	  printf("hello world \n\r");
 8000dd0:	e7f2      	b.n	8000db8 <main+0x2c>
 8000dd2:	bf00      	nop
 8000dd4:	0800b048 	.word	0x0800b048
 8000dd8:	0800b098 	.word	0x0800b098
 8000ddc:	0800b0c0 	.word	0x0800b0c0
 8000de0:	40011000 	.word	0x40011000

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b094      	sub	sp, #80	; 0x50
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	2228      	movs	r2, #40	; 0x28
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 f962 	bl	80070bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e22:	2301      	movs	r3, #1
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e26:	2302      	movs	r3, #2
 8000e28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fea6 	bl	8002b8c <HAL_RCC_OscConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e46:	f000 f947 	bl	80010d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	2102      	movs	r1, #2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 f90f 	bl	800308c <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e74:	f000 f930 	bl	80010d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 face 	bl	8003424 <HAL_RCCEx_PeriphCLKConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e8e:	f000 f923 	bl	80010d8 <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3750      	adds	r7, #80	; 0x50
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <MX_I2C1_Init+0x54>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <MX_I2C1_Init+0x58>)
 8000eaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_I2C1_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_I2C1_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_I2C1_Init+0x50>)
 8000eba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ebe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_I2C1_Init+0x50>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_I2C1_Init+0x50>)
 8000eda:	f000 fe4d 	bl	8001b78 <HAL_I2C_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ee4:	f000 f8f8 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000da0 	.word	0x20000da0
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	000186a0 	.word	0x000186a0

08000ef8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <MX_SPI1_Init+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f44:	220a      	movs	r2, #10
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f4a:	f002 fb21 	bl	8003590 <HAL_SPI_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f54:	f000 f8c0 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000e34 	.word	0x20000e34
 8000f60:	40013000 	.word	0x40013000

08000f64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <MX_USART1_UART_Init+0x50>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f9c:	f002 fd50 	bl	8003a40 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fa6:	f000 f897 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000df4 	.word	0x20000df4
 8000fb4:	40013800 	.word	0x40013800

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <MX_GPIO_Init+0xcc>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a2c      	ldr	r2, [pc, #176]	; (8001084 <MX_GPIO_Init+0xcc>)
 8000fd2:	f043 0310 	orr.w	r3, r3, #16
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_GPIO_Init+0xcc>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <MX_GPIO_Init+0xcc>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a26      	ldr	r2, [pc, #152]	; (8001084 <MX_GPIO_Init+0xcc>)
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <MX_GPIO_Init+0xcc>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_GPIO_Init+0xcc>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a20      	ldr	r2, [pc, #128]	; (8001084 <MX_GPIO_Init+0xcc>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_GPIO_Init+0xcc>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_GPIO_Init+0xcc>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <MX_GPIO_Init+0xcc>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_GPIO_Init+0xcc>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001032:	4815      	ldr	r0, [pc, #84]	; (8001088 <MX_GPIO_Init+0xd0>)
 8001034:	f000 fd70 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2108      	movs	r1, #8
 800103c:	4813      	ldr	r0, [pc, #76]	; (800108c <MX_GPIO_Init+0xd4>)
 800103e:	f000 fd6b 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4619      	mov	r1, r3
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <MX_GPIO_Init+0xd0>)
 800105c:	f000 fc02 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001060:	2308      	movs	r3, #8
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_GPIO_Init+0xd4>)
 8001078:	f000 fbf4 	bl	8001864 <HAL_GPIO_Init>

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000
 8001088:	40011000 	.word	0x40011000
 800108c:	40010c00 	.word	0x40010c00

08001090 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001098:	1d39      	adds	r1, r7, #4
 800109a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109e:	2201      	movs	r2, #1
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <__io_putchar+0x20>)
 80010a2:	f002 fd1a 	bl	8003ada <HAL_UART_Transmit>
  return ch;
 80010a6:	687b      	ldr	r3, [r7, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000df4 	.word	0x20000df4

080010b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010c6:	f000 faaf 	bl	8001628 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40012c00 	.word	0x40012c00

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_MspInit+0x5c>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_MspInit+0x5c>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_MspInit+0x5c>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x5c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_MspInit+0x5c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_MspInit+0x5c>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_MspInit+0x60>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_MspInit+0x60>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000

08001148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <HAL_I2C_MspInit+0x70>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d123      	bne.n	80011b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_I2C_MspInit+0x74>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001180:	23c0      	movs	r3, #192	; 0xc0
 8001182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 8001194:	f000 fb66 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800119e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a2:	61d3      	str	r3, [r2, #28]
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_I2C_MspInit+0x74>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40005400 	.word	0x40005400
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010c00 	.word	0x40010c00

080011c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <HAL_SPI_MspInit+0x88>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d12f      	bne.n	8001244 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_SPI_MspInit+0x8c>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a19      	ldr	r2, [pc, #100]	; (8001250 <HAL_SPI_MspInit+0x8c>)
 80011ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_SPI_MspInit+0x8c>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_SPI_MspInit+0x8c>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a13      	ldr	r2, [pc, #76]	; (8001250 <HAL_SPI_MspInit+0x8c>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_SPI_MspInit+0x8c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001214:	23b0      	movs	r3, #176	; 0xb0
 8001216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <HAL_SPI_MspInit+0x90>)
 8001228:	f000 fb1c 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800122c:	2340      	movs	r3, #64	; 0x40
 800122e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_SPI_MspInit+0x90>)
 8001240:	f000 fb10 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40013000 	.word	0x40013000
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <HAL_UART_MspInit+0x8c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d131      	bne.n	80012dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_UART_MspInit+0x90>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a1a      	ldr	r2, [pc, #104]	; (80012e8 <HAL_UART_MspInit+0x90>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_UART_MspInit+0x90>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_UART_MspInit+0x90>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <HAL_UART_MspInit+0x90>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_UART_MspInit+0x90>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	4619      	mov	r1, r3
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <HAL_UART_MspInit+0x94>)
 80012be:	f000 fad1 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_UART_MspInit+0x94>)
 80012d8:	f000 fac4 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010800 	.word	0x40010800

080012f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	2019      	movs	r0, #25
 8001306:	f000 fa82 	bl	800180e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800130a:	2019      	movs	r0, #25
 800130c:	f000 fa9b 	bl	8001846 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_InitTick+0xa0>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_InitTick+0xa0>)
 8001316:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_InitTick+0xa0>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001328:	f107 0210 	add.w	r2, r7, #16
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f002 f828 	bl	8003388 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001338:	f002 f812 	bl	8003360 <HAL_RCC_GetPCLK2Freq>
 800133c:	4603      	mov	r3, r0
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_InitTick+0xa4>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9b      	lsrs	r3, r3, #18
 800134c:	3b01      	subs	r3, #1
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_InitTick+0xa8>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <HAL_InitTick+0xac>)
 8001354:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_InitTick+0xa8>)
 8001358:	f240 32e7 	movw	r2, #999	; 0x3e7
 800135c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_InitTick+0xa8>)
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_InitTick+0xa8>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_InitTick+0xa8>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <HAL_InitTick+0xa8>)
 8001372:	f002 f96e 	bl	8003652 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d104      	bne.n	8001386 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <HAL_InitTick+0xa8>)
 800137e:	f002 f99c 	bl	80036ba <HAL_TIM_Base_Start_IT>
 8001382:	4603      	mov	r3, r0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3730      	adds	r7, #48	; 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	431bde83 	.word	0x431bde83
 8001398:	20000e8c 	.word	0x20000e8c
 800139c:	40012c00 	.word	0x40012c00

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <HardFault_Handler+0x4>

080013b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <MemManage_Handler+0x4>

080013b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <BusFault_Handler+0x4>

080013be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <UsageFault_Handler+0x4>

080013c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80013fa:	f000 fdec 	bl	8001fd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20001b64 	.word	0x20001b64

08001408 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM1_UP_IRQHandler+0x10>)
 800140e:	f002 f977 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000e8c 	.word	0x20000e8c

0800141c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e00a      	b.n	8001444 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800142e:	f3af 8000 	nop.w
 8001432:	4601      	mov	r1, r0
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	b2ca      	uxtb	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf0      	blt.n	800142e <_read+0x12>
	}

return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e009      	b.n	800147c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fe0d 	bl	8001090 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbf1      	blt.n	8001468 <_write+0x12>
	}
	return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_close>:

int _close(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b4:	605a      	str	r2, [r3, #4]
	return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <_isatty>:

int _isatty(int file)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
	return 1;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
	return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
	...

080014f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <_sbrk+0x50>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x16>
		heap_end = &end;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <_sbrk+0x50>)
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <_sbrk+0x54>)
 8001504:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <_sbrk+0x50>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <_sbrk+0x50>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	466a      	mov	r2, sp
 8001516:	4293      	cmp	r3, r2
 8001518:	d907      	bls.n	800152a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800151a:	f005 fda5 	bl	8007068 <__errno>
 800151e:	4602      	mov	r2, r0
 8001520:	230c      	movs	r3, #12
 8001522:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	e006      	b.n	8001538 <_sbrk+0x48>
	}

	heap_end += incr;
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <_sbrk+0x50>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	4a03      	ldr	r2, [pc, #12]	; (8001540 <_sbrk+0x50>)
 8001534:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000b44 	.word	0x20000b44
 8001544:	20001de0 	.word	0x20001de0

08001548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <SystemInit+0x5c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <SystemInit+0x5c>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <SystemInit+0x5c>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4911      	ldr	r1, [pc, #68]	; (80015a4 <SystemInit+0x5c>)
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <SystemInit+0x60>)
 8001560:	4013      	ands	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <SystemInit+0x5c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <SystemInit+0x5c>)
 800156a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800156e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <SystemInit+0x5c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SystemInit+0x5c>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <SystemInit+0x5c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <SystemInit+0x5c>)
 8001586:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800158a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SystemInit+0x5c>)
 800158e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001592:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SystemInit+0x64>)
 8001596:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159a:	609a      	str	r2, [r3, #8]
#endif 
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000
 80015a8:	f8ff0000 	.word	0xf8ff0000
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015b2:	e003      	b.n	80015bc <LoopCopyDataInit>

080015b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ba:	3104      	adds	r1, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015c4:	d3f6      	bcc.n	80015b4 <CopyDataInit>
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015c8:	e002      	b.n	80015d0 <LoopFillZerobss>

080015ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015cc:	f842 3b04 	str.w	r3, [r2], #4

080015d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015d4:	d3f9      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015d6:	f7ff ffb7 	bl	8001548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f005 fd4b 	bl	8007074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015de:	f7ff fbd5 	bl	8000d8c <main>
  bx lr
 80015e2:	4770      	bx	lr
  ldr r3, =_sidata
 80015e4:	0800b404 	.word	0x0800b404
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015ec:	20000b28 	.word	0x20000b28
  ldr r2, =_sbss
 80015f0:	20000b28 	.word	0x20000b28
  ldr r3, = _ebss
 80015f4:	20001de0 	.word	0x20001de0

080015f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_2_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x28>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x28>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f8f3 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff fe6c 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fd64 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_IncTick+0x1c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_IncTick+0x20>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <HAL_IncTick+0x20>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000008 	.word	0x20000008
 8001648:	20000ecc 	.word	0x20000ecc

0800164c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b02      	ldr	r3, [pc, #8]	; (800165c <HAL_GetTick+0x10>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	20000ecc 	.word	0x20000ecc

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff fff0 	bl	800164c <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_Delay+0x40>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffe0 	bl	800164c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000008 	.word	0x20000008

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4906      	ldr	r1, [pc, #24]	; (800173c <__NVIC_EnableIRQ+0x34>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff4f 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001820:	f7ff ff64 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ffb2 	bl	8001794 <NVIC_EncodePriority>
 8001830:	4602      	mov	r2, r0
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff81 	bl	8001740 <__NVIC_SetPriority>
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff57 	bl	8001708 <__NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b08b      	sub	sp, #44	; 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e127      	b.n	8001ac8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001878:	2201      	movs	r2, #1
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 8116 	bne.w	8001ac2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b12      	cmp	r3, #18
 800189c:	d034      	beq.n	8001908 <HAL_GPIO_Init+0xa4>
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d80d      	bhi.n	80018be <HAL_GPIO_Init+0x5a>
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d02b      	beq.n	80018fe <HAL_GPIO_Init+0x9a>
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d804      	bhi.n	80018b4 <HAL_GPIO_Init+0x50>
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d031      	beq.n	8001912 <HAL_GPIO_Init+0xae>
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d01c      	beq.n	80018ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018b2:	e048      	b.n	8001946 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d043      	beq.n	8001940 <HAL_GPIO_Init+0xdc>
 80018b8:	2b11      	cmp	r3, #17
 80018ba:	d01b      	beq.n	80018f4 <HAL_GPIO_Init+0x90>
          break;
 80018bc:	e043      	b.n	8001946 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018be:	4a89      	ldr	r2, [pc, #548]	; (8001ae4 <HAL_GPIO_Init+0x280>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d026      	beq.n	8001912 <HAL_GPIO_Init+0xae>
 80018c4:	4a87      	ldr	r2, [pc, #540]	; (8001ae4 <HAL_GPIO_Init+0x280>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d806      	bhi.n	80018d8 <HAL_GPIO_Init+0x74>
 80018ca:	4a87      	ldr	r2, [pc, #540]	; (8001ae8 <HAL_GPIO_Init+0x284>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d020      	beq.n	8001912 <HAL_GPIO_Init+0xae>
 80018d0:	4a86      	ldr	r2, [pc, #536]	; (8001aec <HAL_GPIO_Init+0x288>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d01d      	beq.n	8001912 <HAL_GPIO_Init+0xae>
          break;
 80018d6:	e036      	b.n	8001946 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018d8:	4a85      	ldr	r2, [pc, #532]	; (8001af0 <HAL_GPIO_Init+0x28c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d019      	beq.n	8001912 <HAL_GPIO_Init+0xae>
 80018de:	4a85      	ldr	r2, [pc, #532]	; (8001af4 <HAL_GPIO_Init+0x290>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d016      	beq.n	8001912 <HAL_GPIO_Init+0xae>
 80018e4:	4a84      	ldr	r2, [pc, #528]	; (8001af8 <HAL_GPIO_Init+0x294>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_GPIO_Init+0xae>
          break;
 80018ea:	e02c      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e028      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	3304      	adds	r3, #4
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e023      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	3308      	adds	r3, #8
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e01e      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	330c      	adds	r3, #12
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e019      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800191a:	2304      	movs	r3, #4
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e012      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001928:	2308      	movs	r3, #8
 800192a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	611a      	str	r2, [r3, #16]
          break;
 8001932:	e008      	b.n	8001946 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001934:	2308      	movs	r3, #8
 8001936:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	615a      	str	r2, [r3, #20]
          break;
 800193e:	e002      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2bff      	cmp	r3, #255	; 0xff
 800194a:	d801      	bhi.n	8001950 <HAL_GPIO_Init+0xec>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	e001      	b.n	8001954 <HAL_GPIO_Init+0xf0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3304      	adds	r3, #4
 8001954:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2bff      	cmp	r3, #255	; 0xff
 800195a:	d802      	bhi.n	8001962 <HAL_GPIO_Init+0xfe>
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	e002      	b.n	8001968 <HAL_GPIO_Init+0x104>
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3b08      	subs	r3, #8
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	210f      	movs	r1, #15
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	401a      	ands	r2, r3
 800197a:	6a39      	ldr	r1, [r7, #32]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	431a      	orrs	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8096 	beq.w	8001ac2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001996:	4b59      	ldr	r3, [pc, #356]	; (8001afc <HAL_GPIO_Init+0x298>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_GPIO_Init+0x298>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6193      	str	r3, [r2, #24]
 80019a2:	4b56      	ldr	r3, [pc, #344]	; (8001afc <HAL_GPIO_Init+0x298>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ae:	4a54      	ldr	r2, [pc, #336]	; (8001b00 <HAL_GPIO_Init+0x29c>)
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_GPIO_Init+0x2a0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0x19e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <HAL_GPIO_Init+0x2a4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00d      	beq.n	80019fe <HAL_GPIO_Init+0x19a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <HAL_GPIO_Init+0x2a8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0x196>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a48      	ldr	r2, [pc, #288]	; (8001b10 <HAL_GPIO_Init+0x2ac>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_GPIO_Init+0x192>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x1a0>
 80019f6:	2304      	movs	r3, #4
 80019f8:	e004      	b.n	8001a04 <HAL_GPIO_Init+0x1a0>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e002      	b.n	8001a04 <HAL_GPIO_Init+0x1a0>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x1a0>
 8001a02:	2300      	movs	r3, #0
 8001a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a06:	f002 0203 	and.w	r2, r2, #3
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	4093      	lsls	r3, r2
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a14:	493a      	ldr	r1, [pc, #232]	; (8001b00 <HAL_GPIO_Init+0x29c>)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4938      	ldr	r1, [pc, #224]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
 8001a3a:	e006      	b.n	8001a4a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4933      	ldr	r1, [pc, #204]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	492e      	ldr	r1, [pc, #184]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
 8001a62:	e006      	b.n	8001a72 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	4929      	ldr	r1, [pc, #164]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	4924      	ldr	r1, [pc, #144]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
 8001a8a:	e006      	b.n	8001a9a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	491f      	ldr	r1, [pc, #124]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	491a      	ldr	r1, [pc, #104]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60cb      	str	r3, [r1, #12]
 8001ab2:	e006      	b.n	8001ac2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	4915      	ldr	r1, [pc, #84]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f47f aed0 	bne.w	8001878 <HAL_GPIO_Init+0x14>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	372c      	adds	r7, #44	; 0x2c
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	10210000 	.word	0x10210000
 8001ae8:	10110000 	.word	0x10110000
 8001aec:	10120000 	.word	0x10120000
 8001af0:	10310000 	.word	0x10310000
 8001af4:	10320000 	.word	0x10320000
 8001af8:	10220000 	.word	0x10220000
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	40011400 	.word	0x40011400
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b60:	887a      	ldrh	r2, [r7, #2]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b68:	887a      	ldrh	r2, [r7, #2]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e10f      	b.n	8001daa <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fad2 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2224      	movs	r2, #36	; 0x24
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bbc:	f001 fbbc 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8001bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a7b      	ldr	r2, [pc, #492]	; (8001db4 <HAL_I2C_Init+0x23c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d807      	bhi.n	8001bdc <HAL_I2C_Init+0x64>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <HAL_I2C_Init+0x240>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bf94      	ite	ls
 8001bd4:	2301      	movls	r3, #1
 8001bd6:	2300      	movhi	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e006      	b.n	8001bea <HAL_I2C_Init+0x72>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <HAL_I2C_Init+0x244>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bf94      	ite	ls
 8001be4:	2301      	movls	r3, #1
 8001be6:	2300      	movhi	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0db      	b.n	8001daa <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4a72      	ldr	r2, [pc, #456]	; (8001dc0 <HAL_I2C_Init+0x248>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9b      	lsrs	r3, r3, #18
 8001bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a64      	ldr	r2, [pc, #400]	; (8001db4 <HAL_I2C_Init+0x23c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d802      	bhi.n	8001c2c <HAL_I2C_Init+0xb4>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	e009      	b.n	8001c40 <HAL_I2C_Init+0xc8>
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	4a63      	ldr	r2, [pc, #396]	; (8001dc4 <HAL_I2C_Init+0x24c>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	3301      	adds	r3, #1
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4956      	ldr	r1, [pc, #344]	; (8001db4 <HAL_I2C_Init+0x23c>)
 8001c5c:	428b      	cmp	r3, r1
 8001c5e:	d80d      	bhi.n	8001c7c <HAL_I2C_Init+0x104>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1e59      	subs	r1, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	bf38      	it	cc
 8001c78:	2304      	movcc	r3, #4
 8001c7a:	e04f      	b.n	8001d1c <HAL_I2C_Init+0x1a4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d111      	bne.n	8001ca8 <HAL_I2C_Init+0x130>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	440b      	add	r3, r1
 8001c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e012      	b.n	8001cce <HAL_I2C_Init+0x156>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1e58      	subs	r0, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	0099      	lsls	r1, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Init+0x15e>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e022      	b.n	8001d1c <HAL_I2C_Init+0x1a4>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10e      	bne.n	8001cfc <HAL_I2C_Init+0x184>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1e58      	subs	r0, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	440b      	add	r3, r1
 8001cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfa:	e00f      	b.n	8001d1c <HAL_I2C_Init+0x1a4>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1e58      	subs	r0, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	0099      	lsls	r1, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	6809      	ldr	r1, [r1, #0]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6911      	ldr	r1, [r2, #16]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68d2      	ldr	r2, [r2, #12]
 8001d56:	4311      	orrs	r1, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	000186a0 	.word	0x000186a0
 8001db8:	001e847f 	.word	0x001e847f
 8001dbc:	003d08ff 	.word	0x003d08ff
 8001dc0:	431bde83 	.word	0x431bde83
 8001dc4:	10624dd3 	.word	0x10624dd3

08001dc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dca:	b08b      	sub	sp, #44	; 0x2c
 8001dcc:	af06      	add	r7, sp, #24
 8001dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0d3      	b.n	8001f82 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f004 fe9c 	bl	8006b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 f84e 	bl	8003ea2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	687e      	ldr	r6, [r7, #4]
 8001e0e:	466d      	mov	r5, sp
 8001e10:	f106 0410 	add.w	r4, r6, #16
 8001e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	602b      	str	r3, [r5, #0]
 8001e1c:	1d33      	adds	r3, r6, #4
 8001e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f002 f817 	bl	8003e54 <USB_CoreInit>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0a4      	b.n	8001f82 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 f84b 	bl	8003eda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e035      	b.n	8001eb6 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	015b      	lsls	r3, r3, #5
 8001e50:	4413      	add	r3, r2
 8001e52:	3329      	adds	r3, #41	; 0x29
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	015b      	lsls	r3, r3, #5
 8001e5e:	4413      	add	r3, r2
 8001e60:	3328      	adds	r3, #40	; 0x28
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	b291      	uxth	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	015b      	lsls	r3, r3, #5
 8001e70:	4413      	add	r3, r2
 8001e72:	3336      	adds	r3, #54	; 0x36
 8001e74:	460a      	mov	r2, r1
 8001e76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	015b      	lsls	r3, r3, #5
 8001e7e:	4413      	add	r3, r2
 8001e80:	332b      	adds	r3, #43	; 0x2b
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	015b      	lsls	r3, r3, #5
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3338      	adds	r3, #56	; 0x38
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	015b      	lsls	r3, r3, #5
 8001e9a:	4413      	add	r3, r2
 8001e9c:	333c      	adds	r3, #60	; 0x3c
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	015b      	lsls	r3, r3, #5
 8001eaa:	4413      	add	r3, r2
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d3c4      	bcc.n	8001e4a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e031      	b.n	8001f2a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	015b      	lsls	r3, r3, #5
 8001ecc:	4413      	add	r3, r2
 8001ece:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	015b      	lsls	r3, r3, #5
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	015b      	lsls	r3, r3, #5
 8001eec:	4413      	add	r3, r2
 8001eee:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	015b      	lsls	r3, r3, #5
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	015b      	lsls	r3, r3, #5
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	330a      	adds	r3, #10
 8001f1c:	015b      	lsls	r3, r3, #5
 8001f1e:	4413      	add	r3, r2
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	3301      	adds	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d3c8      	bcc.n	8001ec6 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	687e      	ldr	r6, [r7, #4]
 8001f3c:	466d      	mov	r5, sp
 8001f3e:	f106 0410 	add.w	r4, r6, #16
 8001f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	602b      	str	r3, [r5, #0]
 8001f4a:	1d33      	adds	r3, r6, #4
 8001f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f4e:	6838      	ldr	r0, [r7, #0]
 8001f50:	f001 ffcf 	bl	8003ef2 <USB_DevInit>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00d      	b.n	8001f82 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 f80d 	bl	8004f9a <USB_DevDisconnect>

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_PCD_Start+0x16>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e016      	b.n	8001fce <HAL_PCD_Start+0x44>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001fa8:	2101      	movs	r1, #1
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f005 f825 	bl	8006ffa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 ffe6 	bl	8004f86 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 ff58 	bl	8003e74 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 ffe3 	bl	8004fae <USB_ReadInterrupts>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff2:	d102      	bne.n	8001ffa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 faf3 	bl	80025e0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 ffd5 	bl	8004fae <USB_ReadInterrupts>
 8002004:	4603      	mov	r3, r0
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200e:	d112      	bne.n	8002036 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002018:	b29a      	uxth	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002022:	b292      	uxth	r2, r2
 8002024:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f004 fdf4 	bl	8006c16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800202e:	2100      	movs	r1, #0
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f8de 	bl	80021f2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f002 ffb7 	bl	8004fae <USB_ReadInterrupts>
 8002040:	4603      	mov	r3, r0
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800204a:	d10b      	bne.n	8002064 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002054:	b29a      	uxth	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800205e:	b292      	uxth	r2, r2
 8002060:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f002 ffa0 	bl	8004fae <USB_ReadInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002078:	d10b      	bne.n	8002092 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800208c:	b292      	uxth	r2, r2
 800208e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f002 ff89 	bl	8004fae <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a6:	d126      	bne.n	80020f6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0204 	bic.w	r2, r2, #4
 80020ba:	b292      	uxth	r2, r2
 80020bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0208 	bic.w	r2, r2, #8
 80020d2:	b292      	uxth	r2, r2
 80020d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f004 fdd5 	bl	8006c88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020f0:	b292      	uxth	r2, r2
 80020f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 ff57 	bl	8004fae <USB_ReadInterrupts>
 8002100:	4603      	mov	r3, r0
 8002102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800210a:	d13d      	bne.n	8002188 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002114:	b29a      	uxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0208 	orr.w	r2, r2, #8
 800211e:	b292      	uxth	r2, r2
 8002120:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800212c:	b29a      	uxth	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002136:	b292      	uxth	r2, r2
 8002138:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002144:	b29a      	uxth	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0204 	orr.w	r2, r2, #4
 800214e:	b292      	uxth	r2, r2
 8002150:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 ff28 	bl	8004fae <USB_ReadInterrupts>
 800215e:	4603      	mov	r3, r0
 8002160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002168:	d10b      	bne.n	8002182 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800217c:	b292      	uxth	r2, r2
 800217e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f004 fd66 	bl	8006c54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f002 ff0e 	bl	8004fae <USB_ReadInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219c:	d10e      	bne.n	80021bc <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021b0:	b292      	uxth	r2, r2
 80021b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f004 fd1f 	bl	8006bfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 fef4 	bl	8004fae <USB_ReadInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d0:	d10b      	bne.n	80021ea <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e4:	b292      	uxth	r2, r2
 80021e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_PCD_SetAddress+0x1a>
 8002208:	2302      	movs	r3, #2
 800220a:	e013      	b.n	8002234 <HAL_PCD_SetAddress+0x42>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f002 fe9b 	bl	8004f60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	70fb      	strb	r3, [r7, #3]
 800224e:	460b      	mov	r3, r1
 8002250:	803b      	strh	r3, [r7, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800225a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225e:	2b00      	cmp	r3, #0
 8002260:	da0b      	bge.n	800227a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	015b      	lsls	r3, r3, #5
 800226a:	3328      	adds	r3, #40	; 0x28
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	705a      	strb	r2, [r3, #1]
 8002278:	e00b      	b.n	8002292 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	015b      	lsls	r3, r3, #5
 8002282:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800229e:	883a      	ldrh	r2, [r7, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	78ba      	ldrb	r2, [r7, #2]
 80022a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	785b      	ldrb	r3, [r3, #1]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022bc:	78bb      	ldrb	r3, [r7, #2]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d102      	bne.n	80022c8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_PCD_EP_Open+0x9a>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e00e      	b.n	80022f4 <HAL_PCD_EP_Open+0xb8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f001 fe29 	bl	8003f3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80022f2:	7afb      	ldrb	r3, [r7, #11]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800230c:	2b00      	cmp	r3, #0
 800230e:	da0b      	bge.n	8002328 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	015b      	lsls	r3, r3, #5
 8002318:	3328      	adds	r3, #40	; 0x28
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	705a      	strb	r2, [r3, #1]
 8002326:	e00b      	b.n	8002340 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	015b      	lsls	r3, r3, #5
 8002330:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	b2da      	uxtb	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_PCD_EP_Close+0x5e>
 8002356:	2302      	movs	r3, #2
 8002358:	e00e      	b.n	8002378 <HAL_PCD_EP_Close+0x7c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	4618      	mov	r0, r3
 800236a:	f002 f8d5 	bl	8004518 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	015b      	lsls	r3, r3, #5
 8002398:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2200      	movs	r2, #0
 80023b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2200      	movs	r2, #0
 80023b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023c6:	7afb      	ldrb	r3, [r7, #11]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d106      	bne.n	80023de <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6979      	ldr	r1, [r7, #20]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fa34 	bl	8004844 <USB_EPStartXfer>
 80023dc:	e005      	b.n	80023ea <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6979      	ldr	r1, [r7, #20]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fa2d 	bl	8004844 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	330a      	adds	r3, #10
 800240a:	015b      	lsls	r3, r3, #5
 800240c:	4413      	add	r3, r2
 800240e:	3304      	adds	r3, #4
 8002410:	681b      	ldr	r3, [r3, #0]
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	460b      	mov	r3, r1
 800242a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800242c:	7afb      	ldrb	r3, [r7, #11]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	015b      	lsls	r3, r3, #5
 8002434:	3328      	adds	r3, #40	; 0x28
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2201      	movs	r2, #1
 8002452:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002454:	7afb      	ldrb	r3, [r7, #11]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	b2da      	uxtb	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002460:	7afb      	ldrb	r3, [r7, #11]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6979      	ldr	r1, [r7, #20]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 f9e7 	bl	8004844 <USB_EPStartXfer>
 8002476:	e005      	b.n	8002484 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6979      	ldr	r1, [r7, #20]
 800247e:	4618      	mov	r0, r3
 8002480:	f002 f9e0 	bl	8004844 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 0207 	and.w	r2, r3, #7
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d901      	bls.n	80024ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e046      	b.n	800253a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	da0b      	bge.n	80024cc <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	015b      	lsls	r3, r3, #5
 80024bc:	3328      	adds	r3, #40	; 0x28
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	705a      	strb	r2, [r3, #1]
 80024ca:	e009      	b.n	80024e0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	015b      	lsls	r3, r3, #5
 80024d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_PCD_EP_SetStall+0x72>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e01c      	b.n	800253a <HAL_PCD_EP_SetStall+0xac>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68f9      	ldr	r1, [r7, #12]
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fc50 	bl	8004db4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	2b00      	cmp	r3, #0
 800251c:	d108      	bne.n	8002530 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f002 fd4e 	bl	8004fcc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	f003 020f 	and.w	r2, r3, #15
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	d901      	bls.n	8002560 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e03a      	b.n	80025d6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002564:	2b00      	cmp	r3, #0
 8002566:	da0b      	bge.n	8002580 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	015b      	lsls	r3, r3, #5
 8002570:	3328      	adds	r3, #40	; 0x28
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	705a      	strb	r2, [r3, #1]
 800257e:	e00b      	b.n	8002598 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	015b      	lsls	r3, r3, #5
 8002588:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_PCD_EP_ClrStall+0x76>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e00e      	b.n	80025d6 <HAL_PCD_EP_ClrStall+0x94>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68f9      	ldr	r1, [r7, #12]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 fc36 	bl	8004e38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025e8:	e282      	b.n	8002af0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025f2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025f4:	8afb      	ldrh	r3, [r7, #22]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80025fe:	7d7b      	ldrb	r3, [r7, #21]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f040 8142 	bne.w	800288a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002606:	8afb      	ldrh	r3, [r7, #22]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	d151      	bne.n	80026b4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800261c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002620:	b29c      	uxth	r4, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800262a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262e:	b29b      	uxth	r3, r3
 8002630:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3328      	adds	r3, #40	; 0x28
 8002636:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002640:	b29b      	uxth	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	3302      	adds	r3, #2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	441a      	add	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002672:	2100      	movs	r1, #0
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f004 faa9 	bl	8006bcc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8234 	beq.w	8002af0 <PCD_EP_ISR_Handler+0x510>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 822f 	bne.w	8002af0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b292      	uxth	r2, r2
 80026a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026b2:	e21d      	b.n	8002af0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026ba:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026c4:	8a7b      	ldrh	r3, [r7, #18]
 80026c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d033      	beq.n	8002736 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	3306      	adds	r3, #6
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800270c:	b29b      	uxth	r3, r3
 800270e:	f002 fcac 	bl	800506a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b29a      	uxth	r2, r3
 800271a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800271e:	4013      	ands	r3, r2
 8002720:	b29c      	uxth	r4, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800272a:	b292      	uxth	r2, r2
 800272c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f004 fa22 	bl	8006b78 <HAL_PCD_SetupStageCallback>
 8002734:	e1dc      	b.n	8002af0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002736:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f280 81d8 	bge.w	8002af0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29a      	uxth	r2, r3
 8002748:	f640 738f 	movw	r3, #3983	; 0xf8f
 800274c:	4013      	ands	r3, r2
 800274e:	b29c      	uxth	r4, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002758:	b292      	uxth	r2, r2
 800275a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	3306      	adds	r3, #6
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	4413      	add	r3, r2
 800277a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d019      	beq.n	80027c4 <PCD_EP_ISR_Handler+0x1e4>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6959      	ldr	r1, [r3, #20]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	f002 fc5e 	bl	800506a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	441a      	add	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027bc:	2100      	movs	r1, #0
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f004 f9ec 	bl	8006b9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461c      	mov	r4, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	441c      	add	r4, r3
 80027d6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80027da:	461c      	mov	r4, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10e      	bne.n	8002802 <PCD_EP_ISR_Handler+0x222>
 80027e4:	8823      	ldrh	r3, [r4, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	8023      	strh	r3, [r4, #0]
 80027f0:	8823      	ldrh	r3, [r4, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	8023      	strh	r3, [r4, #0]
 8002800:	e02d      	b.n	800285e <PCD_EP_ISR_Handler+0x27e>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b3e      	cmp	r3, #62	; 0x3e
 8002808:	d812      	bhi.n	8002830 <PCD_EP_ISR_Handler+0x250>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <PCD_EP_ISR_Handler+0x244>
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	3301      	adds	r3, #1
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	b29b      	uxth	r3, r3
 8002828:	029b      	lsls	r3, r3, #10
 800282a:	b29b      	uxth	r3, r3
 800282c:	8023      	strh	r3, [r4, #0]
 800282e:	e016      	b.n	800285e <PCD_EP_ISR_Handler+0x27e>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <PCD_EP_ISR_Handler+0x26a>
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	3b01      	subs	r3, #1
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	b29b      	uxth	r3, r3
 800284e:	029b      	lsls	r3, r3, #10
 8002850:	b29b      	uxth	r3, r3
 8002852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285a:	b29b      	uxth	r3, r3
 800285c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	b29c      	uxth	r4, r3
 8002870:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002874:	b29c      	uxth	r4, r3
 8002876:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800287a:	b29c      	uxth	r4, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4ba2      	ldr	r3, [pc, #648]	; (8002b0c <PCD_EP_ISR_Handler+0x52c>)
 8002882:	4323      	orrs	r3, r4
 8002884:	b29b      	uxth	r3, r3
 8002886:	8013      	strh	r3, [r2, #0]
 8002888:	e132      	b.n	8002af0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	7d7b      	ldrb	r3, [r7, #21]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800289a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f280 80d1 	bge.w	8002a46 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	7d7b      	ldrb	r3, [r7, #21]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29c      	uxth	r4, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	7d7b      	ldrb	r3, [r7, #21]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80028cc:	b292      	uxth	r2, r2
 80028ce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028d0:	7d7b      	ldrb	r3, [r7, #21]
 80028d2:	015b      	lsls	r3, r3, #5
 80028d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	7b1b      	ldrb	r3, [r3, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d121      	bne.n	800292a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	3306      	adds	r3, #6
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002910:	8bfb      	ldrh	r3, [r7, #30]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d072      	beq.n	80029fc <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6959      	ldr	r1, [r3, #20]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	88da      	ldrh	r2, [r3, #6]
 8002922:	8bfb      	ldrh	r3, [r7, #30]
 8002924:	f002 fba1 	bl	800506a <USB_ReadPMA>
 8002928:	e068      	b.n	80029fc <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d021      	beq.n	8002988 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	3302      	adds	r3, #2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	4413      	add	r3, r2
 8002962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800296e:	8bfb      	ldrh	r3, [r7, #30]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d02a      	beq.n	80029ca <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6959      	ldr	r1, [r3, #20]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	891a      	ldrh	r2, [r3, #8]
 8002980:	8bfb      	ldrh	r3, [r7, #30]
 8002982:	f002 fb72 	bl	800506a <USB_ReadPMA>
 8002986:	e020      	b.n	80029ca <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002990:	b29b      	uxth	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	3306      	adds	r3, #6
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80029b2:	8bfb      	ldrh	r3, [r7, #30]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6959      	ldr	r1, [r3, #20]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	895a      	ldrh	r2, [r3, #10]
 80029c4:	8bfb      	ldrh	r3, [r7, #30]
 80029c6:	f002 fb50 	bl	800506a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e4:	b29c      	uxth	r4, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	441a      	add	r2, r3
 80029f4:	4b46      	ldr	r3, [pc, #280]	; (8002b10 <PCD_EP_ISR_Handler+0x530>)
 80029f6:	4323      	orrs	r3, r4
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	8bfb      	ldrh	r3, [r7, #30]
 8002a02:	441a      	add	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	8bfb      	ldrh	r3, [r7, #30]
 8002a0e:	441a      	add	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <PCD_EP_ISR_Handler+0x446>
 8002a1c:	8bfa      	ldrh	r2, [r7, #30]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d206      	bcs.n	8002a34 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f004 f8b5 	bl	8006b9c <HAL_PCD_DataOutStageCallback>
 8002a32:	e008      	b.n	8002a46 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	7819      	ldrb	r1, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fc9d 	bl	8002380 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a46:	8a7b      	ldrh	r3, [r7, #18]
 8002a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d04f      	beq.n	8002af0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a50:	7d7b      	ldrb	r3, [r7, #21]
 8002a52:	015b      	lsls	r3, r3, #5
 8002a54:	3328      	adds	r3, #40	; 0x28
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	7d7b      	ldrb	r3, [r7, #21]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	b29c      	uxth	r4, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	7d7b      	ldrb	r3, [r7, #21]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	441a      	add	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f004 f878 	bl	8006bcc <HAL_PCD_DataInStageCallback>
 8002adc:	e008      	b.n	8002af0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	7819      	ldrb	r1, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fc96 	bl	800241c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	b21b      	sxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f6ff ad74 	blt.w	80025ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3724      	adds	r7, #36	; 0x24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd90      	pop	{r4, r7, pc}
 8002b0c:	ffff8080 	.word	0xffff8080
 8002b10:	ffff80c0 	.word	0xffff80c0

08002b14 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	817b      	strh	r3, [r7, #10]
 8002b22:	4613      	mov	r3, r2
 8002b24:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b26:	897b      	ldrh	r3, [r7, #10]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b32:	897b      	ldrh	r3, [r7, #10]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	015b      	lsls	r3, r3, #5
 8002b3a:	3328      	adds	r3, #40	; 0x28
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e006      	b.n	8002b52 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b44:	897b      	ldrh	r3, [r7, #10]
 8002b46:	015b      	lsls	r3, r3, #5
 8002b48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b52:	893b      	ldrh	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d107      	bne.n	8002b68 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	80da      	strh	r2, [r3, #6]
 8002b66:	e00b      	b.n	8002b80 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e26c      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8087 	beq.w	8002cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bac:	4b92      	ldr	r3, [pc, #584]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb8:	4b8f      	ldr	r3, [pc, #572]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d112      	bne.n	8002bea <HAL_RCC_OscConfig+0x5e>
 8002bc4:	4b8c      	ldr	r3, [pc, #560]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d10b      	bne.n	8002bea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd2:	4b89      	ldr	r3, [pc, #548]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d06c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x12c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d168      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e246      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x76>
 8002bf4:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a7f      	ldr	r2, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	e02e      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0a:	4b7b      	ldr	r3, [pc, #492]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7a      	ldr	r2, [pc, #488]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b78      	ldr	r3, [pc, #480]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a77      	ldr	r2, [pc, #476]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0xbc>
 8002c2e:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a71      	ldr	r2, [pc, #452]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6e      	ldr	r2, [pc, #440]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c48:	4b6b      	ldr	r3, [pc, #428]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6a      	ldr	r2, [pc, #424]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a67      	ldr	r2, [pc, #412]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fcf0 	bl	800164c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe fcec 	bl	800164c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1fa      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe4>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fcdc 	bl	800164c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe fcd8 	bl	800164c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1e6      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x10c>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc6:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cd2:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x18c>
 8002cde:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x176>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1ba      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4939      	ldr	r1, [pc, #228]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fe fc91 	bl	800164c <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fc8d 	bl	800164c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e19b      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4927      	ldr	r1, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fe fc70 	bl	800164c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fe fc6c 	bl	800164c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e17a      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d03a      	beq.n	8002e10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d019      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <HAL_RCC_OscConfig+0x274>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fe fc50 	bl	800164c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fe fc4c 	bl	800164c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e15a      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f000 fb0a 	bl	80033e8 <RCC_Delay>
 8002dd4:	e01c      	b.n	8002e10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fc36 	bl	800164c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de2:	e00f      	b.n	8002e04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fe fc32 	bl	800164c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d908      	bls.n	8002e04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e140      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	42420000 	.word	0x42420000
 8002e00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	4b9e      	ldr	r3, [pc, #632]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e9      	bne.n	8002de4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80a6 	beq.w	8002f6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e22:	4b97      	ldr	r3, [pc, #604]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	4b94      	ldr	r3, [pc, #592]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a93      	ldr	r2, [pc, #588]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	61d3      	str	r3, [r2, #28]
 8002e3a:	4b91      	ldr	r3, [pc, #580]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e56:	4b8b      	ldr	r3, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a8a      	ldr	r2, [pc, #552]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fe fbf3 	bl	800164c <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7fe fbef 	bl	800164c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	; 0x64
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0fd      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x312>
 8002e90:	4b7b      	ldr	r3, [pc, #492]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4a7a      	ldr	r2, [pc, #488]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6213      	str	r3, [r2, #32]
 8002e9c:	e02d      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x334>
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a72      	ldr	r2, [pc, #456]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	e01c      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x356>
 8002ec8:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4a6c      	ldr	r2, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6213      	str	r3, [r2, #32]
 8002ed4:	4b6a      	ldr	r3, [pc, #424]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a69      	ldr	r2, [pc, #420]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	e00b      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002ee2:	4b67      	ldr	r3, [pc, #412]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a66      	ldr	r2, [pc, #408]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	4b64      	ldr	r3, [pc, #400]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a63      	ldr	r2, [pc, #396]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d015      	beq.n	8002f2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7fe fba3 	bl	800164c <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe fb9f 	bl	800164c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0ab      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	4b57      	ldr	r3, [pc, #348]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ee      	beq.n	8002f0a <HAL_RCC_OscConfig+0x37e>
 8002f2c:	e014      	b.n	8002f58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fb8d 	bl	800164c <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fe fb89 	bl	800164c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e095      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ee      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b48      	ldr	r3, [pc, #288]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a47      	ldr	r2, [pc, #284]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8081 	beq.w	8003076 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f74:	4b42      	ldr	r3, [pc, #264]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d061      	beq.n	8003044 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d146      	bne.n	8003016 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fb5d 	bl	800164c <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe fb59 	bl	800164c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e067      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d108      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fbe:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	492d      	ldr	r1, [pc, #180]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a19      	ldr	r1, [r3, #32]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	4927      	ldr	r1, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe fb2d 	bl	800164c <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe fb29 	bl	800164c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e037      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x46a>
 8003014:	e02f      	b.n	8003076 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe fb16 	bl	800164c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fb12 	bl	800164c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e020      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x498>
 8003042:	e018      	b.n	8003076 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e013      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	429a      	cmp	r2, r3
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
 8003088:	42420060 	.word	0x42420060

0800308c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0d0      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d910      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	4965      	ldr	r1, [pc, #404]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800310a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d040      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d115      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e073      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06b      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4936      	ldr	r1, [pc, #216]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fe fa66 	bl	800164c <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fe fa62 	bl	800164c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e053      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d210      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	4922      	ldr	r1, [pc, #136]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f821 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800321e:	4601      	mov	r1, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	5cd3      	ldrb	r3, [r2, r3]
 800322e:	fa21 f303 	lsr.w	r3, r1, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1cc>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1d0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe f858 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40021000 	.word	0x40021000
 8003254:	0800b164 	.word	0x0800b164
 8003258:	20000000 	.word	0x20000000
 800325c:	20000004 	.word	0x20000004

08003260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	b490      	push	{r4, r7}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003266:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003268:	1d3c      	adds	r4, r7, #4
 800326a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800326c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800328a:	4b23      	ldr	r3, [pc, #140]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb8>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x46>
 800329e:	e02d      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a0:	4b1e      	ldr	r3, [pc, #120]	; (800331c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a2:	623b      	str	r3, [r7, #32]
      break;
 80032a4:	e02d      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032b2:	4413      	add	r3, r2
 80032b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0c5b      	lsrs	r3, r3, #17
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032d2:	4413      	add	r3, r2
 80032d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	4a0f      	ldr	r2, [pc, #60]	; (800331c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032de:	fb02 f203 	mul.w	r2, r2, r3
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	e004      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	623b      	str	r3, [r7, #32]
      break;
 80032fa:	e002      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032fe:	623b      	str	r3, [r7, #32]
      break;
 8003300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003302:	6a3b      	ldr	r3, [r7, #32]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3728      	adds	r7, #40	; 0x28
 8003308:	46bd      	mov	sp, r7
 800330a:	bc90      	pop	{r4, r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	0800b0d0 	.word	0x0800b0d0
 8003314:	0800b0e0 	.word	0x0800b0e0
 8003318:	40021000 	.word	0x40021000
 800331c:	007a1200 	.word	0x007a1200
 8003320:	003d0900 	.word	0x003d0900

08003324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003328:	4b02      	ldr	r3, [pc, #8]	; (8003334 <HAL_RCC_GetHCLKFreq+0x10>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	20000000 	.word	0x20000000

08003338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800333c:	f7ff fff2 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8003340:	4601      	mov	r1, r0
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4a03      	ldr	r2, [pc, #12]	; (800335c <HAL_RCC_GetPCLK1Freq+0x24>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	0800b174 	.word	0x0800b174

08003360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003364:	f7ff ffde 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8003368:	4601      	mov	r1, r0
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	0adb      	lsrs	r3, r3, #11
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4a03      	ldr	r2, [pc, #12]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	0800b174 	.word	0x0800b174

08003388 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	220f      	movs	r2, #15
 8003396:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_RCC_GetClockConfig+0x58>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0203 	and.w	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_RCC_GetClockConfig+0x58>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_GetClockConfig+0x58>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_RCC_GetClockConfig+0x58>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCC_GetClockConfig+0x5c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0207 	and.w	r2, r3, #7
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40022000 	.word	0x40022000

080033e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <RCC_Delay+0x34>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <RCC_Delay+0x38>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	0a5b      	lsrs	r3, r3, #9
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003404:	bf00      	nop
  }
  while (Delay --);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1e5a      	subs	r2, r3, #1
 800340a:	60fa      	str	r2, [r7, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f9      	bne.n	8003404 <RCC_Delay+0x1c>
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000000 	.word	0x20000000
 8003420:	10624dd3 	.word	0x10624dd3

08003424 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d07d      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003440:	2300      	movs	r3, #0
 8003442:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003444:	4b4f      	ldr	r3, [pc, #316]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003450:	4b4c      	ldr	r3, [pc, #304]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4a4b      	ldr	r2, [pc, #300]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345a:	61d3      	str	r3, [r2, #28]
 800345c:	4b49      	ldr	r3, [pc, #292]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4b46      	ldr	r3, [pc, #280]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d118      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003478:	4b43      	ldr	r3, [pc, #268]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a42      	ldr	r2, [pc, #264]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800347e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003482:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003484:	f7fe f8e2 	bl	800164c <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	e008      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348c:	f7fe f8de 	bl	800164c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e06d      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b3a      	ldr	r3, [pc, #232]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034aa:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02e      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d027      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c8:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034d2:	4b2e      	ldr	r3, [pc, #184]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d8:	4b2c      	ldr	r3, [pc, #176]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034de:	4a29      	ldr	r2, [pc, #164]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d014      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe f8ad 	bl	800164c <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe f8a9 	bl	800164c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e036      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ee      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4917      	ldr	r1, [pc, #92]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	4313      	orrs	r3, r2
 8003528:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	4a13      	ldr	r2, [pc, #76]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	490b      	ldr	r1, [pc, #44]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4904      	ldr	r1, [pc, #16]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	40007000 	.word	0x40007000
 800358c:	42420440 	.word	0x42420440

08003590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e053      	b.n	800364a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fd fe01 	bl	80011c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	ea42 0103 	orr.w	r1, r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	0c1a      	lsrs	r2, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f002 0204 	and.w	r2, r2, #4
 8003628:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003638:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e01d      	b.n	80036a0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f815 	bl	80036a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	4619      	mov	r1, r3
 8003690:	4610      	mov	r0, r2
 8003692:	f000 f961 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d007      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0202 	mvn.w	r2, #2
 800372c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8ed 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8e0 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8ef 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d122      	bne.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b04      	cmp	r3, #4
 8003776:	d11b      	bne.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0204 	mvn.w	r2, #4
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f8c3 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f8b6 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8c5 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d122      	bne.n	8003804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d11b      	bne.n	8003804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0208 	mvn.w	r2, #8
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2204      	movs	r2, #4
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f899 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f88c 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f89b 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d122      	bne.n	8003858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b10      	cmp	r3, #16
 800381e:	d11b      	bne.n	8003858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0210 	mvn.w	r2, #16
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2208      	movs	r2, #8
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f86f 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f862 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f871 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0201 	mvn.w	r2, #1
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fd fc18 	bl	80010b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d10e      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b80      	cmp	r3, #128	; 0x80
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8bf 	bl	8003a2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f835 	bl	8003946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0220 	mvn.w	r2, #32
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f88a 	bl	8003a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a29      	ldr	r2, [pc, #164]	; (8003a10 <TIM_Base_SetConfig+0xb8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00b      	beq.n	8003988 <TIM_Base_SetConfig+0x30>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d007      	beq.n	8003988 <TIM_Base_SetConfig+0x30>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a26      	ldr	r2, [pc, #152]	; (8003a14 <TIM_Base_SetConfig+0xbc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0x30>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a25      	ldr	r2, [pc, #148]	; (8003a18 <TIM_Base_SetConfig+0xc0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d108      	bne.n	800399a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <TIM_Base_SetConfig+0xb8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00b      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d007      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <TIM_Base_SetConfig+0xbc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d003      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <TIM_Base_SetConfig+0xc0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d108      	bne.n	80039cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <TIM_Base_SetConfig+0xb8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d103      	bne.n	8003a00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	615a      	str	r2, [r3, #20]
}
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40000800 	.word	0x40000800

08003a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr

08003a2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e03f      	b.n	8003ad2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd fbf6 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2224      	movs	r2, #36	; 0x24
 8003a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f90b 	bl	8003ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b088      	sub	sp, #32
 8003ade:	af02      	add	r7, sp, #8
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	f040 8083 	bne.w	8003c02 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_UART_Transmit+0x2e>
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e07b      	b.n	8003c04 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Transmit+0x40>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e074      	b.n	8003c04 <HAL_UART_Transmit+0x12a>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2221      	movs	r2, #33	; 0x21
 8003b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b30:	f7fd fd8c 	bl	800164c <HAL_GetTick>
 8003b34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	88fa      	ldrh	r2, [r7, #6]
 8003b3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	88fa      	ldrh	r2, [r7, #6]
 8003b40:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b42:	e042      	b.n	8003bca <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5a:	d122      	bne.n	8003ba2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2200      	movs	r2, #0
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f850 	bl	8003c0c <UART_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e046      	b.n	8003c04 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b88:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	3302      	adds	r3, #2
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	e017      	b.n	8003bca <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	e013      	b.n	8003bca <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f82d 	bl	8003c0c <UART_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e023      	b.n	8003c04 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	60ba      	str	r2, [r7, #8]
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1b7      	bne.n	8003b44 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2140      	movs	r1, #64	; 0x40
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f814 	bl	8003c0c <UART_WaitOnFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e00a      	b.n	8003c04 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1c:	e02c      	b.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d028      	beq.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c2c:	f7fd fd0e 	bl	800164c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d21d      	bcs.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e00f      	b.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d0c3      	beq.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cda:	f023 030c 	bic.w	r3, r3, #12
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a52      	ldr	r2, [pc, #328]	; (8003e4c <UART_SetConfig+0x1ac>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d14e      	bne.n	8003da6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d08:	f7ff fb2a 	bl	8003360 <HAL_RCC_GetPCLK2Freq>
 8003d0c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009a      	lsls	r2, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	4a4a      	ldr	r2, [pc, #296]	; (8003e50 <UART_SetConfig+0x1b0>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	0119      	lsls	r1, r3, #4
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009a      	lsls	r2, r3, #2
 8003d38:	441a      	add	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d44:	4b42      	ldr	r3, [pc, #264]	; (8003e50 <UART_SetConfig+0x1b0>)
 8003d46:	fba3 0302 	umull	r0, r3, r3, r2
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2064      	movs	r0, #100	; 0x64
 8003d4e:	fb00 f303 	mul.w	r3, r0, r3
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	3332      	adds	r3, #50	; 0x32
 8003d58:	4a3d      	ldr	r2, [pc, #244]	; (8003e50 <UART_SetConfig+0x1b0>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d64:	4419      	add	r1, r3
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009a      	lsls	r2, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7c:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <UART_SetConfig+0x1b0>)
 8003d7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2064      	movs	r0, #100	; 0x64
 8003d86:	fb00 f303 	mul.w	r3, r0, r3
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	3332      	adds	r3, #50	; 0x32
 8003d90:	4a2f      	ldr	r2, [pc, #188]	; (8003e50 <UART_SetConfig+0x1b0>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	440a      	add	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003da4:	e04d      	b.n	8003e42 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003da6:	f7ff fac7 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8003daa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	009a      	lsls	r2, r3, #2
 8003db6:	441a      	add	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <UART_SetConfig+0x1b0>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	0119      	lsls	r1, r3, #4
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009a      	lsls	r2, r3, #2
 8003dd6:	441a      	add	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <UART_SetConfig+0x1b0>)
 8003de4:	fba3 0302 	umull	r0, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2064      	movs	r0, #100	; 0x64
 8003dec:	fb00 f303 	mul.w	r3, r0, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	3332      	adds	r3, #50	; 0x32
 8003df6:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <UART_SetConfig+0x1b0>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e02:	4419      	add	r1, r3
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009a      	lsls	r2, r3, #2
 8003e0e:	441a      	add	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <UART_SetConfig+0x1b0>)
 8003e1c:	fba3 0302 	umull	r0, r3, r3, r2
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	2064      	movs	r0, #100	; 0x64
 8003e24:	fb00 f303 	mul.w	r3, r0, r3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	3332      	adds	r3, #50	; 0x32
 8003e2e:	4a08      	ldr	r2, [pc, #32]	; (8003e50 <UART_SetConfig+0x1b0>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	440a      	add	r2, r1
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40013800 	.word	0x40013800
 8003e50:	51eb851f 	.word	0x51eb851f

08003e54 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e54:	b084      	sub	sp, #16
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	f107 0014 	add.w	r0, r7, #20
 8003e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	b004      	add	sp, #16
 8003e72:	4770      	bx	lr

08003e74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e7c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e80:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr

08003ea2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003eaa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003eae:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	b21a      	sxth	r2, r3
 8003eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	b21b      	sxth	r3, r3
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	b21b      	sxth	r3, r3
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	f107 0014 	add.w	r0, r7, #20
 8003f00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ffa5 	bl	8003e74 <USB_EnableGlobalInt>

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f36:	b004      	add	sp, #16
 8003f38:	4770      	bx	lr
	...

08003f3c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f3c:	b490      	push	{r4, r7}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f60:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	78db      	ldrb	r3, [r3, #3]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d819      	bhi.n	8003f9e <USB_ActivateEndpoint+0x62>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <USB_ActivateEndpoint+0x34>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f95 	.word	0x08003f95
 8003f78:	08003fa5 	.word	0x08003fa5
 8003f7c:	08003f8b 	.word	0x08003f8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f80:	89bb      	ldrh	r3, [r7, #12]
 8003f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f86:	81bb      	strh	r3, [r7, #12]
      break;
 8003f88:	e00d      	b.n	8003fa6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f8a:	89bb      	ldrh	r3, [r7, #12]
 8003f8c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003f90:	81bb      	strh	r3, [r7, #12]
      break;
 8003f92:	e008      	b.n	8003fa6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f94:	89bb      	ldrh	r3, [r7, #12]
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f9a:	81bb      	strh	r3, [r7, #12]
      break;
 8003f9c:	e003      	b.n	8003fa6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa2:	e000      	b.n	8003fa6 <USB_ActivateEndpoint+0x6a>
      break;
 8003fa4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	441a      	add	r2, r3
 8003fb0:	89bb      	ldrh	r3, [r7, #12]
 8003fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	b29c      	uxth	r4, r3
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	4b8a      	ldr	r3, [pc, #552]	; (800421c <USB_ActivateEndpoint+0x2e0>)
 8003ff4:	4323      	orrs	r3, r4
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	7b1b      	ldrb	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f040 8112 	bne.w	8004228 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d067      	beq.n	80040dc <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800400c:	687c      	ldr	r4, [r7, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004014:	b29b      	uxth	r3, r3
 8004016:	441c      	add	r4, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	4423      	add	r3, r4
 8004020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004024:	461c      	mov	r4, r3
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	88db      	ldrh	r3, [r3, #6]
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	b29b      	uxth	r3, r3
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	b29b      	uxth	r3, r3
 8004032:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b29c      	uxth	r4, r3
 8004042:	4623      	mov	r3, r4
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d014      	beq.n	8004076 <USB_ActivateEndpoint+0x13a>
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	b29c      	uxth	r4, r3
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	4b6c      	ldr	r3, [pc, #432]	; (8004220 <USB_ActivateEndpoint+0x2e4>)
 8004070:	4323      	orrs	r3, r4
 8004072:	b29b      	uxth	r3, r3
 8004074:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	78db      	ldrb	r3, [r3, #3]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d018      	beq.n	80040b0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004094:	b29c      	uxth	r4, r3
 8004096:	f084 0320 	eor.w	r3, r4, #32
 800409a:	b29c      	uxth	r4, r3
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	4b5d      	ldr	r3, [pc, #372]	; (800421c <USB_ActivateEndpoint+0x2e0>)
 80040a8:	4323      	orrs	r3, r4
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	8013      	strh	r3, [r2, #0]
 80040ae:	e22b      	b.n	8004508 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c6:	b29c      	uxth	r4, r3
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	441a      	add	r2, r3
 80040d2:	4b52      	ldr	r3, [pc, #328]	; (800421c <USB_ActivateEndpoint+0x2e0>)
 80040d4:	4323      	orrs	r3, r4
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	8013      	strh	r3, [r2, #0]
 80040da:	e215      	b.n	8004508 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040dc:	687c      	ldr	r4, [r7, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	441c      	add	r4, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	4423      	add	r3, r4
 80040f0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040f4:	461c      	mov	r4, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	88db      	ldrh	r3, [r3, #6]
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	b29b      	uxth	r3, r3
 8004102:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004104:	687c      	ldr	r4, [r7, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410c:	b29b      	uxth	r3, r3
 800410e:	441c      	add	r4, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	4423      	add	r3, r4
 8004118:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800411c:	461c      	mov	r4, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10e      	bne.n	8004144 <USB_ActivateEndpoint+0x208>
 8004126:	8823      	ldrh	r3, [r4, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800412e:	b29b      	uxth	r3, r3
 8004130:	8023      	strh	r3, [r4, #0]
 8004132:	8823      	ldrh	r3, [r4, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800413a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800413e:	b29b      	uxth	r3, r3
 8004140:	8023      	strh	r3, [r4, #0]
 8004142:	e02d      	b.n	80041a0 <USB_ActivateEndpoint+0x264>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b3e      	cmp	r3, #62	; 0x3e
 800414a:	d812      	bhi.n	8004172 <USB_ActivateEndpoint+0x236>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <USB_ActivateEndpoint+0x22a>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	3301      	adds	r3, #1
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	b29b      	uxth	r3, r3
 800416a:	029b      	lsls	r3, r3, #10
 800416c:	b29b      	uxth	r3, r3
 800416e:	8023      	strh	r3, [r4, #0]
 8004170:	e016      	b.n	80041a0 <USB_ActivateEndpoint+0x264>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <USB_ActivateEndpoint+0x250>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	3b01      	subs	r3, #1
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	b29b      	uxth	r3, r3
 8004190:	029b      	lsls	r3, r3, #10
 8004192:	b29b      	uxth	r3, r3
 8004194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419c:	b29b      	uxth	r3, r3
 800419e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29c      	uxth	r4, r3
 80041ae:	4623      	mov	r3, r4
 80041b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d014      	beq.n	80041e2 <USB_ActivateEndpoint+0x2a6>
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ce:	b29c      	uxth	r4, r3
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	441a      	add	r2, r3
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <USB_ActivateEndpoint+0x2e8>)
 80041dc:	4323      	orrs	r3, r4
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	b29c      	uxth	r4, r3
 80041fa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80041fe:	b29c      	uxth	r4, r3
 8004200:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004204:	b29c      	uxth	r4, r3
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	441a      	add	r2, r3
 8004210:	4b02      	ldr	r3, [pc, #8]	; (800421c <USB_ActivateEndpoint+0x2e0>)
 8004212:	4323      	orrs	r3, r4
 8004214:	b29b      	uxth	r3, r3
 8004216:	8013      	strh	r3, [r2, #0]
 8004218:	e176      	b.n	8004508 <USB_ActivateEndpoint+0x5cc>
 800421a:	bf00      	nop
 800421c:	ffff8080 	.word	0xffff8080
 8004220:	ffff80c0 	.word	0xffff80c0
 8004224:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	b29c      	uxth	r4, r3
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	4b96      	ldr	r3, [pc, #600]	; (80044a4 <USB_ActivateEndpoint+0x568>)
 800424c:	4323      	orrs	r3, r4
 800424e:	b29b      	uxth	r3, r3
 8004250:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004252:	687c      	ldr	r4, [r7, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425a:	b29b      	uxth	r3, r3
 800425c:	441c      	add	r4, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	4423      	add	r3, r4
 8004266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800426a:	461c      	mov	r4, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	891b      	ldrh	r3, [r3, #8]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	b29b      	uxth	r3, r3
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	b29b      	uxth	r3, r3
 8004278:	8023      	strh	r3, [r4, #0]
 800427a:	687c      	ldr	r4, [r7, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004282:	b29b      	uxth	r3, r3
 8004284:	441c      	add	r4, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	4423      	add	r3, r4
 800428e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004292:	461c      	mov	r4, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	895b      	ldrh	r3, [r3, #10]
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	b29b      	uxth	r3, r3
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	b29b      	uxth	r3, r3
 80042a0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	785b      	ldrb	r3, [r3, #1]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f040 8088 	bne.w	80043bc <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29c      	uxth	r4, r3
 80042ba:	4623      	mov	r3, r4
 80042bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d014      	beq.n	80042ee <USB_ActivateEndpoint+0x3b2>
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	b29c      	uxth	r4, r3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	441a      	add	r2, r3
 80042e6:	4b70      	ldr	r3, [pc, #448]	; (80044a8 <USB_ActivateEndpoint+0x56c>)
 80042e8:	4323      	orrs	r3, r4
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29c      	uxth	r4, r3
 80042fc:	4623      	mov	r3, r4
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d014      	beq.n	8004330 <USB_ActivateEndpoint+0x3f4>
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431c:	b29c      	uxth	r4, r3
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	4b60      	ldr	r3, [pc, #384]	; (80044ac <USB_ActivateEndpoint+0x570>)
 800432a:	4323      	orrs	r3, r4
 800432c:	b29b      	uxth	r3, r3
 800432e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	b29c      	uxth	r4, r3
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	4b56      	ldr	r3, [pc, #344]	; (80044ac <USB_ActivateEndpoint+0x570>)
 8004354:	4323      	orrs	r3, r4
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004370:	b29c      	uxth	r4, r3
 8004372:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004376:	b29c      	uxth	r4, r3
 8004378:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800437c:	b29c      	uxth	r4, r3
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	441a      	add	r2, r3
 8004388:	4b49      	ldr	r3, [pc, #292]	; (80044b0 <USB_ActivateEndpoint+0x574>)
 800438a:	4323      	orrs	r3, r4
 800438c:	b29b      	uxth	r3, r3
 800438e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a6:	b29c      	uxth	r4, r3
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	4b3f      	ldr	r3, [pc, #252]	; (80044b0 <USB_ActivateEndpoint+0x574>)
 80043b4:	4323      	orrs	r3, r4
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	8013      	strh	r3, [r2, #0]
 80043ba:	e0a5      	b.n	8004508 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29c      	uxth	r4, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d014      	beq.n	80043fe <USB_ActivateEndpoint+0x4c2>
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	b29c      	uxth	r4, r3
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <USB_ActivateEndpoint+0x56c>)
 80043f8:	4323      	orrs	r3, r4
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29c      	uxth	r4, r3
 800440c:	4623      	mov	r3, r4
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d014      	beq.n	8004440 <USB_ActivateEndpoint+0x504>
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442c:	b29c      	uxth	r4, r3
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	441a      	add	r2, r3
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <USB_ActivateEndpoint+0x570>)
 800443a:	4323      	orrs	r3, r4
 800443c:	b29b      	uxth	r3, r3
 800443e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004456:	b29c      	uxth	r4, r3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	441a      	add	r2, r3
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <USB_ActivateEndpoint+0x56c>)
 8004464:	4323      	orrs	r3, r4
 8004466:	b29b      	uxth	r3, r3
 8004468:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	78db      	ldrb	r3, [r3, #3]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d020      	beq.n	80044b4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004488:	b29c      	uxth	r4, r3
 800448a:	f084 0320 	eor.w	r3, r4, #32
 800448e:	b29c      	uxth	r4, r3
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	441a      	add	r2, r3
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <USB_ActivateEndpoint+0x574>)
 800449c:	4323      	orrs	r3, r4
 800449e:	b29b      	uxth	r3, r3
 80044a0:	8013      	strh	r3, [r2, #0]
 80044a2:	e01c      	b.n	80044de <USB_ActivateEndpoint+0x5a2>
 80044a4:	ffff8180 	.word	0xffff8180
 80044a8:	ffffc080 	.word	0xffffc080
 80044ac:	ffff80c0 	.word	0xffff80c0
 80044b0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ca:	b29c      	uxth	r4, r3
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <USB_ActivateEndpoint+0x5d8>)
 80044d8:	4323      	orrs	r3, r4
 80044da:	b29b      	uxth	r3, r3
 80044dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f4:	b29c      	uxth	r4, r3
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <USB_ActivateEndpoint+0x5d8>)
 8004502:	4323      	orrs	r3, r4
 8004504:	b29b      	uxth	r3, r3
 8004506:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bc90      	pop	{r4, r7}
 8004512:	4770      	bx	lr
 8004514:	ffff8080 	.word	0xffff8080

08004518 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004518:	b490      	push	{r4, r7}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	7b1b      	ldrb	r3, [r3, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d171      	bne.n	800460e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	785b      	ldrb	r3, [r3, #1]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d036      	beq.n	80045a0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29c      	uxth	r4, r3
 8004540:	4623      	mov	r3, r4
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d014      	beq.n	8004574 <USB_DeactivateEndpoint+0x5c>
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004560:	b29c      	uxth	r4, r3
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	441a      	add	r2, r3
 800456c:	4b6b      	ldr	r3, [pc, #428]	; (800471c <USB_DeactivateEndpoint+0x204>)
 800456e:	4323      	orrs	r3, r4
 8004570:	b29b      	uxth	r3, r3
 8004572:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458a:	b29c      	uxth	r4, r3
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	441a      	add	r2, r3
 8004596:	4b62      	ldr	r3, [pc, #392]	; (8004720 <USB_DeactivateEndpoint+0x208>)
 8004598:	4323      	orrs	r3, r4
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
 800459e:	e144      	b.n	800482a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29c      	uxth	r4, r3
 80045ae:	4623      	mov	r3, r4
 80045b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d014      	beq.n	80045e2 <USB_DeactivateEndpoint+0xca>
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	b29c      	uxth	r4, r3
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	4b52      	ldr	r3, [pc, #328]	; (8004724 <USB_DeactivateEndpoint+0x20c>)
 80045dc:	4323      	orrs	r3, r4
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f8:	b29c      	uxth	r4, r3
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	441a      	add	r2, r3
 8004604:	4b46      	ldr	r3, [pc, #280]	; (8004720 <USB_DeactivateEndpoint+0x208>)
 8004606:	4323      	orrs	r3, r4
 8004608:	b29b      	uxth	r3, r3
 800460a:	8013      	strh	r3, [r2, #0]
 800460c:	e10d      	b.n	800482a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 8088 	bne.w	8004728 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29c      	uxth	r4, r3
 8004626:	4623      	mov	r3, r4
 8004628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d014      	beq.n	800465a <USB_DeactivateEndpoint+0x142>
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	b29c      	uxth	r4, r3
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	441a      	add	r2, r3
 8004652:	4b34      	ldr	r3, [pc, #208]	; (8004724 <USB_DeactivateEndpoint+0x20c>)
 8004654:	4323      	orrs	r3, r4
 8004656:	b29b      	uxth	r3, r3
 8004658:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29c      	uxth	r4, r3
 8004668:	4623      	mov	r3, r4
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d014      	beq.n	800469c <USB_DeactivateEndpoint+0x184>
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	b29c      	uxth	r4, r3
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	441a      	add	r2, r3
 8004694:	4b21      	ldr	r3, [pc, #132]	; (800471c <USB_DeactivateEndpoint+0x204>)
 8004696:	4323      	orrs	r3, r4
 8004698:	b29b      	uxth	r3, r3
 800469a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b2:	b29c      	uxth	r4, r3
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	4b17      	ldr	r3, [pc, #92]	; (800471c <USB_DeactivateEndpoint+0x204>)
 80046c0:	4323      	orrs	r3, r4
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046dc:	b29c      	uxth	r4, r3
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	441a      	add	r2, r3
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <USB_DeactivateEndpoint+0x208>)
 80046ea:	4323      	orrs	r3, r4
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004706:	b29c      	uxth	r4, r3
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	4b03      	ldr	r3, [pc, #12]	; (8004720 <USB_DeactivateEndpoint+0x208>)
 8004714:	4323      	orrs	r3, r4
 8004716:	b29b      	uxth	r3, r3
 8004718:	8013      	strh	r3, [r2, #0]
 800471a:	e086      	b.n	800482a <USB_DeactivateEndpoint+0x312>
 800471c:	ffff80c0 	.word	0xffff80c0
 8004720:	ffff8080 	.word	0xffff8080
 8004724:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29c      	uxth	r4, r3
 8004736:	4623      	mov	r3, r4
 8004738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d014      	beq.n	800476a <USB_DeactivateEndpoint+0x252>
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004756:	b29c      	uxth	r4, r3
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	441a      	add	r2, r3
 8004762:	4b35      	ldr	r3, [pc, #212]	; (8004838 <USB_DeactivateEndpoint+0x320>)
 8004764:	4323      	orrs	r3, r4
 8004766:	b29b      	uxth	r3, r3
 8004768:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29c      	uxth	r4, r3
 8004778:	4623      	mov	r3, r4
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d014      	beq.n	80047ac <USB_DeactivateEndpoint+0x294>
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	b29c      	uxth	r4, r3
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	4b25      	ldr	r3, [pc, #148]	; (800483c <USB_DeactivateEndpoint+0x324>)
 80047a6:	4323      	orrs	r3, r4
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	b29c      	uxth	r4, r3
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <USB_DeactivateEndpoint+0x320>)
 80047d0:	4323      	orrs	r3, r4
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ec:	b29c      	uxth	r4, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	441a      	add	r2, r3
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <USB_DeactivateEndpoint+0x328>)
 80047fa:	4323      	orrs	r3, r4
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	b29c      	uxth	r4, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	4b07      	ldr	r3, [pc, #28]	; (8004840 <USB_DeactivateEndpoint+0x328>)
 8004824:	4323      	orrs	r3, r4
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bc90      	pop	{r4, r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	ffffc080 	.word	0xffffc080
 800483c:	ffff80c0 	.word	0xffff80c0
 8004840:	ffff8080 	.word	0xffff8080

08004844 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b08d      	sub	sp, #52	; 0x34
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	2b01      	cmp	r3, #1
 8004854:	f040 8160 	bne.w	8004b18 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	429a      	cmp	r2, r3
 8004862:	d909      	bls.n	8004878 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	1ad2      	subs	r2, r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	619a      	str	r2, [r3, #24]
 8004876:	e005      	b.n	8004884 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2200      	movs	r2, #0
 8004882:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	7b1b      	ldrb	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d119      	bne.n	80048c0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6959      	ldr	r1, [r3, #20]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	88da      	ldrh	r2, [r3, #6]
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	b29b      	uxth	r3, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fba2 	bl	8004fe2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800489e:	687c      	ldr	r4, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	441c      	add	r4, r3
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	4423      	add	r3, r4
 80048b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048b6:	461c      	mov	r4, r3
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	8023      	strh	r3, [r4, #0]
 80048be:	e10f      	b.n	8004ae0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d065      	beq.n	80049a2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048d6:	687c      	ldr	r4, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d148      	bne.n	8004972 <USB_EPStartXfer+0x12e>
 80048e0:	687c      	ldr	r4, [r7, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	441c      	add	r4, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	4423      	add	r3, r4
 80048f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048f8:	461c      	mov	r4, r3
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10e      	bne.n	800491e <USB_EPStartXfer+0xda>
 8004900:	8823      	ldrh	r3, [r4, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004908:	b29b      	uxth	r3, r3
 800490a:	8023      	strh	r3, [r4, #0]
 800490c:	8823      	ldrh	r3, [r4, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004918:	b29b      	uxth	r3, r3
 800491a:	8023      	strh	r3, [r4, #0]
 800491c:	e03d      	b.n	800499a <USB_EPStartXfer+0x156>
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	2b3e      	cmp	r3, #62	; 0x3e
 8004922:	d810      	bhi.n	8004946 <USB_EPStartXfer+0x102>
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <USB_EPStartXfer+0xf6>
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	3301      	adds	r3, #1
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	b29b      	uxth	r3, r3
 800493e:	029b      	lsls	r3, r3, #10
 8004940:	b29b      	uxth	r3, r3
 8004942:	8023      	strh	r3, [r4, #0]
 8004944:	e029      	b.n	800499a <USB_EPStartXfer+0x156>
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <USB_EPStartXfer+0x118>
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	3b01      	subs	r3, #1
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	b29b      	uxth	r3, r3
 8004960:	029b      	lsls	r3, r3, #10
 8004962:	b29b      	uxth	r3, r3
 8004964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496c:	b29b      	uxth	r3, r3
 800496e:	8023      	strh	r3, [r4, #0]
 8004970:	e013      	b.n	800499a <USB_EPStartXfer+0x156>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d10f      	bne.n	800499a <USB_EPStartXfer+0x156>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004980:	b29b      	uxth	r3, r3
 8004982:	441c      	add	r4, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	4423      	add	r3, r4
 800498c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	895b      	ldrh	r3, [r3, #10]
 800499e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049a0:	e063      	b.n	8004a6a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d148      	bne.n	8004a3c <USB_EPStartXfer+0x1f8>
 80049aa:	687c      	ldr	r4, [r7, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	441c      	add	r4, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	4423      	add	r3, r4
 80049be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049c2:	461c      	mov	r4, r3
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10e      	bne.n	80049e8 <USB_EPStartXfer+0x1a4>
 80049ca:	8823      	ldrh	r3, [r4, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8023      	strh	r3, [r4, #0]
 80049d6:	8823      	ldrh	r3, [r4, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	8023      	strh	r3, [r4, #0]
 80049e6:	e03d      	b.n	8004a64 <USB_EPStartXfer+0x220>
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	2b3e      	cmp	r3, #62	; 0x3e
 80049ec:	d810      	bhi.n	8004a10 <USB_EPStartXfer+0x1cc>
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	623b      	str	r3, [r7, #32]
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <USB_EPStartXfer+0x1c0>
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	3301      	adds	r3, #1
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	029b      	lsls	r3, r3, #10
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8023      	strh	r3, [r4, #0]
 8004a0e:	e029      	b.n	8004a64 <USB_EPStartXfer+0x220>
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	623b      	str	r3, [r7, #32]
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <USB_EPStartXfer+0x1e2>
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	623b      	str	r3, [r7, #32]
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	029b      	lsls	r3, r3, #10
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8023      	strh	r3, [r4, #0]
 8004a3a:	e013      	b.n	8004a64 <USB_EPStartXfer+0x220>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	785b      	ldrb	r3, [r3, #1]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d10f      	bne.n	8004a64 <USB_EPStartXfer+0x220>
 8004a44:	687c      	ldr	r4, [r7, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	441c      	add	r4, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	4423      	add	r3, r4
 8004a58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a5c:	461c      	mov	r4, r3
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	891b      	ldrh	r3, [r3, #8]
 8004a68:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6959      	ldr	r1, [r3, #20]
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fab4 	bl	8004fe2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d115      	bne.n	8004aae <USB_EPStartXfer+0x26a>
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a98:	b29c      	uxth	r4, r3
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	4b9a      	ldr	r3, [pc, #616]	; (8004d10 <USB_EPStartXfer+0x4cc>)
 8004aa6:	4323      	orrs	r3, r4
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8013      	strh	r3, [r2, #0]
 8004aac:	e018      	b.n	8004ae0 <USB_EPStartXfer+0x29c>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d114      	bne.n	8004ae0 <USB_EPStartXfer+0x29c>
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	b29c      	uxth	r4, r3
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	4b8e      	ldr	r3, [pc, #568]	; (8004d14 <USB_EPStartXfer+0x4d0>)
 8004ada:	4323      	orrs	r3, r4
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af6:	b29c      	uxth	r4, r3
 8004af8:	f084 0310 	eor.w	r3, r4, #16
 8004afc:	b29c      	uxth	r4, r3
 8004afe:	f084 0320 	eor.w	r3, r4, #32
 8004b02:	b29c      	uxth	r4, r3
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	441a      	add	r2, r3
 8004b0e:	4b82      	ldr	r3, [pc, #520]	; (8004d18 <USB_EPStartXfer+0x4d4>)
 8004b10:	4323      	orrs	r3, r4
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8013      	strh	r3, [r2, #0]
 8004b16:	e146      	b.n	8004da6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	699a      	ldr	r2, [r3, #24]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d909      	bls.n	8004b38 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	1ad2      	subs	r2, r2, r3
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	619a      	str	r2, [r3, #24]
 8004b36:	e005      	b.n	8004b44 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2200      	movs	r2, #0
 8004b42:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	7b1b      	ldrb	r3, [r3, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d148      	bne.n	8004bde <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b4c:	687c      	ldr	r4, [r7, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	441c      	add	r4, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	4423      	add	r3, r4
 8004b60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b64:	461c      	mov	r4, r3
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10e      	bne.n	8004b8a <USB_EPStartXfer+0x346>
 8004b6c:	8823      	ldrh	r3, [r4, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	8023      	strh	r3, [r4, #0]
 8004b78:	8823      	ldrh	r3, [r4, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	8023      	strh	r3, [r4, #0]
 8004b88:	e0f2      	b.n	8004d70 <USB_EPStartXfer+0x52c>
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8004b8e:	d810      	bhi.n	8004bb2 <USB_EPStartXfer+0x36e>
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	085b      	lsrs	r3, r3, #1
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <USB_EPStartXfer+0x362>
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	029b      	lsls	r3, r3, #10
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8023      	strh	r3, [r4, #0]
 8004bb0:	e0de      	b.n	8004d70 <USB_EPStartXfer+0x52c>
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	61fb      	str	r3, [r7, #28]
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <USB_EPStartXfer+0x384>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	029b      	lsls	r3, r3, #10
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8023      	strh	r3, [r4, #0]
 8004bdc:	e0c8      	b.n	8004d70 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d148      	bne.n	8004c78 <USB_EPStartXfer+0x434>
 8004be6:	687c      	ldr	r4, [r7, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	441c      	add	r4, r3
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	4423      	add	r3, r4
 8004bfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bfe:	461c      	mov	r4, r3
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10e      	bne.n	8004c24 <USB_EPStartXfer+0x3e0>
 8004c06:	8823      	ldrh	r3, [r4, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	8023      	strh	r3, [r4, #0]
 8004c12:	8823      	ldrh	r3, [r4, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	8023      	strh	r3, [r4, #0]
 8004c22:	e03d      	b.n	8004ca0 <USB_EPStartXfer+0x45c>
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2b3e      	cmp	r3, #62	; 0x3e
 8004c28:	d810      	bhi.n	8004c4c <USB_EPStartXfer+0x408>
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <USB_EPStartXfer+0x3fc>
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	029b      	lsls	r3, r3, #10
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	8023      	strh	r3, [r4, #0]
 8004c4a:	e029      	b.n	8004ca0 <USB_EPStartXfer+0x45c>
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <USB_EPStartXfer+0x41e>
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	029b      	lsls	r3, r3, #10
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8023      	strh	r3, [r4, #0]
 8004c76:	e013      	b.n	8004ca0 <USB_EPStartXfer+0x45c>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10f      	bne.n	8004ca0 <USB_EPStartXfer+0x45c>
 8004c80:	687c      	ldr	r4, [r7, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	441c      	add	r4, r3
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	4423      	add	r3, r4
 8004c94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c98:	461c      	mov	r4, r3
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	8023      	strh	r3, [r4, #0]
 8004ca0:	687c      	ldr	r4, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d14e      	bne.n	8004d48 <USB_EPStartXfer+0x504>
 8004caa:	687c      	ldr	r4, [r7, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	441c      	add	r4, r3
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	4423      	add	r3, r4
 8004cbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cc2:	461c      	mov	r4, r3
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10e      	bne.n	8004ce8 <USB_EPStartXfer+0x4a4>
 8004cca:	8823      	ldrh	r3, [r4, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	8023      	strh	r3, [r4, #0]
 8004cd6:	8823      	ldrh	r3, [r4, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8023      	strh	r3, [r4, #0]
 8004ce6:	e043      	b.n	8004d70 <USB_EPStartXfer+0x52c>
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	2b3e      	cmp	r3, #62	; 0x3e
 8004cec:	d816      	bhi.n	8004d1c <USB_EPStartXfer+0x4d8>
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <USB_EPStartXfer+0x4c0>
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	3301      	adds	r3, #1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	029b      	lsls	r3, r3, #10
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	8023      	strh	r3, [r4, #0]
 8004d0e:	e02f      	b.n	8004d70 <USB_EPStartXfer+0x52c>
 8004d10:	ffff80c0 	.word	0xffff80c0
 8004d14:	ffffc080 	.word	0xffffc080
 8004d18:	ffff8080 	.word	0xffff8080
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <USB_EPStartXfer+0x4ee>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	029b      	lsls	r3, r3, #10
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8023      	strh	r3, [r4, #0]
 8004d46:	e013      	b.n	8004d70 <USB_EPStartXfer+0x52c>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d10f      	bne.n	8004d70 <USB_EPStartXfer+0x52c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	441c      	add	r4, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	4423      	add	r3, r4
 8004d62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	b29c      	uxth	r4, r3
 8004d88:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004d8c:	b29c      	uxth	r4, r3
 8004d8e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004d92:	b29c      	uxth	r4, r3
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <USB_EPStartXfer+0x56c>)
 8004da0:	4323      	orrs	r3, r4
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3734      	adds	r7, #52	; 0x34
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd90      	pop	{r4, r7, pc}
 8004db0:	ffff8080 	.word	0xffff8080

08004db4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004db4:	b490      	push	{r4, r7}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d018      	beq.n	8004df8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ddc:	b29c      	uxth	r4, r3
 8004dde:	f084 0310 	eor.w	r3, r4, #16
 8004de2:	b29c      	uxth	r4, r3
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	441a      	add	r2, r3
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <USB_EPSetStall+0x80>)
 8004df0:	4323      	orrs	r3, r4
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	8013      	strh	r3, [r2, #0]
 8004df6:	e017      	b.n	8004e28 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	b29c      	uxth	r4, r3
 8004e10:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004e14:	b29c      	uxth	r4, r3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <USB_EPSetStall+0x80>)
 8004e22:	4323      	orrs	r3, r4
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc90      	pop	{r4, r7}
 8004e32:	4770      	bx	lr
 8004e34:	ffff8080 	.word	0xffff8080

08004e38 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e38:	b490      	push	{r4, r7}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	7b1b      	ldrb	r3, [r3, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d17d      	bne.n	8004f46 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	785b      	ldrb	r3, [r3, #1]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d03d      	beq.n	8004ece <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29c      	uxth	r4, r3
 8004e60:	4623      	mov	r3, r4
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d014      	beq.n	8004e94 <USB_EPClearStall+0x5c>
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e80:	b29c      	uxth	r4, r3
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	4b31      	ldr	r3, [pc, #196]	; (8004f54 <USB_EPClearStall+0x11c>)
 8004e8e:	4323      	orrs	r3, r4
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	78db      	ldrb	r3, [r3, #3]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d054      	beq.n	8004f46 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb2:	b29c      	uxth	r4, r3
 8004eb4:	f084 0320 	eor.w	r3, r4, #32
 8004eb8:	b29c      	uxth	r4, r3
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <USB_EPClearStall+0x120>)
 8004ec6:	4323      	orrs	r3, r4
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8013      	strh	r3, [r2, #0]
 8004ecc:	e03b      	b.n	8004f46 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29c      	uxth	r4, r3
 8004edc:	4623      	mov	r3, r4
 8004ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d014      	beq.n	8004f10 <USB_EPClearStall+0xd8>
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efc:	b29c      	uxth	r4, r3
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <USB_EPClearStall+0x124>)
 8004f0a:	4323      	orrs	r3, r4
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	b29c      	uxth	r4, r3
 8004f28:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f2c:	b29c      	uxth	r4, r3
 8004f2e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004f32:	b29c      	uxth	r4, r3
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <USB_EPClearStall+0x120>)
 8004f40:	4323      	orrs	r3, r4
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc90      	pop	{r4, r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	ffff80c0 	.word	0xffff80c0
 8004f58:	ffff8080 	.word	0xffff8080
 8004f5c:	ffffc080 	.word	0xffffc080

08004f60 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d103      	bne.n	8004f7a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2280      	movs	r2, #128	; 0x80
 8004f76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b08d      	sub	sp, #52	; 0x34
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	4611      	mov	r1, r2
 8004fee:	461a      	mov	r2, r3
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	80fb      	strh	r3, [r7, #6]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004ff8:	88bb      	ldrh	r3, [r7, #4]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	005a      	lsls	r2, r3, #1
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005014:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800501a:	e01e      	b.n	800505a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	3301      	adds	r3, #1
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b29b      	uxth	r3, r3
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	b29b      	uxth	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	b29a      	uxth	r2, r3
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	3302      	adds	r3, #2
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	3302      	adds	r3, #2
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	3301      	adds	r3, #1
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	3b01      	subs	r3, #1
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1dd      	bne.n	800501c <USB_WritePMA+0x3a>
  }
}
 8005060:	bf00      	nop
 8005062:	3734      	adds	r7, #52	; 0x34
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800506a:	b480      	push	{r7}
 800506c:	b08b      	sub	sp, #44	; 0x2c
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	4611      	mov	r1, r2
 8005076:	461a      	mov	r2, r3
 8005078:	460b      	mov	r3, r1
 800507a:	80fb      	strh	r3, [r7, #6]
 800507c:	4613      	mov	r3, r2
 800507e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005080:	88bb      	ldrh	r3, [r7, #4]
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	b29b      	uxth	r3, r3
 8005086:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	005a      	lsls	r2, r3, #1
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800509c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
 80050a2:	e01b      	b.n	80050dc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	3302      	adds	r3, #2
 80050b0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	0a1b      	lsrs	r3, r3, #8
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3301      	adds	r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	3302      	adds	r3, #2
 80050d4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	3b01      	subs	r3, #1
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e0      	bne.n	80050a4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80050e2:	88bb      	ldrh	r3, [r7, #4]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	701a      	strb	r2, [r3, #0]
  }
}
 80050fe:	bf00      	nop
 8005100:	372c      	adds	r7, #44	; 0x2c
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	7c1b      	ldrb	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d115      	bne.n	800514c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005124:	2202      	movs	r2, #2
 8005126:	2181      	movs	r1, #129	; 0x81
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f001 fe30 	bl	8006d8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005138:	2202      	movs	r2, #2
 800513a:	2101      	movs	r1, #1
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f001 fe26 	bl	8006d8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800514a:	e012      	b.n	8005172 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800514c:	2340      	movs	r3, #64	; 0x40
 800514e:	2202      	movs	r2, #2
 8005150:	2181      	movs	r1, #129	; 0x81
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 fe1b 	bl	8006d8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800515e:	2340      	movs	r3, #64	; 0x40
 8005160:	2202      	movs	r2, #2
 8005162:	2101      	movs	r1, #1
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 fe12 	bl	8006d8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005172:	2308      	movs	r3, #8
 8005174:	2203      	movs	r2, #3
 8005176:	2182      	movs	r1, #130	; 0x82
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f001 fe08 	bl	8006d8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005184:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005188:	f001 ff22 	bl	8006fd0 <USBD_static_malloc>
 800518c:	4602      	mov	r2, r0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800519e:	2301      	movs	r3, #1
 80051a0:	73fb      	strb	r3, [r7, #15]
 80051a2:	e026      	b.n	80051f2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051aa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	7c1b      	ldrb	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051d8:	2101      	movs	r1, #1
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f001 fec1 	bl	8006f62 <USBD_LL_PrepareReceive>
 80051e0:	e007      	b.n	80051f2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051e8:	2340      	movs	r3, #64	; 0x40
 80051ea:	2101      	movs	r1, #1
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f001 feb8 	bl	8006f62 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800520c:	2181      	movs	r1, #129	; 0x81
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f001 fde3 	bl	8006dda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800521a:	2101      	movs	r1, #1
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f001 fddc 	bl	8006dda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800522a:	2182      	movs	r1, #130	; 0x82
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 fdd4 	bl	8006dda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00e      	beq.n	8005260 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005252:	4618      	mov	r0, r3
 8005254:	f001 fec8 	bl	8006fe8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b086      	sub	sp, #24
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800527a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005290:	2b00      	cmp	r3, #0
 8005292:	d039      	beq.n	8005308 <USBD_CDC_Setup+0x9e>
 8005294:	2b20      	cmp	r3, #32
 8005296:	d17c      	bne.n	8005392 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	88db      	ldrh	r3, [r3, #6]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d029      	beq.n	80052f4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	b25b      	sxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	da11      	bge.n	80052ce <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80052b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	88d2      	ldrh	r2, [r2, #6]
 80052bc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052be:	6939      	ldr	r1, [r7, #16]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	88db      	ldrh	r3, [r3, #6]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f001 f9e0 	bl	800668c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80052cc:	e068      	b.n	80053a0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	785a      	ldrb	r2, [r3, #1]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	88db      	ldrh	r3, [r3, #6]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052e4:	6939      	ldr	r1, [r7, #16]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	88db      	ldrh	r3, [r3, #6]
 80052ea:	461a      	mov	r2, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 f9fb 	bl	80066e8 <USBD_CtlPrepareRx>
      break;
 80052f2:	e055      	b.n	80053a0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	7850      	ldrb	r0, [r2, #1]
 8005300:	2200      	movs	r2, #0
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	4798      	blx	r3
      break;
 8005306:	e04b      	b.n	80053a0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	2b0a      	cmp	r3, #10
 800530e:	d017      	beq.n	8005340 <USBD_CDC_Setup+0xd6>
 8005310:	2b0b      	cmp	r3, #11
 8005312:	d029      	beq.n	8005368 <USBD_CDC_Setup+0xfe>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d133      	bne.n	8005380 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531e:	2b03      	cmp	r3, #3
 8005320:	d107      	bne.n	8005332 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005322:	f107 030c 	add.w	r3, r7, #12
 8005326:	2202      	movs	r2, #2
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f001 f9ae 	bl	800668c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005330:	e02e      	b.n	8005390 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f001 f93f 	bl	80065b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800533a:	2302      	movs	r3, #2
 800533c:	75fb      	strb	r3, [r7, #23]
          break;
 800533e:	e027      	b.n	8005390 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005346:	2b03      	cmp	r3, #3
 8005348:	d107      	bne.n	800535a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800534a:	f107 030f 	add.w	r3, r7, #15
 800534e:	2201      	movs	r2, #1
 8005350:	4619      	mov	r1, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f001 f99a 	bl	800668c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005358:	e01a      	b.n	8005390 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f001 f92b 	bl	80065b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005362:	2302      	movs	r3, #2
 8005364:	75fb      	strb	r3, [r7, #23]
          break;
 8005366:	e013      	b.n	8005390 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800536e:	2b03      	cmp	r3, #3
 8005370:	d00d      	beq.n	800538e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005372:	6839      	ldr	r1, [r7, #0]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 f91f 	bl	80065b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800537a:	2302      	movs	r3, #2
 800537c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800537e:	e006      	b.n	800538e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 f918 	bl	80065b8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005388:	2302      	movs	r3, #2
 800538a:	75fb      	strb	r3, [r7, #23]
          break;
 800538c:	e000      	b.n	8005390 <USBD_CDC_Setup+0x126>
          break;
 800538e:	bf00      	nop
      }
      break;
 8005390:	e006      	b.n	80053a0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f001 f90f 	bl	80065b8 <USBD_CtlError>
      ret = USBD_FAIL;
 800539a:	2302      	movs	r3, #2
 800539c:	75fb      	strb	r3, [r7, #23]
      break;
 800539e:	bf00      	nop
  }

  return ret;
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053c4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d037      	beq.n	8005440 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	331c      	adds	r3, #28
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d026      	beq.n	8005434 <USBD_CDC_DataIn+0x8a>
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	331c      	adds	r3, #28
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	0152      	lsls	r2, r2, #5
 80053fe:	440a      	add	r2, r1
 8005400:	3238      	adds	r2, #56	; 0x38
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	fbb3 f1f2 	udiv	r1, r3, r2
 8005408:	fb02 f201 	mul.w	r2, r2, r1
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d110      	bne.n	8005434 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	331c      	adds	r3, #28
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005426:	78f9      	ldrb	r1, [r7, #3]
 8005428:	2300      	movs	r3, #0
 800542a:	2200      	movs	r2, #0
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 fd75 	bl	8006f1c <USBD_LL_Transmit>
 8005432:	e003      	b.n	800543c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	e000      	b.n	8005442 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005440:	2302      	movs	r3, #2
  }
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 fda0 	bl	8006fa8 <USBD_LL_GetRxDataSize>
 8005468:	4602      	mov	r2, r0
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800548e:	4611      	mov	r1, r2
 8005490:	4798      	blx	r3

    return USBD_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	e000      	b.n	8005498 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005496:	2302      	movs	r3, #2
  }
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d015      	beq.n	80054e6 <USBD_CDC_EP0_RxReady+0x46>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80054c0:	2bff      	cmp	r3, #255	; 0xff
 80054c2:	d010      	beq.n	80054e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80054d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80054da:	b292      	uxth	r2, r2
 80054dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	22ff      	movs	r2, #255	; 0xff
 80054e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2243      	movs	r2, #67	; 0x43
 80054fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80054fe:	4b03      	ldr	r3, [pc, #12]	; (800550c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000094 	.word	0x20000094

08005510 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2243      	movs	r2, #67	; 0x43
 800551c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800551e:	4b03      	ldr	r3, [pc, #12]	; (800552c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	20000050 	.word	0x20000050

08005530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2243      	movs	r2, #67	; 0x43
 800553c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800553e:	4b03      	ldr	r3, [pc, #12]	; (800554c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	200000d8 	.word	0x200000d8

08005550 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	220a      	movs	r2, #10
 800555c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800555e:	4b03      	ldr	r3, [pc, #12]	; (800556c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	2000000c 	.word	0x2000000c

08005570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800557a:	2302      	movs	r3, #2
 800557c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80055ba:	88fa      	ldrh	r2, [r7, #6]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055de:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr

080055f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005602:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d017      	beq.n	800563e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	7c1b      	ldrb	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800561c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005620:	2101      	movs	r1, #1
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fc9d 	bl	8006f62 <USBD_LL_PrepareReceive>
 8005628:	e007      	b.n	800563a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005630:	2340      	movs	r3, #64	; 0x40
 8005632:	2101      	movs	r1, #1
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f001 fc94 	bl	8006f62 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e000      	b.n	8005640 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800563e:	2302      	movs	r3, #2
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800565c:	4814      	ldr	r0, [pc, #80]	; (80056b0 <USBD_Init+0x68>)
 800565e:	f001 fd35 	bl	80070cc <printf>
 8005662:	4814      	ldr	r0, [pc, #80]	; (80056b4 <USBD_Init+0x6c>)
 8005664:	f001 fd32 	bl	80070cc <printf>
 8005668:	200a      	movs	r0, #10
 800566a:	f001 fd41 	bl	80070f0 <putchar>
#endif
    return USBD_FAIL;
 800566e:	2302      	movs	r3, #2
 8005670:	e01a      	b.n	80056a8 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	79fa      	ldrb	r2, [r7, #7]
 800569e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f001 faff 	bl	8006ca4 <USBD_LL_Init>

  return USBD_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	0800b0e4 	.word	0x0800b0e4
 80056b4:	0800b0ec 	.word	0x0800b0ec

080056b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d006      	beq.n	80056da <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	73fb      	strb	r3, [r7, #15]
 80056d8:	e00a      	b.n	80056f0 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80056da:	4808      	ldr	r0, [pc, #32]	; (80056fc <USBD_RegisterClass+0x44>)
 80056dc:	f001 fcf6 	bl	80070cc <printf>
 80056e0:	4807      	ldr	r0, [pc, #28]	; (8005700 <USBD_RegisterClass+0x48>)
 80056e2:	f001 fcf3 	bl	80070cc <printf>
 80056e6:	200a      	movs	r0, #10
 80056e8:	f001 fd02 	bl	80070f0 <putchar>
#endif
    status = USBD_FAIL;
 80056ec:	2302      	movs	r3, #2
 80056ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	0800b0e4 	.word	0x0800b0e4
 8005700:	0800b104 	.word	0x0800b104

08005704 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 fb23 	bl	8006d58 <USBD_LL_Start>

  return USBD_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr

08005730 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800573c:	2302      	movs	r3, #2
 800573e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	4611      	mov	r1, r2
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	4798      	blx	r3
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	4611      	mov	r1, r2
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3

  return USBD_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80057a4:	6839      	ldr	r1, [r7, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 feca 	bl	8006540 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057ba:	461a      	mov	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d00c      	beq.n	80057ea <USBD_LL_SetupStage+0x56>
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d302      	bcc.n	80057da <USBD_LL_SetupStage+0x46>
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d010      	beq.n	80057fa <USBD_LL_SetupStage+0x66>
 80057d8:	e017      	b.n	800580a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f9ca 	bl	8005b7c <USBD_StdDevReq>
      break;
 80057e8:	e01a      	b.n	8005820 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fa2c 	bl	8005c50 <USBD_StdItfReq>
      break;
 80057f8:	e012      	b.n	8005820 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa6a 	bl	8005cdc <USBD_StdEPReq>
      break;
 8005808:	e00a      	b.n	8005820 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005810:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005814:	b2db      	uxtb	r3, r3
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f001 fafd 	bl	8006e18 <USBD_LL_StallEP>
      break;
 800581e:	bf00      	nop
  }

  return USBD_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	460b      	mov	r3, r1
 8005834:	607a      	str	r2, [r7, #4]
 8005836:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005838:	7afb      	ldrb	r3, [r7, #11]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d14b      	bne.n	80058d6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005844:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800584c:	2b03      	cmp	r3, #3
 800584e:	d134      	bne.n	80058ba <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	d919      	bls.n	8005890 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	1ad2      	subs	r2, r2, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005872:	429a      	cmp	r2, r3
 8005874:	d203      	bcs.n	800587e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800587a:	b29b      	uxth	r3, r3
 800587c:	e002      	b.n	8005884 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005882:	b29b      	uxth	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 ff4b 	bl	8006724 <USBD_CtlContinueRx>
 800588e:	e038      	b.n	8005902 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d105      	bne.n	80058b2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 ff48 	bl	8006748 <USBD_CtlSendStatus>
 80058b8:	e023      	b.n	8005902 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d11e      	bne.n	8005902 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80058cc:	2100      	movs	r1, #0
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f001 faa2 	bl	8006e18 <USBD_LL_StallEP>
 80058d4:	e015      	b.n	8005902 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d108      	bne.n	80058fe <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	7afa      	ldrb	r2, [r7, #11]
 80058f6:	4611      	mov	r1, r2
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	4798      	blx	r3
 80058fc:	e001      	b.n	8005902 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80058fe:	2302      	movs	r3, #2
 8005900:	e000      	b.n	8005904 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	460b      	mov	r3, r1
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800591a:	7afb      	ldrb	r3, [r7, #11]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d17f      	bne.n	8005a20 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3314      	adds	r3, #20
 8005924:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800592c:	2b02      	cmp	r3, #2
 800592e:	d15c      	bne.n	80059ea <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	429a      	cmp	r2, r3
 800593a:	d915      	bls.n	8005968 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	1ad2      	subs	r2, r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	b29b      	uxth	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 feb5 	bl	80066c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800595a:	2300      	movs	r3, #0
 800595c:	2200      	movs	r2, #0
 800595e:	2100      	movs	r1, #0
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f001 fafe 	bl	8006f62 <USBD_LL_PrepareReceive>
 8005966:	e04e      	b.n	8005a06 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	6912      	ldr	r2, [r2, #16]
 8005970:	fbb3 f1f2 	udiv	r1, r3, r2
 8005974:	fb02 f201 	mul.w	r2, r2, r1
 8005978:	1a9b      	subs	r3, r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d11c      	bne.n	80059b8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005986:	429a      	cmp	r2, r3
 8005988:	d316      	bcc.n	80059b8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005994:	429a      	cmp	r2, r3
 8005996:	d20f      	bcs.n	80059b8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005998:	2200      	movs	r2, #0
 800599a:	2100      	movs	r1, #0
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fe91 	bl	80066c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059aa:	2300      	movs	r3, #0
 80059ac:	2200      	movs	r2, #0
 80059ae:	2100      	movs	r1, #0
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f001 fad6 	bl	8006f62 <USBD_LL_PrepareReceive>
 80059b6:	e026      	b.n	8005a06 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d105      	bne.n	80059da <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80059da:	2180      	movs	r1, #128	; 0x80
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f001 fa1b 	bl	8006e18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fec3 	bl	800676e <USBD_CtlReceiveStatus>
 80059e8:	e00d      	b.n	8005a06 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d004      	beq.n	80059fe <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f001 fa09 	bl	8006e18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d11d      	bne.n	8005a4c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff fe83 	bl	800571c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a1e:	e015      	b.n	8005a4c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00d      	beq.n	8005a48 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d108      	bne.n	8005a48 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	7afa      	ldrb	r2, [r7, #11]
 8005a40:	4611      	mov	r1, r2
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	4798      	blx	r3
 8005a46:	e001      	b.n	8005a4c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e000      	b.n	8005a4e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a5e:	2340      	movs	r3, #64	; 0x40
 8005a60:	2200      	movs	r2, #0
 8005a62:	2100      	movs	r1, #0
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 f992 	bl	8006d8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2240      	movs	r2, #64	; 0x40
 8005a76:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a7a:	2340      	movs	r3, #64	; 0x40
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2180      	movs	r1, #128	; 0x80
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 f984 	bl	8006d8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2240      	movs	r2, #64	; 0x40
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6852      	ldr	r2, [r2, #4]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	4611      	mov	r1, r2
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	4798      	blx	r3
  }

  return USBD_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr

08005b1e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d105      	bne.n	8005b3c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr

08005b48 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d10b      	bne.n	8005b72 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	d004      	beq.n	8005ba0 <USBD_StdDevReq+0x24>
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d002      	beq.n	8005ba0 <USBD_StdDevReq+0x24>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <USBD_StdDevReq+0x34>
 8005b9e:	e04c      	b.n	8005c3a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
      break;
 8005bae:	e049      	b.n	8005c44 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b09      	cmp	r3, #9
 8005bb6:	d83a      	bhi.n	8005c2e <USBD_StdDevReq+0xb2>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <USBD_StdDevReq+0x44>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005c11 	.word	0x08005c11
 8005bc4:	08005c25 	.word	0x08005c25
 8005bc8:	08005c2f 	.word	0x08005c2f
 8005bcc:	08005c1b 	.word	0x08005c1b
 8005bd0:	08005c2f 	.word	0x08005c2f
 8005bd4:	08005bf3 	.word	0x08005bf3
 8005bd8:	08005be9 	.word	0x08005be9
 8005bdc:	08005c2f 	.word	0x08005c2f
 8005be0:	08005c07 	.word	0x08005c07
 8005be4:	08005bfd 	.word	0x08005bfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f9d4 	bl	8005f98 <USBD_GetDescriptor>
          break;
 8005bf0:	e022      	b.n	8005c38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fb37 	bl	8006268 <USBD_SetAddress>
          break;
 8005bfa:	e01d      	b.n	8005c38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fb74 	bl	80062ec <USBD_SetConfig>
          break;
 8005c04:	e018      	b.n	8005c38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fbfd 	bl	8006408 <USBD_GetConfig>
          break;
 8005c0e:	e013      	b.n	8005c38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fc2c 	bl	8006470 <USBD_GetStatus>
          break;
 8005c18:	e00e      	b.n	8005c38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fc5a 	bl	80064d6 <USBD_SetFeature>
          break;
 8005c22:	e009      	b.n	8005c38 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fc69 	bl	80064fe <USBD_ClrFeature>
          break;
 8005c2c:	e004      	b.n	8005c38 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fcc1 	bl	80065b8 <USBD_CtlError>
          break;
 8005c36:	bf00      	nop
      }
      break;
 8005c38:	e004      	b.n	8005c44 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fcbb 	bl	80065b8 <USBD_CtlError>
      break;
 8005c42:	bf00      	nop
  }

  return ret;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop

08005c50 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d003      	beq.n	8005c72 <USBD_StdItfReq+0x22>
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d001      	beq.n	8005c72 <USBD_StdItfReq+0x22>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d12a      	bne.n	8005cc8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d81d      	bhi.n	8005cba <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	889b      	ldrh	r3, [r3, #4]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d813      	bhi.n	8005cb0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4798      	blx	r3
 8005c96:	4603      	mov	r3, r0
 8005c98:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	88db      	ldrh	r3, [r3, #6]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d110      	bne.n	8005cc4 <USBD_StdItfReq+0x74>
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10d      	bne.n	8005cc4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fd4d 	bl	8006748 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005cae:	e009      	b.n	8005cc4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fc80 	bl	80065b8 <USBD_CtlError>
          break;
 8005cb8:	e004      	b.n	8005cc4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fc7b 	bl	80065b8 <USBD_CtlError>
          break;
 8005cc2:	e000      	b.n	8005cc6 <USBD_StdItfReq+0x76>
          break;
 8005cc4:	bf00      	nop
      }
      break;
 8005cc6:	e004      	b.n	8005cd2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fc74 	bl	80065b8 <USBD_CtlError>
      break;
 8005cd0:	bf00      	nop
  }

  return USBD_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	889b      	ldrh	r3, [r3, #4]
 8005cee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d004      	beq.n	8005d06 <USBD_StdEPReq+0x2a>
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d002      	beq.n	8005d06 <USBD_StdEPReq+0x2a>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <USBD_StdEPReq+0x3a>
 8005d04:	e13d      	b.n	8005f82 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
      break;
 8005d14:	e13a      	b.n	8005f8c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d10a      	bne.n	8005d38 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	e12a      	b.n	8005f8e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d03e      	beq.n	8005dbe <USBD_StdEPReq+0xe2>
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d002      	beq.n	8005d4a <USBD_StdEPReq+0x6e>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d070      	beq.n	8005e2a <USBD_StdEPReq+0x14e>
 8005d48:	e115      	b.n	8005f76 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d002      	beq.n	8005d5a <USBD_StdEPReq+0x7e>
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d015      	beq.n	8005d84 <USBD_StdEPReq+0xa8>
 8005d58:	e02b      	b.n	8005db2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d5a:	7bbb      	ldrb	r3, [r7, #14]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00c      	beq.n	8005d7a <USBD_StdEPReq+0x9e>
 8005d60:	7bbb      	ldrb	r3, [r7, #14]
 8005d62:	2b80      	cmp	r3, #128	; 0x80
 8005d64:	d009      	beq.n	8005d7a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005d66:	7bbb      	ldrb	r3, [r7, #14]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f001 f854 	bl	8006e18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005d70:	2180      	movs	r1, #128	; 0x80
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 f850 	bl	8006e18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d78:	e020      	b.n	8005dbc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fc1b 	bl	80065b8 <USBD_CtlError>
              break;
 8005d82:	e01b      	b.n	8005dbc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	885b      	ldrh	r3, [r3, #2]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10e      	bne.n	8005daa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <USBD_StdEPReq+0xce>
 8005d92:	7bbb      	ldrb	r3, [r7, #14]
 8005d94:	2b80      	cmp	r3, #128	; 0x80
 8005d96:	d008      	beq.n	8005daa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	88db      	ldrh	r3, [r3, #6]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 f837 	bl	8006e18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fccc 	bl	8006748 <USBD_CtlSendStatus>

              break;
 8005db0:	e004      	b.n	8005dbc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fbff 	bl	80065b8 <USBD_CtlError>
              break;
 8005dba:	bf00      	nop
          }
          break;
 8005dbc:	e0e0      	b.n	8005f80 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d002      	beq.n	8005dce <USBD_StdEPReq+0xf2>
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d015      	beq.n	8005df8 <USBD_StdEPReq+0x11c>
 8005dcc:	e026      	b.n	8005e1c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005dce:	7bbb      	ldrb	r3, [r7, #14]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00c      	beq.n	8005dee <USBD_StdEPReq+0x112>
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	2b80      	cmp	r3, #128	; 0x80
 8005dd8:	d009      	beq.n	8005dee <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 f81a 	bl	8006e18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005de4:	2180      	movs	r1, #128	; 0x80
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 f816 	bl	8006e18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005dec:	e01c      	b.n	8005e28 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fbe1 	bl	80065b8 <USBD_CtlError>
              break;
 8005df6:	e017      	b.n	8005e28 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	885b      	ldrh	r3, [r3, #2]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d112      	bne.n	8005e26 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005e0a:	7bbb      	ldrb	r3, [r7, #14]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 f821 	bl	8006e56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fc97 	bl	8006748 <USBD_CtlSendStatus>
              }
              break;
 8005e1a:	e004      	b.n	8005e26 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fbca 	bl	80065b8 <USBD_CtlError>
              break;
 8005e24:	e000      	b.n	8005e28 <USBD_StdEPReq+0x14c>
              break;
 8005e26:	bf00      	nop
          }
          break;
 8005e28:	e0aa      	b.n	8005f80 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d002      	beq.n	8005e3a <USBD_StdEPReq+0x15e>
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d032      	beq.n	8005e9e <USBD_StdEPReq+0x1c2>
 8005e38:	e097      	b.n	8005f6a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <USBD_StdEPReq+0x174>
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d004      	beq.n	8005e50 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fbb5 	bl	80065b8 <USBD_CtlError>
                break;
 8005e4e:	e091      	b.n	8005f74 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	da0b      	bge.n	8005e70 <USBD_StdEPReq+0x194>
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	3310      	adds	r3, #16
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	e00b      	b.n	8005e88 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e70:	7bbb      	ldrb	r3, [r7, #14]
 8005e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	4413      	add	r3, r2
 8005e86:	3304      	adds	r3, #4
 8005e88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2202      	movs	r2, #2
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fbf8 	bl	800668c <USBD_CtlSendData>
              break;
 8005e9c:	e06a      	b.n	8005f74 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005e9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	da11      	bge.n	8005eca <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ea6:	7bbb      	ldrb	r3, [r7, #14]
 8005ea8:	f003 020f 	and.w	r2, r3, #15
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	3318      	adds	r3, #24
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d117      	bne.n	8005ef0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fb78 	bl	80065b8 <USBD_CtlError>
                  break;
 8005ec8:	e054      	b.n	8005f74 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005eca:	7bbb      	ldrb	r3, [r7, #14]
 8005ecc:	f003 020f 	and.w	r2, r3, #15
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d104      	bne.n	8005ef0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fb65 	bl	80065b8 <USBD_CtlError>
                  break;
 8005eee:	e041      	b.n	8005f74 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	da0b      	bge.n	8005f10 <USBD_StdEPReq+0x234>
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	3310      	adds	r3, #16
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	e00b      	b.n	8005f28 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	4413      	add	r3, r2
 8005f26:	3304      	adds	r3, #4
 8005f28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <USBD_StdEPReq+0x25a>
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	2b80      	cmp	r3, #128	; 0x80
 8005f34:	d103      	bne.n	8005f3e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	e00e      	b.n	8005f5c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 ffa6 	bl	8006e94 <USBD_LL_IsStallEP>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2201      	movs	r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e002      	b.n	8005f5c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fb92 	bl	800668c <USBD_CtlSendData>
              break;
 8005f68:	e004      	b.n	8005f74 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fb23 	bl	80065b8 <USBD_CtlError>
              break;
 8005f72:	bf00      	nop
          }
          break;
 8005f74:	e004      	b.n	8005f80 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fb1d 	bl	80065b8 <USBD_CtlError>
          break;
 8005f7e:	bf00      	nop
      }
      break;
 8005f80:	e004      	b.n	8005f8c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fb17 	bl	80065b8 <USBD_CtlError>
      break;
 8005f8a:	bf00      	nop
  }

  return ret;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	885b      	ldrh	r3, [r3, #2]
 8005fb2:	0a1b      	lsrs	r3, r3, #8
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	2b06      	cmp	r3, #6
 8005fba:	f200 8128 	bhi.w	800620e <USBD_GetDescriptor+0x276>
 8005fbe:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <USBD_GetDescriptor+0x2c>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005fe1 	.word	0x08005fe1
 8005fc8:	08005ff9 	.word	0x08005ff9
 8005fcc:	08006039 	.word	0x08006039
 8005fd0:	0800620f 	.word	0x0800620f
 8005fd4:	0800620f 	.word	0x0800620f
 8005fd8:	080061af 	.word	0x080061af
 8005fdc:	080061db 	.word	0x080061db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	7c12      	ldrb	r2, [r2, #16]
 8005fec:	f107 0108 	add.w	r1, r7, #8
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
      break;
 8005ff6:	e112      	b.n	800621e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	7c1b      	ldrb	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10d      	bne.n	800601c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	f107 0208 	add.w	r2, r7, #8
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
 8006010:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	2202      	movs	r2, #2
 8006018:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800601a:	e100      	b.n	800621e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f107 0208 	add.w	r2, r7, #8
 8006028:	4610      	mov	r0, r2
 800602a:	4798      	blx	r3
 800602c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3301      	adds	r3, #1
 8006032:	2202      	movs	r2, #2
 8006034:	701a      	strb	r2, [r3, #0]
      break;
 8006036:	e0f2      	b.n	800621e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	885b      	ldrh	r3, [r3, #2]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b05      	cmp	r3, #5
 8006040:	f200 80ac 	bhi.w	800619c <USBD_GetDescriptor+0x204>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <USBD_GetDescriptor+0xb4>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006065 	.word	0x08006065
 8006050:	08006099 	.word	0x08006099
 8006054:	080060cd 	.word	0x080060cd
 8006058:	08006101 	.word	0x08006101
 800605c:	08006135 	.word	0x08006135
 8006060:	08006169 	.word	0x08006169
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00b      	beq.n	8006088 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	7c12      	ldrb	r2, [r2, #16]
 800607c:	f107 0108 	add.w	r1, r7, #8
 8006080:	4610      	mov	r0, r2
 8006082:	4798      	blx	r3
 8006084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006086:	e091      	b.n	80061ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa94 	bl	80065b8 <USBD_CtlError>
            err++;
 8006090:	7afb      	ldrb	r3, [r7, #11]
 8006092:	3301      	adds	r3, #1
 8006094:	72fb      	strb	r3, [r7, #11]
          break;
 8006096:	e089      	b.n	80061ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00b      	beq.n	80060bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	7c12      	ldrb	r2, [r2, #16]
 80060b0:	f107 0108 	add.w	r1, r7, #8
 80060b4:	4610      	mov	r0, r2
 80060b6:	4798      	blx	r3
 80060b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060ba:	e077      	b.n	80061ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fa7a 	bl	80065b8 <USBD_CtlError>
            err++;
 80060c4:	7afb      	ldrb	r3, [r7, #11]
 80060c6:	3301      	adds	r3, #1
 80060c8:	72fb      	strb	r3, [r7, #11]
          break;
 80060ca:	e06f      	b.n	80061ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00b      	beq.n	80060f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	7c12      	ldrb	r2, [r2, #16]
 80060e4:	f107 0108 	add.w	r1, r7, #8
 80060e8:	4610      	mov	r0, r2
 80060ea:	4798      	blx	r3
 80060ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060ee:	e05d      	b.n	80061ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fa60 	bl	80065b8 <USBD_CtlError>
            err++;
 80060f8:	7afb      	ldrb	r3, [r7, #11]
 80060fa:	3301      	adds	r3, #1
 80060fc:	72fb      	strb	r3, [r7, #11]
          break;
 80060fe:	e055      	b.n	80061ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	7c12      	ldrb	r2, [r2, #16]
 8006118:	f107 0108 	add.w	r1, r7, #8
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
 8006120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006122:	e043      	b.n	80061ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fa46 	bl	80065b8 <USBD_CtlError>
            err++;
 800612c:	7afb      	ldrb	r3, [r7, #11]
 800612e:	3301      	adds	r3, #1
 8006130:	72fb      	strb	r3, [r7, #11]
          break;
 8006132:	e03b      	b.n	80061ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	7c12      	ldrb	r2, [r2, #16]
 800614c:	f107 0108 	add.w	r1, r7, #8
 8006150:	4610      	mov	r0, r2
 8006152:	4798      	blx	r3
 8006154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006156:	e029      	b.n	80061ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fa2c 	bl	80065b8 <USBD_CtlError>
            err++;
 8006160:	7afb      	ldrb	r3, [r7, #11]
 8006162:	3301      	adds	r3, #1
 8006164:	72fb      	strb	r3, [r7, #11]
          break;
 8006166:	e021      	b.n	80061ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	7c12      	ldrb	r2, [r2, #16]
 8006180:	f107 0108 	add.w	r1, r7, #8
 8006184:	4610      	mov	r0, r2
 8006186:	4798      	blx	r3
 8006188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800618a:	e00f      	b.n	80061ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa12 	bl	80065b8 <USBD_CtlError>
            err++;
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	3301      	adds	r3, #1
 8006198:	72fb      	strb	r3, [r7, #11]
          break;
 800619a:	e007      	b.n	80061ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa0a 	bl	80065b8 <USBD_CtlError>
          err++;
 80061a4:	7afb      	ldrb	r3, [r7, #11]
 80061a6:	3301      	adds	r3, #1
 80061a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80061aa:	e038      	b.n	800621e <USBD_GetDescriptor+0x286>
 80061ac:	e037      	b.n	800621e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	7c1b      	ldrb	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	f107 0208 	add.w	r2, r7, #8
 80061c2:	4610      	mov	r0, r2
 80061c4:	4798      	blx	r3
 80061c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061c8:	e029      	b.n	800621e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f9f3 	bl	80065b8 <USBD_CtlError>
        err++;
 80061d2:	7afb      	ldrb	r3, [r7, #11]
 80061d4:	3301      	adds	r3, #1
 80061d6:	72fb      	strb	r3, [r7, #11]
      break;
 80061d8:	e021      	b.n	800621e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	7c1b      	ldrb	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10d      	bne.n	80061fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	f107 0208 	add.w	r2, r7, #8
 80061ee:	4610      	mov	r0, r2
 80061f0:	4798      	blx	r3
 80061f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3301      	adds	r3, #1
 80061f8:	2207      	movs	r2, #7
 80061fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061fc:	e00f      	b.n	800621e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f9d9 	bl	80065b8 <USBD_CtlError>
        err++;
 8006206:	7afb      	ldrb	r3, [r7, #11]
 8006208:	3301      	adds	r3, #1
 800620a:	72fb      	strb	r3, [r7, #11]
      break;
 800620c:	e007      	b.n	800621e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f9d1 	bl	80065b8 <USBD_CtlError>
      err++;
 8006216:	7afb      	ldrb	r3, [r7, #11]
 8006218:	3301      	adds	r3, #1
 800621a:	72fb      	strb	r3, [r7, #11]
      break;
 800621c:	bf00      	nop
  }

  if (err != 0U)
 800621e:	7afb      	ldrb	r3, [r7, #11]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d11c      	bne.n	800625e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006224:	893b      	ldrh	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d011      	beq.n	800624e <USBD_GetDescriptor+0x2b6>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	88db      	ldrh	r3, [r3, #6]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	88da      	ldrh	r2, [r3, #6]
 8006236:	893b      	ldrh	r3, [r7, #8]
 8006238:	4293      	cmp	r3, r2
 800623a:	bf28      	it	cs
 800623c:	4613      	movcs	r3, r2
 800623e:	b29b      	uxth	r3, r3
 8006240:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006242:	893b      	ldrh	r3, [r7, #8]
 8006244:	461a      	mov	r2, r3
 8006246:	68f9      	ldr	r1, [r7, #12]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fa1f 	bl	800668c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	88db      	ldrh	r3, [r3, #6]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d104      	bne.n	8006260 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fa76 	bl	8006748 <USBD_CtlSendStatus>
 800625c:	e000      	b.n	8006260 <USBD_GetDescriptor+0x2c8>
    return;
 800625e:	bf00      	nop
    }
  }
}
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop

08006268 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	889b      	ldrh	r3, [r3, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d130      	bne.n	80062dc <USBD_SetAddress+0x74>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	88db      	ldrh	r3, [r3, #6]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d12c      	bne.n	80062dc <USBD_SetAddress+0x74>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	885b      	ldrh	r3, [r3, #2]
 8006286:	2b7f      	cmp	r3, #127	; 0x7f
 8006288:	d828      	bhi.n	80062dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	885b      	ldrh	r3, [r3, #2]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006294:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629c:	2b03      	cmp	r3, #3
 800629e:	d104      	bne.n	80062aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f988 	bl	80065b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a8:	e01c      	b.n	80062e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	7bfa      	ldrb	r2, [r7, #15]
 80062ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fe11 	bl	8006ede <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fa43 	bl	8006748 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d0:	e008      	b.n	80062e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062da:	e003      	b.n	80062e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f96a 	bl	80065b8 <USBD_CtlError>
  }
}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	885b      	ldrh	r3, [r3, #2]
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	4b41      	ldr	r3, [pc, #260]	; (8006404 <USBD_SetConfig+0x118>)
 80062fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006300:	4b40      	ldr	r3, [pc, #256]	; (8006404 <USBD_SetConfig+0x118>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d904      	bls.n	8006312 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f954 	bl	80065b8 <USBD_CtlError>
 8006310:	e075      	b.n	80063fe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006318:	2b02      	cmp	r3, #2
 800631a:	d002      	beq.n	8006322 <USBD_SetConfig+0x36>
 800631c:	2b03      	cmp	r3, #3
 800631e:	d023      	beq.n	8006368 <USBD_SetConfig+0x7c>
 8006320:	e062      	b.n	80063e8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006322:	4b38      	ldr	r3, [pc, #224]	; (8006404 <USBD_SetConfig+0x118>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01a      	beq.n	8006360 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800632a:	4b36      	ldr	r3, [pc, #216]	; (8006404 <USBD_SetConfig+0x118>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2203      	movs	r2, #3
 8006338:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800633c:	4b31      	ldr	r3, [pc, #196]	; (8006404 <USBD_SetConfig+0x118>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff f9f4 	bl	8005730 <USBD_SetClassConfig>
 8006348:	4603      	mov	r3, r0
 800634a:	2b02      	cmp	r3, #2
 800634c:	d104      	bne.n	8006358 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f931 	bl	80065b8 <USBD_CtlError>
            return;
 8006356:	e052      	b.n	80063fe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f9f5 	bl	8006748 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800635e:	e04e      	b.n	80063fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f9f1 	bl	8006748 <USBD_CtlSendStatus>
        break;
 8006366:	e04a      	b.n	80063fe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006368:	4b26      	ldr	r3, [pc, #152]	; (8006404 <USBD_SetConfig+0x118>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d112      	bne.n	8006396 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006378:	4b22      	ldr	r3, [pc, #136]	; (8006404 <USBD_SetConfig+0x118>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006382:	4b20      	ldr	r3, [pc, #128]	; (8006404 <USBD_SetConfig+0x118>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff f9f0 	bl	800576e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9da 	bl	8006748 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006394:	e033      	b.n	80063fe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006396:	4b1b      	ldr	r3, [pc, #108]	; (8006404 <USBD_SetConfig+0x118>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d01d      	beq.n	80063e0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff f9de 	bl	800576e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80063b2:	4b14      	ldr	r3, [pc, #80]	; (8006404 <USBD_SetConfig+0x118>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80063bc:	4b11      	ldr	r3, [pc, #68]	; (8006404 <USBD_SetConfig+0x118>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff f9b4 	bl	8005730 <USBD_SetClassConfig>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d104      	bne.n	80063d8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f8f1 	bl	80065b8 <USBD_CtlError>
            return;
 80063d6:	e012      	b.n	80063fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f9b5 	bl	8006748 <USBD_CtlSendStatus>
        break;
 80063de:	e00e      	b.n	80063fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f9b1 	bl	8006748 <USBD_CtlSendStatus>
        break;
 80063e6:	e00a      	b.n	80063fe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8e4 	bl	80065b8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80063f0:	4b04      	ldr	r3, [pc, #16]	; (8006404 <USBD_SetConfig+0x118>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff f9b9 	bl	800576e <USBD_ClrClassConfig>
        break;
 80063fc:	bf00      	nop
    }
  }
}
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	20000b48 	.word	0x20000b48

08006408 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	88db      	ldrh	r3, [r3, #6]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d004      	beq.n	8006424 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f8cb 	bl	80065b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006422:	e021      	b.n	8006468 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642a:	2b01      	cmp	r3, #1
 800642c:	db17      	blt.n	800645e <USBD_GetConfig+0x56>
 800642e:	2b02      	cmp	r3, #2
 8006430:	dd02      	ble.n	8006438 <USBD_GetConfig+0x30>
 8006432:	2b03      	cmp	r3, #3
 8006434:	d00b      	beq.n	800644e <USBD_GetConfig+0x46>
 8006436:	e012      	b.n	800645e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3308      	adds	r3, #8
 8006442:	2201      	movs	r2, #1
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f920 	bl	800668c <USBD_CtlSendData>
        break;
 800644c:	e00c      	b.n	8006468 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3304      	adds	r3, #4
 8006452:	2201      	movs	r2, #1
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f918 	bl	800668c <USBD_CtlSendData>
        break;
 800645c:	e004      	b.n	8006468 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f8a9 	bl	80065b8 <USBD_CtlError>
        break;
 8006466:	bf00      	nop
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006480:	3b01      	subs	r3, #1
 8006482:	2b02      	cmp	r3, #2
 8006484:	d81e      	bhi.n	80064c4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	88db      	ldrh	r3, [r3, #6]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d004      	beq.n	8006498 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f891 	bl	80065b8 <USBD_CtlError>
        break;
 8006496:	e01a      	b.n	80064ce <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f043 0202 	orr.w	r2, r3, #2
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	330c      	adds	r3, #12
 80064b8:	2202      	movs	r2, #2
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8e5 	bl	800668c <USBD_CtlSendData>
      break;
 80064c2:	e004      	b.n	80064ce <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f876 	bl	80065b8 <USBD_CtlError>
      break;
 80064cc:	bf00      	nop
  }
}
 80064ce:	bf00      	nop
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	885b      	ldrh	r3, [r3, #2]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d106      	bne.n	80064f6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f929 	bl	8006748 <USBD_CtlSendStatus>
  }
}
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800650e:	3b01      	subs	r3, #1
 8006510:	2b02      	cmp	r3, #2
 8006512:	d80b      	bhi.n	800652c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	885b      	ldrh	r3, [r3, #2]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d10c      	bne.n	8006536 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f90f 	bl	8006748 <USBD_CtlSendStatus>
      }
      break;
 800652a:	e004      	b.n	8006536 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f842 	bl	80065b8 <USBD_CtlError>
      break;
 8006534:	e000      	b.n	8006538 <USBD_ClrFeature+0x3a>
      break;
 8006536:	bf00      	nop
  }
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	785a      	ldrb	r2, [r3, #1]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	3302      	adds	r3, #2
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	b29a      	uxth	r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	3303      	adds	r3, #3
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	b29b      	uxth	r3, r3
 800656e:	4413      	add	r3, r2
 8006570:	b29a      	uxth	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	3304      	adds	r3, #4
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	b29a      	uxth	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	3305      	adds	r3, #5
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	b29b      	uxth	r3, r3
 800658a:	4413      	add	r3, r2
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	3306      	adds	r3, #6
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	b29a      	uxth	r2, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	3307      	adds	r3, #7
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	80da      	strh	r2, [r3, #6]

}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80065c2:	2180      	movs	r1, #128	; 0x80
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fc27 	bl	8006e18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80065ca:	2100      	movs	r1, #0
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fc23 	bl	8006e18 <USBD_LL_StallEP>
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b086      	sub	sp, #24
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d032      	beq.n	8006656 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f834 	bl	800665e <USBD_GetLen>
 80065f6:	4603      	mov	r3, r0
 80065f8:	3301      	adds	r3, #1
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	75fa      	strb	r2, [r7, #23]
 800660a:	461a      	mov	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4413      	add	r3, r2
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	7812      	ldrb	r2, [r2, #0]
 8006614:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	75fa      	strb	r2, [r7, #23]
 800661c:	461a      	mov	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	4413      	add	r3, r2
 8006622:	2203      	movs	r2, #3
 8006624:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006626:	e012      	b.n	800664e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	60fa      	str	r2, [r7, #12]
 800662e:	7dfa      	ldrb	r2, [r7, #23]
 8006630:	1c51      	adds	r1, r2, #1
 8006632:	75f9      	strb	r1, [r7, #23]
 8006634:	4611      	mov	r1, r2
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	440a      	add	r2, r1
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	75fa      	strb	r2, [r7, #23]
 8006644:	461a      	mov	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4413      	add	r3, r2
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e8      	bne.n	8006628 <USBD_GetString+0x4e>
    }
  }
}
 8006656:	bf00      	nop
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800666a:	e005      	b.n	8006678 <USBD_GetLen+0x1a>
  {
    len++;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	3301      	adds	r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3301      	adds	r3, #1
 8006676:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f5      	bne.n	800666c <USBD_GetLen+0xe>
  }

  return len;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr

0800668c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2202      	movs	r2, #2
 800669e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80066a8:	88fa      	ldrh	r2, [r7, #6]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	2100      	movs	r1, #0
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fc31 	bl	8006f1c <USBD_LL_Transmit>

  return USBD_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	2100      	movs	r1, #0
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fc1f 	bl	8006f1c <USBD_LL_Transmit>

  return USBD_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2203      	movs	r2, #3
 80066fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80066fe:	88fa      	ldrh	r2, [r7, #6]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	2100      	movs	r1, #0
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fc24 	bl	8006f62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	2100      	movs	r1, #0
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 fc12 	bl	8006f62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2204      	movs	r2, #4
 8006754:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006758:	2300      	movs	r3, #0
 800675a:	2200      	movs	r2, #0
 800675c:	2100      	movs	r1, #0
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fbdc 	bl	8006f1c <USBD_LL_Transmit>

  return USBD_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2205      	movs	r2, #5
 800677a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800677e:	2300      	movs	r3, #0
 8006780:	2200      	movs	r2, #0
 8006782:	2100      	movs	r1, #0
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fbec 	bl	8006f62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006798:	2200      	movs	r2, #0
 800679a:	4912      	ldr	r1, [pc, #72]	; (80067e4 <MX_USB_DEVICE_Init+0x50>)
 800679c:	4812      	ldr	r0, [pc, #72]	; (80067e8 <MX_USB_DEVICE_Init+0x54>)
 800679e:	f7fe ff53 	bl	8005648 <USBD_Init>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80067a8:	f7fa fc96 	bl	80010d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80067ac:	490f      	ldr	r1, [pc, #60]	; (80067ec <MX_USB_DEVICE_Init+0x58>)
 80067ae:	480e      	ldr	r0, [pc, #56]	; (80067e8 <MX_USB_DEVICE_Init+0x54>)
 80067b0:	f7fe ff82 	bl	80056b8 <USBD_RegisterClass>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80067ba:	f7fa fc8d 	bl	80010d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80067be:	490c      	ldr	r1, [pc, #48]	; (80067f0 <MX_USB_DEVICE_Init+0x5c>)
 80067c0:	4809      	ldr	r0, [pc, #36]	; (80067e8 <MX_USB_DEVICE_Init+0x54>)
 80067c2:	f7fe fed5 	bl	8005570 <USBD_CDC_RegisterInterface>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80067cc:	f7fa fc84 	bl	80010d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80067d0:	4805      	ldr	r0, [pc, #20]	; (80067e8 <MX_USB_DEVICE_Init+0x54>)
 80067d2:	f7fe ff97 	bl	8005704 <USBD_Start>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80067dc:	f7fa fc7c 	bl	80010d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80067e0:	bf00      	nop
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	2000012c 	.word	0x2000012c
 80067e8:	20000ed0 	.word	0x20000ed0
 80067ec:	20000018 	.word	0x20000018
 80067f0:	2000011c 	.word	0x2000011c

080067f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80067f8:	2200      	movs	r2, #0
 80067fa:	4905      	ldr	r1, [pc, #20]	; (8006810 <CDC_Init_FS+0x1c>)
 80067fc:	4805      	ldr	r0, [pc, #20]	; (8006814 <CDC_Init_FS+0x20>)
 80067fe:	f7fe fecd 	bl	800559c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006802:	4905      	ldr	r1, [pc, #20]	; (8006818 <CDC_Init_FS+0x24>)
 8006804:	4803      	ldr	r0, [pc, #12]	; (8006814 <CDC_Init_FS+0x20>)
 8006806:	f7fe fee2 	bl	80055ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800680a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	2000157c 	.word	0x2000157c
 8006814:	20000ed0 	.word	0x20000ed0
 8006818:	20001194 	.word	0x20001194

0800681c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006820:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006822:	4618      	mov	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	bc80      	pop	{r7}
 8006828:	4770      	bx	lr
	...

0800682c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	4603      	mov	r3, r0
 8006834:	6039      	str	r1, [r7, #0]
 8006836:	71fb      	strb	r3, [r7, #7]
 8006838:	4613      	mov	r3, r2
 800683a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	2b23      	cmp	r3, #35	; 0x23
 8006840:	d84a      	bhi.n	80068d8 <CDC_Control_FS+0xac>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <CDC_Control_FS+0x1c>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	080068d9 	.word	0x080068d9
 800684c:	080068d9 	.word	0x080068d9
 8006850:	080068d9 	.word	0x080068d9
 8006854:	080068d9 	.word	0x080068d9
 8006858:	080068d9 	.word	0x080068d9
 800685c:	080068d9 	.word	0x080068d9
 8006860:	080068d9 	.word	0x080068d9
 8006864:	080068d9 	.word	0x080068d9
 8006868:	080068d9 	.word	0x080068d9
 800686c:	080068d9 	.word	0x080068d9
 8006870:	080068d9 	.word	0x080068d9
 8006874:	080068d9 	.word	0x080068d9
 8006878:	080068d9 	.word	0x080068d9
 800687c:	080068d9 	.word	0x080068d9
 8006880:	080068d9 	.word	0x080068d9
 8006884:	080068d9 	.word	0x080068d9
 8006888:	080068d9 	.word	0x080068d9
 800688c:	080068d9 	.word	0x080068d9
 8006890:	080068d9 	.word	0x080068d9
 8006894:	080068d9 	.word	0x080068d9
 8006898:	080068d9 	.word	0x080068d9
 800689c:	080068d9 	.word	0x080068d9
 80068a0:	080068d9 	.word	0x080068d9
 80068a4:	080068d9 	.word	0x080068d9
 80068a8:	080068d9 	.word	0x080068d9
 80068ac:	080068d9 	.word	0x080068d9
 80068b0:	080068d9 	.word	0x080068d9
 80068b4:	080068d9 	.word	0x080068d9
 80068b8:	080068d9 	.word	0x080068d9
 80068bc:	080068d9 	.word	0x080068d9
 80068c0:	080068d9 	.word	0x080068d9
 80068c4:	080068d9 	.word	0x080068d9
 80068c8:	080068d9 	.word	0x080068d9
 80068cc:	080068d9 	.word	0x080068d9
 80068d0:	080068d9 	.word	0x080068d9
 80068d4:	080068d9 	.word	0x080068d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80068d8:	bf00      	nop
  }

  return (USBD_OK);
 80068da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop

080068e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	4805      	ldr	r0, [pc, #20]	; (800690c <CDC_Receive_FS+0x24>)
 80068f6:	f7fe fe6a 	bl	80055ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80068fa:	4804      	ldr	r0, [pc, #16]	; (800690c <CDC_Receive_FS+0x24>)
 80068fc:	f7fe fe7a 	bl	80055f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006900:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000ed0 	.word	0x20000ed0

08006910 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	4603      	mov	r3, r0
 8006918:	6039      	str	r1, [r7, #0]
 800691a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2212      	movs	r2, #18
 8006920:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006922:	4b03      	ldr	r3, [pc, #12]	; (8006930 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20000148 	.word	0x20000148

08006934 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	6039      	str	r1, [r7, #0]
 800693e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2204      	movs	r2, #4
 8006944:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006946:	4b03      	ldr	r3, [pc, #12]	; (8006954 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006948:	4618      	mov	r0, r3
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	2000015c 	.word	0x2000015c

08006958 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	6039      	str	r1, [r7, #0]
 8006962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	4907      	ldr	r1, [pc, #28]	; (800698c <USBD_FS_ProductStrDescriptor+0x34>)
 800696e:	4808      	ldr	r0, [pc, #32]	; (8006990 <USBD_FS_ProductStrDescriptor+0x38>)
 8006970:	f7ff fe33 	bl	80065da <USBD_GetString>
 8006974:	e004      	b.n	8006980 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	4904      	ldr	r1, [pc, #16]	; (800698c <USBD_FS_ProductStrDescriptor+0x34>)
 800697a:	4805      	ldr	r0, [pc, #20]	; (8006990 <USBD_FS_ProductStrDescriptor+0x38>)
 800697c:	f7ff fe2d 	bl	80065da <USBD_GetString>
  }
  return USBD_StrDesc;
 8006980:	4b02      	ldr	r3, [pc, #8]	; (800698c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20001964 	.word	0x20001964
 8006990:	0800b11c 	.word	0x0800b11c

08006994 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	6039      	str	r1, [r7, #0]
 800699e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	4904      	ldr	r1, [pc, #16]	; (80069b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80069a4:	4804      	ldr	r0, [pc, #16]	; (80069b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80069a6:	f7ff fe18 	bl	80065da <USBD_GetString>
  return USBD_StrDesc;
 80069aa:	4b02      	ldr	r3, [pc, #8]	; (80069b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20001964 	.word	0x20001964
 80069b8:	0800b134 	.word	0x0800b134

080069bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	6039      	str	r1, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	221a      	movs	r2, #26
 80069cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80069ce:	f000 f843 	bl	8006a58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80069d2:	4b02      	ldr	r3, [pc, #8]	; (80069dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000160 	.word	0x20000160

080069e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	6039      	str	r1, [r7, #0]
 80069ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d105      	bne.n	80069fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	4907      	ldr	r1, [pc, #28]	; (8006a14 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069f6:	4808      	ldr	r0, [pc, #32]	; (8006a18 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069f8:	f7ff fdef 	bl	80065da <USBD_GetString>
 80069fc:	e004      	b.n	8006a08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	4904      	ldr	r1, [pc, #16]	; (8006a14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a02:	4805      	ldr	r0, [pc, #20]	; (8006a18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a04:	f7ff fde9 	bl	80065da <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a08:	4b02      	ldr	r3, [pc, #8]	; (8006a14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20001964 	.word	0x20001964
 8006a18:	0800b148 	.word	0x0800b148

08006a1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	6039      	str	r1, [r7, #0]
 8006a26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d105      	bne.n	8006a3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	4907      	ldr	r1, [pc, #28]	; (8006a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a32:	4808      	ldr	r0, [pc, #32]	; (8006a54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a34:	f7ff fdd1 	bl	80065da <USBD_GetString>
 8006a38:	e004      	b.n	8006a44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	4904      	ldr	r1, [pc, #16]	; (8006a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a3e:	4805      	ldr	r0, [pc, #20]	; (8006a54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a40:	f7ff fdcb 	bl	80065da <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a44:	4b02      	ldr	r3, [pc, #8]	; (8006a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20001964 	.word	0x20001964
 8006a54:	0800b154 	.word	0x0800b154

08006a58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <Get_SerialNum+0x44>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a64:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <Get_SerialNum+0x48>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <Get_SerialNum+0x4c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4413      	add	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a7e:	2208      	movs	r2, #8
 8006a80:	4909      	ldr	r1, [pc, #36]	; (8006aa8 <Get_SerialNum+0x50>)
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 f814 	bl	8006ab0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a88:	2204      	movs	r2, #4
 8006a8a:	4908      	ldr	r1, [pc, #32]	; (8006aac <Get_SerialNum+0x54>)
 8006a8c:	68b8      	ldr	r0, [r7, #8]
 8006a8e:	f000 f80f 	bl	8006ab0 <IntToUnicode>
  }
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	1ffff7e8 	.word	0x1ffff7e8
 8006aa0:	1ffff7ec 	.word	0x1ffff7ec
 8006aa4:	1ffff7f0 	.word	0x1ffff7f0
 8006aa8:	20000162 	.word	0x20000162
 8006aac:	20000172 	.word	0x20000172

08006ab0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	4613      	mov	r3, r2
 8006abc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	75fb      	strb	r3, [r7, #23]
 8006ac6:	e027      	b.n	8006b18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	0f1b      	lsrs	r3, r3, #28
 8006acc:	2b09      	cmp	r3, #9
 8006ace:	d80b      	bhi.n	8006ae8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	0f1b      	lsrs	r3, r3, #28
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	4619      	mov	r1, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	440b      	add	r3, r1
 8006ae0:	3230      	adds	r2, #48	; 0x30
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e00a      	b.n	8006afe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	0f1b      	lsrs	r3, r3, #28
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	4619      	mov	r1, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	440b      	add	r3, r1
 8006af8:	3237      	adds	r2, #55	; 0x37
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	3301      	adds	r3, #1
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	3301      	adds	r3, #1
 8006b16:	75fb      	strb	r3, [r7, #23]
 8006b18:	7dfa      	ldrb	r2, [r7, #23]
 8006b1a:	79fb      	ldrb	r3, [r7, #7]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d3d3      	bcc.n	8006ac8 <IntToUnicode+0x18>
  }
}
 8006b20:	bf00      	nop
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr
	...

08006b2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a0d      	ldr	r2, [pc, #52]	; (8006b70 <HAL_PCD_MspInit+0x44>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d113      	bne.n	8006b66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	; (8006b74 <HAL_PCD_MspInit+0x48>)
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	4a0c      	ldr	r2, [pc, #48]	; (8006b74 <HAL_PCD_MspInit+0x48>)
 8006b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b48:	61d3      	str	r3, [r2, #28]
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <HAL_PCD_MspInit+0x48>)
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006b56:	2200      	movs	r2, #0
 8006b58:	2100      	movs	r1, #0
 8006b5a:	2014      	movs	r0, #20
 8006b5c:	f7fa fe57 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006b60:	2014      	movs	r0, #20
 8006b62:	f7fa fe70 	bl	8001846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006b66:	bf00      	nop
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	40005c00 	.word	0x40005c00
 8006b74:	40021000 	.word	0x40021000

08006b78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f7fe fe00 	bl	8005794 <USBD_LL_SetupStage>
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006bae:	78fb      	ldrb	r3, [r7, #3]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	015b      	lsls	r3, r3, #5
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	f7fe fe33 	bl	800582a <USBD_LL_DataOutStage>
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	015b      	lsls	r3, r3, #5
 8006be4:	4413      	add	r3, r2
 8006be6:	333c      	adds	r3, #60	; 0x3c
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	4619      	mov	r1, r3
 8006bee:	f7fe fe8d 	bl	800590c <USBD_LL_DataInStage>
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fe ff9d 	bl	8005b48 <USBD_LL_SOF>
}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d001      	beq.n	8006c2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006c2a:	f7fa fa55 	bl	80010d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c34:	7bfa      	ldrb	r2, [r7, #15]
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe ff4d 	bl	8005ad8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe ff06 	bl	8005a56 <USBD_LL_Reset>
}
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe ff47 	bl	8005af6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c70:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <HAL_PCD_SuspendCallback+0x30>)
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	4a03      	ldr	r2, [pc, #12]	; (8006c84 <HAL_PCD_SuspendCallback+0x30>)
 8006c76:	f043 0306 	orr.w	r3, r3, #6
 8006c7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	e000ed00 	.word	0xe000ed00

08006c88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe ff41 	bl	8005b1e <USBD_LL_Resume>
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006cac:	4a28      	ldr	r2, [pc, #160]	; (8006d50 <USBD_LL_Init+0xac>)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a26      	ldr	r2, [pc, #152]	; (8006d50 <USBD_LL_Init+0xac>)
 8006cb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006cbc:	4b24      	ldr	r3, [pc, #144]	; (8006d50 <USBD_LL_Init+0xac>)
 8006cbe:	4a25      	ldr	r2, [pc, #148]	; (8006d54 <USBD_LL_Init+0xb0>)
 8006cc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006cc2:	4b23      	ldr	r3, [pc, #140]	; (8006d50 <USBD_LL_Init+0xac>)
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006cc8:	4b21      	ldr	r3, [pc, #132]	; (8006d50 <USBD_LL_Init+0xac>)
 8006cca:	2202      	movs	r2, #2
 8006ccc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006cce:	4b20      	ldr	r3, [pc, #128]	; (8006d50 <USBD_LL_Init+0xac>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006cd4:	4b1e      	ldr	r3, [pc, #120]	; (8006d50 <USBD_LL_Init+0xac>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006cda:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <USBD_LL_Init+0xac>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006ce0:	481b      	ldr	r0, [pc, #108]	; (8006d50 <USBD_LL_Init+0xac>)
 8006ce2:	f7fb f871 	bl	8001dc8 <HAL_PCD_Init>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006cec:	f7fa f9f4 	bl	80010d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006cf6:	2318      	movs	r3, #24
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	f7fb ff0a 	bl	8002b14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d06:	2358      	movs	r3, #88	; 0x58
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2180      	movs	r1, #128	; 0x80
 8006d0c:	f7fb ff02 	bl	8002b14 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d16:	23c0      	movs	r3, #192	; 0xc0
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2181      	movs	r1, #129	; 0x81
 8006d1c:	f7fb fefa 	bl	8002b14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	f7fb fef1 	bl	8002b14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2182      	movs	r1, #130	; 0x82
 8006d40:	f7fb fee8 	bl	8002b14 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20001b64 	.word	0x20001b64
 8006d54:	40005c00 	.word	0x40005c00

08006d58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fb f90b 	bl	8001f8a <HAL_PCD_Start>
 8006d74:	4603      	mov	r3, r0
 8006d76:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f948 	bl	8007010 <USBD_Get_USB_Status>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	4608      	mov	r0, r1
 8006d98:	4611      	mov	r1, r2
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	70fb      	strb	r3, [r7, #3]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70bb      	strb	r3, [r7, #2]
 8006da4:	4613      	mov	r3, r2
 8006da6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006db6:	78bb      	ldrb	r3, [r7, #2]
 8006db8:	883a      	ldrh	r2, [r7, #0]
 8006dba:	78f9      	ldrb	r1, [r7, #3]
 8006dbc:	f7fb fa3e 	bl	800223c <HAL_PCD_EP_Open>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 f922 	bl	8007010 <USBD_Get_USB_Status>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	460b      	mov	r3, r1
 8006de4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df4:	78fa      	ldrb	r2, [r7, #3]
 8006df6:	4611      	mov	r1, r2
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fb fa7f 	bl	80022fc <HAL_PCD_EP_Close>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 f903 	bl	8007010 <USBD_Get_USB_Status>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e32:	78fa      	ldrb	r2, [r7, #3]
 8006e34:	4611      	mov	r1, r2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fb fb29 	bl	800248e <HAL_PCD_EP_SetStall>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f8e4 	bl	8007010 <USBD_Get_USB_Status>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e70:	78fa      	ldrb	r2, [r7, #3]
 8006e72:	4611      	mov	r1, r2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fb fb64 	bl	8002542 <HAL_PCD_EP_ClrStall>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 f8c5 	bl	8007010 <USBD_Get_USB_Status>
 8006e86:	4603      	mov	r3, r0
 8006e88:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ea6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	da08      	bge.n	8006ec2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	015b      	lsls	r3, r3, #5
 8006eba:	4413      	add	r3, r2
 8006ebc:	332a      	adds	r3, #42	; 0x2a
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	e008      	b.n	8006ed4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006ec2:	78fb      	ldrb	r3, [r7, #3]
 8006ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	015b      	lsls	r3, r3, #5
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006ed2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	4611      	mov	r1, r2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fb f978 	bl	80021f2 <HAL_PCD_SetAddress>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 f881 	bl	8007010 <USBD_Get_USB_Status>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	607a      	str	r2, [r7, #4]
 8006f26:	461a      	mov	r2, r3
 8006f28:	460b      	mov	r3, r1
 8006f2a:	72fb      	strb	r3, [r7, #11]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f3e:	893b      	ldrh	r3, [r7, #8]
 8006f40:	7af9      	ldrb	r1, [r7, #11]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	f7fb fa6a 	bl	800241c <HAL_PCD_EP_Transmit>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 f85e 	bl	8007010 <USBD_Get_USB_Status>
 8006f54:	4603      	mov	r3, r0
 8006f56:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006f58:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	460b      	mov	r3, r1
 8006f70:	72fb      	strb	r3, [r7, #11]
 8006f72:	4613      	mov	r3, r2
 8006f74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f84:	893b      	ldrh	r3, [r7, #8]
 8006f86:	7af9      	ldrb	r1, [r7, #11]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	f7fb f9f9 	bl	8002380 <HAL_PCD_EP_Receive>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 f83b 	bl	8007010 <USBD_Get_USB_Status>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006f9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fba:	78fa      	ldrb	r2, [r7, #3]
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fb fa18 	bl	80023f4 <HAL_PCD_EP_GetRxCount>
 8006fc4:	4603      	mov	r3, r0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <USBD_static_malloc+0x14>)
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bc80      	pop	{r7}
 8006fe2:	4770      	bx	lr
 8006fe4:	20000b4c 	.word	0x20000b4c

08006fe8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]

}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr

08006ffa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr

08007010 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	2b03      	cmp	r3, #3
 8007022:	d817      	bhi.n	8007054 <USBD_Get_USB_Status+0x44>
 8007024:	a201      	add	r2, pc, #4	; (adr r2, 800702c <USBD_Get_USB_Status+0x1c>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	0800703d 	.word	0x0800703d
 8007030:	08007043 	.word	0x08007043
 8007034:	08007049 	.word	0x08007049
 8007038:	0800704f 	.word	0x0800704f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	73fb      	strb	r3, [r7, #15]
    break;
 8007040:	e00b      	b.n	800705a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007042:	2302      	movs	r3, #2
 8007044:	73fb      	strb	r3, [r7, #15]
    break;
 8007046:	e008      	b.n	800705a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007048:	2301      	movs	r3, #1
 800704a:	73fb      	strb	r3, [r7, #15]
    break;
 800704c:	e005      	b.n	800705a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800704e:	2302      	movs	r3, #2
 8007050:	73fb      	strb	r3, [r7, #15]
    break;
 8007052:	e002      	b.n	800705a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007054:	2302      	movs	r3, #2
 8007056:	73fb      	strb	r3, [r7, #15]
    break;
 8007058:	bf00      	nop
  }
  return usb_status;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop

08007068 <__errno>:
 8007068:	4b01      	ldr	r3, [pc, #4]	; (8007070 <__errno+0x8>)
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	2000017c 	.word	0x2000017c

08007074 <__libc_init_array>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	2500      	movs	r5, #0
 8007078:	4e0c      	ldr	r6, [pc, #48]	; (80070ac <__libc_init_array+0x38>)
 800707a:	4c0d      	ldr	r4, [pc, #52]	; (80070b0 <__libc_init_array+0x3c>)
 800707c:	1ba4      	subs	r4, r4, r6
 800707e:	10a4      	asrs	r4, r4, #2
 8007080:	42a5      	cmp	r5, r4
 8007082:	d109      	bne.n	8007098 <__libc_init_array+0x24>
 8007084:	f003 ffd4 	bl	800b030 <_init>
 8007088:	2500      	movs	r5, #0
 800708a:	4e0a      	ldr	r6, [pc, #40]	; (80070b4 <__libc_init_array+0x40>)
 800708c:	4c0a      	ldr	r4, [pc, #40]	; (80070b8 <__libc_init_array+0x44>)
 800708e:	1ba4      	subs	r4, r4, r6
 8007090:	10a4      	asrs	r4, r4, #2
 8007092:	42a5      	cmp	r5, r4
 8007094:	d105      	bne.n	80070a2 <__libc_init_array+0x2e>
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800709c:	4798      	blx	r3
 800709e:	3501      	adds	r5, #1
 80070a0:	e7ee      	b.n	8007080 <__libc_init_array+0xc>
 80070a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070a6:	4798      	blx	r3
 80070a8:	3501      	adds	r5, #1
 80070aa:	e7f2      	b.n	8007092 <__libc_init_array+0x1e>
 80070ac:	0800b3f8 	.word	0x0800b3f8
 80070b0:	0800b3f8 	.word	0x0800b3f8
 80070b4:	0800b3f8 	.word	0x0800b3f8
 80070b8:	0800b400 	.word	0x0800b400

080070bc <memset>:
 80070bc:	4603      	mov	r3, r0
 80070be:	4402      	add	r2, r0
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d100      	bne.n	80070c6 <memset+0xa>
 80070c4:	4770      	bx	lr
 80070c6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ca:	e7f9      	b.n	80070c0 <memset+0x4>

080070cc <printf>:
 80070cc:	b40f      	push	{r0, r1, r2, r3}
 80070ce:	b507      	push	{r0, r1, r2, lr}
 80070d0:	4906      	ldr	r1, [pc, #24]	; (80070ec <printf+0x20>)
 80070d2:	ab04      	add	r3, sp, #16
 80070d4:	6808      	ldr	r0, [r1, #0]
 80070d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070da:	6881      	ldr	r1, [r0, #8]
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	f000 f811 	bl	8007104 <_vfprintf_r>
 80070e2:	b003      	add	sp, #12
 80070e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070e8:	b004      	add	sp, #16
 80070ea:	4770      	bx	lr
 80070ec:	2000017c 	.word	0x2000017c

080070f0 <putchar>:
 80070f0:	4b03      	ldr	r3, [pc, #12]	; (8007100 <putchar+0x10>)
 80070f2:	4601      	mov	r1, r0
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f003 b92e 	b.w	800a35a <_putc_r>
 80070fe:	bf00      	nop
 8007100:	2000017c 	.word	0x2000017c

08007104 <_vfprintf_r>:
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	b0d5      	sub	sp, #340	; 0x154
 800710a:	4689      	mov	r9, r1
 800710c:	9207      	str	r2, [sp, #28]
 800710e:	461c      	mov	r4, r3
 8007110:	461e      	mov	r6, r3
 8007112:	4683      	mov	fp, r0
 8007114:	f002 fb96 	bl	8009844 <_localeconv_r>
 8007118:	6803      	ldr	r3, [r0, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	931a      	str	r3, [sp, #104]	; 0x68
 800711e:	f7f9 f817 	bl	8000150 <strlen>
 8007122:	900f      	str	r0, [sp, #60]	; 0x3c
 8007124:	f1bb 0f00 	cmp.w	fp, #0
 8007128:	d005      	beq.n	8007136 <_vfprintf_r+0x32>
 800712a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800712e:	b913      	cbnz	r3, 8007136 <_vfprintf_r+0x32>
 8007130:	4658      	mov	r0, fp
 8007132:	f002 fa1d 	bl	8009570 <__sinit>
 8007136:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800713a:	07d8      	lsls	r0, r3, #31
 800713c:	d407      	bmi.n	800714e <_vfprintf_r+0x4a>
 800713e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007142:	0599      	lsls	r1, r3, #22
 8007144:	d403      	bmi.n	800714e <_vfprintf_r+0x4a>
 8007146:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800714a:	f002 fb8b 	bl	8009864 <__retarget_lock_acquire_recursive>
 800714e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8007152:	049a      	lsls	r2, r3, #18
 8007154:	d409      	bmi.n	800716a <_vfprintf_r+0x66>
 8007156:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800715a:	f8a9 300c 	strh.w	r3, [r9, #12]
 800715e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8007162:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007166:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 800716a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800716e:	071f      	lsls	r7, r3, #28
 8007170:	d502      	bpl.n	8007178 <_vfprintf_r+0x74>
 8007172:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007176:	b9a3      	cbnz	r3, 80071a2 <_vfprintf_r+0x9e>
 8007178:	4649      	mov	r1, r9
 800717a:	4658      	mov	r0, fp
 800717c:	f001 fa66 	bl	800864c <__swsetup_r>
 8007180:	b178      	cbz	r0, 80071a2 <_vfprintf_r+0x9e>
 8007182:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8007186:	07dd      	lsls	r5, r3, #31
 8007188:	d407      	bmi.n	800719a <_vfprintf_r+0x96>
 800718a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800718e:	059c      	lsls	r4, r3, #22
 8007190:	d403      	bmi.n	800719a <_vfprintf_r+0x96>
 8007192:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8007196:	f002 fb66 	bl	8009866 <__retarget_lock_release_recursive>
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
 800719e:	9310      	str	r3, [sp, #64]	; 0x40
 80071a0:	e01a      	b.n	80071d8 <_vfprintf_r+0xd4>
 80071a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80071a6:	f003 021a 	and.w	r2, r3, #26
 80071aa:	2a0a      	cmp	r2, #10
 80071ac:	d118      	bne.n	80071e0 <_vfprintf_r+0xdc>
 80071ae:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	db14      	blt.n	80071e0 <_vfprintf_r+0xdc>
 80071b6:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 80071ba:	07d0      	lsls	r0, r2, #31
 80071bc:	d405      	bmi.n	80071ca <_vfprintf_r+0xc6>
 80071be:	0599      	lsls	r1, r3, #22
 80071c0:	d403      	bmi.n	80071ca <_vfprintf_r+0xc6>
 80071c2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80071c6:	f002 fb4e 	bl	8009866 <__retarget_lock_release_recursive>
 80071ca:	4623      	mov	r3, r4
 80071cc:	9a07      	ldr	r2, [sp, #28]
 80071ce:	4649      	mov	r1, r9
 80071d0:	4658      	mov	r0, fp
 80071d2:	f001 f9fb 	bl	80085cc <__sbprintf>
 80071d6:	9010      	str	r0, [sp, #64]	; 0x40
 80071d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80071da:	b055      	add	sp, #340	; 0x154
 80071dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e0:	2300      	movs	r3, #0
 80071e2:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 80071e6:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 80071ea:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 80071ee:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80071f2:	ac2b      	add	r4, sp, #172	; 0xac
 80071f4:	9428      	str	r4, [sp, #160]	; 0xa0
 80071f6:	9308      	str	r3, [sp, #32]
 80071f8:	930c      	str	r3, [sp, #48]	; 0x30
 80071fa:	9316      	str	r3, [sp, #88]	; 0x58
 80071fc:	931d      	str	r3, [sp, #116]	; 0x74
 80071fe:	9310      	str	r3, [sp, #64]	; 0x40
 8007200:	9d07      	ldr	r5, [sp, #28]
 8007202:	462b      	mov	r3, r5
 8007204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007208:	b112      	cbz	r2, 8007210 <_vfprintf_r+0x10c>
 800720a:	2a25      	cmp	r2, #37	; 0x25
 800720c:	f040 80e4 	bne.w	80073d8 <_vfprintf_r+0x2d4>
 8007210:	9b07      	ldr	r3, [sp, #28]
 8007212:	1aef      	subs	r7, r5, r3
 8007214:	d00e      	beq.n	8007234 <_vfprintf_r+0x130>
 8007216:	e9c4 3700 	strd	r3, r7, [r4]
 800721a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800721c:	443b      	add	r3, r7
 800721e:	932a      	str	r3, [sp, #168]	; 0xa8
 8007220:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007222:	3301      	adds	r3, #1
 8007224:	2b07      	cmp	r3, #7
 8007226:	9329      	str	r3, [sp, #164]	; 0xa4
 8007228:	f300 80d8 	bgt.w	80073dc <_vfprintf_r+0x2d8>
 800722c:	3408      	adds	r4, #8
 800722e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007230:	443b      	add	r3, r7
 8007232:	9310      	str	r3, [sp, #64]	; 0x40
 8007234:	782b      	ldrb	r3, [r5, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	f001 81b5 	beq.w	80085a6 <_vfprintf_r+0x14a2>
 800723c:	1c6b      	adds	r3, r5, #1
 800723e:	930e      	str	r3, [sp, #56]	; 0x38
 8007240:	2300      	movs	r3, #0
 8007242:	f04f 35ff 	mov.w	r5, #4294967295
 8007246:	469a      	mov	sl, r3
 8007248:	270a      	movs	r7, #10
 800724a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800724e:	9311      	str	r3, [sp, #68]	; 0x44
 8007250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	930a      	str	r3, [sp, #40]	; 0x28
 8007256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007258:	3301      	adds	r3, #1
 800725a:	930e      	str	r3, [sp, #56]	; 0x38
 800725c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725e:	3b20      	subs	r3, #32
 8007260:	2b5a      	cmp	r3, #90	; 0x5a
 8007262:	f200 8627 	bhi.w	8007eb4 <_vfprintf_r+0xdb0>
 8007266:	a201      	add	r2, pc, #4	; (adr r2, 800726c <_vfprintf_r+0x168>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	0800746f 	.word	0x0800746f
 8007270:	08007eb5 	.word	0x08007eb5
 8007274:	08007eb5 	.word	0x08007eb5
 8007278:	08007481 	.word	0x08007481
 800727c:	08007eb5 	.word	0x08007eb5
 8007280:	08007eb5 	.word	0x08007eb5
 8007284:	08007eb5 	.word	0x08007eb5
 8007288:	08007435 	.word	0x08007435
 800728c:	08007eb5 	.word	0x08007eb5
 8007290:	08007eb5 	.word	0x08007eb5
 8007294:	08007487 	.word	0x08007487
 8007298:	0800749d 	.word	0x0800749d
 800729c:	08007eb5 	.word	0x08007eb5
 80072a0:	08007497 	.word	0x08007497
 80072a4:	080074a1 	.word	0x080074a1
 80072a8:	08007eb5 	.word	0x08007eb5
 80072ac:	080074d3 	.word	0x080074d3
 80072b0:	080074d9 	.word	0x080074d9
 80072b4:	080074d9 	.word	0x080074d9
 80072b8:	080074d9 	.word	0x080074d9
 80072bc:	080074d9 	.word	0x080074d9
 80072c0:	080074d9 	.word	0x080074d9
 80072c4:	080074d9 	.word	0x080074d9
 80072c8:	080074d9 	.word	0x080074d9
 80072cc:	080074d9 	.word	0x080074d9
 80072d0:	080074d9 	.word	0x080074d9
 80072d4:	08007eb5 	.word	0x08007eb5
 80072d8:	08007eb5 	.word	0x08007eb5
 80072dc:	08007eb5 	.word	0x08007eb5
 80072e0:	08007eb5 	.word	0x08007eb5
 80072e4:	08007eb5 	.word	0x08007eb5
 80072e8:	08007eb5 	.word	0x08007eb5
 80072ec:	08007eb5 	.word	0x08007eb5
 80072f0:	080075c5 	.word	0x080075c5
 80072f4:	08007eb5 	.word	0x08007eb5
 80072f8:	08007533 	.word	0x08007533
 80072fc:	08007555 	.word	0x08007555
 8007300:	080075c5 	.word	0x080075c5
 8007304:	080075c5 	.word	0x080075c5
 8007308:	080075c5 	.word	0x080075c5
 800730c:	08007eb5 	.word	0x08007eb5
 8007310:	08007eb5 	.word	0x08007eb5
 8007314:	08007eb5 	.word	0x08007eb5
 8007318:	08007eb5 	.word	0x08007eb5
 800731c:	080074f9 	.word	0x080074f9
 8007320:	08007eb5 	.word	0x08007eb5
 8007324:	08007eb5 	.word	0x08007eb5
 8007328:	08007aa9 	.word	0x08007aa9
 800732c:	08007eb5 	.word	0x08007eb5
 8007330:	08007eb5 	.word	0x08007eb5
 8007334:	08007eb5 	.word	0x08007eb5
 8007338:	08007b35 	.word	0x08007b35
 800733c:	08007eb5 	.word	0x08007eb5
 8007340:	08007d15 	.word	0x08007d15
 8007344:	08007eb5 	.word	0x08007eb5
 8007348:	08007eb5 	.word	0x08007eb5
 800734c:	080073f5 	.word	0x080073f5
 8007350:	08007eb5 	.word	0x08007eb5
 8007354:	08007eb5 	.word	0x08007eb5
 8007358:	08007eb5 	.word	0x08007eb5
 800735c:	08007eb5 	.word	0x08007eb5
 8007360:	08007eb5 	.word	0x08007eb5
 8007364:	08007eb5 	.word	0x08007eb5
 8007368:	08007eb5 	.word	0x08007eb5
 800736c:	08007eb5 	.word	0x08007eb5
 8007370:	080075c5 	.word	0x080075c5
 8007374:	08007eb5 	.word	0x08007eb5
 8007378:	08007533 	.word	0x08007533
 800737c:	08007559 	.word	0x08007559
 8007380:	080075c5 	.word	0x080075c5
 8007384:	080075c5 	.word	0x080075c5
 8007388:	080075c5 	.word	0x080075c5
 800738c:	080074ff 	.word	0x080074ff
 8007390:	08007559 	.word	0x08007559
 8007394:	08007527 	.word	0x08007527
 8007398:	08007eb5 	.word	0x08007eb5
 800739c:	08007519 	.word	0x08007519
 80073a0:	08007eb5 	.word	0x08007eb5
 80073a4:	08007a63 	.word	0x08007a63
 80073a8:	08007aad 	.word	0x08007aad
 80073ac:	08007b15 	.word	0x08007b15
 80073b0:	08007527 	.word	0x08007527
 80073b4:	08007eb5 	.word	0x08007eb5
 80073b8:	08007b35 	.word	0x08007b35
 80073bc:	08007251 	.word	0x08007251
 80073c0:	08007d19 	.word	0x08007d19
 80073c4:	08007eb5 	.word	0x08007eb5
 80073c8:	08007eb5 	.word	0x08007eb5
 80073cc:	08007d57 	.word	0x08007d57
 80073d0:	08007eb5 	.word	0x08007eb5
 80073d4:	08007251 	.word	0x08007251
 80073d8:	461d      	mov	r5, r3
 80073da:	e712      	b.n	8007202 <_vfprintf_r+0xfe>
 80073dc:	aa28      	add	r2, sp, #160	; 0xa0
 80073de:	4649      	mov	r1, r9
 80073e0:	4658      	mov	r0, fp
 80073e2:	f003 f896 	bl	800a512 <__sprint_r>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f040 8157 	bne.w	800769a <_vfprintf_r+0x596>
 80073ec:	ac2b      	add	r4, sp, #172	; 0xac
 80073ee:	e71e      	b.n	800722e <_vfprintf_r+0x12a>
 80073f0:	461e      	mov	r6, r3
 80073f2:	e72d      	b.n	8007250 <_vfprintf_r+0x14c>
 80073f4:	4bb2      	ldr	r3, [pc, #712]	; (80076c0 <_vfprintf_r+0x5bc>)
 80073f6:	f01a 0f20 	tst.w	sl, #32
 80073fa:	931c      	str	r3, [sp, #112]	; 0x70
 80073fc:	f000 84ae 	beq.w	8007d5c <_vfprintf_r+0xc58>
 8007400:	3607      	adds	r6, #7
 8007402:	f026 0607 	bic.w	r6, r6, #7
 8007406:	f106 0308 	add.w	r3, r6, #8
 800740a:	930d      	str	r3, [sp, #52]	; 0x34
 800740c:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007410:	f01a 0f01 	tst.w	sl, #1
 8007414:	d00a      	beq.n	800742c <_vfprintf_r+0x328>
 8007416:	ea56 0307 	orrs.w	r3, r6, r7
 800741a:	d007      	beq.n	800742c <_vfprintf_r+0x328>
 800741c:	2330      	movs	r3, #48	; 0x30
 800741e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8007422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007424:	f04a 0a02 	orr.w	sl, sl, #2
 8007428:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 800742c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007430:	2302      	movs	r3, #2
 8007432:	e349      	b.n	8007ac8 <_vfprintf_r+0x9c4>
 8007434:	4658      	mov	r0, fp
 8007436:	f002 fa05 	bl	8009844 <_localeconv_r>
 800743a:	6843      	ldr	r3, [r0, #4]
 800743c:	4618      	mov	r0, r3
 800743e:	931d      	str	r3, [sp, #116]	; 0x74
 8007440:	f7f8 fe86 	bl	8000150 <strlen>
 8007444:	9016      	str	r0, [sp, #88]	; 0x58
 8007446:	4658      	mov	r0, fp
 8007448:	f002 f9fc 	bl	8009844 <_localeconv_r>
 800744c:	6883      	ldr	r3, [r0, #8]
 800744e:	930c      	str	r3, [sp, #48]	; 0x30
 8007450:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007452:	2b00      	cmp	r3, #0
 8007454:	f43f aefc 	beq.w	8007250 <_vfprintf_r+0x14c>
 8007458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800745a:	2b00      	cmp	r3, #0
 800745c:	f43f aef8 	beq.w	8007250 <_vfprintf_r+0x14c>
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f43f aef4 	beq.w	8007250 <_vfprintf_r+0x14c>
 8007468:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800746c:	e6f0      	b.n	8007250 <_vfprintf_r+0x14c>
 800746e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007472:	2b00      	cmp	r3, #0
 8007474:	f47f aeec 	bne.w	8007250 <_vfprintf_r+0x14c>
 8007478:	2320      	movs	r3, #32
 800747a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800747e:	e6e7      	b.n	8007250 <_vfprintf_r+0x14c>
 8007480:	f04a 0a01 	orr.w	sl, sl, #1
 8007484:	e6e4      	b.n	8007250 <_vfprintf_r+0x14c>
 8007486:	6832      	ldr	r2, [r6, #0]
 8007488:	1d33      	adds	r3, r6, #4
 800748a:	2a00      	cmp	r2, #0
 800748c:	9211      	str	r2, [sp, #68]	; 0x44
 800748e:	daaf      	bge.n	80073f0 <_vfprintf_r+0x2ec>
 8007490:	461e      	mov	r6, r3
 8007492:	4252      	negs	r2, r2
 8007494:	9211      	str	r2, [sp, #68]	; 0x44
 8007496:	f04a 0a04 	orr.w	sl, sl, #4
 800749a:	e6d9      	b.n	8007250 <_vfprintf_r+0x14c>
 800749c:	232b      	movs	r3, #43	; 0x2b
 800749e:	e7ec      	b.n	800747a <_vfprintf_r+0x376>
 80074a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074a4:	7812      	ldrb	r2, [r2, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	2a2a      	cmp	r2, #42	; 0x2a
 80074aa:	920a      	str	r2, [sp, #40]	; 0x28
 80074ac:	d10f      	bne.n	80074ce <_vfprintf_r+0x3ca>
 80074ae:	6835      	ldr	r5, [r6, #0]
 80074b0:	930e      	str	r3, [sp, #56]	; 0x38
 80074b2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80074b6:	3604      	adds	r6, #4
 80074b8:	e6ca      	b.n	8007250 <_vfprintf_r+0x14c>
 80074ba:	fb07 2505 	mla	r5, r7, r5, r2
 80074be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074c2:	920a      	str	r2, [sp, #40]	; 0x28
 80074c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074c6:	3a30      	subs	r2, #48	; 0x30
 80074c8:	2a09      	cmp	r2, #9
 80074ca:	d9f6      	bls.n	80074ba <_vfprintf_r+0x3b6>
 80074cc:	e6c5      	b.n	800725a <_vfprintf_r+0x156>
 80074ce:	2500      	movs	r5, #0
 80074d0:	e7f8      	b.n	80074c4 <_vfprintf_r+0x3c0>
 80074d2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80074d6:	e6bb      	b.n	8007250 <_vfprintf_r+0x14c>
 80074d8:	2200      	movs	r2, #0
 80074da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074dc:	9211      	str	r2, [sp, #68]	; 0x44
 80074de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074e2:	3a30      	subs	r2, #48	; 0x30
 80074e4:	fb07 2201 	mla	r2, r7, r1, r2
 80074e8:	9211      	str	r2, [sp, #68]	; 0x44
 80074ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ee:	920a      	str	r2, [sp, #40]	; 0x28
 80074f0:	3a30      	subs	r2, #48	; 0x30
 80074f2:	2a09      	cmp	r2, #9
 80074f4:	d9f3      	bls.n	80074de <_vfprintf_r+0x3da>
 80074f6:	e6b0      	b.n	800725a <_vfprintf_r+0x156>
 80074f8:	f04a 0a08 	orr.w	sl, sl, #8
 80074fc:	e6a8      	b.n	8007250 <_vfprintf_r+0x14c>
 80074fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b68      	cmp	r3, #104	; 0x68
 8007504:	bf01      	itttt	eq
 8007506:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8007508:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800750c:	3301      	addeq	r3, #1
 800750e:	930e      	streq	r3, [sp, #56]	; 0x38
 8007510:	bf18      	it	ne
 8007512:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8007516:	e69b      	b.n	8007250 <_vfprintf_r+0x14c>
 8007518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b6c      	cmp	r3, #108	; 0x6c
 800751e:	d105      	bne.n	800752c <_vfprintf_r+0x428>
 8007520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007522:	3301      	adds	r3, #1
 8007524:	930e      	str	r3, [sp, #56]	; 0x38
 8007526:	f04a 0a20 	orr.w	sl, sl, #32
 800752a:	e691      	b.n	8007250 <_vfprintf_r+0x14c>
 800752c:	f04a 0a10 	orr.w	sl, sl, #16
 8007530:	e68e      	b.n	8007250 <_vfprintf_r+0x14c>
 8007532:	2000      	movs	r0, #0
 8007534:	1d33      	adds	r3, r6, #4
 8007536:	930d      	str	r3, [sp, #52]	; 0x34
 8007538:	6833      	ldr	r3, [r6, #0]
 800753a:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 800753e:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8007542:	ab3b      	add	r3, sp, #236	; 0xec
 8007544:	4680      	mov	r8, r0
 8007546:	2501      	movs	r5, #1
 8007548:	9012      	str	r0, [sp, #72]	; 0x48
 800754a:	4607      	mov	r7, r0
 800754c:	900b      	str	r0, [sp, #44]	; 0x2c
 800754e:	4606      	mov	r6, r0
 8007550:	9307      	str	r3, [sp, #28]
 8007552:	e308      	b.n	8007b66 <_vfprintf_r+0xa62>
 8007554:	f04a 0a10 	orr.w	sl, sl, #16
 8007558:	f01a 0f20 	tst.w	sl, #32
 800755c:	d01f      	beq.n	800759e <_vfprintf_r+0x49a>
 800755e:	3607      	adds	r6, #7
 8007560:	f026 0607 	bic.w	r6, r6, #7
 8007564:	f106 0308 	add.w	r3, r6, #8
 8007568:	930d      	str	r3, [sp, #52]	; 0x34
 800756a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800756e:	2e00      	cmp	r6, #0
 8007570:	f177 0300 	sbcs.w	r3, r7, #0
 8007574:	da05      	bge.n	8007582 <_vfprintf_r+0x47e>
 8007576:	232d      	movs	r3, #45	; 0x2d
 8007578:	4276      	negs	r6, r6
 800757a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800757e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8007582:	1c6b      	adds	r3, r5, #1
 8007584:	f040 83fd 	bne.w	8007d82 <_vfprintf_r+0xc7e>
 8007588:	2f00      	cmp	r7, #0
 800758a:	bf08      	it	eq
 800758c:	2e0a      	cmpeq	r6, #10
 800758e:	f080 8425 	bcs.w	8007ddc <_vfprintf_r+0xcd8>
 8007592:	3630      	adds	r6, #48	; 0x30
 8007594:	ab54      	add	r3, sp, #336	; 0x150
 8007596:	f803 6d01 	strb.w	r6, [r3, #-1]!
 800759a:	f000 bc15 	b.w	8007dc8 <_vfprintf_r+0xcc4>
 800759e:	1d33      	adds	r3, r6, #4
 80075a0:	f01a 0f10 	tst.w	sl, #16
 80075a4:	930d      	str	r3, [sp, #52]	; 0x34
 80075a6:	d002      	beq.n	80075ae <_vfprintf_r+0x4aa>
 80075a8:	6836      	ldr	r6, [r6, #0]
 80075aa:	17f7      	asrs	r7, r6, #31
 80075ac:	e7df      	b.n	800756e <_vfprintf_r+0x46a>
 80075ae:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80075b2:	6836      	ldr	r6, [r6, #0]
 80075b4:	d001      	beq.n	80075ba <_vfprintf_r+0x4b6>
 80075b6:	b236      	sxth	r6, r6
 80075b8:	e7f7      	b.n	80075aa <_vfprintf_r+0x4a6>
 80075ba:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80075be:	bf18      	it	ne
 80075c0:	b276      	sxtbne	r6, r6
 80075c2:	e7f2      	b.n	80075aa <_vfprintf_r+0x4a6>
 80075c4:	3607      	adds	r6, #7
 80075c6:	f026 0607 	bic.w	r6, r6, #7
 80075ca:	f106 0308 	add.w	r3, r6, #8
 80075ce:	930d      	str	r3, [sp, #52]	; 0x34
 80075d0:	6833      	ldr	r3, [r6, #0]
 80075d2:	f04f 32ff 	mov.w	r2, #4294967295
 80075d6:	9314      	str	r3, [sp, #80]	; 0x50
 80075d8:	6873      	ldr	r3, [r6, #4]
 80075da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80075dc:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80075e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80075e2:	4638      	mov	r0, r7
 80075e4:	4b37      	ldr	r3, [pc, #220]	; (80076c4 <_vfprintf_r+0x5c0>)
 80075e6:	4631      	mov	r1, r6
 80075e8:	f7f9 fa10 	bl	8000a0c <__aeabi_dcmpun>
 80075ec:	bb08      	cbnz	r0, 8007632 <_vfprintf_r+0x52e>
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295
 80075f2:	4b34      	ldr	r3, [pc, #208]	; (80076c4 <_vfprintf_r+0x5c0>)
 80075f4:	4638      	mov	r0, r7
 80075f6:	4631      	mov	r1, r6
 80075f8:	f7f9 f9ea 	bl	80009d0 <__aeabi_dcmple>
 80075fc:	b9c8      	cbnz	r0, 8007632 <_vfprintf_r+0x52e>
 80075fe:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007602:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007606:	f7f9 f9d9 	bl	80009bc <__aeabi_dcmplt>
 800760a:	b110      	cbz	r0, 8007612 <_vfprintf_r+0x50e>
 800760c:	232d      	movs	r3, #45	; 0x2d
 800760e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8007612:	4a2d      	ldr	r2, [pc, #180]	; (80076c8 <_vfprintf_r+0x5c4>)
 8007614:	4b2d      	ldr	r3, [pc, #180]	; (80076cc <_vfprintf_r+0x5c8>)
 8007616:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007618:	f04f 0800 	mov.w	r8, #0
 800761c:	2947      	cmp	r1, #71	; 0x47
 800761e:	bfd8      	it	le
 8007620:	461a      	movle	r2, r3
 8007622:	2503      	movs	r5, #3
 8007624:	9207      	str	r2, [sp, #28]
 8007626:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800762a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800762e:	f000 bc19 	b.w	8007e64 <_vfprintf_r+0xd60>
 8007632:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8007636:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800763a:	f7f9 f9e7 	bl	8000a0c <__aeabi_dcmpun>
 800763e:	4680      	mov	r8, r0
 8007640:	b140      	cbz	r0, 8007654 <_vfprintf_r+0x550>
 8007642:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007644:	4a22      	ldr	r2, [pc, #136]	; (80076d0 <_vfprintf_r+0x5cc>)
 8007646:	2b00      	cmp	r3, #0
 8007648:	bfbc      	itt	lt
 800764a:	232d      	movlt	r3, #45	; 0x2d
 800764c:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8007650:	4b20      	ldr	r3, [pc, #128]	; (80076d4 <_vfprintf_r+0x5d0>)
 8007652:	e7e0      	b.n	8007616 <_vfprintf_r+0x512>
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	f023 0320 	bic.w	r3, r3, #32
 800765a:	2b41      	cmp	r3, #65	; 0x41
 800765c:	930b      	str	r3, [sp, #44]	; 0x2c
 800765e:	d13b      	bne.n	80076d8 <_vfprintf_r+0x5d4>
 8007660:	2330      	movs	r3, #48	; 0x30
 8007662:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8007666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007668:	f04a 0a02 	orr.w	sl, sl, #2
 800766c:	2b61      	cmp	r3, #97	; 0x61
 800766e:	bf14      	ite	ne
 8007670:	2358      	movne	r3, #88	; 0x58
 8007672:	2378      	moveq	r3, #120	; 0x78
 8007674:	2d63      	cmp	r5, #99	; 0x63
 8007676:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 800767a:	f340 811b 	ble.w	80078b4 <_vfprintf_r+0x7b0>
 800767e:	1c69      	adds	r1, r5, #1
 8007680:	4658      	mov	r0, fp
 8007682:	f002 f95d 	bl	8009940 <_malloc_r>
 8007686:	9007      	str	r0, [sp, #28]
 8007688:	2800      	cmp	r0, #0
 800768a:	f040 8116 	bne.w	80078ba <_vfprintf_r+0x7b6>
 800768e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007696:	f8a9 300c 	strh.w	r3, [r9, #12]
 800769a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800769e:	07d8      	lsls	r0, r3, #31
 80076a0:	d407      	bmi.n	80076b2 <_vfprintf_r+0x5ae>
 80076a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80076a6:	0599      	lsls	r1, r3, #22
 80076a8:	d403      	bmi.n	80076b2 <_vfprintf_r+0x5ae>
 80076aa:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80076ae:	f002 f8da 	bl	8009866 <__retarget_lock_release_recursive>
 80076b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80076b6:	065a      	lsls	r2, r3, #25
 80076b8:	f57f ad8e 	bpl.w	80071d8 <_vfprintf_r+0xd4>
 80076bc:	e56d      	b.n	800719a <_vfprintf_r+0x96>
 80076be:	bf00      	nop
 80076c0:	0800b1a1 	.word	0x0800b1a1
 80076c4:	7fefffff 	.word	0x7fefffff
 80076c8:	0800b184 	.word	0x0800b184
 80076cc:	0800b180 	.word	0x0800b180
 80076d0:	0800b18c 	.word	0x0800b18c
 80076d4:	0800b188 	.word	0x0800b188
 80076d8:	1c6a      	adds	r2, r5, #1
 80076da:	f000 80f1 	beq.w	80078c0 <_vfprintf_r+0x7bc>
 80076de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e0:	2b47      	cmp	r3, #71	; 0x47
 80076e2:	d102      	bne.n	80076ea <_vfprintf_r+0x5e6>
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	f000 80ed 	beq.w	80078c4 <_vfprintf_r+0x7c0>
 80076ea:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 80076ee:	9315      	str	r3, [sp, #84]	; 0x54
 80076f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076f2:	1e1e      	subs	r6, r3, #0
 80076f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076f6:	9308      	str	r3, [sp, #32]
 80076f8:	bfb7      	itett	lt
 80076fa:	4633      	movlt	r3, r6
 80076fc:	2300      	movge	r3, #0
 80076fe:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 8007702:	232d      	movlt	r3, #45	; 0x2d
 8007704:	9319      	str	r3, [sp, #100]	; 0x64
 8007706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007708:	2b41      	cmp	r3, #65	; 0x41
 800770a:	f040 80ec 	bne.w	80078e6 <_vfprintf_r+0x7e2>
 800770e:	aa22      	add	r2, sp, #136	; 0x88
 8007710:	9808      	ldr	r0, [sp, #32]
 8007712:	4631      	mov	r1, r6
 8007714:	f002 fe56 	bl	800a3c4 <frexp>
 8007718:	2200      	movs	r2, #0
 800771a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800771e:	f7f8 fedb 	bl	80004d8 <__aeabi_dmul>
 8007722:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007726:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800772a:	f7f9 f93d 	bl	80009a8 <__aeabi_dcmpeq>
 800772e:	b108      	cbz	r0, 8007734 <_vfprintf_r+0x630>
 8007730:	2301      	movs	r3, #1
 8007732:	9322      	str	r3, [sp, #136]	; 0x88
 8007734:	4fa7      	ldr	r7, [pc, #668]	; (80079d4 <_vfprintf_r+0x8d0>)
 8007736:	4ba8      	ldr	r3, [pc, #672]	; (80079d8 <_vfprintf_r+0x8d4>)
 8007738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800773a:	9e07      	ldr	r6, [sp, #28]
 800773c:	2a61      	cmp	r2, #97	; 0x61
 800773e:	bf08      	it	eq
 8007740:	461f      	moveq	r7, r3
 8007742:	9712      	str	r7, [sp, #72]	; 0x48
 8007744:	1e6f      	subs	r7, r5, #1
 8007746:	2200      	movs	r2, #0
 8007748:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800774c:	4ba3      	ldr	r3, [pc, #652]	; (80079dc <_vfprintf_r+0x8d8>)
 800774e:	f7f8 fec3 	bl	80004d8 <__aeabi_dmul>
 8007752:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007756:	f7f9 f96f 	bl	8000a38 <__aeabi_d2iz>
 800775a:	901e      	str	r0, [sp, #120]	; 0x78
 800775c:	f7f8 fe52 	bl	8000404 <__aeabi_i2d>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007768:	f7f8 fcfe 	bl	8000168 <__aeabi_dsub>
 800776c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800776e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007770:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007774:	5c9b      	ldrb	r3, [r3, r2]
 8007776:	971f      	str	r7, [sp, #124]	; 0x7c
 8007778:	f806 3b01 	strb.w	r3, [r6], #1
 800777c:	1c7b      	adds	r3, r7, #1
 800777e:	d006      	beq.n	800778e <_vfprintf_r+0x68a>
 8007780:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007784:	3f01      	subs	r7, #1
 8007786:	f7f9 f90f 	bl	80009a8 <__aeabi_dcmpeq>
 800778a:	2800      	cmp	r0, #0
 800778c:	d0db      	beq.n	8007746 <_vfprintf_r+0x642>
 800778e:	2200      	movs	r2, #0
 8007790:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007794:	4b92      	ldr	r3, [pc, #584]	; (80079e0 <_vfprintf_r+0x8dc>)
 8007796:	f7f9 f92f 	bl	80009f8 <__aeabi_dcmpgt>
 800779a:	b960      	cbnz	r0, 80077b6 <_vfprintf_r+0x6b2>
 800779c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077a0:	2200      	movs	r2, #0
 80077a2:	4b8f      	ldr	r3, [pc, #572]	; (80079e0 <_vfprintf_r+0x8dc>)
 80077a4:	f7f9 f900 	bl	80009a8 <__aeabi_dcmpeq>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	f000 8097 	beq.w	80078dc <_vfprintf_r+0x7d8>
 80077ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80077b0:	07df      	lsls	r7, r3, #31
 80077b2:	f140 8093 	bpl.w	80078dc <_vfprintf_r+0x7d8>
 80077b6:	2030      	movs	r0, #48	; 0x30
 80077b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077ba:	9626      	str	r6, [sp, #152]	; 0x98
 80077bc:	7bd9      	ldrb	r1, [r3, #15]
 80077be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80077c0:	1e53      	subs	r3, r2, #1
 80077c2:	9326      	str	r3, [sp, #152]	; 0x98
 80077c4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80077c8:	428b      	cmp	r3, r1
 80077ca:	d07e      	beq.n	80078ca <_vfprintf_r+0x7c6>
 80077cc:	2b39      	cmp	r3, #57	; 0x39
 80077ce:	bf0b      	itete	eq
 80077d0:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 80077d2:	3301      	addne	r3, #1
 80077d4:	7a9b      	ldrbeq	r3, [r3, #10]
 80077d6:	b2db      	uxtbne	r3, r3
 80077d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80077dc:	4633      	mov	r3, r6
 80077de:	9a07      	ldr	r2, [sp, #28]
 80077e0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80077e2:	1a9b      	subs	r3, r3, r2
 80077e4:	9308      	str	r3, [sp, #32]
 80077e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e8:	2b47      	cmp	r3, #71	; 0x47
 80077ea:	f040 80c8 	bne.w	800797e <_vfprintf_r+0x87a>
 80077ee:	1cf0      	adds	r0, r6, #3
 80077f0:	db02      	blt.n	80077f8 <_vfprintf_r+0x6f4>
 80077f2:	42b5      	cmp	r5, r6
 80077f4:	f280 80f6 	bge.w	80079e4 <_vfprintf_r+0x8e0>
 80077f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fa:	3b02      	subs	r3, #2
 80077fc:	930a      	str	r3, [sp, #40]	; 0x28
 80077fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007800:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8007804:	f021 0120 	bic.w	r1, r1, #32
 8007808:	2941      	cmp	r1, #65	; 0x41
 800780a:	bf08      	it	eq
 800780c:	320f      	addeq	r2, #15
 800780e:	f106 33ff 	add.w	r3, r6, #4294967295
 8007812:	bf06      	itte	eq
 8007814:	b2d2      	uxtbeq	r2, r2
 8007816:	2101      	moveq	r1, #1
 8007818:	2100      	movne	r1, #0
 800781a:	2b00      	cmp	r3, #0
 800781c:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8007820:	bfb4      	ite	lt
 8007822:	222d      	movlt	r2, #45	; 0x2d
 8007824:	222b      	movge	r2, #43	; 0x2b
 8007826:	9322      	str	r3, [sp, #136]	; 0x88
 8007828:	bfb8      	it	lt
 800782a:	f1c6 0301 	rsblt	r3, r6, #1
 800782e:	2b09      	cmp	r3, #9
 8007830:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8007834:	f340 80ba 	ble.w	80079ac <_vfprintf_r+0x8a8>
 8007838:	250a      	movs	r5, #10
 800783a:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 800783e:	fb93 f0f5 	sdiv	r0, r3, r5
 8007842:	fb05 3310 	mls	r3, r5, r0, r3
 8007846:	2809      	cmp	r0, #9
 8007848:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800784c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007850:	f102 31ff 	add.w	r1, r2, #4294967295
 8007854:	4603      	mov	r3, r0
 8007856:	f300 80a2 	bgt.w	800799e <_vfprintf_r+0x89a>
 800785a:	3330      	adds	r3, #48	; 0x30
 800785c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007860:	3a02      	subs	r2, #2
 8007862:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8007866:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 800786a:	4282      	cmp	r2, r0
 800786c:	4619      	mov	r1, r3
 800786e:	f0c0 8098 	bcc.w	80079a2 <_vfprintf_r+0x89e>
 8007872:	9a08      	ldr	r2, [sp, #32]
 8007874:	ab24      	add	r3, sp, #144	; 0x90
 8007876:	1acb      	subs	r3, r1, r3
 8007878:	2a01      	cmp	r2, #1
 800787a:	931b      	str	r3, [sp, #108]	; 0x6c
 800787c:	eb03 0502 	add.w	r5, r3, r2
 8007880:	dc02      	bgt.n	8007888 <_vfprintf_r+0x784>
 8007882:	f01a 0f01 	tst.w	sl, #1
 8007886:	d001      	beq.n	800788c <_vfprintf_r+0x788>
 8007888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800788a:	441d      	add	r5, r3
 800788c:	2700      	movs	r7, #0
 800788e:	463e      	mov	r6, r7
 8007890:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8007894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007898:	9315      	str	r3, [sp, #84]	; 0x54
 800789a:	970b      	str	r7, [sp, #44]	; 0x2c
 800789c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 8314 	beq.w	8007ecc <_vfprintf_r+0xdc8>
 80078a4:	232d      	movs	r3, #45	; 0x2d
 80078a6:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80078aa:	2300      	movs	r3, #0
 80078ac:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80078b0:	9312      	str	r3, [sp, #72]	; 0x48
 80078b2:	e158      	b.n	8007b66 <_vfprintf_r+0xa62>
 80078b4:	ab3b      	add	r3, sp, #236	; 0xec
 80078b6:	9307      	str	r3, [sp, #28]
 80078b8:	e717      	b.n	80076ea <_vfprintf_r+0x5e6>
 80078ba:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80078be:	e714      	b.n	80076ea <_vfprintf_r+0x5e6>
 80078c0:	2506      	movs	r5, #6
 80078c2:	e712      	b.n	80076ea <_vfprintf_r+0x5e6>
 80078c4:	46a8      	mov	r8, r5
 80078c6:	2501      	movs	r5, #1
 80078c8:	e70f      	b.n	80076ea <_vfprintf_r+0x5e6>
 80078ca:	f802 0c01 	strb.w	r0, [r2, #-1]
 80078ce:	e776      	b.n	80077be <_vfprintf_r+0x6ba>
 80078d0:	f803 1b01 	strb.w	r1, [r3], #1
 80078d4:	1af2      	subs	r2, r6, r3
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	dafa      	bge.n	80078d0 <_vfprintf_r+0x7cc>
 80078da:	e780      	b.n	80077de <_vfprintf_r+0x6da>
 80078dc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80078de:	4633      	mov	r3, r6
 80078e0:	2130      	movs	r1, #48	; 0x30
 80078e2:	4416      	add	r6, r2
 80078e4:	e7f6      	b.n	80078d4 <_vfprintf_r+0x7d0>
 80078e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078e8:	2b46      	cmp	r3, #70	; 0x46
 80078ea:	d004      	beq.n	80078f6 <_vfprintf_r+0x7f2>
 80078ec:	2b45      	cmp	r3, #69	; 0x45
 80078ee:	d140      	bne.n	8007972 <_vfprintf_r+0x86e>
 80078f0:	1c6f      	adds	r7, r5, #1
 80078f2:	2302      	movs	r3, #2
 80078f4:	e001      	b.n	80078fa <_vfprintf_r+0x7f6>
 80078f6:	462f      	mov	r7, r5
 80078f8:	2303      	movs	r3, #3
 80078fa:	aa26      	add	r2, sp, #152	; 0x98
 80078fc:	9204      	str	r2, [sp, #16]
 80078fe:	aa23      	add	r2, sp, #140	; 0x8c
 8007900:	9203      	str	r2, [sp, #12]
 8007902:	aa22      	add	r2, sp, #136	; 0x88
 8007904:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	9a08      	ldr	r2, [sp, #32]
 800790c:	4633      	mov	r3, r6
 800790e:	4658      	mov	r0, fp
 8007910:	f000 ff92 	bl	8008838 <_dtoa_r>
 8007914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007916:	9007      	str	r0, [sp, #28]
 8007918:	2b47      	cmp	r3, #71	; 0x47
 800791a:	d102      	bne.n	8007922 <_vfprintf_r+0x81e>
 800791c:	f01a 0f01 	tst.w	sl, #1
 8007920:	d02b      	beq.n	800797a <_vfprintf_r+0x876>
 8007922:	9b07      	ldr	r3, [sp, #28]
 8007924:	443b      	add	r3, r7
 8007926:	9312      	str	r3, [sp, #72]	; 0x48
 8007928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800792a:	2b46      	cmp	r3, #70	; 0x46
 800792c:	d111      	bne.n	8007952 <_vfprintf_r+0x84e>
 800792e:	9b07      	ldr	r3, [sp, #28]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b30      	cmp	r3, #48	; 0x30
 8007934:	d109      	bne.n	800794a <_vfprintf_r+0x846>
 8007936:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800793a:	9808      	ldr	r0, [sp, #32]
 800793c:	4631      	mov	r1, r6
 800793e:	f7f9 f833 	bl	80009a8 <__aeabi_dcmpeq>
 8007942:	b910      	cbnz	r0, 800794a <_vfprintf_r+0x846>
 8007944:	f1c7 0701 	rsb	r7, r7, #1
 8007948:	9722      	str	r7, [sp, #136]	; 0x88
 800794a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800794c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800794e:	441a      	add	r2, r3
 8007950:	9212      	str	r2, [sp, #72]	; 0x48
 8007952:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007956:	9808      	ldr	r0, [sp, #32]
 8007958:	4631      	mov	r1, r6
 800795a:	f7f9 f825 	bl	80009a8 <__aeabi_dcmpeq>
 800795e:	b950      	cbnz	r0, 8007976 <_vfprintf_r+0x872>
 8007960:	2230      	movs	r2, #48	; 0x30
 8007962:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007964:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007966:	4299      	cmp	r1, r3
 8007968:	d907      	bls.n	800797a <_vfprintf_r+0x876>
 800796a:	1c59      	adds	r1, r3, #1
 800796c:	9126      	str	r1, [sp, #152]	; 0x98
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e7f7      	b.n	8007962 <_vfprintf_r+0x85e>
 8007972:	462f      	mov	r7, r5
 8007974:	e7bd      	b.n	80078f2 <_vfprintf_r+0x7ee>
 8007976:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007978:	9326      	str	r3, [sp, #152]	; 0x98
 800797a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800797c:	e72f      	b.n	80077de <_vfprintf_r+0x6da>
 800797e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007980:	2b46      	cmp	r3, #70	; 0x46
 8007982:	f47f af3c 	bne.w	80077fe <_vfprintf_r+0x6fa>
 8007986:	2e00      	cmp	r6, #0
 8007988:	dd1d      	ble.n	80079c6 <_vfprintf_r+0x8c2>
 800798a:	b915      	cbnz	r5, 8007992 <_vfprintf_r+0x88e>
 800798c:	f01a 0f01 	tst.w	sl, #1
 8007990:	d03c      	beq.n	8007a0c <_vfprintf_r+0x908>
 8007992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007994:	18f3      	adds	r3, r6, r3
 8007996:	441d      	add	r5, r3
 8007998:	2366      	movs	r3, #102	; 0x66
 800799a:	930a      	str	r3, [sp, #40]	; 0x28
 800799c:	e03b      	b.n	8007a16 <_vfprintf_r+0x912>
 800799e:	460a      	mov	r2, r1
 80079a0:	e74d      	b.n	800783e <_vfprintf_r+0x73a>
 80079a2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e75e      	b.n	800786a <_vfprintf_r+0x766>
 80079ac:	b941      	cbnz	r1, 80079c0 <_vfprintf_r+0x8bc>
 80079ae:	2230      	movs	r2, #48	; 0x30
 80079b0:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 80079b4:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 80079b8:	3330      	adds	r3, #48	; 0x30
 80079ba:	1c51      	adds	r1, r2, #1
 80079bc:	7013      	strb	r3, [r2, #0]
 80079be:	e758      	b.n	8007872 <_vfprintf_r+0x76e>
 80079c0:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 80079c4:	e7f8      	b.n	80079b8 <_vfprintf_r+0x8b4>
 80079c6:	b915      	cbnz	r5, 80079ce <_vfprintf_r+0x8ca>
 80079c8:	f01a 0f01 	tst.w	sl, #1
 80079cc:	d020      	beq.n	8007a10 <_vfprintf_r+0x90c>
 80079ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079d0:	3301      	adds	r3, #1
 80079d2:	e7e0      	b.n	8007996 <_vfprintf_r+0x892>
 80079d4:	0800b1a1 	.word	0x0800b1a1
 80079d8:	0800b190 	.word	0x0800b190
 80079dc:	40300000 	.word	0x40300000
 80079e0:	3fe00000 	.word	0x3fe00000
 80079e4:	9b08      	ldr	r3, [sp, #32]
 80079e6:	42b3      	cmp	r3, r6
 80079e8:	dc06      	bgt.n	80079f8 <_vfprintf_r+0x8f4>
 80079ea:	f01a 0f01 	tst.w	sl, #1
 80079ee:	d025      	beq.n	8007a3c <_vfprintf_r+0x938>
 80079f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079f2:	18f5      	adds	r5, r6, r3
 80079f4:	2367      	movs	r3, #103	; 0x67
 80079f6:	e7d0      	b.n	800799a <_vfprintf_r+0x896>
 80079f8:	9b08      	ldr	r3, [sp, #32]
 80079fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079fc:	2e00      	cmp	r6, #0
 80079fe:	eb03 0502 	add.w	r5, r3, r2
 8007a02:	dcf7      	bgt.n	80079f4 <_vfprintf_r+0x8f0>
 8007a04:	f1c6 0301 	rsb	r3, r6, #1
 8007a08:	441d      	add	r5, r3
 8007a0a:	e7f3      	b.n	80079f4 <_vfprintf_r+0x8f0>
 8007a0c:	4635      	mov	r5, r6
 8007a0e:	e7c3      	b.n	8007998 <_vfprintf_r+0x894>
 8007a10:	2366      	movs	r3, #102	; 0x66
 8007a12:	2501      	movs	r5, #1
 8007a14:	930a      	str	r3, [sp, #40]	; 0x28
 8007a16:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8007a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a1c:	d01f      	beq.n	8007a5e <_vfprintf_r+0x95a>
 8007a1e:	2700      	movs	r7, #0
 8007a20:	2e00      	cmp	r6, #0
 8007a22:	970b      	str	r7, [sp, #44]	; 0x2c
 8007a24:	f77f af3a 	ble.w	800789c <_vfprintf_r+0x798>
 8007a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2bff      	cmp	r3, #255	; 0xff
 8007a2e:	d107      	bne.n	8007a40 <_vfprintf_r+0x93c>
 8007a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a34:	443b      	add	r3, r7
 8007a36:	fb02 5503 	mla	r5, r2, r3, r5
 8007a3a:	e72f      	b.n	800789c <_vfprintf_r+0x798>
 8007a3c:	4635      	mov	r5, r6
 8007a3e:	e7d9      	b.n	80079f4 <_vfprintf_r+0x8f0>
 8007a40:	42b3      	cmp	r3, r6
 8007a42:	daf5      	bge.n	8007a30 <_vfprintf_r+0x92c>
 8007a44:	1af6      	subs	r6, r6, r3
 8007a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a48:	785b      	ldrb	r3, [r3, #1]
 8007a4a:	b133      	cbz	r3, 8007a5a <_vfprintf_r+0x956>
 8007a4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a4e:	3301      	adds	r3, #1
 8007a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a54:	3301      	adds	r3, #1
 8007a56:	930c      	str	r3, [sp, #48]	; 0x30
 8007a58:	e7e6      	b.n	8007a28 <_vfprintf_r+0x924>
 8007a5a:	3701      	adds	r7, #1
 8007a5c:	e7e4      	b.n	8007a28 <_vfprintf_r+0x924>
 8007a5e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007a60:	e71c      	b.n	800789c <_vfprintf_r+0x798>
 8007a62:	4632      	mov	r2, r6
 8007a64:	f852 3b04 	ldr.w	r3, [r2], #4
 8007a68:	f01a 0f20 	tst.w	sl, #32
 8007a6c:	920d      	str	r2, [sp, #52]	; 0x34
 8007a6e:	d009      	beq.n	8007a84 <_vfprintf_r+0x980>
 8007a70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a72:	4610      	mov	r0, r2
 8007a74:	17d1      	asrs	r1, r2, #31
 8007a76:	e9c3 0100 	strd	r0, r1, [r3]
 8007a7a:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	; 0x34
 8007a7e:	9307      	str	r3, [sp, #28]
 8007a80:	f7ff bbbe 	b.w	8007200 <_vfprintf_r+0xfc>
 8007a84:	f01a 0f10 	tst.w	sl, #16
 8007a88:	d002      	beq.n	8007a90 <_vfprintf_r+0x98c>
 8007a8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e7f4      	b.n	8007a7a <_vfprintf_r+0x976>
 8007a90:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007a94:	d002      	beq.n	8007a9c <_vfprintf_r+0x998>
 8007a96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a98:	801a      	strh	r2, [r3, #0]
 8007a9a:	e7ee      	b.n	8007a7a <_vfprintf_r+0x976>
 8007a9c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007aa0:	d0f3      	beq.n	8007a8a <_vfprintf_r+0x986>
 8007aa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007aa4:	701a      	strb	r2, [r3, #0]
 8007aa6:	e7e8      	b.n	8007a7a <_vfprintf_r+0x976>
 8007aa8:	f04a 0a10 	orr.w	sl, sl, #16
 8007aac:	f01a 0f20 	tst.w	sl, #32
 8007ab0:	d01e      	beq.n	8007af0 <_vfprintf_r+0x9ec>
 8007ab2:	3607      	adds	r6, #7
 8007ab4:	f026 0607 	bic.w	r6, r6, #7
 8007ab8:	f106 0308 	add.w	r3, r6, #8
 8007abc:	930d      	str	r3, [sp, #52]	; 0x34
 8007abe:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8007ace:	1c6a      	adds	r2, r5, #1
 8007ad0:	f000 815a 	beq.w	8007d88 <_vfprintf_r+0xc84>
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	ea56 0107 	orrs.w	r1, r6, r7
 8007ada:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007ade:	f040 8153 	bne.w	8007d88 <_vfprintf_r+0xc84>
 8007ae2:	2d00      	cmp	r5, #0
 8007ae4:	f000 81d9 	beq.w	8007e9a <_vfprintf_r+0xd96>
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	f040 8150 	bne.w	8007d8e <_vfprintf_r+0xc8a>
 8007aee:	e550      	b.n	8007592 <_vfprintf_r+0x48e>
 8007af0:	1d33      	adds	r3, r6, #4
 8007af2:	f01a 0f10 	tst.w	sl, #16
 8007af6:	930d      	str	r3, [sp, #52]	; 0x34
 8007af8:	d001      	beq.n	8007afe <_vfprintf_r+0x9fa>
 8007afa:	6836      	ldr	r6, [r6, #0]
 8007afc:	e003      	b.n	8007b06 <_vfprintf_r+0xa02>
 8007afe:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007b02:	d002      	beq.n	8007b0a <_vfprintf_r+0xa06>
 8007b04:	8836      	ldrh	r6, [r6, #0]
 8007b06:	2700      	movs	r7, #0
 8007b08:	e7db      	b.n	8007ac2 <_vfprintf_r+0x9be>
 8007b0a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007b0e:	d0f4      	beq.n	8007afa <_vfprintf_r+0x9f6>
 8007b10:	7836      	ldrb	r6, [r6, #0]
 8007b12:	e7f8      	b.n	8007b06 <_vfprintf_r+0xa02>
 8007b14:	1d33      	adds	r3, r6, #4
 8007b16:	930d      	str	r3, [sp, #52]	; 0x34
 8007b18:	f647 0330 	movw	r3, #30768	; 0x7830
 8007b1c:	2278      	movs	r2, #120	; 0x78
 8007b1e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8007b22:	4bab      	ldr	r3, [pc, #684]	; (8007dd0 <_vfprintf_r+0xccc>)
 8007b24:	6836      	ldr	r6, [r6, #0]
 8007b26:	931c      	str	r3, [sp, #112]	; 0x70
 8007b28:	2700      	movs	r7, #0
 8007b2a:	f04a 0a02 	orr.w	sl, sl, #2
 8007b2e:	2302      	movs	r3, #2
 8007b30:	920a      	str	r2, [sp, #40]	; 0x28
 8007b32:	e7c9      	b.n	8007ac8 <_vfprintf_r+0x9c4>
 8007b34:	1d33      	adds	r3, r6, #4
 8007b36:	930d      	str	r3, [sp, #52]	; 0x34
 8007b38:	6833      	ldr	r3, [r6, #0]
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	1c69      	adds	r1, r5, #1
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8007b44:	f000 80e0 	beq.w	8007d08 <_vfprintf_r+0xc04>
 8007b48:	462a      	mov	r2, r5
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f002 f92d 	bl	8009dac <memchr>
 8007b52:	4680      	mov	r8, r0
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f43f ad68 	beq.w	800762a <_vfprintf_r+0x526>
 8007b5a:	46b0      	mov	r8, r6
 8007b5c:	4637      	mov	r7, r6
 8007b5e:	9b07      	ldr	r3, [sp, #28]
 8007b60:	9612      	str	r6, [sp, #72]	; 0x48
 8007b62:	1ac5      	subs	r5, r0, r3
 8007b64:	960b      	str	r6, [sp, #44]	; 0x2c
 8007b66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b68:	42ab      	cmp	r3, r5
 8007b6a:	bfb8      	it	lt
 8007b6c:	462b      	movlt	r3, r5
 8007b6e:	9315      	str	r3, [sp, #84]	; 0x54
 8007b70:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007b74:	b113      	cbz	r3, 8007b7c <_vfprintf_r+0xa78>
 8007b76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b78:	3301      	adds	r3, #1
 8007b7a:	9315      	str	r3, [sp, #84]	; 0x54
 8007b7c:	f01a 0302 	ands.w	r3, sl, #2
 8007b80:	931e      	str	r3, [sp, #120]	; 0x78
 8007b82:	bf1e      	ittt	ne
 8007b84:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8007b86:	3302      	addne	r3, #2
 8007b88:	9315      	strne	r3, [sp, #84]	; 0x54
 8007b8a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8007b8e:	931f      	str	r3, [sp, #124]	; 0x7c
 8007b90:	d121      	bne.n	8007bd6 <_vfprintf_r+0xad2>
 8007b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	9319      	str	r3, [sp, #100]	; 0x64
 8007b9c:	dd1b      	ble.n	8007bd6 <_vfprintf_r+0xad2>
 8007b9e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007ba2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007ba4:	3201      	adds	r2, #1
 8007ba6:	2810      	cmp	r0, #16
 8007ba8:	488a      	ldr	r0, [pc, #552]	; (8007dd4 <_vfprintf_r+0xcd0>)
 8007baa:	f104 0108 	add.w	r1, r4, #8
 8007bae:	6020      	str	r0, [r4, #0]
 8007bb0:	f300 8190 	bgt.w	8007ed4 <_vfprintf_r+0xdd0>
 8007bb4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007bb6:	2a07      	cmp	r2, #7
 8007bb8:	4403      	add	r3, r0
 8007bba:	6060      	str	r0, [r4, #4]
 8007bbc:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007bc0:	f340 819d 	ble.w	8007efe <_vfprintf_r+0xdfa>
 8007bc4:	aa28      	add	r2, sp, #160	; 0xa0
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	4658      	mov	r0, fp
 8007bca:	f002 fca2 	bl	800a512 <__sprint_r>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f040 84c7 	bne.w	8008562 <_vfprintf_r+0x145e>
 8007bd4:	ac2b      	add	r4, sp, #172	; 0xac
 8007bd6:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007bda:	b173      	cbz	r3, 8007bfa <_vfprintf_r+0xaf6>
 8007bdc:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	2301      	movs	r3, #1
 8007be4:	6063      	str	r3, [r4, #4]
 8007be6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007be8:	3301      	adds	r3, #1
 8007bea:	932a      	str	r3, [sp, #168]	; 0xa8
 8007bec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007bee:	3301      	adds	r3, #1
 8007bf0:	2b07      	cmp	r3, #7
 8007bf2:	9329      	str	r3, [sp, #164]	; 0xa4
 8007bf4:	f300 8185 	bgt.w	8007f02 <_vfprintf_r+0xdfe>
 8007bf8:	3408      	adds	r4, #8
 8007bfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007bfc:	b16b      	cbz	r3, 8007c1a <_vfprintf_r+0xb16>
 8007bfe:	ab21      	add	r3, sp, #132	; 0x84
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	2302      	movs	r3, #2
 8007c04:	6063      	str	r3, [r4, #4]
 8007c06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007c08:	3302      	adds	r3, #2
 8007c0a:	932a      	str	r3, [sp, #168]	; 0xa8
 8007c0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007c0e:	3301      	adds	r3, #1
 8007c10:	2b07      	cmp	r3, #7
 8007c12:	9329      	str	r3, [sp, #164]	; 0xa4
 8007c14:	f300 817f 	bgt.w	8007f16 <_vfprintf_r+0xe12>
 8007c18:	3408      	adds	r4, #8
 8007c1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c1c:	2b80      	cmp	r3, #128	; 0x80
 8007c1e:	d121      	bne.n	8007c64 <_vfprintf_r+0xb60>
 8007c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c24:	1a9b      	subs	r3, r3, r2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	9319      	str	r3, [sp, #100]	; 0x64
 8007c2a:	dd1b      	ble.n	8007c64 <_vfprintf_r+0xb60>
 8007c2c:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007c30:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007c32:	3201      	adds	r2, #1
 8007c34:	2810      	cmp	r0, #16
 8007c36:	4868      	ldr	r0, [pc, #416]	; (8007dd8 <_vfprintf_r+0xcd4>)
 8007c38:	f104 0108 	add.w	r1, r4, #8
 8007c3c:	6020      	str	r0, [r4, #0]
 8007c3e:	f300 8174 	bgt.w	8007f2a <_vfprintf_r+0xe26>
 8007c42:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007c44:	2a07      	cmp	r2, #7
 8007c46:	4403      	add	r3, r0
 8007c48:	6060      	str	r0, [r4, #4]
 8007c4a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007c4e:	f340 8181 	ble.w	8007f54 <_vfprintf_r+0xe50>
 8007c52:	aa28      	add	r2, sp, #160	; 0xa0
 8007c54:	4649      	mov	r1, r9
 8007c56:	4658      	mov	r0, fp
 8007c58:	f002 fc5b 	bl	800a512 <__sprint_r>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	f040 8480 	bne.w	8008562 <_vfprintf_r+0x145e>
 8007c62:	ac2b      	add	r4, sp, #172	; 0xac
 8007c64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c66:	1b5b      	subs	r3, r3, r5
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	9312      	str	r3, [sp, #72]	; 0x48
 8007c6c:	dd1b      	ble.n	8007ca6 <_vfprintf_r+0xba2>
 8007c6e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007c72:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c74:	3201      	adds	r2, #1
 8007c76:	2810      	cmp	r0, #16
 8007c78:	4857      	ldr	r0, [pc, #348]	; (8007dd8 <_vfprintf_r+0xcd4>)
 8007c7a:	f104 0108 	add.w	r1, r4, #8
 8007c7e:	6020      	str	r0, [r4, #0]
 8007c80:	f300 816a 	bgt.w	8007f58 <_vfprintf_r+0xe54>
 8007c84:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c86:	2a07      	cmp	r2, #7
 8007c88:	4403      	add	r3, r0
 8007c8a:	6060      	str	r0, [r4, #4]
 8007c8c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007c90:	f340 8177 	ble.w	8007f82 <_vfprintf_r+0xe7e>
 8007c94:	aa28      	add	r2, sp, #160	; 0xa0
 8007c96:	4649      	mov	r1, r9
 8007c98:	4658      	mov	r0, fp
 8007c9a:	f002 fc3a 	bl	800a512 <__sprint_r>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f040 845f 	bne.w	8008562 <_vfprintf_r+0x145e>
 8007ca4:	ac2b      	add	r4, sp, #172	; 0xac
 8007ca6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007ca8:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007cac:	9312      	str	r3, [sp, #72]	; 0x48
 8007cae:	f040 816a 	bne.w	8007f86 <_vfprintf_r+0xe82>
 8007cb2:	9b07      	ldr	r3, [sp, #28]
 8007cb4:	e9c4 3500 	strd	r3, r5, [r4]
 8007cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cba:	441d      	add	r5, r3
 8007cbc:	952a      	str	r5, [sp, #168]	; 0xa8
 8007cbe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	2b07      	cmp	r3, #7
 8007cc4:	9329      	str	r3, [sp, #164]	; 0xa4
 8007cc6:	f300 81a4 	bgt.w	8008012 <_vfprintf_r+0xf0e>
 8007cca:	3408      	adds	r4, #8
 8007ccc:	f01a 0f04 	tst.w	sl, #4
 8007cd0:	f040 8429 	bne.w	8008526 <_vfprintf_r+0x1422>
 8007cd4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007cd8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007cda:	428a      	cmp	r2, r1
 8007cdc:	bfac      	ite	ge
 8007cde:	189b      	addge	r3, r3, r2
 8007ce0:	185b      	addlt	r3, r3, r1
 8007ce2:	9310      	str	r3, [sp, #64]	; 0x40
 8007ce4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007ce6:	b13b      	cbz	r3, 8007cf8 <_vfprintf_r+0xbf4>
 8007ce8:	aa28      	add	r2, sp, #160	; 0xa0
 8007cea:	4649      	mov	r1, r9
 8007cec:	4658      	mov	r0, fp
 8007cee:	f002 fc10 	bl	800a512 <__sprint_r>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f040 8435 	bne.w	8008562 <_vfprintf_r+0x145e>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9329      	str	r3, [sp, #164]	; 0xa4
 8007cfc:	f1b8 0f00 	cmp.w	r8, #0
 8007d00:	f040 844b 	bne.w	800859a <_vfprintf_r+0x1496>
 8007d04:	ac2b      	add	r4, sp, #172	; 0xac
 8007d06:	e6b8      	b.n	8007a7a <_vfprintf_r+0x976>
 8007d08:	9807      	ldr	r0, [sp, #28]
 8007d0a:	f7f8 fa21 	bl	8000150 <strlen>
 8007d0e:	46b0      	mov	r8, r6
 8007d10:	4605      	mov	r5, r0
 8007d12:	e48a      	b.n	800762a <_vfprintf_r+0x526>
 8007d14:	f04a 0a10 	orr.w	sl, sl, #16
 8007d18:	f01a 0f20 	tst.w	sl, #32
 8007d1c:	d009      	beq.n	8007d32 <_vfprintf_r+0xc2e>
 8007d1e:	3607      	adds	r6, #7
 8007d20:	f026 0607 	bic.w	r6, r6, #7
 8007d24:	f106 0308 	add.w	r3, r6, #8
 8007d28:	930d      	str	r3, [sp, #52]	; 0x34
 8007d2a:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e6ca      	b.n	8007ac8 <_vfprintf_r+0x9c4>
 8007d32:	1d33      	adds	r3, r6, #4
 8007d34:	f01a 0f10 	tst.w	sl, #16
 8007d38:	930d      	str	r3, [sp, #52]	; 0x34
 8007d3a:	d001      	beq.n	8007d40 <_vfprintf_r+0xc3c>
 8007d3c:	6836      	ldr	r6, [r6, #0]
 8007d3e:	e003      	b.n	8007d48 <_vfprintf_r+0xc44>
 8007d40:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007d44:	d002      	beq.n	8007d4c <_vfprintf_r+0xc48>
 8007d46:	8836      	ldrh	r6, [r6, #0]
 8007d48:	2700      	movs	r7, #0
 8007d4a:	e7f0      	b.n	8007d2e <_vfprintf_r+0xc2a>
 8007d4c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007d50:	d0f4      	beq.n	8007d3c <_vfprintf_r+0xc38>
 8007d52:	7836      	ldrb	r6, [r6, #0]
 8007d54:	e7f8      	b.n	8007d48 <_vfprintf_r+0xc44>
 8007d56:	4b1e      	ldr	r3, [pc, #120]	; (8007dd0 <_vfprintf_r+0xccc>)
 8007d58:	f7ff bb4d 	b.w	80073f6 <_vfprintf_r+0x2f2>
 8007d5c:	1d33      	adds	r3, r6, #4
 8007d5e:	f01a 0f10 	tst.w	sl, #16
 8007d62:	930d      	str	r3, [sp, #52]	; 0x34
 8007d64:	d001      	beq.n	8007d6a <_vfprintf_r+0xc66>
 8007d66:	6836      	ldr	r6, [r6, #0]
 8007d68:	e003      	b.n	8007d72 <_vfprintf_r+0xc6e>
 8007d6a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007d6e:	d003      	beq.n	8007d78 <_vfprintf_r+0xc74>
 8007d70:	8836      	ldrh	r6, [r6, #0]
 8007d72:	2700      	movs	r7, #0
 8007d74:	f7ff bb4c 	b.w	8007410 <_vfprintf_r+0x30c>
 8007d78:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007d7c:	d0f3      	beq.n	8007d66 <_vfprintf_r+0xc62>
 8007d7e:	7836      	ldrb	r6, [r6, #0]
 8007d80:	e7f7      	b.n	8007d72 <_vfprintf_r+0xc6e>
 8007d82:	4652      	mov	r2, sl
 8007d84:	2301      	movs	r3, #1
 8007d86:	e6a6      	b.n	8007ad6 <_vfprintf_r+0x9d2>
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	f43f abfd 	beq.w	8007588 <_vfprintf_r+0x484>
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	ab54      	add	r3, sp, #336	; 0x150
 8007d92:	d06f      	beq.n	8007e74 <_vfprintf_r+0xd70>
 8007d94:	08f1      	lsrs	r1, r6, #3
 8007d96:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8007d9a:	1e5a      	subs	r2, r3, #1
 8007d9c:	08f8      	lsrs	r0, r7, #3
 8007d9e:	9207      	str	r2, [sp, #28]
 8007da0:	4607      	mov	r7, r0
 8007da2:	f006 0207 	and.w	r2, r6, #7
 8007da6:	460e      	mov	r6, r1
 8007da8:	3230      	adds	r2, #48	; 0x30
 8007daa:	ea56 0107 	orrs.w	r1, r6, r7
 8007dae:	f803 2c01 	strb.w	r2, [r3, #-1]
 8007db2:	d10b      	bne.n	8007dcc <_vfprintf_r+0xcc8>
 8007db4:	f01a 0f01 	tst.w	sl, #1
 8007db8:	d04e      	beq.n	8007e58 <_vfprintf_r+0xd54>
 8007dba:	2a30      	cmp	r2, #48	; 0x30
 8007dbc:	d04c      	beq.n	8007e58 <_vfprintf_r+0xd54>
 8007dbe:	2230      	movs	r2, #48	; 0x30
 8007dc0:	9907      	ldr	r1, [sp, #28]
 8007dc2:	3b02      	subs	r3, #2
 8007dc4:	f801 2c01 	strb.w	r2, [r1, #-1]
 8007dc8:	9307      	str	r3, [sp, #28]
 8007dca:	e045      	b.n	8007e58 <_vfprintf_r+0xd54>
 8007dcc:	9b07      	ldr	r3, [sp, #28]
 8007dce:	e7e1      	b.n	8007d94 <_vfprintf_r+0xc90>
 8007dd0:	0800b190 	.word	0x0800b190
 8007dd4:	0800b1b4 	.word	0x0800b1b4
 8007dd8:	0800b1c4 	.word	0x0800b1c4
 8007ddc:	2300      	movs	r3, #0
 8007dde:	9308      	str	r3, [sp, #32]
 8007de0:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8007de4:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 8007de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dea:	f108 33ff 	add.w	r3, r8, #4294967295
 8007dee:	9307      	str	r3, [sp, #28]
 8007df0:	220a      	movs	r2, #10
 8007df2:	2300      	movs	r3, #0
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fe46 	bl	8000a88 <__aeabi_uldivmod>
 8007dfc:	9b08      	ldr	r3, [sp, #32]
 8007dfe:	3230      	adds	r2, #48	; 0x30
 8007e00:	3301      	adds	r3, #1
 8007e02:	9308      	str	r3, [sp, #32]
 8007e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e06:	f808 2c01 	strb.w	r2, [r8, #-1]
 8007e0a:	b1d3      	cbz	r3, 8007e42 <_vfprintf_r+0xd3e>
 8007e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e0e:	9a08      	ldr	r2, [sp, #32]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d115      	bne.n	8007e42 <_vfprintf_r+0xd3e>
 8007e16:	2aff      	cmp	r2, #255	; 0xff
 8007e18:	d013      	beq.n	8007e42 <_vfprintf_r+0xd3e>
 8007e1a:	2f00      	cmp	r7, #0
 8007e1c:	bf08      	it	eq
 8007e1e:	2e0a      	cmpeq	r6, #10
 8007e20:	d30f      	bcc.n	8007e42 <_vfprintf_r+0xd3e>
 8007e22:	9b07      	ldr	r3, [sp, #28]
 8007e24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e26:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	9307      	str	r3, [sp, #28]
 8007e2e:	f002 fb4e 	bl	800a4ce <strncpy>
 8007e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e34:	785b      	ldrb	r3, [r3, #1]
 8007e36:	b11b      	cbz	r3, 8007e40 <_vfprintf_r+0xd3c>
 8007e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	930c      	str	r3, [sp, #48]	; 0x30
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9308      	str	r3, [sp, #32]
 8007e42:	2300      	movs	r3, #0
 8007e44:	4630      	mov	r0, r6
 8007e46:	4639      	mov	r1, r7
 8007e48:	220a      	movs	r2, #10
 8007e4a:	f7f8 fe1d 	bl	8000a88 <__aeabi_uldivmod>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	ea56 0307 	orrs.w	r3, r6, r7
 8007e56:	d10a      	bne.n	8007e6e <_vfprintf_r+0xd6a>
 8007e58:	f04f 0800 	mov.w	r8, #0
 8007e5c:	9a07      	ldr	r2, [sp, #28]
 8007e5e:	ab54      	add	r3, sp, #336	; 0x150
 8007e60:	9512      	str	r5, [sp, #72]	; 0x48
 8007e62:	1a9d      	subs	r5, r3, r2
 8007e64:	4647      	mov	r7, r8
 8007e66:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8007e6a:	4646      	mov	r6, r8
 8007e6c:	e67b      	b.n	8007b66 <_vfprintf_r+0xa62>
 8007e6e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007e72:	e7ba      	b.n	8007dea <_vfprintf_r+0xce6>
 8007e74:	9307      	str	r3, [sp, #28]
 8007e76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007e78:	f006 030f 	and.w	r3, r6, #15
 8007e7c:	5cd3      	ldrb	r3, [r2, r3]
 8007e7e:	9a07      	ldr	r2, [sp, #28]
 8007e80:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8007e84:	0933      	lsrs	r3, r6, #4
 8007e86:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8007e8a:	9207      	str	r2, [sp, #28]
 8007e8c:	093a      	lsrs	r2, r7, #4
 8007e8e:	461e      	mov	r6, r3
 8007e90:	4617      	mov	r7, r2
 8007e92:	ea56 0307 	orrs.w	r3, r6, r7
 8007e96:	d1ee      	bne.n	8007e76 <_vfprintf_r+0xd72>
 8007e98:	e7de      	b.n	8007e58 <_vfprintf_r+0xd54>
 8007e9a:	b94b      	cbnz	r3, 8007eb0 <_vfprintf_r+0xdac>
 8007e9c:	ab54      	add	r3, sp, #336	; 0x150
 8007e9e:	07d6      	lsls	r6, r2, #31
 8007ea0:	9307      	str	r3, [sp, #28]
 8007ea2:	d5d9      	bpl.n	8007e58 <_vfprintf_r+0xd54>
 8007ea4:	2330      	movs	r3, #48	; 0x30
 8007ea6:	9a07      	ldr	r2, [sp, #28]
 8007ea8:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8007eac:	4613      	mov	r3, r2
 8007eae:	e78b      	b.n	8007dc8 <_vfprintf_r+0xcc4>
 8007eb0:	ab54      	add	r3, sp, #336	; 0x150
 8007eb2:	e789      	b.n	8007dc8 <_vfprintf_r+0xcc4>
 8007eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 8375 	beq.w	80085a6 <_vfprintf_r+0x14a2>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8007ec2:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8007ec6:	960d      	str	r6, [sp, #52]	; 0x34
 8007ec8:	f7ff bb3b 	b.w	8007542 <_vfprintf_r+0x43e>
 8007ecc:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8007ed0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ed2:	e4ed      	b.n	80078b0 <_vfprintf_r+0x7ac>
 8007ed4:	2010      	movs	r0, #16
 8007ed6:	2a07      	cmp	r2, #7
 8007ed8:	4403      	add	r3, r0
 8007eda:	6060      	str	r0, [r4, #4]
 8007edc:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007ee0:	dd08      	ble.n	8007ef4 <_vfprintf_r+0xdf0>
 8007ee2:	aa28      	add	r2, sp, #160	; 0xa0
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	f002 fb13 	bl	800a512 <__sprint_r>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	f040 8338 	bne.w	8008562 <_vfprintf_r+0x145e>
 8007ef2:	a92b      	add	r1, sp, #172	; 0xac
 8007ef4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	3b10      	subs	r3, #16
 8007efa:	9319      	str	r3, [sp, #100]	; 0x64
 8007efc:	e64f      	b.n	8007b9e <_vfprintf_r+0xa9a>
 8007efe:	460c      	mov	r4, r1
 8007f00:	e669      	b.n	8007bd6 <_vfprintf_r+0xad2>
 8007f02:	aa28      	add	r2, sp, #160	; 0xa0
 8007f04:	4649      	mov	r1, r9
 8007f06:	4658      	mov	r0, fp
 8007f08:	f002 fb03 	bl	800a512 <__sprint_r>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f040 8328 	bne.w	8008562 <_vfprintf_r+0x145e>
 8007f12:	ac2b      	add	r4, sp, #172	; 0xac
 8007f14:	e671      	b.n	8007bfa <_vfprintf_r+0xaf6>
 8007f16:	aa28      	add	r2, sp, #160	; 0xa0
 8007f18:	4649      	mov	r1, r9
 8007f1a:	4658      	mov	r0, fp
 8007f1c:	f002 faf9 	bl	800a512 <__sprint_r>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	f040 831e 	bne.w	8008562 <_vfprintf_r+0x145e>
 8007f26:	ac2b      	add	r4, sp, #172	; 0xac
 8007f28:	e677      	b.n	8007c1a <_vfprintf_r+0xb16>
 8007f2a:	2010      	movs	r0, #16
 8007f2c:	2a07      	cmp	r2, #7
 8007f2e:	4403      	add	r3, r0
 8007f30:	6060      	str	r0, [r4, #4]
 8007f32:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007f36:	dd08      	ble.n	8007f4a <_vfprintf_r+0xe46>
 8007f38:	aa28      	add	r2, sp, #160	; 0xa0
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4658      	mov	r0, fp
 8007f3e:	f002 fae8 	bl	800a512 <__sprint_r>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	f040 830d 	bne.w	8008562 <_vfprintf_r+0x145e>
 8007f48:	a92b      	add	r1, sp, #172	; 0xac
 8007f4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	3b10      	subs	r3, #16
 8007f50:	9319      	str	r3, [sp, #100]	; 0x64
 8007f52:	e66b      	b.n	8007c2c <_vfprintf_r+0xb28>
 8007f54:	460c      	mov	r4, r1
 8007f56:	e685      	b.n	8007c64 <_vfprintf_r+0xb60>
 8007f58:	2010      	movs	r0, #16
 8007f5a:	2a07      	cmp	r2, #7
 8007f5c:	4403      	add	r3, r0
 8007f5e:	6060      	str	r0, [r4, #4]
 8007f60:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007f64:	dd08      	ble.n	8007f78 <_vfprintf_r+0xe74>
 8007f66:	aa28      	add	r2, sp, #160	; 0xa0
 8007f68:	4649      	mov	r1, r9
 8007f6a:	4658      	mov	r0, fp
 8007f6c:	f002 fad1 	bl	800a512 <__sprint_r>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	f040 82f6 	bne.w	8008562 <_vfprintf_r+0x145e>
 8007f76:	a92b      	add	r1, sp, #172	; 0xac
 8007f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	3b10      	subs	r3, #16
 8007f7e:	9312      	str	r3, [sp, #72]	; 0x48
 8007f80:	e675      	b.n	8007c6e <_vfprintf_r+0xb6a>
 8007f82:	460c      	mov	r4, r1
 8007f84:	e68f      	b.n	8007ca6 <_vfprintf_r+0xba2>
 8007f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f88:	2b65      	cmp	r3, #101	; 0x65
 8007f8a:	f340 8237 	ble.w	80083fc <_vfprintf_r+0x12f8>
 8007f8e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007f92:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007f96:	f7f8 fd07 	bl	80009a8 <__aeabi_dcmpeq>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d069      	beq.n	8008072 <_vfprintf_r+0xf6e>
 8007f9e:	4b6f      	ldr	r3, [pc, #444]	; (800815c <_vfprintf_r+0x1058>)
 8007fa0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	441d      	add	r5, r3
 8007fa8:	6063      	str	r3, [r4, #4]
 8007faa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007fac:	952a      	str	r5, [sp, #168]	; 0xa8
 8007fae:	3301      	adds	r3, #1
 8007fb0:	2b07      	cmp	r3, #7
 8007fb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8007fb4:	dc37      	bgt.n	8008026 <_vfprintf_r+0xf22>
 8007fb6:	3408      	adds	r4, #8
 8007fb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fba:	9a08      	ldr	r2, [sp, #32]
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	db03      	blt.n	8007fc8 <_vfprintf_r+0xec4>
 8007fc0:	f01a 0f01 	tst.w	sl, #1
 8007fc4:	f43f ae82 	beq.w	8007ccc <_vfprintf_r+0xbc8>
 8007fc8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007fca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fd0:	6063      	str	r3, [r4, #4]
 8007fd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007fd4:	4413      	add	r3, r2
 8007fd6:	932a      	str	r3, [sp, #168]	; 0xa8
 8007fd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007fda:	3301      	adds	r3, #1
 8007fdc:	2b07      	cmp	r3, #7
 8007fde:	9329      	str	r3, [sp, #164]	; 0xa4
 8007fe0:	dc2b      	bgt.n	800803a <_vfprintf_r+0xf36>
 8007fe2:	3408      	adds	r4, #8
 8007fe4:	9b08      	ldr	r3, [sp, #32]
 8007fe6:	1e5d      	subs	r5, r3, #1
 8007fe8:	2d00      	cmp	r5, #0
 8007fea:	f77f ae6f 	ble.w	8007ccc <_vfprintf_r+0xbc8>
 8007fee:	2710      	movs	r7, #16
 8007ff0:	4e5b      	ldr	r6, [pc, #364]	; (8008160 <_vfprintf_r+0x105c>)
 8007ff2:	2d10      	cmp	r5, #16
 8007ff4:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8007ff8:	f104 0108 	add.w	r1, r4, #8
 8007ffc:	f103 0301 	add.w	r3, r3, #1
 8008000:	6026      	str	r6, [r4, #0]
 8008002:	dc24      	bgt.n	800804e <_vfprintf_r+0xf4a>
 8008004:	6065      	str	r5, [r4, #4]
 8008006:	2b07      	cmp	r3, #7
 8008008:	4415      	add	r5, r2
 800800a:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800800e:	f340 8287 	ble.w	8008520 <_vfprintf_r+0x141c>
 8008012:	aa28      	add	r2, sp, #160	; 0xa0
 8008014:	4649      	mov	r1, r9
 8008016:	4658      	mov	r0, fp
 8008018:	f002 fa7b 	bl	800a512 <__sprint_r>
 800801c:	2800      	cmp	r0, #0
 800801e:	f040 82a0 	bne.w	8008562 <_vfprintf_r+0x145e>
 8008022:	ac2b      	add	r4, sp, #172	; 0xac
 8008024:	e652      	b.n	8007ccc <_vfprintf_r+0xbc8>
 8008026:	aa28      	add	r2, sp, #160	; 0xa0
 8008028:	4649      	mov	r1, r9
 800802a:	4658      	mov	r0, fp
 800802c:	f002 fa71 	bl	800a512 <__sprint_r>
 8008030:	2800      	cmp	r0, #0
 8008032:	f040 8296 	bne.w	8008562 <_vfprintf_r+0x145e>
 8008036:	ac2b      	add	r4, sp, #172	; 0xac
 8008038:	e7be      	b.n	8007fb8 <_vfprintf_r+0xeb4>
 800803a:	aa28      	add	r2, sp, #160	; 0xa0
 800803c:	4649      	mov	r1, r9
 800803e:	4658      	mov	r0, fp
 8008040:	f002 fa67 	bl	800a512 <__sprint_r>
 8008044:	2800      	cmp	r0, #0
 8008046:	f040 828c 	bne.w	8008562 <_vfprintf_r+0x145e>
 800804a:	ac2b      	add	r4, sp, #172	; 0xac
 800804c:	e7ca      	b.n	8007fe4 <_vfprintf_r+0xee0>
 800804e:	3210      	adds	r2, #16
 8008050:	2b07      	cmp	r3, #7
 8008052:	6067      	str	r7, [r4, #4]
 8008054:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8008058:	dd08      	ble.n	800806c <_vfprintf_r+0xf68>
 800805a:	aa28      	add	r2, sp, #160	; 0xa0
 800805c:	4649      	mov	r1, r9
 800805e:	4658      	mov	r0, fp
 8008060:	f002 fa57 	bl	800a512 <__sprint_r>
 8008064:	2800      	cmp	r0, #0
 8008066:	f040 827c 	bne.w	8008562 <_vfprintf_r+0x145e>
 800806a:	a92b      	add	r1, sp, #172	; 0xac
 800806c:	3d10      	subs	r5, #16
 800806e:	460c      	mov	r4, r1
 8008070:	e7bf      	b.n	8007ff2 <_vfprintf_r+0xeee>
 8008072:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008074:	2b00      	cmp	r3, #0
 8008076:	dc75      	bgt.n	8008164 <_vfprintf_r+0x1060>
 8008078:	4b38      	ldr	r3, [pc, #224]	; (800815c <_vfprintf_r+0x1058>)
 800807a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	2301      	movs	r3, #1
 8008080:	441d      	add	r5, r3
 8008082:	6063      	str	r3, [r4, #4]
 8008084:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008086:	952a      	str	r5, [sp, #168]	; 0xa8
 8008088:	3301      	adds	r3, #1
 800808a:	2b07      	cmp	r3, #7
 800808c:	9329      	str	r3, [sp, #164]	; 0xa4
 800808e:	dc3e      	bgt.n	800810e <_vfprintf_r+0x100a>
 8008090:	3408      	adds	r4, #8
 8008092:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008094:	b92b      	cbnz	r3, 80080a2 <_vfprintf_r+0xf9e>
 8008096:	9b08      	ldr	r3, [sp, #32]
 8008098:	b91b      	cbnz	r3, 80080a2 <_vfprintf_r+0xf9e>
 800809a:	f01a 0f01 	tst.w	sl, #1
 800809e:	f43f ae15 	beq.w	8007ccc <_vfprintf_r+0xbc8>
 80080a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80080a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080a6:	6023      	str	r3, [r4, #0]
 80080a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080aa:	6063      	str	r3, [r4, #4]
 80080ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80080ae:	4413      	add	r3, r2
 80080b0:	932a      	str	r3, [sp, #168]	; 0xa8
 80080b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80080b4:	3301      	adds	r3, #1
 80080b6:	2b07      	cmp	r3, #7
 80080b8:	9329      	str	r3, [sp, #164]	; 0xa4
 80080ba:	dc32      	bgt.n	8008122 <_vfprintf_r+0x101e>
 80080bc:	3408      	adds	r4, #8
 80080be:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80080c0:	2d00      	cmp	r5, #0
 80080c2:	da1b      	bge.n	80080fc <_vfprintf_r+0xff8>
 80080c4:	4623      	mov	r3, r4
 80080c6:	2710      	movs	r7, #16
 80080c8:	4e25      	ldr	r6, [pc, #148]	; (8008160 <_vfprintf_r+0x105c>)
 80080ca:	426d      	negs	r5, r5
 80080cc:	2d10      	cmp	r5, #16
 80080ce:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 80080d2:	f104 0408 	add.w	r4, r4, #8
 80080d6:	f102 0201 	add.w	r2, r2, #1
 80080da:	601e      	str	r6, [r3, #0]
 80080dc:	dc2b      	bgt.n	8008136 <_vfprintf_r+0x1032>
 80080de:	605d      	str	r5, [r3, #4]
 80080e0:	2a07      	cmp	r2, #7
 80080e2:	440d      	add	r5, r1
 80080e4:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 80080e8:	dd08      	ble.n	80080fc <_vfprintf_r+0xff8>
 80080ea:	aa28      	add	r2, sp, #160	; 0xa0
 80080ec:	4649      	mov	r1, r9
 80080ee:	4658      	mov	r0, fp
 80080f0:	f002 fa0f 	bl	800a512 <__sprint_r>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	f040 8234 	bne.w	8008562 <_vfprintf_r+0x145e>
 80080fa:	ac2b      	add	r4, sp, #172	; 0xac
 80080fc:	9b07      	ldr	r3, [sp, #28]
 80080fe:	9a08      	ldr	r2, [sp, #32]
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	9b08      	ldr	r3, [sp, #32]
 8008104:	6063      	str	r3, [r4, #4]
 8008106:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008108:	4413      	add	r3, r2
 800810a:	932a      	str	r3, [sp, #168]	; 0xa8
 800810c:	e5d7      	b.n	8007cbe <_vfprintf_r+0xbba>
 800810e:	aa28      	add	r2, sp, #160	; 0xa0
 8008110:	4649      	mov	r1, r9
 8008112:	4658      	mov	r0, fp
 8008114:	f002 f9fd 	bl	800a512 <__sprint_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	f040 8222 	bne.w	8008562 <_vfprintf_r+0x145e>
 800811e:	ac2b      	add	r4, sp, #172	; 0xac
 8008120:	e7b7      	b.n	8008092 <_vfprintf_r+0xf8e>
 8008122:	aa28      	add	r2, sp, #160	; 0xa0
 8008124:	4649      	mov	r1, r9
 8008126:	4658      	mov	r0, fp
 8008128:	f002 f9f3 	bl	800a512 <__sprint_r>
 800812c:	2800      	cmp	r0, #0
 800812e:	f040 8218 	bne.w	8008562 <_vfprintf_r+0x145e>
 8008132:	ac2b      	add	r4, sp, #172	; 0xac
 8008134:	e7c3      	b.n	80080be <_vfprintf_r+0xfba>
 8008136:	3110      	adds	r1, #16
 8008138:	2a07      	cmp	r2, #7
 800813a:	605f      	str	r7, [r3, #4]
 800813c:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 8008140:	dd08      	ble.n	8008154 <_vfprintf_r+0x1050>
 8008142:	aa28      	add	r2, sp, #160	; 0xa0
 8008144:	4649      	mov	r1, r9
 8008146:	4658      	mov	r0, fp
 8008148:	f002 f9e3 	bl	800a512 <__sprint_r>
 800814c:	2800      	cmp	r0, #0
 800814e:	f040 8208 	bne.w	8008562 <_vfprintf_r+0x145e>
 8008152:	ac2b      	add	r4, sp, #172	; 0xac
 8008154:	3d10      	subs	r5, #16
 8008156:	4623      	mov	r3, r4
 8008158:	e7b8      	b.n	80080cc <_vfprintf_r+0xfc8>
 800815a:	bf00      	nop
 800815c:	0800b1b2 	.word	0x0800b1b2
 8008160:	0800b1c4 	.word	0x0800b1c4
 8008164:	9b08      	ldr	r3, [sp, #32]
 8008166:	42b3      	cmp	r3, r6
 8008168:	bfa8      	it	ge
 800816a:	4633      	movge	r3, r6
 800816c:	2b00      	cmp	r3, #0
 800816e:	461d      	mov	r5, r3
 8008170:	dd0c      	ble.n	800818c <_vfprintf_r+0x1088>
 8008172:	9b07      	ldr	r3, [sp, #28]
 8008174:	e9c4 3500 	strd	r3, r5, [r4]
 8008178:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800817a:	442b      	add	r3, r5
 800817c:	932a      	str	r3, [sp, #168]	; 0xa8
 800817e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008180:	3301      	adds	r3, #1
 8008182:	2b07      	cmp	r3, #7
 8008184:	9329      	str	r3, [sp, #164]	; 0xa4
 8008186:	f300 8087 	bgt.w	8008298 <_vfprintf_r+0x1194>
 800818a:	3408      	adds	r4, #8
 800818c:	2d00      	cmp	r5, #0
 800818e:	bfb4      	ite	lt
 8008190:	4635      	movlt	r5, r6
 8008192:	1b75      	subge	r5, r6, r5
 8008194:	2d00      	cmp	r5, #0
 8008196:	dd19      	ble.n	80081cc <_vfprintf_r+0x10c8>
 8008198:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800819c:	4896      	ldr	r0, [pc, #600]	; (80083f8 <_vfprintf_r+0x12f4>)
 800819e:	2d10      	cmp	r5, #16
 80081a0:	f103 0301 	add.w	r3, r3, #1
 80081a4:	f104 0108 	add.w	r1, r4, #8
 80081a8:	6020      	str	r0, [r4, #0]
 80081aa:	dc7f      	bgt.n	80082ac <_vfprintf_r+0x11a8>
 80081ac:	6065      	str	r5, [r4, #4]
 80081ae:	2b07      	cmp	r3, #7
 80081b0:	4415      	add	r5, r2
 80081b2:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80081b6:	f340 808c 	ble.w	80082d2 <_vfprintf_r+0x11ce>
 80081ba:	aa28      	add	r2, sp, #160	; 0xa0
 80081bc:	4649      	mov	r1, r9
 80081be:	4658      	mov	r0, fp
 80081c0:	f002 f9a7 	bl	800a512 <__sprint_r>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f040 81cc 	bne.w	8008562 <_vfprintf_r+0x145e>
 80081ca:	ac2b      	add	r4, sp, #172	; 0xac
 80081cc:	9b07      	ldr	r3, [sp, #28]
 80081ce:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80081d2:	441e      	add	r6, r3
 80081d4:	d00a      	beq.n	80081ec <_vfprintf_r+0x10e8>
 80081d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d17c      	bne.n	80082d6 <_vfprintf_r+0x11d2>
 80081dc:	2f00      	cmp	r7, #0
 80081de:	d17c      	bne.n	80082da <_vfprintf_r+0x11d6>
 80081e0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	429e      	cmp	r6, r3
 80081e8:	bf28      	it	cs
 80081ea:	461e      	movcs	r6, r3
 80081ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081ee:	9a08      	ldr	r2, [sp, #32]
 80081f0:	4293      	cmp	r3, r2
 80081f2:	db02      	blt.n	80081fa <_vfprintf_r+0x10f6>
 80081f4:	f01a 0f01 	tst.w	sl, #1
 80081f8:	d00e      	beq.n	8008218 <_vfprintf_r+0x1114>
 80081fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008202:	6063      	str	r3, [r4, #4]
 8008204:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008206:	4413      	add	r3, r2
 8008208:	932a      	str	r3, [sp, #168]	; 0xa8
 800820a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800820c:	3301      	adds	r3, #1
 800820e:	2b07      	cmp	r3, #7
 8008210:	9329      	str	r3, [sp, #164]	; 0xa4
 8008212:	f300 80dd 	bgt.w	80083d0 <_vfprintf_r+0x12cc>
 8008216:	3408      	adds	r4, #8
 8008218:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800821a:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800821e:	4413      	add	r3, r2
 8008220:	1b55      	subs	r5, r2, r5
 8008222:	1b9b      	subs	r3, r3, r6
 8008224:	429d      	cmp	r5, r3
 8008226:	bfa8      	it	ge
 8008228:	461d      	movge	r5, r3
 800822a:	2d00      	cmp	r5, #0
 800822c:	dd0b      	ble.n	8008246 <_vfprintf_r+0x1142>
 800822e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008230:	e9c4 6500 	strd	r6, r5, [r4]
 8008234:	442b      	add	r3, r5
 8008236:	932a      	str	r3, [sp, #168]	; 0xa8
 8008238:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800823a:	3301      	adds	r3, #1
 800823c:	2b07      	cmp	r3, #7
 800823e:	9329      	str	r3, [sp, #164]	; 0xa4
 8008240:	f300 80d0 	bgt.w	80083e4 <_vfprintf_r+0x12e0>
 8008244:	3408      	adds	r4, #8
 8008246:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008248:	9a08      	ldr	r2, [sp, #32]
 800824a:	2d00      	cmp	r5, #0
 800824c:	eba2 0303 	sub.w	r3, r2, r3
 8008250:	bfb4      	ite	lt
 8008252:	461d      	movlt	r5, r3
 8008254:	1b5d      	subge	r5, r3, r5
 8008256:	2d00      	cmp	r5, #0
 8008258:	f77f ad38 	ble.w	8007ccc <_vfprintf_r+0xbc8>
 800825c:	2710      	movs	r7, #16
 800825e:	4e66      	ldr	r6, [pc, #408]	; (80083f8 <_vfprintf_r+0x12f4>)
 8008260:	2d10      	cmp	r5, #16
 8008262:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8008266:	f104 0108 	add.w	r1, r4, #8
 800826a:	f103 0301 	add.w	r3, r3, #1
 800826e:	6026      	str	r6, [r4, #0]
 8008270:	f77f aec8 	ble.w	8008004 <_vfprintf_r+0xf00>
 8008274:	3210      	adds	r2, #16
 8008276:	2b07      	cmp	r3, #7
 8008278:	6067      	str	r7, [r4, #4]
 800827a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800827e:	dd08      	ble.n	8008292 <_vfprintf_r+0x118e>
 8008280:	aa28      	add	r2, sp, #160	; 0xa0
 8008282:	4649      	mov	r1, r9
 8008284:	4658      	mov	r0, fp
 8008286:	f002 f944 	bl	800a512 <__sprint_r>
 800828a:	2800      	cmp	r0, #0
 800828c:	f040 8169 	bne.w	8008562 <_vfprintf_r+0x145e>
 8008290:	a92b      	add	r1, sp, #172	; 0xac
 8008292:	3d10      	subs	r5, #16
 8008294:	460c      	mov	r4, r1
 8008296:	e7e3      	b.n	8008260 <_vfprintf_r+0x115c>
 8008298:	aa28      	add	r2, sp, #160	; 0xa0
 800829a:	4649      	mov	r1, r9
 800829c:	4658      	mov	r0, fp
 800829e:	f002 f938 	bl	800a512 <__sprint_r>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	f040 815d 	bne.w	8008562 <_vfprintf_r+0x145e>
 80082a8:	ac2b      	add	r4, sp, #172	; 0xac
 80082aa:	e76f      	b.n	800818c <_vfprintf_r+0x1088>
 80082ac:	2010      	movs	r0, #16
 80082ae:	2b07      	cmp	r3, #7
 80082b0:	4402      	add	r2, r0
 80082b2:	6060      	str	r0, [r4, #4]
 80082b4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80082b8:	dd08      	ble.n	80082cc <_vfprintf_r+0x11c8>
 80082ba:	aa28      	add	r2, sp, #160	; 0xa0
 80082bc:	4649      	mov	r1, r9
 80082be:	4658      	mov	r0, fp
 80082c0:	f002 f927 	bl	800a512 <__sprint_r>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	f040 814c 	bne.w	8008562 <_vfprintf_r+0x145e>
 80082ca:	a92b      	add	r1, sp, #172	; 0xac
 80082cc:	3d10      	subs	r5, #16
 80082ce:	460c      	mov	r4, r1
 80082d0:	e762      	b.n	8008198 <_vfprintf_r+0x1094>
 80082d2:	460c      	mov	r4, r1
 80082d4:	e77a      	b.n	80081cc <_vfprintf_r+0x10c8>
 80082d6:	2f00      	cmp	r7, #0
 80082d8:	d04a      	beq.n	8008370 <_vfprintf_r+0x126c>
 80082da:	3f01      	subs	r7, #1
 80082dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082e4:	6063      	str	r3, [r4, #4]
 80082e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80082e8:	4413      	add	r3, r2
 80082ea:	932a      	str	r3, [sp, #168]	; 0xa8
 80082ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80082ee:	3301      	adds	r3, #1
 80082f0:	2b07      	cmp	r3, #7
 80082f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80082f4:	dc43      	bgt.n	800837e <_vfprintf_r+0x127a>
 80082f6:	3408      	adds	r4, #8
 80082f8:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80082fc:	4413      	add	r3, r2
 80082fe:	1b9a      	subs	r2, r3, r6
 8008300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	4293      	cmp	r3, r2
 8008306:	bfa8      	it	ge
 8008308:	4613      	movge	r3, r2
 800830a:	2b00      	cmp	r3, #0
 800830c:	461d      	mov	r5, r3
 800830e:	dd0a      	ble.n	8008326 <_vfprintf_r+0x1222>
 8008310:	e9c4 6300 	strd	r6, r3, [r4]
 8008314:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008316:	442b      	add	r3, r5
 8008318:	932a      	str	r3, [sp, #168]	; 0xa8
 800831a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800831c:	3301      	adds	r3, #1
 800831e:	2b07      	cmp	r3, #7
 8008320:	9329      	str	r3, [sp, #164]	; 0xa4
 8008322:	dc36      	bgt.n	8008392 <_vfprintf_r+0x128e>
 8008324:	3408      	adds	r4, #8
 8008326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008328:	2d00      	cmp	r5, #0
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	bfb4      	ite	lt
 800832e:	461d      	movlt	r5, r3
 8008330:	1b5d      	subge	r5, r3, r5
 8008332:	2d00      	cmp	r5, #0
 8008334:	dd18      	ble.n	8008368 <_vfprintf_r+0x1264>
 8008336:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 800833a:	482f      	ldr	r0, [pc, #188]	; (80083f8 <_vfprintf_r+0x12f4>)
 800833c:	2d10      	cmp	r5, #16
 800833e:	f102 0201 	add.w	r2, r2, #1
 8008342:	f104 0108 	add.w	r1, r4, #8
 8008346:	6020      	str	r0, [r4, #0]
 8008348:	dc2d      	bgt.n	80083a6 <_vfprintf_r+0x12a2>
 800834a:	442b      	add	r3, r5
 800834c:	2a07      	cmp	r2, #7
 800834e:	6065      	str	r5, [r4, #4]
 8008350:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008354:	dd3a      	ble.n	80083cc <_vfprintf_r+0x12c8>
 8008356:	aa28      	add	r2, sp, #160	; 0xa0
 8008358:	4649      	mov	r1, r9
 800835a:	4658      	mov	r0, fp
 800835c:	f002 f8d9 	bl	800a512 <__sprint_r>
 8008360:	2800      	cmp	r0, #0
 8008362:	f040 80fe 	bne.w	8008562 <_vfprintf_r+0x145e>
 8008366:	ac2b      	add	r4, sp, #172	; 0xac
 8008368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	441e      	add	r6, r3
 800836e:	e732      	b.n	80081d6 <_vfprintf_r+0x10d2>
 8008370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008372:	3b01      	subs	r3, #1
 8008374:	930c      	str	r3, [sp, #48]	; 0x30
 8008376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008378:	3b01      	subs	r3, #1
 800837a:	930b      	str	r3, [sp, #44]	; 0x2c
 800837c:	e7ae      	b.n	80082dc <_vfprintf_r+0x11d8>
 800837e:	aa28      	add	r2, sp, #160	; 0xa0
 8008380:	4649      	mov	r1, r9
 8008382:	4658      	mov	r0, fp
 8008384:	f002 f8c5 	bl	800a512 <__sprint_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	f040 80ea 	bne.w	8008562 <_vfprintf_r+0x145e>
 800838e:	ac2b      	add	r4, sp, #172	; 0xac
 8008390:	e7b2      	b.n	80082f8 <_vfprintf_r+0x11f4>
 8008392:	aa28      	add	r2, sp, #160	; 0xa0
 8008394:	4649      	mov	r1, r9
 8008396:	4658      	mov	r0, fp
 8008398:	f002 f8bb 	bl	800a512 <__sprint_r>
 800839c:	2800      	cmp	r0, #0
 800839e:	f040 80e0 	bne.w	8008562 <_vfprintf_r+0x145e>
 80083a2:	ac2b      	add	r4, sp, #172	; 0xac
 80083a4:	e7bf      	b.n	8008326 <_vfprintf_r+0x1222>
 80083a6:	2010      	movs	r0, #16
 80083a8:	2a07      	cmp	r2, #7
 80083aa:	4403      	add	r3, r0
 80083ac:	6060      	str	r0, [r4, #4]
 80083ae:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80083b2:	dd08      	ble.n	80083c6 <_vfprintf_r+0x12c2>
 80083b4:	aa28      	add	r2, sp, #160	; 0xa0
 80083b6:	4649      	mov	r1, r9
 80083b8:	4658      	mov	r0, fp
 80083ba:	f002 f8aa 	bl	800a512 <__sprint_r>
 80083be:	2800      	cmp	r0, #0
 80083c0:	f040 80cf 	bne.w	8008562 <_vfprintf_r+0x145e>
 80083c4:	a92b      	add	r1, sp, #172	; 0xac
 80083c6:	3d10      	subs	r5, #16
 80083c8:	460c      	mov	r4, r1
 80083ca:	e7b4      	b.n	8008336 <_vfprintf_r+0x1232>
 80083cc:	460c      	mov	r4, r1
 80083ce:	e7cb      	b.n	8008368 <_vfprintf_r+0x1264>
 80083d0:	aa28      	add	r2, sp, #160	; 0xa0
 80083d2:	4649      	mov	r1, r9
 80083d4:	4658      	mov	r0, fp
 80083d6:	f002 f89c 	bl	800a512 <__sprint_r>
 80083da:	2800      	cmp	r0, #0
 80083dc:	f040 80c1 	bne.w	8008562 <_vfprintf_r+0x145e>
 80083e0:	ac2b      	add	r4, sp, #172	; 0xac
 80083e2:	e719      	b.n	8008218 <_vfprintf_r+0x1114>
 80083e4:	aa28      	add	r2, sp, #160	; 0xa0
 80083e6:	4649      	mov	r1, r9
 80083e8:	4658      	mov	r0, fp
 80083ea:	f002 f892 	bl	800a512 <__sprint_r>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	f040 80b7 	bne.w	8008562 <_vfprintf_r+0x145e>
 80083f4:	ac2b      	add	r4, sp, #172	; 0xac
 80083f6:	e726      	b.n	8008246 <_vfprintf_r+0x1142>
 80083f8:	0800b1c4 	.word	0x0800b1c4
 80083fc:	9a08      	ldr	r2, [sp, #32]
 80083fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008400:	2a01      	cmp	r2, #1
 8008402:	9a07      	ldr	r2, [sp, #28]
 8008404:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008406:	6022      	str	r2, [r4, #0]
 8008408:	f04f 0201 	mov.w	r2, #1
 800840c:	f105 0501 	add.w	r5, r5, #1
 8008410:	f103 0301 	add.w	r3, r3, #1
 8008414:	f104 0608 	add.w	r6, r4, #8
 8008418:	6062      	str	r2, [r4, #4]
 800841a:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800841e:	dc02      	bgt.n	8008426 <_vfprintf_r+0x1322>
 8008420:	f01a 0f01 	tst.w	sl, #1
 8008424:	d077      	beq.n	8008516 <_vfprintf_r+0x1412>
 8008426:	2b07      	cmp	r3, #7
 8008428:	dd08      	ble.n	800843c <_vfprintf_r+0x1338>
 800842a:	aa28      	add	r2, sp, #160	; 0xa0
 800842c:	4649      	mov	r1, r9
 800842e:	4658      	mov	r0, fp
 8008430:	f002 f86f 	bl	800a512 <__sprint_r>
 8008434:	2800      	cmp	r0, #0
 8008436:	f040 8094 	bne.w	8008562 <_vfprintf_r+0x145e>
 800843a:	ae2b      	add	r6, sp, #172	; 0xac
 800843c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800843e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008440:	6033      	str	r3, [r6, #0]
 8008442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008444:	6073      	str	r3, [r6, #4]
 8008446:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008448:	4413      	add	r3, r2
 800844a:	932a      	str	r3, [sp, #168]	; 0xa8
 800844c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800844e:	3301      	adds	r3, #1
 8008450:	2b07      	cmp	r3, #7
 8008452:	9329      	str	r3, [sp, #164]	; 0xa4
 8008454:	dc31      	bgt.n	80084ba <_vfprintf_r+0x13b6>
 8008456:	3608      	adds	r6, #8
 8008458:	9b08      	ldr	r3, [sp, #32]
 800845a:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800845e:	1e5c      	subs	r4, r3, #1
 8008460:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008464:	f7f8 faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8008468:	2800      	cmp	r0, #0
 800846a:	d12f      	bne.n	80084cc <_vfprintf_r+0x13c8>
 800846c:	9b07      	ldr	r3, [sp, #28]
 800846e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008470:	3301      	adds	r3, #1
 8008472:	e9c6 3400 	strd	r3, r4, [r6]
 8008476:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008478:	9908      	ldr	r1, [sp, #32]
 800847a:	3201      	adds	r2, #1
 800847c:	3b01      	subs	r3, #1
 800847e:	440b      	add	r3, r1
 8008480:	2a07      	cmp	r2, #7
 8008482:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008486:	dd49      	ble.n	800851c <_vfprintf_r+0x1418>
 8008488:	aa28      	add	r2, sp, #160	; 0xa0
 800848a:	4649      	mov	r1, r9
 800848c:	4658      	mov	r0, fp
 800848e:	f002 f840 	bl	800a512 <__sprint_r>
 8008492:	2800      	cmp	r0, #0
 8008494:	d165      	bne.n	8008562 <_vfprintf_r+0x145e>
 8008496:	ae2b      	add	r6, sp, #172	; 0xac
 8008498:	ab24      	add	r3, sp, #144	; 0x90
 800849a:	6033      	str	r3, [r6, #0]
 800849c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800849e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80084a0:	6073      	str	r3, [r6, #4]
 80084a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80084a4:	4413      	add	r3, r2
 80084a6:	932a      	str	r3, [sp, #168]	; 0xa8
 80084a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80084aa:	3301      	adds	r3, #1
 80084ac:	2b07      	cmp	r3, #7
 80084ae:	9329      	str	r3, [sp, #164]	; 0xa4
 80084b0:	f73f adaf 	bgt.w	8008012 <_vfprintf_r+0xf0e>
 80084b4:	f106 0408 	add.w	r4, r6, #8
 80084b8:	e408      	b.n	8007ccc <_vfprintf_r+0xbc8>
 80084ba:	aa28      	add	r2, sp, #160	; 0xa0
 80084bc:	4649      	mov	r1, r9
 80084be:	4658      	mov	r0, fp
 80084c0:	f002 f827 	bl	800a512 <__sprint_r>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d14c      	bne.n	8008562 <_vfprintf_r+0x145e>
 80084c8:	ae2b      	add	r6, sp, #172	; 0xac
 80084ca:	e7c5      	b.n	8008458 <_vfprintf_r+0x1354>
 80084cc:	2c00      	cmp	r4, #0
 80084ce:	dde3      	ble.n	8008498 <_vfprintf_r+0x1394>
 80084d0:	2710      	movs	r7, #16
 80084d2:	4d3c      	ldr	r5, [pc, #240]	; (80085c4 <_vfprintf_r+0x14c0>)
 80084d4:	2c10      	cmp	r4, #16
 80084d6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80084da:	f106 0108 	add.w	r1, r6, #8
 80084de:	f103 0301 	add.w	r3, r3, #1
 80084e2:	6035      	str	r5, [r6, #0]
 80084e4:	dc07      	bgt.n	80084f6 <_vfprintf_r+0x13f2>
 80084e6:	6074      	str	r4, [r6, #4]
 80084e8:	2b07      	cmp	r3, #7
 80084ea:	4414      	add	r4, r2
 80084ec:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 80084f0:	dcca      	bgt.n	8008488 <_vfprintf_r+0x1384>
 80084f2:	460e      	mov	r6, r1
 80084f4:	e7d0      	b.n	8008498 <_vfprintf_r+0x1394>
 80084f6:	3210      	adds	r2, #16
 80084f8:	2b07      	cmp	r3, #7
 80084fa:	6077      	str	r7, [r6, #4]
 80084fc:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8008500:	dd06      	ble.n	8008510 <_vfprintf_r+0x140c>
 8008502:	aa28      	add	r2, sp, #160	; 0xa0
 8008504:	4649      	mov	r1, r9
 8008506:	4658      	mov	r0, fp
 8008508:	f002 f803 	bl	800a512 <__sprint_r>
 800850c:	bb48      	cbnz	r0, 8008562 <_vfprintf_r+0x145e>
 800850e:	a92b      	add	r1, sp, #172	; 0xac
 8008510:	3c10      	subs	r4, #16
 8008512:	460e      	mov	r6, r1
 8008514:	e7de      	b.n	80084d4 <_vfprintf_r+0x13d0>
 8008516:	2b07      	cmp	r3, #7
 8008518:	ddbe      	ble.n	8008498 <_vfprintf_r+0x1394>
 800851a:	e7b5      	b.n	8008488 <_vfprintf_r+0x1384>
 800851c:	3608      	adds	r6, #8
 800851e:	e7bb      	b.n	8008498 <_vfprintf_r+0x1394>
 8008520:	460c      	mov	r4, r1
 8008522:	f7ff bbd3 	b.w	8007ccc <_vfprintf_r+0xbc8>
 8008526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008528:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800852a:	1a9d      	subs	r5, r3, r2
 800852c:	2d00      	cmp	r5, #0
 800852e:	f77f abd1 	ble.w	8007cd4 <_vfprintf_r+0xbd0>
 8008532:	2710      	movs	r7, #16
 8008534:	4e24      	ldr	r6, [pc, #144]	; (80085c8 <_vfprintf_r+0x14c4>)
 8008536:	2d10      	cmp	r5, #16
 8008538:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800853c:	6026      	str	r6, [r4, #0]
 800853e:	f103 0301 	add.w	r3, r3, #1
 8008542:	dc18      	bgt.n	8008576 <_vfprintf_r+0x1472>
 8008544:	6065      	str	r5, [r4, #4]
 8008546:	2b07      	cmp	r3, #7
 8008548:	4415      	add	r5, r2
 800854a:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800854e:	f77f abc1 	ble.w	8007cd4 <_vfprintf_r+0xbd0>
 8008552:	aa28      	add	r2, sp, #160	; 0xa0
 8008554:	4649      	mov	r1, r9
 8008556:	4658      	mov	r0, fp
 8008558:	f001 ffdb 	bl	800a512 <__sprint_r>
 800855c:	2800      	cmp	r0, #0
 800855e:	f43f abb9 	beq.w	8007cd4 <_vfprintf_r+0xbd0>
 8008562:	f1b8 0f00 	cmp.w	r8, #0
 8008566:	f43f a898 	beq.w	800769a <_vfprintf_r+0x596>
 800856a:	4641      	mov	r1, r8
 800856c:	4658      	mov	r0, fp
 800856e:	f001 f88f 	bl	8009690 <_free_r>
 8008572:	f7ff b892 	b.w	800769a <_vfprintf_r+0x596>
 8008576:	3210      	adds	r2, #16
 8008578:	2b07      	cmp	r3, #7
 800857a:	6067      	str	r7, [r4, #4]
 800857c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8008580:	dc02      	bgt.n	8008588 <_vfprintf_r+0x1484>
 8008582:	3408      	adds	r4, #8
 8008584:	3d10      	subs	r5, #16
 8008586:	e7d6      	b.n	8008536 <_vfprintf_r+0x1432>
 8008588:	aa28      	add	r2, sp, #160	; 0xa0
 800858a:	4649      	mov	r1, r9
 800858c:	4658      	mov	r0, fp
 800858e:	f001 ffc0 	bl	800a512 <__sprint_r>
 8008592:	2800      	cmp	r0, #0
 8008594:	d1e5      	bne.n	8008562 <_vfprintf_r+0x145e>
 8008596:	ac2b      	add	r4, sp, #172	; 0xac
 8008598:	e7f4      	b.n	8008584 <_vfprintf_r+0x1480>
 800859a:	4641      	mov	r1, r8
 800859c:	4658      	mov	r0, fp
 800859e:	f001 f877 	bl	8009690 <_free_r>
 80085a2:	f7ff bbaf 	b.w	8007d04 <_vfprintf_r+0xc00>
 80085a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80085a8:	b91b      	cbnz	r3, 80085b2 <_vfprintf_r+0x14ae>
 80085aa:	2300      	movs	r3, #0
 80085ac:	9329      	str	r3, [sp, #164]	; 0xa4
 80085ae:	f7ff b874 	b.w	800769a <_vfprintf_r+0x596>
 80085b2:	aa28      	add	r2, sp, #160	; 0xa0
 80085b4:	4649      	mov	r1, r9
 80085b6:	4658      	mov	r0, fp
 80085b8:	f001 ffab 	bl	800a512 <__sprint_r>
 80085bc:	2800      	cmp	r0, #0
 80085be:	f47f a86c 	bne.w	800769a <_vfprintf_r+0x596>
 80085c2:	e7f2      	b.n	80085aa <_vfprintf_r+0x14a6>
 80085c4:	0800b1c4 	.word	0x0800b1c4
 80085c8:	0800b1b4 	.word	0x0800b1b4

080085cc <__sbprintf>:
 80085cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ce:	460c      	mov	r4, r1
 80085d0:	461f      	mov	r7, r3
 80085d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085d4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80085d8:	9319      	str	r3, [sp, #100]	; 0x64
 80085da:	89e3      	ldrh	r3, [r4, #14]
 80085dc:	8989      	ldrh	r1, [r1, #12]
 80085de:	f8ad 300e 	strh.w	r3, [sp, #14]
 80085e2:	69e3      	ldr	r3, [r4, #28]
 80085e4:	f021 0102 	bic.w	r1, r1, #2
 80085e8:	9307      	str	r3, [sp, #28]
 80085ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ec:	f8ad 100c 	strh.w	r1, [sp, #12]
 80085f0:	a91a      	add	r1, sp, #104	; 0x68
 80085f2:	4615      	mov	r5, r2
 80085f4:	4606      	mov	r6, r0
 80085f6:	9309      	str	r3, [sp, #36]	; 0x24
 80085f8:	9100      	str	r1, [sp, #0]
 80085fa:	2300      	movs	r3, #0
 80085fc:	9104      	str	r1, [sp, #16]
 80085fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008602:	a816      	add	r0, sp, #88	; 0x58
 8008604:	9102      	str	r1, [sp, #8]
 8008606:	9105      	str	r1, [sp, #20]
 8008608:	9306      	str	r3, [sp, #24]
 800860a:	f001 f929 	bl	8009860 <__retarget_lock_init_recursive>
 800860e:	462a      	mov	r2, r5
 8008610:	463b      	mov	r3, r7
 8008612:	4669      	mov	r1, sp
 8008614:	4630      	mov	r0, r6
 8008616:	f7fe fd75 	bl	8007104 <_vfprintf_r>
 800861a:	1e05      	subs	r5, r0, #0
 800861c:	db07      	blt.n	800862e <__sbprintf+0x62>
 800861e:	4669      	mov	r1, sp
 8008620:	4630      	mov	r0, r6
 8008622:	f000 ff39 	bl	8009498 <_fflush_r>
 8008626:	2800      	cmp	r0, #0
 8008628:	bf18      	it	ne
 800862a:	f04f 35ff 	movne.w	r5, #4294967295
 800862e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008632:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008634:	065b      	lsls	r3, r3, #25
 8008636:	bf42      	ittt	mi
 8008638:	89a3      	ldrhmi	r3, [r4, #12]
 800863a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800863e:	81a3      	strhmi	r3, [r4, #12]
 8008640:	f001 f90f 	bl	8009862 <__retarget_lock_close_recursive>
 8008644:	4628      	mov	r0, r5
 8008646:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800864a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800864c <__swsetup_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4b2a      	ldr	r3, [pc, #168]	; (80086f8 <__swsetup_r+0xac>)
 8008650:	4605      	mov	r5, r0
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	460c      	mov	r4, r1
 8008656:	b118      	cbz	r0, 8008660 <__swsetup_r+0x14>
 8008658:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800865a:	b90b      	cbnz	r3, 8008660 <__swsetup_r+0x14>
 800865c:	f000 ff88 	bl	8009570 <__sinit>
 8008660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008664:	b29a      	uxth	r2, r3
 8008666:	0711      	lsls	r1, r2, #28
 8008668:	d422      	bmi.n	80086b0 <__swsetup_r+0x64>
 800866a:	06d0      	lsls	r0, r2, #27
 800866c:	d407      	bmi.n	800867e <__swsetup_r+0x32>
 800866e:	2209      	movs	r2, #9
 8008670:	602a      	str	r2, [r5, #0]
 8008672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008676:	81a3      	strh	r3, [r4, #12]
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	e034      	b.n	80086e8 <__swsetup_r+0x9c>
 800867e:	0751      	lsls	r1, r2, #29
 8008680:	d512      	bpl.n	80086a8 <__swsetup_r+0x5c>
 8008682:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008684:	b141      	cbz	r1, 8008698 <__swsetup_r+0x4c>
 8008686:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800868a:	4299      	cmp	r1, r3
 800868c:	d002      	beq.n	8008694 <__swsetup_r+0x48>
 800868e:	4628      	mov	r0, r5
 8008690:	f000 fffe 	bl	8009690 <_free_r>
 8008694:	2300      	movs	r3, #0
 8008696:	6323      	str	r3, [r4, #48]	; 0x30
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800869e:	81a3      	strh	r3, [r4, #12]
 80086a0:	2300      	movs	r3, #0
 80086a2:	6063      	str	r3, [r4, #4]
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	6023      	str	r3, [r4, #0]
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	f043 0308 	orr.w	r3, r3, #8
 80086ae:	81a3      	strh	r3, [r4, #12]
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	b94b      	cbnz	r3, 80086c8 <__swsetup_r+0x7c>
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086be:	d003      	beq.n	80086c8 <__swsetup_r+0x7c>
 80086c0:	4621      	mov	r1, r4
 80086c2:	4628      	mov	r0, r5
 80086c4:	f001 f8fc 	bl	80098c0 <__smakebuf_r>
 80086c8:	89a2      	ldrh	r2, [r4, #12]
 80086ca:	f012 0301 	ands.w	r3, r2, #1
 80086ce:	d00c      	beq.n	80086ea <__swsetup_r+0x9e>
 80086d0:	2300      	movs	r3, #0
 80086d2:	60a3      	str	r3, [r4, #8]
 80086d4:	6963      	ldr	r3, [r4, #20]
 80086d6:	425b      	negs	r3, r3
 80086d8:	61a3      	str	r3, [r4, #24]
 80086da:	6923      	ldr	r3, [r4, #16]
 80086dc:	b953      	cbnz	r3, 80086f4 <__swsetup_r+0xa8>
 80086de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80086e6:	d1c4      	bne.n	8008672 <__swsetup_r+0x26>
 80086e8:	bd38      	pop	{r3, r4, r5, pc}
 80086ea:	0792      	lsls	r2, r2, #30
 80086ec:	bf58      	it	pl
 80086ee:	6963      	ldrpl	r3, [r4, #20]
 80086f0:	60a3      	str	r3, [r4, #8]
 80086f2:	e7f2      	b.n	80086da <__swsetup_r+0x8e>
 80086f4:	2000      	movs	r0, #0
 80086f6:	e7f7      	b.n	80086e8 <__swsetup_r+0x9c>
 80086f8:	2000017c 	.word	0x2000017c

080086fc <register_fini>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <register_fini+0xc>)
 80086fe:	b113      	cbz	r3, 8008706 <register_fini+0xa>
 8008700:	4802      	ldr	r0, [pc, #8]	; (800870c <register_fini+0x10>)
 8008702:	f000 b805 	b.w	8008710 <atexit>
 8008706:	4770      	bx	lr
 8008708:	00000000 	.word	0x00000000
 800870c:	080095c1 	.word	0x080095c1

08008710 <atexit>:
 8008710:	2300      	movs	r3, #0
 8008712:	4601      	mov	r1, r0
 8008714:	461a      	mov	r2, r3
 8008716:	4618      	mov	r0, r3
 8008718:	f001 bf88 	b.w	800a62c <__register_exitproc>

0800871c <quorem>:
 800871c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	6903      	ldr	r3, [r0, #16]
 8008722:	690c      	ldr	r4, [r1, #16]
 8008724:	4680      	mov	r8, r0
 8008726:	42a3      	cmp	r3, r4
 8008728:	f2c0 8084 	blt.w	8008834 <quorem+0x118>
 800872c:	3c01      	subs	r4, #1
 800872e:	f101 0714 	add.w	r7, r1, #20
 8008732:	f100 0614 	add.w	r6, r0, #20
 8008736:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800873a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800873e:	3501      	adds	r5, #1
 8008740:	fbb0 f5f5 	udiv	r5, r0, r5
 8008744:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008748:	eb06 030c 	add.w	r3, r6, ip
 800874c:	eb07 090c 	add.w	r9, r7, ip
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	b39d      	cbz	r5, 80087bc <quorem+0xa0>
 8008754:	f04f 0a00 	mov.w	sl, #0
 8008758:	4638      	mov	r0, r7
 800875a:	46b6      	mov	lr, r6
 800875c:	46d3      	mov	fp, sl
 800875e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008762:	b293      	uxth	r3, r2
 8008764:	fb05 a303 	mla	r3, r5, r3, sl
 8008768:	0c12      	lsrs	r2, r2, #16
 800876a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800876e:	fb05 a202 	mla	r2, r5, r2, sl
 8008772:	b29b      	uxth	r3, r3
 8008774:	ebab 0303 	sub.w	r3, fp, r3
 8008778:	f8de b000 	ldr.w	fp, [lr]
 800877c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008780:	fa1f fb8b 	uxth.w	fp, fp
 8008784:	445b      	add	r3, fp
 8008786:	fa1f fb82 	uxth.w	fp, r2
 800878a:	f8de 2000 	ldr.w	r2, [lr]
 800878e:	4581      	cmp	r9, r0
 8008790:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008798:	b29b      	uxth	r3, r3
 800879a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800879e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80087a2:	f84e 3b04 	str.w	r3, [lr], #4
 80087a6:	d2da      	bcs.n	800875e <quorem+0x42>
 80087a8:	f856 300c 	ldr.w	r3, [r6, ip]
 80087ac:	b933      	cbnz	r3, 80087bc <quorem+0xa0>
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	3b04      	subs	r3, #4
 80087b2:	429e      	cmp	r6, r3
 80087b4:	461a      	mov	r2, r3
 80087b6:	d331      	bcc.n	800881c <quorem+0x100>
 80087b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80087bc:	4640      	mov	r0, r8
 80087be:	f001 fd05 	bl	800a1cc <__mcmp>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	db26      	blt.n	8008814 <quorem+0xf8>
 80087c6:	4630      	mov	r0, r6
 80087c8:	f04f 0c00 	mov.w	ip, #0
 80087cc:	3501      	adds	r5, #1
 80087ce:	f857 1b04 	ldr.w	r1, [r7], #4
 80087d2:	f8d0 e000 	ldr.w	lr, [r0]
 80087d6:	b28b      	uxth	r3, r1
 80087d8:	ebac 0303 	sub.w	r3, ip, r3
 80087dc:	fa1f f28e 	uxth.w	r2, lr
 80087e0:	4413      	add	r3, r2
 80087e2:	0c0a      	lsrs	r2, r1, #16
 80087e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087f2:	45b9      	cmp	r9, r7
 80087f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087f8:	f840 3b04 	str.w	r3, [r0], #4
 80087fc:	d2e7      	bcs.n	80087ce <quorem+0xb2>
 80087fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008802:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008806:	b92a      	cbnz	r2, 8008814 <quorem+0xf8>
 8008808:	3b04      	subs	r3, #4
 800880a:	429e      	cmp	r6, r3
 800880c:	461a      	mov	r2, r3
 800880e:	d30b      	bcc.n	8008828 <quorem+0x10c>
 8008810:	f8c8 4010 	str.w	r4, [r8, #16]
 8008814:	4628      	mov	r0, r5
 8008816:	b003      	add	sp, #12
 8008818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881c:	6812      	ldr	r2, [r2, #0]
 800881e:	3b04      	subs	r3, #4
 8008820:	2a00      	cmp	r2, #0
 8008822:	d1c9      	bne.n	80087b8 <quorem+0x9c>
 8008824:	3c01      	subs	r4, #1
 8008826:	e7c4      	b.n	80087b2 <quorem+0x96>
 8008828:	6812      	ldr	r2, [r2, #0]
 800882a:	3b04      	subs	r3, #4
 800882c:	2a00      	cmp	r2, #0
 800882e:	d1ef      	bne.n	8008810 <quorem+0xf4>
 8008830:	3c01      	subs	r4, #1
 8008832:	e7ea      	b.n	800880a <quorem+0xee>
 8008834:	2000      	movs	r0, #0
 8008836:	e7ee      	b.n	8008816 <quorem+0xfa>

08008838 <_dtoa_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	4616      	mov	r6, r2
 800883e:	461f      	mov	r7, r3
 8008840:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008842:	b095      	sub	sp, #84	; 0x54
 8008844:	4604      	mov	r4, r0
 8008846:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008848:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800884c:	b141      	cbz	r1, 8008860 <_dtoa_r+0x28>
 800884e:	2301      	movs	r3, #1
 8008850:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008852:	4093      	lsls	r3, r2
 8008854:	608b      	str	r3, [r1, #8]
 8008856:	604a      	str	r2, [r1, #4]
 8008858:	f001 faf3 	bl	8009e42 <_Bfree>
 800885c:	2300      	movs	r3, #0
 800885e:	6423      	str	r3, [r4, #64]	; 0x40
 8008860:	1e3b      	subs	r3, r7, #0
 8008862:	bfaf      	iteee	ge
 8008864:	2300      	movge	r3, #0
 8008866:	2201      	movlt	r2, #1
 8008868:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800886c:	9303      	strlt	r3, [sp, #12]
 800886e:	bfa8      	it	ge
 8008870:	602b      	strge	r3, [r5, #0]
 8008872:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008876:	4bb0      	ldr	r3, [pc, #704]	; (8008b38 <_dtoa_r+0x300>)
 8008878:	bfb8      	it	lt
 800887a:	602a      	strlt	r2, [r5, #0]
 800887c:	ea33 0308 	bics.w	r3, r3, r8
 8008880:	d116      	bne.n	80088b0 <_dtoa_r+0x78>
 8008882:	f242 730f 	movw	r3, #9999	; 0x270f
 8008886:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	9b02      	ldr	r3, [sp, #8]
 800888c:	b923      	cbnz	r3, 8008898 <_dtoa_r+0x60>
 800888e:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008892:	2800      	cmp	r0, #0
 8008894:	f000 853f 	beq.w	8009316 <_dtoa_r+0xade>
 8008898:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800889a:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8008b4c <_dtoa_r+0x314>
 800889e:	b11b      	cbz	r3, 80088a8 <_dtoa_r+0x70>
 80088a0:	f10b 0303 	add.w	r3, fp, #3
 80088a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	4658      	mov	r0, fp
 80088aa:	b015      	add	sp, #84	; 0x54
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	2300      	movs	r3, #0
 80088b8:	4630      	mov	r0, r6
 80088ba:	4639      	mov	r1, r7
 80088bc:	f7f8 f874 	bl	80009a8 <__aeabi_dcmpeq>
 80088c0:	4682      	mov	sl, r0
 80088c2:	b160      	cbz	r0, 80088de <_dtoa_r+0xa6>
 80088c4:	2301      	movs	r3, #1
 80088c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 851e 	beq.w	800930e <_dtoa_r+0xad6>
 80088d2:	4b9a      	ldr	r3, [pc, #616]	; (8008b3c <_dtoa_r+0x304>)
 80088d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80088d6:	f103 3bff 	add.w	fp, r3, #4294967295
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	e7e4      	b.n	80088a8 <_dtoa_r+0x70>
 80088de:	ab12      	add	r3, sp, #72	; 0x48
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	ab13      	add	r3, sp, #76	; 0x4c
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	4632      	mov	r2, r6
 80088e8:	463b      	mov	r3, r7
 80088ea:	4620      	mov	r0, r4
 80088ec:	f001 fce6 	bl	800a2bc <__d2b>
 80088f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80088f4:	9006      	str	r0, [sp, #24]
 80088f6:	2d00      	cmp	r5, #0
 80088f8:	d07d      	beq.n	80089f6 <_dtoa_r+0x1be>
 80088fa:	46b0      	mov	r8, r6
 80088fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008900:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008904:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008908:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800890c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008910:	2200      	movs	r2, #0
 8008912:	4b8b      	ldr	r3, [pc, #556]	; (8008b40 <_dtoa_r+0x308>)
 8008914:	4640      	mov	r0, r8
 8008916:	4649      	mov	r1, r9
 8008918:	f7f7 fc26 	bl	8000168 <__aeabi_dsub>
 800891c:	a380      	add	r3, pc, #512	; (adr r3, 8008b20 <_dtoa_r+0x2e8>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fdd9 	bl	80004d8 <__aeabi_dmul>
 8008926:	a380      	add	r3, pc, #512	; (adr r3, 8008b28 <_dtoa_r+0x2f0>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fc1e 	bl	800016c <__adddf3>
 8008930:	4606      	mov	r6, r0
 8008932:	4628      	mov	r0, r5
 8008934:	460f      	mov	r7, r1
 8008936:	f7f7 fd65 	bl	8000404 <__aeabi_i2d>
 800893a:	a37d      	add	r3, pc, #500	; (adr r3, 8008b30 <_dtoa_r+0x2f8>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fdca 	bl	80004d8 <__aeabi_dmul>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f7 fc0e 	bl	800016c <__adddf3>
 8008950:	4606      	mov	r6, r0
 8008952:	460f      	mov	r7, r1
 8008954:	f7f8 f870 	bl	8000a38 <__aeabi_d2iz>
 8008958:	2200      	movs	r2, #0
 800895a:	4682      	mov	sl, r0
 800895c:	2300      	movs	r3, #0
 800895e:	4630      	mov	r0, r6
 8008960:	4639      	mov	r1, r7
 8008962:	f7f8 f82b 	bl	80009bc <__aeabi_dcmplt>
 8008966:	b148      	cbz	r0, 800897c <_dtoa_r+0x144>
 8008968:	4650      	mov	r0, sl
 800896a:	f7f7 fd4b 	bl	8000404 <__aeabi_i2d>
 800896e:	4632      	mov	r2, r6
 8008970:	463b      	mov	r3, r7
 8008972:	f7f8 f819 	bl	80009a8 <__aeabi_dcmpeq>
 8008976:	b908      	cbnz	r0, 800897c <_dtoa_r+0x144>
 8008978:	f10a 3aff 	add.w	sl, sl, #4294967295
 800897c:	f1ba 0f16 	cmp.w	sl, #22
 8008980:	d85a      	bhi.n	8008a38 <_dtoa_r+0x200>
 8008982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008986:	496f      	ldr	r1, [pc, #444]	; (8008b44 <_dtoa_r+0x30c>)
 8008988:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800898c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008990:	f7f8 f832 	bl	80009f8 <__aeabi_dcmpgt>
 8008994:	2800      	cmp	r0, #0
 8008996:	d051      	beq.n	8008a3c <_dtoa_r+0x204>
 8008998:	2300      	movs	r3, #0
 800899a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800899e:	930d      	str	r3, [sp, #52]	; 0x34
 80089a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089a2:	1b5d      	subs	r5, r3, r5
 80089a4:	1e6b      	subs	r3, r5, #1
 80089a6:	9307      	str	r3, [sp, #28]
 80089a8:	bf43      	ittte	mi
 80089aa:	2300      	movmi	r3, #0
 80089ac:	f1c5 0901 	rsbmi	r9, r5, #1
 80089b0:	9307      	strmi	r3, [sp, #28]
 80089b2:	f04f 0900 	movpl.w	r9, #0
 80089b6:	f1ba 0f00 	cmp.w	sl, #0
 80089ba:	db41      	blt.n	8008a40 <_dtoa_r+0x208>
 80089bc:	9b07      	ldr	r3, [sp, #28]
 80089be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80089c2:	4453      	add	r3, sl
 80089c4:	9307      	str	r3, [sp, #28]
 80089c6:	2300      	movs	r3, #0
 80089c8:	9308      	str	r3, [sp, #32]
 80089ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80089cc:	2b09      	cmp	r3, #9
 80089ce:	f200 808c 	bhi.w	8008aea <_dtoa_r+0x2b2>
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	bfc4      	itt	gt
 80089d6:	3b04      	subgt	r3, #4
 80089d8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80089da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80089dc:	bfc8      	it	gt
 80089de:	2500      	movgt	r5, #0
 80089e0:	f1a3 0302 	sub.w	r3, r3, #2
 80089e4:	bfd8      	it	le
 80089e6:	2501      	movle	r5, #1
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	f200 808a 	bhi.w	8008b02 <_dtoa_r+0x2ca>
 80089ee:	e8df f003 	tbb	[pc, r3]
 80089f2:	7a78      	.short	0x7a78
 80089f4:	6c2f      	.short	0x6c2f
 80089f6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80089fa:	441d      	add	r5, r3
 80089fc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008a00:	2820      	cmp	r0, #32
 8008a02:	dd13      	ble.n	8008a2c <_dtoa_r+0x1f4>
 8008a04:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008a08:	9b02      	ldr	r3, [sp, #8]
 8008a0a:	fa08 f800 	lsl.w	r8, r8, r0
 8008a0e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008a12:	fa23 f000 	lsr.w	r0, r3, r0
 8008a16:	ea48 0000 	orr.w	r0, r8, r0
 8008a1a:	f7f7 fce3 	bl	80003e4 <__aeabi_ui2d>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4680      	mov	r8, r0
 8008a22:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008a26:	3d01      	subs	r5, #1
 8008a28:	9310      	str	r3, [sp, #64]	; 0x40
 8008a2a:	e771      	b.n	8008910 <_dtoa_r+0xd8>
 8008a2c:	9b02      	ldr	r3, [sp, #8]
 8008a2e:	f1c0 0020 	rsb	r0, r0, #32
 8008a32:	fa03 f000 	lsl.w	r0, r3, r0
 8008a36:	e7f0      	b.n	8008a1a <_dtoa_r+0x1e2>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e7b0      	b.n	800899e <_dtoa_r+0x166>
 8008a3c:	900d      	str	r0, [sp, #52]	; 0x34
 8008a3e:	e7af      	b.n	80089a0 <_dtoa_r+0x168>
 8008a40:	f1ca 0300 	rsb	r3, sl, #0
 8008a44:	9308      	str	r3, [sp, #32]
 8008a46:	2300      	movs	r3, #0
 8008a48:	eba9 090a 	sub.w	r9, r9, sl
 8008a4c:	930c      	str	r3, [sp, #48]	; 0x30
 8008a4e:	e7bc      	b.n	80089ca <_dtoa_r+0x192>
 8008a50:	2301      	movs	r3, #1
 8008a52:	9309      	str	r3, [sp, #36]	; 0x24
 8008a54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	dd56      	ble.n	8008b08 <_dtoa_r+0x2d0>
 8008a5a:	4698      	mov	r8, r3
 8008a5c:	9304      	str	r3, [sp, #16]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	6462      	str	r2, [r4, #68]	; 0x44
 8008a62:	2204      	movs	r2, #4
 8008a64:	f102 0014 	add.w	r0, r2, #20
 8008a68:	4298      	cmp	r0, r3
 8008a6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008a6c:	d951      	bls.n	8008b12 <_dtoa_r+0x2da>
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f001 f9c2 	bl	8009df8 <_Balloc>
 8008a74:	f1b8 0f0e 	cmp.w	r8, #14
 8008a78:	4683      	mov	fp, r0
 8008a7a:	6420      	str	r0, [r4, #64]	; 0x40
 8008a7c:	f200 80ed 	bhi.w	8008c5a <_dtoa_r+0x422>
 8008a80:	2d00      	cmp	r5, #0
 8008a82:	f000 80ea 	beq.w	8008c5a <_dtoa_r+0x422>
 8008a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a8a:	f1ba 0f00 	cmp.w	sl, #0
 8008a8e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008a92:	dd77      	ble.n	8008b84 <_dtoa_r+0x34c>
 8008a94:	4a2b      	ldr	r2, [pc, #172]	; (8008b44 <_dtoa_r+0x30c>)
 8008a96:	f00a 030f 	and.w	r3, sl, #15
 8008a9a:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008a9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008aa2:	06f0      	lsls	r0, r6, #27
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008aac:	d568      	bpl.n	8008b80 <_dtoa_r+0x348>
 8008aae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ab2:	4b25      	ldr	r3, [pc, #148]	; (8008b48 <_dtoa_r+0x310>)
 8008ab4:	2503      	movs	r5, #3
 8008ab6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008aba:	f7f7 fe37 	bl	800072c <__aeabi_ddiv>
 8008abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ac2:	f006 060f 	and.w	r6, r6, #15
 8008ac6:	4f20      	ldr	r7, [pc, #128]	; (8008b48 <_dtoa_r+0x310>)
 8008ac8:	e04f      	b.n	8008b6a <_dtoa_r+0x332>
 8008aca:	2301      	movs	r3, #1
 8008acc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ace:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ad0:	4453      	add	r3, sl
 8008ad2:	f103 0801 	add.w	r8, r3, #1
 8008ad6:	9304      	str	r3, [sp, #16]
 8008ad8:	4643      	mov	r3, r8
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	bfb8      	it	lt
 8008ade:	2301      	movlt	r3, #1
 8008ae0:	e7bd      	b.n	8008a5e <_dtoa_r+0x226>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e7b5      	b.n	8008a52 <_dtoa_r+0x21a>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	e7f0      	b.n	8008acc <_dtoa_r+0x294>
 8008aea:	2501      	movs	r5, #1
 8008aec:	2300      	movs	r3, #0
 8008aee:	9509      	str	r5, [sp, #36]	; 0x24
 8008af0:	931e      	str	r3, [sp, #120]	; 0x78
 8008af2:	f04f 33ff 	mov.w	r3, #4294967295
 8008af6:	2200      	movs	r2, #0
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	4698      	mov	r8, r3
 8008afc:	2312      	movs	r3, #18
 8008afe:	921f      	str	r2, [sp, #124]	; 0x7c
 8008b00:	e7ad      	b.n	8008a5e <_dtoa_r+0x226>
 8008b02:	2301      	movs	r3, #1
 8008b04:	9309      	str	r3, [sp, #36]	; 0x24
 8008b06:	e7f4      	b.n	8008af2 <_dtoa_r+0x2ba>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	4698      	mov	r8, r3
 8008b0e:	461a      	mov	r2, r3
 8008b10:	e7f5      	b.n	8008afe <_dtoa_r+0x2c6>
 8008b12:	3101      	adds	r1, #1
 8008b14:	6461      	str	r1, [r4, #68]	; 0x44
 8008b16:	0052      	lsls	r2, r2, #1
 8008b18:	e7a4      	b.n	8008a64 <_dtoa_r+0x22c>
 8008b1a:	bf00      	nop
 8008b1c:	f3af 8000 	nop.w
 8008b20:	636f4361 	.word	0x636f4361
 8008b24:	3fd287a7 	.word	0x3fd287a7
 8008b28:	8b60c8b3 	.word	0x8b60c8b3
 8008b2c:	3fc68a28 	.word	0x3fc68a28
 8008b30:	509f79fb 	.word	0x509f79fb
 8008b34:	3fd34413 	.word	0x3fd34413
 8008b38:	7ff00000 	.word	0x7ff00000
 8008b3c:	0800b1b3 	.word	0x0800b1b3
 8008b40:	3ff80000 	.word	0x3ff80000
 8008b44:	0800b210 	.word	0x0800b210
 8008b48:	0800b1e8 	.word	0x0800b1e8
 8008b4c:	0800b1dd 	.word	0x0800b1dd
 8008b50:	07f1      	lsls	r1, r6, #31
 8008b52:	d508      	bpl.n	8008b66 <_dtoa_r+0x32e>
 8008b54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b5c:	f7f7 fcbc 	bl	80004d8 <__aeabi_dmul>
 8008b60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008b64:	3501      	adds	r5, #1
 8008b66:	1076      	asrs	r6, r6, #1
 8008b68:	3708      	adds	r7, #8
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	d1f0      	bne.n	8008b50 <_dtoa_r+0x318>
 8008b6e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b76:	f7f7 fdd9 	bl	800072c <__aeabi_ddiv>
 8008b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b7e:	e01b      	b.n	8008bb8 <_dtoa_r+0x380>
 8008b80:	2502      	movs	r5, #2
 8008b82:	e7a0      	b.n	8008ac6 <_dtoa_r+0x28e>
 8008b84:	f000 80a4 	beq.w	8008cd0 <_dtoa_r+0x498>
 8008b88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008b8c:	f1ca 0600 	rsb	r6, sl, #0
 8008b90:	4ba0      	ldr	r3, [pc, #640]	; (8008e14 <_dtoa_r+0x5dc>)
 8008b92:	f006 020f 	and.w	r2, r6, #15
 8008b96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fc9b 	bl	80004d8 <__aeabi_dmul>
 8008ba2:	2502      	movs	r5, #2
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008baa:	4f9b      	ldr	r7, [pc, #620]	; (8008e18 <_dtoa_r+0x5e0>)
 8008bac:	1136      	asrs	r6, r6, #4
 8008bae:	2e00      	cmp	r6, #0
 8008bb0:	f040 8083 	bne.w	8008cba <_dtoa_r+0x482>
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e0      	bne.n	8008b7a <_dtoa_r+0x342>
 8008bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 808a 	beq.w	8008cd4 <_dtoa_r+0x49c>
 8008bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bc4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008bc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4b93      	ldr	r3, [pc, #588]	; (8008e1c <_dtoa_r+0x5e4>)
 8008bd0:	f7f7 fef4 	bl	80009bc <__aeabi_dcmplt>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d07d      	beq.n	8008cd4 <_dtoa_r+0x49c>
 8008bd8:	f1b8 0f00 	cmp.w	r8, #0
 8008bdc:	d07a      	beq.n	8008cd4 <_dtoa_r+0x49c>
 8008bde:	9b04      	ldr	r3, [sp, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dd36      	ble.n	8008c52 <_dtoa_r+0x41a>
 8008be4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008be8:	2200      	movs	r2, #0
 8008bea:	4b8d      	ldr	r3, [pc, #564]	; (8008e20 <_dtoa_r+0x5e8>)
 8008bec:	f7f7 fc74 	bl	80004d8 <__aeabi_dmul>
 8008bf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bf4:	9e04      	ldr	r6, [sp, #16]
 8008bf6:	f10a 37ff 	add.w	r7, sl, #4294967295
 8008bfa:	3501      	adds	r5, #1
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	f7f7 fc01 	bl	8000404 <__aeabi_i2d>
 8008c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c06:	f7f7 fc67 	bl	80004d8 <__aeabi_dmul>
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	4b85      	ldr	r3, [pc, #532]	; (8008e24 <_dtoa_r+0x5ec>)
 8008c0e:	f7f7 faad 	bl	800016c <__adddf3>
 8008c12:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008c16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008c1a:	950b      	str	r5, [sp, #44]	; 0x2c
 8008c1c:	2e00      	cmp	r6, #0
 8008c1e:	d15c      	bne.n	8008cda <_dtoa_r+0x4a2>
 8008c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c24:	2200      	movs	r2, #0
 8008c26:	4b80      	ldr	r3, [pc, #512]	; (8008e28 <_dtoa_r+0x5f0>)
 8008c28:	f7f7 fa9e 	bl	8000168 <__aeabi_dsub>
 8008c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c2e:	462b      	mov	r3, r5
 8008c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c34:	f7f7 fee0 	bl	80009f8 <__aeabi_dcmpgt>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	f040 8282 	bne.w	8009142 <_dtoa_r+0x90a>
 8008c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c44:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008c48:	f7f7 feb8 	bl	80009bc <__aeabi_dcmplt>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	f040 8276 	bne.w	800913e <_dtoa_r+0x906>
 8008c52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008c56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f2c0 814c 	blt.w	8008efa <_dtoa_r+0x6c2>
 8008c62:	f1ba 0f0e 	cmp.w	sl, #14
 8008c66:	f300 8148 	bgt.w	8008efa <_dtoa_r+0x6c2>
 8008c6a:	4b6a      	ldr	r3, [pc, #424]	; (8008e14 <_dtoa_r+0x5dc>)
 8008c6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f280 80d8 	bge.w	8008e30 <_dtoa_r+0x5f8>
 8008c80:	f1b8 0f00 	cmp.w	r8, #0
 8008c84:	f300 80d4 	bgt.w	8008e30 <_dtoa_r+0x5f8>
 8008c88:	f040 8258 	bne.w	800913c <_dtoa_r+0x904>
 8008c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c90:	2200      	movs	r2, #0
 8008c92:	4b65      	ldr	r3, [pc, #404]	; (8008e28 <_dtoa_r+0x5f0>)
 8008c94:	f7f7 fc20 	bl	80004d8 <__aeabi_dmul>
 8008c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c9c:	f7f7 fea2 	bl	80009e4 <__aeabi_dcmpge>
 8008ca0:	4646      	mov	r6, r8
 8008ca2:	4647      	mov	r7, r8
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	f040 822e 	bne.w	8009106 <_dtoa_r+0x8ce>
 8008caa:	2331      	movs	r3, #49	; 0x31
 8008cac:	f10b 0501 	add.w	r5, fp, #1
 8008cb0:	f88b 3000 	strb.w	r3, [fp]
 8008cb4:	f10a 0a01 	add.w	sl, sl, #1
 8008cb8:	e229      	b.n	800910e <_dtoa_r+0x8d6>
 8008cba:	07f2      	lsls	r2, r6, #31
 8008cbc:	d505      	bpl.n	8008cca <_dtoa_r+0x492>
 8008cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc2:	f7f7 fc09 	bl	80004d8 <__aeabi_dmul>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	3501      	adds	r5, #1
 8008cca:	1076      	asrs	r6, r6, #1
 8008ccc:	3708      	adds	r7, #8
 8008cce:	e76e      	b.n	8008bae <_dtoa_r+0x376>
 8008cd0:	2502      	movs	r5, #2
 8008cd2:	e771      	b.n	8008bb8 <_dtoa_r+0x380>
 8008cd4:	4657      	mov	r7, sl
 8008cd6:	4646      	mov	r6, r8
 8008cd8:	e790      	b.n	8008bfc <_dtoa_r+0x3c4>
 8008cda:	4b4e      	ldr	r3, [pc, #312]	; (8008e14 <_dtoa_r+0x5dc>)
 8008cdc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ce0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d048      	beq.n	8008d7c <_dtoa_r+0x544>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	2000      	movs	r0, #0
 8008cf0:	494e      	ldr	r1, [pc, #312]	; (8008e2c <_dtoa_r+0x5f4>)
 8008cf2:	f7f7 fd1b 	bl	800072c <__aeabi_ddiv>
 8008cf6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008cfa:	f7f7 fa35 	bl	8000168 <__aeabi_dsub>
 8008cfe:	465d      	mov	r5, fp
 8008d00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d08:	f7f7 fe96 	bl	8000a38 <__aeabi_d2iz>
 8008d0c:	9011      	str	r0, [sp, #68]	; 0x44
 8008d0e:	f7f7 fb79 	bl	8000404 <__aeabi_i2d>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d1a:	f7f7 fa25 	bl	8000168 <__aeabi_dsub>
 8008d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d24:	3330      	adds	r3, #48	; 0x30
 8008d26:	f805 3b01 	strb.w	r3, [r5], #1
 8008d2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d2e:	f7f7 fe45 	bl	80009bc <__aeabi_dcmplt>
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d163      	bne.n	8008dfe <_dtoa_r+0x5c6>
 8008d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	4937      	ldr	r1, [pc, #220]	; (8008e1c <_dtoa_r+0x5e4>)
 8008d3e:	f7f7 fa13 	bl	8000168 <__aeabi_dsub>
 8008d42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d46:	f7f7 fe39 	bl	80009bc <__aeabi_dcmplt>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f040 80b6 	bne.w	8008ebc <_dtoa_r+0x684>
 8008d50:	eba5 030b 	sub.w	r3, r5, fp
 8008d54:	429e      	cmp	r6, r3
 8008d56:	f77f af7c 	ble.w	8008c52 <_dtoa_r+0x41a>
 8008d5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d5e:	2200      	movs	r2, #0
 8008d60:	4b2f      	ldr	r3, [pc, #188]	; (8008e20 <_dtoa_r+0x5e8>)
 8008d62:	f7f7 fbb9 	bl	80004d8 <__aeabi_dmul>
 8008d66:	2200      	movs	r2, #0
 8008d68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d70:	4b2b      	ldr	r3, [pc, #172]	; (8008e20 <_dtoa_r+0x5e8>)
 8008d72:	f7f7 fbb1 	bl	80004d8 <__aeabi_dmul>
 8008d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d7a:	e7c3      	b.n	8008d04 <_dtoa_r+0x4cc>
 8008d7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d80:	f7f7 fbaa 	bl	80004d8 <__aeabi_dmul>
 8008d84:	eb0b 0506 	add.w	r5, fp, r6
 8008d88:	465e      	mov	r6, fp
 8008d8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d92:	f7f7 fe51 	bl	8000a38 <__aeabi_d2iz>
 8008d96:	9011      	str	r0, [sp, #68]	; 0x44
 8008d98:	f7f7 fb34 	bl	8000404 <__aeabi_i2d>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008da4:	f7f7 f9e0 	bl	8000168 <__aeabi_dsub>
 8008da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dae:	3330      	adds	r3, #48	; 0x30
 8008db0:	f806 3b01 	strb.w	r3, [r6], #1
 8008db4:	42ae      	cmp	r6, r5
 8008db6:	f04f 0200 	mov.w	r2, #0
 8008dba:	d124      	bne.n	8008e06 <_dtoa_r+0x5ce>
 8008dbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008dc0:	4b1a      	ldr	r3, [pc, #104]	; (8008e2c <_dtoa_r+0x5f4>)
 8008dc2:	f7f7 f9d3 	bl	800016c <__adddf3>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dce:	f7f7 fe13 	bl	80009f8 <__aeabi_dcmpgt>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d172      	bne.n	8008ebc <_dtoa_r+0x684>
 8008dd6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008dda:	2000      	movs	r0, #0
 8008ddc:	4913      	ldr	r1, [pc, #76]	; (8008e2c <_dtoa_r+0x5f4>)
 8008dde:	f7f7 f9c3 	bl	8000168 <__aeabi_dsub>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dea:	f7f7 fde7 	bl	80009bc <__aeabi_dcmplt>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	f43f af2f 	beq.w	8008c52 <_dtoa_r+0x41a>
 8008df4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008df8:	1e6a      	subs	r2, r5, #1
 8008dfa:	2b30      	cmp	r3, #48	; 0x30
 8008dfc:	d001      	beq.n	8008e02 <_dtoa_r+0x5ca>
 8008dfe:	46ba      	mov	sl, r7
 8008e00:	e04b      	b.n	8008e9a <_dtoa_r+0x662>
 8008e02:	4615      	mov	r5, r2
 8008e04:	e7f6      	b.n	8008df4 <_dtoa_r+0x5bc>
 8008e06:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <_dtoa_r+0x5e8>)
 8008e08:	f7f7 fb66 	bl	80004d8 <__aeabi_dmul>
 8008e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e10:	e7bd      	b.n	8008d8e <_dtoa_r+0x556>
 8008e12:	bf00      	nop
 8008e14:	0800b210 	.word	0x0800b210
 8008e18:	0800b1e8 	.word	0x0800b1e8
 8008e1c:	3ff00000 	.word	0x3ff00000
 8008e20:	40240000 	.word	0x40240000
 8008e24:	401c0000 	.word	0x401c0000
 8008e28:	40140000 	.word	0x40140000
 8008e2c:	3fe00000 	.word	0x3fe00000
 8008e30:	465d      	mov	r5, fp
 8008e32:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	f7f7 fc75 	bl	800072c <__aeabi_ddiv>
 8008e42:	f7f7 fdf9 	bl	8000a38 <__aeabi_d2iz>
 8008e46:	4681      	mov	r9, r0
 8008e48:	f7f7 fadc 	bl	8000404 <__aeabi_i2d>
 8008e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e50:	f7f7 fb42 	bl	80004d8 <__aeabi_dmul>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4630      	mov	r0, r6
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	f7f7 f984 	bl	8000168 <__aeabi_dsub>
 8008e60:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008e64:	f805 6b01 	strb.w	r6, [r5], #1
 8008e68:	eba5 060b 	sub.w	r6, r5, fp
 8008e6c:	45b0      	cmp	r8, r6
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	d135      	bne.n	8008ee0 <_dtoa_r+0x6a8>
 8008e74:	f7f7 f97a 	bl	800016c <__adddf3>
 8008e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	460f      	mov	r7, r1
 8008e80:	f7f7 fdba 	bl	80009f8 <__aeabi_dcmpgt>
 8008e84:	b9c8      	cbnz	r0, 8008eba <_dtoa_r+0x682>
 8008e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	f7f7 fd8b 	bl	80009a8 <__aeabi_dcmpeq>
 8008e92:	b110      	cbz	r0, 8008e9a <_dtoa_r+0x662>
 8008e94:	f019 0f01 	tst.w	r9, #1
 8008e98:	d10f      	bne.n	8008eba <_dtoa_r+0x682>
 8008e9a:	9906      	ldr	r1, [sp, #24]
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 ffd0 	bl	8009e42 <_Bfree>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ea6:	702b      	strb	r3, [r5, #0]
 8008ea8:	f10a 0301 	add.w	r3, sl, #1
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f43f acf9 	beq.w	80088a8 <_dtoa_r+0x70>
 8008eb6:	601d      	str	r5, [r3, #0]
 8008eb8:	e4f6      	b.n	80088a8 <_dtoa_r+0x70>
 8008eba:	4657      	mov	r7, sl
 8008ebc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ec0:	1e6b      	subs	r3, r5, #1
 8008ec2:	2a39      	cmp	r2, #57	; 0x39
 8008ec4:	d106      	bne.n	8008ed4 <_dtoa_r+0x69c>
 8008ec6:	459b      	cmp	fp, r3
 8008ec8:	d108      	bne.n	8008edc <_dtoa_r+0x6a4>
 8008eca:	2330      	movs	r3, #48	; 0x30
 8008ecc:	f88b 3000 	strb.w	r3, [fp]
 8008ed0:	465b      	mov	r3, fp
 8008ed2:	3701      	adds	r7, #1
 8008ed4:	781a      	ldrb	r2, [r3, #0]
 8008ed6:	3201      	adds	r2, #1
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	e790      	b.n	8008dfe <_dtoa_r+0x5c6>
 8008edc:	461d      	mov	r5, r3
 8008ede:	e7ed      	b.n	8008ebc <_dtoa_r+0x684>
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4b99      	ldr	r3, [pc, #612]	; (8009148 <_dtoa_r+0x910>)
 8008ee4:	f7f7 faf8 	bl	80004d8 <__aeabi_dmul>
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2300      	movs	r3, #0
 8008eec:	4606      	mov	r6, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	f7f7 fd5a 	bl	80009a8 <__aeabi_dcmpeq>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d09e      	beq.n	8008e36 <_dtoa_r+0x5fe>
 8008ef8:	e7cf      	b.n	8008e9a <_dtoa_r+0x662>
 8008efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	f000 8088 	beq.w	8009012 <_dtoa_r+0x7da>
 8008f02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008f04:	2a01      	cmp	r2, #1
 8008f06:	dc6d      	bgt.n	8008fe4 <_dtoa_r+0x7ac>
 8008f08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	d066      	beq.n	8008fdc <_dtoa_r+0x7a4>
 8008f0e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f12:	464d      	mov	r5, r9
 8008f14:	9e08      	ldr	r6, [sp, #32]
 8008f16:	9a07      	ldr	r2, [sp, #28]
 8008f18:	2101      	movs	r1, #1
 8008f1a:	441a      	add	r2, r3
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4499      	add	r9, r3
 8008f20:	9207      	str	r2, [sp, #28]
 8008f22:	f001 f820 	bl	8009f66 <__i2b>
 8008f26:	4607      	mov	r7, r0
 8008f28:	2d00      	cmp	r5, #0
 8008f2a:	dd0b      	ble.n	8008f44 <_dtoa_r+0x70c>
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	dd08      	ble.n	8008f44 <_dtoa_r+0x70c>
 8008f32:	42ab      	cmp	r3, r5
 8008f34:	bfa8      	it	ge
 8008f36:	462b      	movge	r3, r5
 8008f38:	9a07      	ldr	r2, [sp, #28]
 8008f3a:	eba9 0903 	sub.w	r9, r9, r3
 8008f3e:	1aed      	subs	r5, r5, r3
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	9307      	str	r3, [sp, #28]
 8008f44:	9b08      	ldr	r3, [sp, #32]
 8008f46:	b1eb      	cbz	r3, 8008f84 <_dtoa_r+0x74c>
 8008f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d065      	beq.n	800901a <_dtoa_r+0x7e2>
 8008f4e:	b18e      	cbz	r6, 8008f74 <_dtoa_r+0x73c>
 8008f50:	4639      	mov	r1, r7
 8008f52:	4632      	mov	r2, r6
 8008f54:	4620      	mov	r0, r4
 8008f56:	f001 f8a5 	bl	800a0a4 <__pow5mult>
 8008f5a:	9a06      	ldr	r2, [sp, #24]
 8008f5c:	4601      	mov	r1, r0
 8008f5e:	4607      	mov	r7, r0
 8008f60:	4620      	mov	r0, r4
 8008f62:	f001 f809 	bl	8009f78 <__multiply>
 8008f66:	9906      	ldr	r1, [sp, #24]
 8008f68:	900a      	str	r0, [sp, #40]	; 0x28
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 ff69 	bl	8009e42 <_Bfree>
 8008f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f72:	9306      	str	r3, [sp, #24]
 8008f74:	9b08      	ldr	r3, [sp, #32]
 8008f76:	1b9a      	subs	r2, r3, r6
 8008f78:	d004      	beq.n	8008f84 <_dtoa_r+0x74c>
 8008f7a:	9906      	ldr	r1, [sp, #24]
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f001 f891 	bl	800a0a4 <__pow5mult>
 8008f82:	9006      	str	r0, [sp, #24]
 8008f84:	2101      	movs	r1, #1
 8008f86:	4620      	mov	r0, r4
 8008f88:	f000 ffed 	bl	8009f66 <__i2b>
 8008f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f8e:	4606      	mov	r6, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 81ca 	beq.w	800932a <_dtoa_r+0xaf2>
 8008f96:	461a      	mov	r2, r3
 8008f98:	4601      	mov	r1, r0
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f001 f882 	bl	800a0a4 <__pow5mult>
 8008fa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	dc3e      	bgt.n	8009026 <_dtoa_r+0x7ee>
 8008fa8:	9b02      	ldr	r3, [sp, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d137      	bne.n	800901e <_dtoa_r+0x7e6>
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d134      	bne.n	8009022 <_dtoa_r+0x7ea>
 8008fb8:	9b03      	ldr	r3, [sp, #12]
 8008fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fbe:	0d1b      	lsrs	r3, r3, #20
 8008fc0:	051b      	lsls	r3, r3, #20
 8008fc2:	b12b      	cbz	r3, 8008fd0 <_dtoa_r+0x798>
 8008fc4:	9b07      	ldr	r3, [sp, #28]
 8008fc6:	f109 0901 	add.w	r9, r9, #1
 8008fca:	3301      	adds	r3, #1
 8008fcc:	9307      	str	r3, [sp, #28]
 8008fce:	2301      	movs	r3, #1
 8008fd0:	9308      	str	r3, [sp, #32]
 8008fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d128      	bne.n	800902a <_dtoa_r+0x7f2>
 8008fd8:	2001      	movs	r0, #1
 8008fda:	e02e      	b.n	800903a <_dtoa_r+0x802>
 8008fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fe2:	e796      	b.n	8008f12 <_dtoa_r+0x6da>
 8008fe4:	9b08      	ldr	r3, [sp, #32]
 8008fe6:	f108 36ff 	add.w	r6, r8, #4294967295
 8008fea:	42b3      	cmp	r3, r6
 8008fec:	bfb7      	itett	lt
 8008fee:	9b08      	ldrlt	r3, [sp, #32]
 8008ff0:	1b9e      	subge	r6, r3, r6
 8008ff2:	1af2      	sublt	r2, r6, r3
 8008ff4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008ff6:	bfbf      	itttt	lt
 8008ff8:	9608      	strlt	r6, [sp, #32]
 8008ffa:	189b      	addlt	r3, r3, r2
 8008ffc:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008ffe:	2600      	movlt	r6, #0
 8009000:	f1b8 0f00 	cmp.w	r8, #0
 8009004:	bfb9      	ittee	lt
 8009006:	eba9 0508 	sublt.w	r5, r9, r8
 800900a:	2300      	movlt	r3, #0
 800900c:	464d      	movge	r5, r9
 800900e:	4643      	movge	r3, r8
 8009010:	e781      	b.n	8008f16 <_dtoa_r+0x6de>
 8009012:	9e08      	ldr	r6, [sp, #32]
 8009014:	464d      	mov	r5, r9
 8009016:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009018:	e786      	b.n	8008f28 <_dtoa_r+0x6f0>
 800901a:	9a08      	ldr	r2, [sp, #32]
 800901c:	e7ad      	b.n	8008f7a <_dtoa_r+0x742>
 800901e:	2300      	movs	r3, #0
 8009020:	e7d6      	b.n	8008fd0 <_dtoa_r+0x798>
 8009022:	9b02      	ldr	r3, [sp, #8]
 8009024:	e7d4      	b.n	8008fd0 <_dtoa_r+0x798>
 8009026:	2300      	movs	r3, #0
 8009028:	9308      	str	r3, [sp, #32]
 800902a:	6933      	ldr	r3, [r6, #16]
 800902c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009030:	6918      	ldr	r0, [r3, #16]
 8009032:	f000 ff4a 	bl	8009eca <__hi0bits>
 8009036:	f1c0 0020 	rsb	r0, r0, #32
 800903a:	9b07      	ldr	r3, [sp, #28]
 800903c:	4418      	add	r0, r3
 800903e:	f010 001f 	ands.w	r0, r0, #31
 8009042:	d047      	beq.n	80090d4 <_dtoa_r+0x89c>
 8009044:	f1c0 0320 	rsb	r3, r0, #32
 8009048:	2b04      	cmp	r3, #4
 800904a:	dd3b      	ble.n	80090c4 <_dtoa_r+0x88c>
 800904c:	9b07      	ldr	r3, [sp, #28]
 800904e:	f1c0 001c 	rsb	r0, r0, #28
 8009052:	4481      	add	r9, r0
 8009054:	4405      	add	r5, r0
 8009056:	4403      	add	r3, r0
 8009058:	9307      	str	r3, [sp, #28]
 800905a:	f1b9 0f00 	cmp.w	r9, #0
 800905e:	dd05      	ble.n	800906c <_dtoa_r+0x834>
 8009060:	464a      	mov	r2, r9
 8009062:	9906      	ldr	r1, [sp, #24]
 8009064:	4620      	mov	r0, r4
 8009066:	f001 f85d 	bl	800a124 <__lshift>
 800906a:	9006      	str	r0, [sp, #24]
 800906c:	9b07      	ldr	r3, [sp, #28]
 800906e:	2b00      	cmp	r3, #0
 8009070:	dd05      	ble.n	800907e <_dtoa_r+0x846>
 8009072:	4631      	mov	r1, r6
 8009074:	461a      	mov	r2, r3
 8009076:	4620      	mov	r0, r4
 8009078:	f001 f854 	bl	800a124 <__lshift>
 800907c:	4606      	mov	r6, r0
 800907e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009080:	b353      	cbz	r3, 80090d8 <_dtoa_r+0x8a0>
 8009082:	4631      	mov	r1, r6
 8009084:	9806      	ldr	r0, [sp, #24]
 8009086:	f001 f8a1 	bl	800a1cc <__mcmp>
 800908a:	2800      	cmp	r0, #0
 800908c:	da24      	bge.n	80090d8 <_dtoa_r+0x8a0>
 800908e:	2300      	movs	r3, #0
 8009090:	220a      	movs	r2, #10
 8009092:	9906      	ldr	r1, [sp, #24]
 8009094:	4620      	mov	r0, r4
 8009096:	f000 fedd 	bl	8009e54 <__multadd>
 800909a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090a0:	9006      	str	r0, [sp, #24]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 8148 	beq.w	8009338 <_dtoa_r+0xb00>
 80090a8:	2300      	movs	r3, #0
 80090aa:	4639      	mov	r1, r7
 80090ac:	220a      	movs	r2, #10
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 fed0 	bl	8009e54 <__multadd>
 80090b4:	9b04      	ldr	r3, [sp, #16]
 80090b6:	4607      	mov	r7, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dc4d      	bgt.n	8009158 <_dtoa_r+0x920>
 80090bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80090be:	2b02      	cmp	r3, #2
 80090c0:	dd4a      	ble.n	8009158 <_dtoa_r+0x920>
 80090c2:	e011      	b.n	80090e8 <_dtoa_r+0x8b0>
 80090c4:	d0c9      	beq.n	800905a <_dtoa_r+0x822>
 80090c6:	9a07      	ldr	r2, [sp, #28]
 80090c8:	331c      	adds	r3, #28
 80090ca:	441a      	add	r2, r3
 80090cc:	4499      	add	r9, r3
 80090ce:	441d      	add	r5, r3
 80090d0:	4613      	mov	r3, r2
 80090d2:	e7c1      	b.n	8009058 <_dtoa_r+0x820>
 80090d4:	4603      	mov	r3, r0
 80090d6:	e7f6      	b.n	80090c6 <_dtoa_r+0x88e>
 80090d8:	f1b8 0f00 	cmp.w	r8, #0
 80090dc:	dc36      	bgt.n	800914c <_dtoa_r+0x914>
 80090de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	dd33      	ble.n	800914c <_dtoa_r+0x914>
 80090e4:	f8cd 8010 	str.w	r8, [sp, #16]
 80090e8:	9b04      	ldr	r3, [sp, #16]
 80090ea:	b963      	cbnz	r3, 8009106 <_dtoa_r+0x8ce>
 80090ec:	4631      	mov	r1, r6
 80090ee:	2205      	movs	r2, #5
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 feaf 	bl	8009e54 <__multadd>
 80090f6:	4601      	mov	r1, r0
 80090f8:	4606      	mov	r6, r0
 80090fa:	9806      	ldr	r0, [sp, #24]
 80090fc:	f001 f866 	bl	800a1cc <__mcmp>
 8009100:	2800      	cmp	r0, #0
 8009102:	f73f add2 	bgt.w	8008caa <_dtoa_r+0x472>
 8009106:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009108:	465d      	mov	r5, fp
 800910a:	ea6f 0a03 	mvn.w	sl, r3
 800910e:	f04f 0900 	mov.w	r9, #0
 8009112:	4631      	mov	r1, r6
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fe94 	bl	8009e42 <_Bfree>
 800911a:	2f00      	cmp	r7, #0
 800911c:	f43f aebd 	beq.w	8008e9a <_dtoa_r+0x662>
 8009120:	f1b9 0f00 	cmp.w	r9, #0
 8009124:	d005      	beq.n	8009132 <_dtoa_r+0x8fa>
 8009126:	45b9      	cmp	r9, r7
 8009128:	d003      	beq.n	8009132 <_dtoa_r+0x8fa>
 800912a:	4649      	mov	r1, r9
 800912c:	4620      	mov	r0, r4
 800912e:	f000 fe88 	bl	8009e42 <_Bfree>
 8009132:	4639      	mov	r1, r7
 8009134:	4620      	mov	r0, r4
 8009136:	f000 fe84 	bl	8009e42 <_Bfree>
 800913a:	e6ae      	b.n	8008e9a <_dtoa_r+0x662>
 800913c:	2600      	movs	r6, #0
 800913e:	4637      	mov	r7, r6
 8009140:	e7e1      	b.n	8009106 <_dtoa_r+0x8ce>
 8009142:	46ba      	mov	sl, r7
 8009144:	4637      	mov	r7, r6
 8009146:	e5b0      	b.n	8008caa <_dtoa_r+0x472>
 8009148:	40240000 	.word	0x40240000
 800914c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914e:	f8cd 8010 	str.w	r8, [sp, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 80f7 	beq.w	8009346 <_dtoa_r+0xb0e>
 8009158:	2d00      	cmp	r5, #0
 800915a:	dd05      	ble.n	8009168 <_dtoa_r+0x930>
 800915c:	4639      	mov	r1, r7
 800915e:	462a      	mov	r2, r5
 8009160:	4620      	mov	r0, r4
 8009162:	f000 ffdf 	bl	800a124 <__lshift>
 8009166:	4607      	mov	r7, r0
 8009168:	9b08      	ldr	r3, [sp, #32]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d04c      	beq.n	8009208 <_dtoa_r+0x9d0>
 800916e:	6879      	ldr	r1, [r7, #4]
 8009170:	4620      	mov	r0, r4
 8009172:	f000 fe41 	bl	8009df8 <_Balloc>
 8009176:	4605      	mov	r5, r0
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	f107 010c 	add.w	r1, r7, #12
 800917e:	3202      	adds	r2, #2
 8009180:	0092      	lsls	r2, r2, #2
 8009182:	300c      	adds	r0, #12
 8009184:	f000 fe20 	bl	8009dc8 <memcpy>
 8009188:	2201      	movs	r2, #1
 800918a:	4629      	mov	r1, r5
 800918c:	4620      	mov	r0, r4
 800918e:	f000 ffc9 	bl	800a124 <__lshift>
 8009192:	46b9      	mov	r9, r7
 8009194:	4607      	mov	r7, r0
 8009196:	9b02      	ldr	r3, [sp, #8]
 8009198:	f8cd b01c 	str.w	fp, [sp, #28]
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	9308      	str	r3, [sp, #32]
 80091a2:	4631      	mov	r1, r6
 80091a4:	9806      	ldr	r0, [sp, #24]
 80091a6:	f7ff fab9 	bl	800871c <quorem>
 80091aa:	4649      	mov	r1, r9
 80091ac:	4605      	mov	r5, r0
 80091ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80091b2:	9806      	ldr	r0, [sp, #24]
 80091b4:	f001 f80a 	bl	800a1cc <__mcmp>
 80091b8:	463a      	mov	r2, r7
 80091ba:	9002      	str	r0, [sp, #8]
 80091bc:	4631      	mov	r1, r6
 80091be:	4620      	mov	r0, r4
 80091c0:	f001 f81e 	bl	800a200 <__mdiff>
 80091c4:	68c3      	ldr	r3, [r0, #12]
 80091c6:	4602      	mov	r2, r0
 80091c8:	bb03      	cbnz	r3, 800920c <_dtoa_r+0x9d4>
 80091ca:	4601      	mov	r1, r0
 80091cc:	9009      	str	r0, [sp, #36]	; 0x24
 80091ce:	9806      	ldr	r0, [sp, #24]
 80091d0:	f000 fffc 	bl	800a1cc <__mcmp>
 80091d4:	4603      	mov	r3, r0
 80091d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d8:	4611      	mov	r1, r2
 80091da:	4620      	mov	r0, r4
 80091dc:	9309      	str	r3, [sp, #36]	; 0x24
 80091de:	f000 fe30 	bl	8009e42 <_Bfree>
 80091e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e4:	b9a3      	cbnz	r3, 8009210 <_dtoa_r+0x9d8>
 80091e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091e8:	b992      	cbnz	r2, 8009210 <_dtoa_r+0x9d8>
 80091ea:	9a08      	ldr	r2, [sp, #32]
 80091ec:	b982      	cbnz	r2, 8009210 <_dtoa_r+0x9d8>
 80091ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80091f2:	d029      	beq.n	8009248 <_dtoa_r+0xa10>
 80091f4:	9b02      	ldr	r3, [sp, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dd01      	ble.n	80091fe <_dtoa_r+0x9c6>
 80091fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80091fe:	9b07      	ldr	r3, [sp, #28]
 8009200:	1c5d      	adds	r5, r3, #1
 8009202:	f883 8000 	strb.w	r8, [r3]
 8009206:	e784      	b.n	8009112 <_dtoa_r+0x8da>
 8009208:	4638      	mov	r0, r7
 800920a:	e7c2      	b.n	8009192 <_dtoa_r+0x95a>
 800920c:	2301      	movs	r3, #1
 800920e:	e7e3      	b.n	80091d8 <_dtoa_r+0x9a0>
 8009210:	9a02      	ldr	r2, [sp, #8]
 8009212:	2a00      	cmp	r2, #0
 8009214:	db04      	blt.n	8009220 <_dtoa_r+0x9e8>
 8009216:	d124      	bne.n	8009262 <_dtoa_r+0xa2a>
 8009218:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800921a:	bb12      	cbnz	r2, 8009262 <_dtoa_r+0xa2a>
 800921c:	9a08      	ldr	r2, [sp, #32]
 800921e:	bb02      	cbnz	r2, 8009262 <_dtoa_r+0xa2a>
 8009220:	2b00      	cmp	r3, #0
 8009222:	ddec      	ble.n	80091fe <_dtoa_r+0x9c6>
 8009224:	2201      	movs	r2, #1
 8009226:	9906      	ldr	r1, [sp, #24]
 8009228:	4620      	mov	r0, r4
 800922a:	f000 ff7b 	bl	800a124 <__lshift>
 800922e:	4631      	mov	r1, r6
 8009230:	9006      	str	r0, [sp, #24]
 8009232:	f000 ffcb 	bl	800a1cc <__mcmp>
 8009236:	2800      	cmp	r0, #0
 8009238:	dc03      	bgt.n	8009242 <_dtoa_r+0xa0a>
 800923a:	d1e0      	bne.n	80091fe <_dtoa_r+0x9c6>
 800923c:	f018 0f01 	tst.w	r8, #1
 8009240:	d0dd      	beq.n	80091fe <_dtoa_r+0x9c6>
 8009242:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009246:	d1d8      	bne.n	80091fa <_dtoa_r+0x9c2>
 8009248:	9b07      	ldr	r3, [sp, #28]
 800924a:	9a07      	ldr	r2, [sp, #28]
 800924c:	1c5d      	adds	r5, r3, #1
 800924e:	2339      	movs	r3, #57	; 0x39
 8009250:	7013      	strb	r3, [r2, #0]
 8009252:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009256:	1e6a      	subs	r2, r5, #1
 8009258:	2b39      	cmp	r3, #57	; 0x39
 800925a:	d04e      	beq.n	80092fa <_dtoa_r+0xac2>
 800925c:	3301      	adds	r3, #1
 800925e:	7013      	strb	r3, [r2, #0]
 8009260:	e757      	b.n	8009112 <_dtoa_r+0x8da>
 8009262:	9a07      	ldr	r2, [sp, #28]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f102 0501 	add.w	r5, r2, #1
 800926a:	dd06      	ble.n	800927a <_dtoa_r+0xa42>
 800926c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009270:	d0ea      	beq.n	8009248 <_dtoa_r+0xa10>
 8009272:	f108 0801 	add.w	r8, r8, #1
 8009276:	9b07      	ldr	r3, [sp, #28]
 8009278:	e7c3      	b.n	8009202 <_dtoa_r+0x9ca>
 800927a:	9a04      	ldr	r2, [sp, #16]
 800927c:	eba5 030b 	sub.w	r3, r5, fp
 8009280:	4293      	cmp	r3, r2
 8009282:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009286:	d021      	beq.n	80092cc <_dtoa_r+0xa94>
 8009288:	2300      	movs	r3, #0
 800928a:	220a      	movs	r2, #10
 800928c:	9906      	ldr	r1, [sp, #24]
 800928e:	4620      	mov	r0, r4
 8009290:	f000 fde0 	bl	8009e54 <__multadd>
 8009294:	45b9      	cmp	r9, r7
 8009296:	9006      	str	r0, [sp, #24]
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	f04f 020a 	mov.w	r2, #10
 80092a0:	4649      	mov	r1, r9
 80092a2:	4620      	mov	r0, r4
 80092a4:	d105      	bne.n	80092b2 <_dtoa_r+0xa7a>
 80092a6:	f000 fdd5 	bl	8009e54 <__multadd>
 80092aa:	4681      	mov	r9, r0
 80092ac:	4607      	mov	r7, r0
 80092ae:	9507      	str	r5, [sp, #28]
 80092b0:	e777      	b.n	80091a2 <_dtoa_r+0x96a>
 80092b2:	f000 fdcf 	bl	8009e54 <__multadd>
 80092b6:	4639      	mov	r1, r7
 80092b8:	4681      	mov	r9, r0
 80092ba:	2300      	movs	r3, #0
 80092bc:	220a      	movs	r2, #10
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 fdc8 	bl	8009e54 <__multadd>
 80092c4:	4607      	mov	r7, r0
 80092c6:	e7f2      	b.n	80092ae <_dtoa_r+0xa76>
 80092c8:	f04f 0900 	mov.w	r9, #0
 80092cc:	2201      	movs	r2, #1
 80092ce:	9906      	ldr	r1, [sp, #24]
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 ff27 	bl	800a124 <__lshift>
 80092d6:	4631      	mov	r1, r6
 80092d8:	9006      	str	r0, [sp, #24]
 80092da:	f000 ff77 	bl	800a1cc <__mcmp>
 80092de:	2800      	cmp	r0, #0
 80092e0:	dcb7      	bgt.n	8009252 <_dtoa_r+0xa1a>
 80092e2:	d102      	bne.n	80092ea <_dtoa_r+0xab2>
 80092e4:	f018 0f01 	tst.w	r8, #1
 80092e8:	d1b3      	bne.n	8009252 <_dtoa_r+0xa1a>
 80092ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092ee:	1e6a      	subs	r2, r5, #1
 80092f0:	2b30      	cmp	r3, #48	; 0x30
 80092f2:	f47f af0e 	bne.w	8009112 <_dtoa_r+0x8da>
 80092f6:	4615      	mov	r5, r2
 80092f8:	e7f7      	b.n	80092ea <_dtoa_r+0xab2>
 80092fa:	4593      	cmp	fp, r2
 80092fc:	d105      	bne.n	800930a <_dtoa_r+0xad2>
 80092fe:	2331      	movs	r3, #49	; 0x31
 8009300:	f10a 0a01 	add.w	sl, sl, #1
 8009304:	f88b 3000 	strb.w	r3, [fp]
 8009308:	e703      	b.n	8009112 <_dtoa_r+0x8da>
 800930a:	4615      	mov	r5, r2
 800930c:	e7a1      	b.n	8009252 <_dtoa_r+0xa1a>
 800930e:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009374 <_dtoa_r+0xb3c>
 8009312:	f7ff bac9 	b.w	80088a8 <_dtoa_r+0x70>
 8009316:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009318:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8009378 <_dtoa_r+0xb40>
 800931c:	2b00      	cmp	r3, #0
 800931e:	f43f aac3 	beq.w	80088a8 <_dtoa_r+0x70>
 8009322:	f10b 0308 	add.w	r3, fp, #8
 8009326:	f7ff babd 	b.w	80088a4 <_dtoa_r+0x6c>
 800932a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800932c:	2b01      	cmp	r3, #1
 800932e:	f77f ae3b 	ble.w	8008fa8 <_dtoa_r+0x770>
 8009332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009334:	9308      	str	r3, [sp, #32]
 8009336:	e64f      	b.n	8008fd8 <_dtoa_r+0x7a0>
 8009338:	9b04      	ldr	r3, [sp, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	dc03      	bgt.n	8009346 <_dtoa_r+0xb0e>
 800933e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009340:	2b02      	cmp	r3, #2
 8009342:	f73f aed1 	bgt.w	80090e8 <_dtoa_r+0x8b0>
 8009346:	465d      	mov	r5, fp
 8009348:	4631      	mov	r1, r6
 800934a:	9806      	ldr	r0, [sp, #24]
 800934c:	f7ff f9e6 	bl	800871c <quorem>
 8009350:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009354:	f805 8b01 	strb.w	r8, [r5], #1
 8009358:	9a04      	ldr	r2, [sp, #16]
 800935a:	eba5 030b 	sub.w	r3, r5, fp
 800935e:	429a      	cmp	r2, r3
 8009360:	ddb2      	ble.n	80092c8 <_dtoa_r+0xa90>
 8009362:	2300      	movs	r3, #0
 8009364:	220a      	movs	r2, #10
 8009366:	9906      	ldr	r1, [sp, #24]
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fd73 	bl	8009e54 <__multadd>
 800936e:	9006      	str	r0, [sp, #24]
 8009370:	e7ea      	b.n	8009348 <_dtoa_r+0xb10>
 8009372:	bf00      	nop
 8009374:	0800b1b2 	.word	0x0800b1b2
 8009378:	0800b1d4 	.word	0x0800b1d4

0800937c <__sflush_r>:
 800937c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009384:	b293      	uxth	r3, r2
 8009386:	4605      	mov	r5, r0
 8009388:	0718      	lsls	r0, r3, #28
 800938a:	460c      	mov	r4, r1
 800938c:	d45f      	bmi.n	800944e <__sflush_r+0xd2>
 800938e:	684b      	ldr	r3, [r1, #4]
 8009390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009394:	2b00      	cmp	r3, #0
 8009396:	818a      	strh	r2, [r1, #12]
 8009398:	dc05      	bgt.n	80093a6 <__sflush_r+0x2a>
 800939a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800939c:	2b00      	cmp	r3, #0
 800939e:	dc02      	bgt.n	80093a6 <__sflush_r+0x2a>
 80093a0:	2000      	movs	r0, #0
 80093a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093a8:	2e00      	cmp	r6, #0
 80093aa:	d0f9      	beq.n	80093a0 <__sflush_r+0x24>
 80093ac:	2300      	movs	r3, #0
 80093ae:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093b2:	682f      	ldr	r7, [r5, #0]
 80093b4:	69e1      	ldr	r1, [r4, #28]
 80093b6:	602b      	str	r3, [r5, #0]
 80093b8:	d036      	beq.n	8009428 <__sflush_r+0xac>
 80093ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	075a      	lsls	r2, r3, #29
 80093c0:	d505      	bpl.n	80093ce <__sflush_r+0x52>
 80093c2:	6863      	ldr	r3, [r4, #4]
 80093c4:	1ac0      	subs	r0, r0, r3
 80093c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093c8:	b10b      	cbz	r3, 80093ce <__sflush_r+0x52>
 80093ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80093cc:	1ac0      	subs	r0, r0, r3
 80093ce:	2300      	movs	r3, #0
 80093d0:	4602      	mov	r2, r0
 80093d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093d4:	69e1      	ldr	r1, [r4, #28]
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b0      	blx	r6
 80093da:	1c43      	adds	r3, r0, #1
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	d106      	bne.n	80093ee <__sflush_r+0x72>
 80093e0:	6829      	ldr	r1, [r5, #0]
 80093e2:	291d      	cmp	r1, #29
 80093e4:	d84c      	bhi.n	8009480 <__sflush_r+0x104>
 80093e6:	4a2b      	ldr	r2, [pc, #172]	; (8009494 <__sflush_r+0x118>)
 80093e8:	40ca      	lsrs	r2, r1
 80093ea:	07d6      	lsls	r6, r2, #31
 80093ec:	d548      	bpl.n	8009480 <__sflush_r+0x104>
 80093ee:	2200      	movs	r2, #0
 80093f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093f4:	b21b      	sxth	r3, r3
 80093f6:	6062      	str	r2, [r4, #4]
 80093f8:	6922      	ldr	r2, [r4, #16]
 80093fa:	04d9      	lsls	r1, r3, #19
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	6022      	str	r2, [r4, #0]
 8009400:	d504      	bpl.n	800940c <__sflush_r+0x90>
 8009402:	1c42      	adds	r2, r0, #1
 8009404:	d101      	bne.n	800940a <__sflush_r+0x8e>
 8009406:	682b      	ldr	r3, [r5, #0]
 8009408:	b903      	cbnz	r3, 800940c <__sflush_r+0x90>
 800940a:	6520      	str	r0, [r4, #80]	; 0x50
 800940c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800940e:	602f      	str	r7, [r5, #0]
 8009410:	2900      	cmp	r1, #0
 8009412:	d0c5      	beq.n	80093a0 <__sflush_r+0x24>
 8009414:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009418:	4299      	cmp	r1, r3
 800941a:	d002      	beq.n	8009422 <__sflush_r+0xa6>
 800941c:	4628      	mov	r0, r5
 800941e:	f000 f937 	bl	8009690 <_free_r>
 8009422:	2000      	movs	r0, #0
 8009424:	6320      	str	r0, [r4, #48]	; 0x30
 8009426:	e7bc      	b.n	80093a2 <__sflush_r+0x26>
 8009428:	2301      	movs	r3, #1
 800942a:	4628      	mov	r0, r5
 800942c:	47b0      	blx	r6
 800942e:	1c41      	adds	r1, r0, #1
 8009430:	d1c4      	bne.n	80093bc <__sflush_r+0x40>
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d0c1      	beq.n	80093bc <__sflush_r+0x40>
 8009438:	2b1d      	cmp	r3, #29
 800943a:	d001      	beq.n	8009440 <__sflush_r+0xc4>
 800943c:	2b16      	cmp	r3, #22
 800943e:	d101      	bne.n	8009444 <__sflush_r+0xc8>
 8009440:	602f      	str	r7, [r5, #0]
 8009442:	e7ad      	b.n	80093a0 <__sflush_r+0x24>
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800944a:	81a3      	strh	r3, [r4, #12]
 800944c:	e7a9      	b.n	80093a2 <__sflush_r+0x26>
 800944e:	690f      	ldr	r7, [r1, #16]
 8009450:	2f00      	cmp	r7, #0
 8009452:	d0a5      	beq.n	80093a0 <__sflush_r+0x24>
 8009454:	079b      	lsls	r3, r3, #30
 8009456:	bf18      	it	ne
 8009458:	2300      	movne	r3, #0
 800945a:	680e      	ldr	r6, [r1, #0]
 800945c:	bf08      	it	eq
 800945e:	694b      	ldreq	r3, [r1, #20]
 8009460:	eba6 0807 	sub.w	r8, r6, r7
 8009464:	600f      	str	r7, [r1, #0]
 8009466:	608b      	str	r3, [r1, #8]
 8009468:	f1b8 0f00 	cmp.w	r8, #0
 800946c:	dd98      	ble.n	80093a0 <__sflush_r+0x24>
 800946e:	4643      	mov	r3, r8
 8009470:	463a      	mov	r2, r7
 8009472:	69e1      	ldr	r1, [r4, #28]
 8009474:	4628      	mov	r0, r5
 8009476:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009478:	47b0      	blx	r6
 800947a:	2800      	cmp	r0, #0
 800947c:	dc06      	bgt.n	800948c <__sflush_r+0x110>
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	f04f 30ff 	mov.w	r0, #4294967295
 800948a:	e78a      	b.n	80093a2 <__sflush_r+0x26>
 800948c:	4407      	add	r7, r0
 800948e:	eba8 0800 	sub.w	r8, r8, r0
 8009492:	e7e9      	b.n	8009468 <__sflush_r+0xec>
 8009494:	20400001 	.word	0x20400001

08009498 <_fflush_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	460c      	mov	r4, r1
 800949c:	4605      	mov	r5, r0
 800949e:	b118      	cbz	r0, 80094a8 <_fflush_r+0x10>
 80094a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80094a2:	b90b      	cbnz	r3, 80094a8 <_fflush_r+0x10>
 80094a4:	f000 f864 	bl	8009570 <__sinit>
 80094a8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80094ac:	b1b8      	cbz	r0, 80094de <_fflush_r+0x46>
 80094ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094b0:	07db      	lsls	r3, r3, #31
 80094b2:	d404      	bmi.n	80094be <_fflush_r+0x26>
 80094b4:	0581      	lsls	r1, r0, #22
 80094b6:	d402      	bmi.n	80094be <_fflush_r+0x26>
 80094b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094ba:	f000 f9d3 	bl	8009864 <__retarget_lock_acquire_recursive>
 80094be:	4628      	mov	r0, r5
 80094c0:	4621      	mov	r1, r4
 80094c2:	f7ff ff5b 	bl	800937c <__sflush_r>
 80094c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094c8:	4605      	mov	r5, r0
 80094ca:	07da      	lsls	r2, r3, #31
 80094cc:	d405      	bmi.n	80094da <_fflush_r+0x42>
 80094ce:	89a3      	ldrh	r3, [r4, #12]
 80094d0:	059b      	lsls	r3, r3, #22
 80094d2:	d402      	bmi.n	80094da <_fflush_r+0x42>
 80094d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094d6:	f000 f9c6 	bl	8009866 <__retarget_lock_release_recursive>
 80094da:	4628      	mov	r0, r5
 80094dc:	bd38      	pop	{r3, r4, r5, pc}
 80094de:	4605      	mov	r5, r0
 80094e0:	e7fb      	b.n	80094da <_fflush_r+0x42>
	...

080094e4 <std>:
 80094e4:	2300      	movs	r3, #0
 80094e6:	b510      	push	{r4, lr}
 80094e8:	4604      	mov	r4, r0
 80094ea:	e9c0 3300 	strd	r3, r3, [r0]
 80094ee:	6083      	str	r3, [r0, #8]
 80094f0:	8181      	strh	r1, [r0, #12]
 80094f2:	6643      	str	r3, [r0, #100]	; 0x64
 80094f4:	81c2      	strh	r2, [r0, #14]
 80094f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094fa:	6183      	str	r3, [r0, #24]
 80094fc:	4619      	mov	r1, r3
 80094fe:	2208      	movs	r2, #8
 8009500:	305c      	adds	r0, #92	; 0x5c
 8009502:	f7fd fddb 	bl	80070bc <memset>
 8009506:	4b07      	ldr	r3, [pc, #28]	; (8009524 <std+0x40>)
 8009508:	61e4      	str	r4, [r4, #28]
 800950a:	6223      	str	r3, [r4, #32]
 800950c:	4b06      	ldr	r3, [pc, #24]	; (8009528 <std+0x44>)
 800950e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009512:	6263      	str	r3, [r4, #36]	; 0x24
 8009514:	4b05      	ldr	r3, [pc, #20]	; (800952c <std+0x48>)
 8009516:	62a3      	str	r3, [r4, #40]	; 0x28
 8009518:	4b05      	ldr	r3, [pc, #20]	; (8009530 <std+0x4c>)
 800951a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800951c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009520:	f000 b99e 	b.w	8009860 <__retarget_lock_init_recursive>
 8009524:	0800a449 	.word	0x0800a449
 8009528:	0800a46b 	.word	0x0800a46b
 800952c:	0800a4a3 	.word	0x0800a4a3
 8009530:	0800a4c7 	.word	0x0800a4c7

08009534 <_cleanup_r>:
 8009534:	4901      	ldr	r1, [pc, #4]	; (800953c <_cleanup_r+0x8>)
 8009536:	f000 b967 	b.w	8009808 <_fwalk_reent>
 800953a:	bf00      	nop
 800953c:	0800a755 	.word	0x0800a755

08009540 <__sfp_lock_acquire>:
 8009540:	4801      	ldr	r0, [pc, #4]	; (8009548 <__sfp_lock_acquire+0x8>)
 8009542:	f000 b98f 	b.w	8009864 <__retarget_lock_acquire_recursive>
 8009546:	bf00      	nop
 8009548:	20001dd8 	.word	0x20001dd8

0800954c <__sfp_lock_release>:
 800954c:	4801      	ldr	r0, [pc, #4]	; (8009554 <__sfp_lock_release+0x8>)
 800954e:	f000 b98a 	b.w	8009866 <__retarget_lock_release_recursive>
 8009552:	bf00      	nop
 8009554:	20001dd8 	.word	0x20001dd8

08009558 <__sinit_lock_acquire>:
 8009558:	4801      	ldr	r0, [pc, #4]	; (8009560 <__sinit_lock_acquire+0x8>)
 800955a:	f000 b983 	b.w	8009864 <__retarget_lock_acquire_recursive>
 800955e:	bf00      	nop
 8009560:	20001dd3 	.word	0x20001dd3

08009564 <__sinit_lock_release>:
 8009564:	4801      	ldr	r0, [pc, #4]	; (800956c <__sinit_lock_release+0x8>)
 8009566:	f000 b97e 	b.w	8009866 <__retarget_lock_release_recursive>
 800956a:	bf00      	nop
 800956c:	20001dd3 	.word	0x20001dd3

08009570 <__sinit>:
 8009570:	b510      	push	{r4, lr}
 8009572:	4604      	mov	r4, r0
 8009574:	f7ff fff0 	bl	8009558 <__sinit_lock_acquire>
 8009578:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800957a:	b11a      	cbz	r2, 8009584 <__sinit+0x14>
 800957c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009580:	f7ff bff0 	b.w	8009564 <__sinit_lock_release>
 8009584:	4b0d      	ldr	r3, [pc, #52]	; (80095bc <__sinit+0x4c>)
 8009586:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800958a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800958c:	2303      	movs	r3, #3
 800958e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8009592:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8009596:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800959a:	2104      	movs	r1, #4
 800959c:	6860      	ldr	r0, [r4, #4]
 800959e:	f7ff ffa1 	bl	80094e4 <std>
 80095a2:	2201      	movs	r2, #1
 80095a4:	2109      	movs	r1, #9
 80095a6:	68a0      	ldr	r0, [r4, #8]
 80095a8:	f7ff ff9c 	bl	80094e4 <std>
 80095ac:	2202      	movs	r2, #2
 80095ae:	2112      	movs	r1, #18
 80095b0:	68e0      	ldr	r0, [r4, #12]
 80095b2:	f7ff ff97 	bl	80094e4 <std>
 80095b6:	2301      	movs	r3, #1
 80095b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80095ba:	e7df      	b.n	800957c <__sinit+0xc>
 80095bc:	08009535 	.word	0x08009535

080095c0 <__libc_fini_array>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	; (80095e0 <__libc_fini_array+0x20>)
 80095c4:	4c07      	ldr	r4, [pc, #28]	; (80095e4 <__libc_fini_array+0x24>)
 80095c6:	1b64      	subs	r4, r4, r5
 80095c8:	10a4      	asrs	r4, r4, #2
 80095ca:	b91c      	cbnz	r4, 80095d4 <__libc_fini_array+0x14>
 80095cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d0:	f001 bd34 	b.w	800b03c <_fini>
 80095d4:	3c01      	subs	r4, #1
 80095d6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80095da:	4798      	blx	r3
 80095dc:	e7f5      	b.n	80095ca <__libc_fini_array+0xa>
 80095de:	bf00      	nop
 80095e0:	0800b400 	.word	0x0800b400
 80095e4:	0800b404 	.word	0x0800b404

080095e8 <_malloc_trim_r>:
 80095e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ec:	4605      	mov	r5, r0
 80095ee:	2008      	movs	r0, #8
 80095f0:	460c      	mov	r4, r1
 80095f2:	f000 ff81 	bl	800a4f8 <sysconf>
 80095f6:	4680      	mov	r8, r0
 80095f8:	4f22      	ldr	r7, [pc, #136]	; (8009684 <_malloc_trim_r+0x9c>)
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 fbf0 	bl	8009de0 <__malloc_lock>
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	685e      	ldr	r6, [r3, #4]
 8009604:	f026 0603 	bic.w	r6, r6, #3
 8009608:	1b34      	subs	r4, r6, r4
 800960a:	3c11      	subs	r4, #17
 800960c:	4444      	add	r4, r8
 800960e:	fbb4 f4f8 	udiv	r4, r4, r8
 8009612:	3c01      	subs	r4, #1
 8009614:	fb08 f404 	mul.w	r4, r8, r4
 8009618:	45a0      	cmp	r8, r4
 800961a:	dd05      	ble.n	8009628 <_malloc_trim_r+0x40>
 800961c:	4628      	mov	r0, r5
 800961e:	f000 fbe5 	bl	8009dec <__malloc_unlock>
 8009622:	2000      	movs	r0, #0
 8009624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009628:	2100      	movs	r1, #0
 800962a:	4628      	mov	r0, r5
 800962c:	f000 fefc 	bl	800a428 <_sbrk_r>
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4433      	add	r3, r6
 8009634:	4298      	cmp	r0, r3
 8009636:	d1f1      	bne.n	800961c <_malloc_trim_r+0x34>
 8009638:	4261      	negs	r1, r4
 800963a:	4628      	mov	r0, r5
 800963c:	f000 fef4 	bl	800a428 <_sbrk_r>
 8009640:	3001      	adds	r0, #1
 8009642:	d110      	bne.n	8009666 <_malloc_trim_r+0x7e>
 8009644:	2100      	movs	r1, #0
 8009646:	4628      	mov	r0, r5
 8009648:	f000 feee 	bl	800a428 <_sbrk_r>
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	1a83      	subs	r3, r0, r2
 8009650:	2b0f      	cmp	r3, #15
 8009652:	dde3      	ble.n	800961c <_malloc_trim_r+0x34>
 8009654:	490c      	ldr	r1, [pc, #48]	; (8009688 <_malloc_trim_r+0xa0>)
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	6809      	ldr	r1, [r1, #0]
 800965c:	6053      	str	r3, [r2, #4]
 800965e:	1a40      	subs	r0, r0, r1
 8009660:	490a      	ldr	r1, [pc, #40]	; (800968c <_malloc_trim_r+0xa4>)
 8009662:	6008      	str	r0, [r1, #0]
 8009664:	e7da      	b.n	800961c <_malloc_trim_r+0x34>
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	4a08      	ldr	r2, [pc, #32]	; (800968c <_malloc_trim_r+0xa4>)
 800966a:	1b36      	subs	r6, r6, r4
 800966c:	f046 0601 	orr.w	r6, r6, #1
 8009670:	605e      	str	r6, [r3, #4]
 8009672:	6813      	ldr	r3, [r2, #0]
 8009674:	4628      	mov	r0, r5
 8009676:	1b1c      	subs	r4, r3, r4
 8009678:	6014      	str	r4, [r2, #0]
 800967a:	f000 fbb7 	bl	8009dec <__malloc_unlock>
 800967e:	2001      	movs	r0, #1
 8009680:	e7d0      	b.n	8009624 <_malloc_trim_r+0x3c>
 8009682:	bf00      	nop
 8009684:	200005ac 	.word	0x200005ac
 8009688:	200009b4 	.word	0x200009b4
 800968c:	20000d6c 	.word	0x20000d6c

08009690 <_free_r>:
 8009690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009694:	4604      	mov	r4, r0
 8009696:	4688      	mov	r8, r1
 8009698:	2900      	cmp	r1, #0
 800969a:	f000 80ab 	beq.w	80097f4 <_free_r+0x164>
 800969e:	f000 fb9f 	bl	8009de0 <__malloc_lock>
 80096a2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80096a6:	4d54      	ldr	r5, [pc, #336]	; (80097f8 <_free_r+0x168>)
 80096a8:	f022 0001 	bic.w	r0, r2, #1
 80096ac:	f1a8 0308 	sub.w	r3, r8, #8
 80096b0:	181f      	adds	r7, r3, r0
 80096b2:	68a9      	ldr	r1, [r5, #8]
 80096b4:	687e      	ldr	r6, [r7, #4]
 80096b6:	42b9      	cmp	r1, r7
 80096b8:	f026 0603 	bic.w	r6, r6, #3
 80096bc:	f002 0201 	and.w	r2, r2, #1
 80096c0:	d11b      	bne.n	80096fa <_free_r+0x6a>
 80096c2:	4430      	add	r0, r6
 80096c4:	b93a      	cbnz	r2, 80096d6 <_free_r+0x46>
 80096c6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80096ca:	1a9b      	subs	r3, r3, r2
 80096cc:	4410      	add	r0, r2
 80096ce:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80096d2:	60ca      	str	r2, [r1, #12]
 80096d4:	6091      	str	r1, [r2, #8]
 80096d6:	f040 0201 	orr.w	r2, r0, #1
 80096da:	605a      	str	r2, [r3, #4]
 80096dc:	60ab      	str	r3, [r5, #8]
 80096de:	4b47      	ldr	r3, [pc, #284]	; (80097fc <_free_r+0x16c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4283      	cmp	r3, r0
 80096e4:	d804      	bhi.n	80096f0 <_free_r+0x60>
 80096e6:	4b46      	ldr	r3, [pc, #280]	; (8009800 <_free_r+0x170>)
 80096e8:	4620      	mov	r0, r4
 80096ea:	6819      	ldr	r1, [r3, #0]
 80096ec:	f7ff ff7c 	bl	80095e8 <_malloc_trim_r>
 80096f0:	4620      	mov	r0, r4
 80096f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096f6:	f000 bb79 	b.w	8009dec <__malloc_unlock>
 80096fa:	607e      	str	r6, [r7, #4]
 80096fc:	2a00      	cmp	r2, #0
 80096fe:	d139      	bne.n	8009774 <_free_r+0xe4>
 8009700:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8009704:	f105 0c08 	add.w	ip, r5, #8
 8009708:	1a5b      	subs	r3, r3, r1
 800970a:	4408      	add	r0, r1
 800970c:	6899      	ldr	r1, [r3, #8]
 800970e:	4561      	cmp	r1, ip
 8009710:	d032      	beq.n	8009778 <_free_r+0xe8>
 8009712:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8009716:	f8c1 c00c 	str.w	ip, [r1, #12]
 800971a:	f8cc 1008 	str.w	r1, [ip, #8]
 800971e:	19b9      	adds	r1, r7, r6
 8009720:	6849      	ldr	r1, [r1, #4]
 8009722:	07c9      	lsls	r1, r1, #31
 8009724:	d40a      	bmi.n	800973c <_free_r+0xac>
 8009726:	4430      	add	r0, r6
 8009728:	68b9      	ldr	r1, [r7, #8]
 800972a:	bb3a      	cbnz	r2, 800977c <_free_r+0xec>
 800972c:	4e35      	ldr	r6, [pc, #212]	; (8009804 <_free_r+0x174>)
 800972e:	42b1      	cmp	r1, r6
 8009730:	d124      	bne.n	800977c <_free_r+0xec>
 8009732:	2201      	movs	r2, #1
 8009734:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8009738:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800973c:	f040 0101 	orr.w	r1, r0, #1
 8009740:	6059      	str	r1, [r3, #4]
 8009742:	5018      	str	r0, [r3, r0]
 8009744:	2a00      	cmp	r2, #0
 8009746:	d1d3      	bne.n	80096f0 <_free_r+0x60>
 8009748:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800974c:	d21a      	bcs.n	8009784 <_free_r+0xf4>
 800974e:	2201      	movs	r2, #1
 8009750:	08c0      	lsrs	r0, r0, #3
 8009752:	1081      	asrs	r1, r0, #2
 8009754:	408a      	lsls	r2, r1
 8009756:	6869      	ldr	r1, [r5, #4]
 8009758:	3001      	adds	r0, #1
 800975a:	430a      	orrs	r2, r1
 800975c:	606a      	str	r2, [r5, #4]
 800975e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8009762:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009766:	3a08      	subs	r2, #8
 8009768:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800976c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8009770:	60cb      	str	r3, [r1, #12]
 8009772:	e7bd      	b.n	80096f0 <_free_r+0x60>
 8009774:	2200      	movs	r2, #0
 8009776:	e7d2      	b.n	800971e <_free_r+0x8e>
 8009778:	2201      	movs	r2, #1
 800977a:	e7d0      	b.n	800971e <_free_r+0x8e>
 800977c:	68fe      	ldr	r6, [r7, #12]
 800977e:	60ce      	str	r6, [r1, #12]
 8009780:	60b1      	str	r1, [r6, #8]
 8009782:	e7db      	b.n	800973c <_free_r+0xac>
 8009784:	0a42      	lsrs	r2, r0, #9
 8009786:	2a04      	cmp	r2, #4
 8009788:	d813      	bhi.n	80097b2 <_free_r+0x122>
 800978a:	0982      	lsrs	r2, r0, #6
 800978c:	3238      	adds	r2, #56	; 0x38
 800978e:	1c51      	adds	r1, r2, #1
 8009790:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009794:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8009798:	428e      	cmp	r6, r1
 800979a:	d124      	bne.n	80097e6 <_free_r+0x156>
 800979c:	2001      	movs	r0, #1
 800979e:	1092      	asrs	r2, r2, #2
 80097a0:	fa00 f202 	lsl.w	r2, r0, r2
 80097a4:	6868      	ldr	r0, [r5, #4]
 80097a6:	4302      	orrs	r2, r0
 80097a8:	606a      	str	r2, [r5, #4]
 80097aa:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80097ae:	60b3      	str	r3, [r6, #8]
 80097b0:	e7de      	b.n	8009770 <_free_r+0xe0>
 80097b2:	2a14      	cmp	r2, #20
 80097b4:	d801      	bhi.n	80097ba <_free_r+0x12a>
 80097b6:	325b      	adds	r2, #91	; 0x5b
 80097b8:	e7e9      	b.n	800978e <_free_r+0xfe>
 80097ba:	2a54      	cmp	r2, #84	; 0x54
 80097bc:	d802      	bhi.n	80097c4 <_free_r+0x134>
 80097be:	0b02      	lsrs	r2, r0, #12
 80097c0:	326e      	adds	r2, #110	; 0x6e
 80097c2:	e7e4      	b.n	800978e <_free_r+0xfe>
 80097c4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80097c8:	d802      	bhi.n	80097d0 <_free_r+0x140>
 80097ca:	0bc2      	lsrs	r2, r0, #15
 80097cc:	3277      	adds	r2, #119	; 0x77
 80097ce:	e7de      	b.n	800978e <_free_r+0xfe>
 80097d0:	f240 5154 	movw	r1, #1364	; 0x554
 80097d4:	428a      	cmp	r2, r1
 80097d6:	bf9a      	itte	ls
 80097d8:	0c82      	lsrls	r2, r0, #18
 80097da:	327c      	addls	r2, #124	; 0x7c
 80097dc:	227e      	movhi	r2, #126	; 0x7e
 80097de:	e7d6      	b.n	800978e <_free_r+0xfe>
 80097e0:	6889      	ldr	r1, [r1, #8]
 80097e2:	428e      	cmp	r6, r1
 80097e4:	d004      	beq.n	80097f0 <_free_r+0x160>
 80097e6:	684a      	ldr	r2, [r1, #4]
 80097e8:	f022 0203 	bic.w	r2, r2, #3
 80097ec:	4282      	cmp	r2, r0
 80097ee:	d8f7      	bhi.n	80097e0 <_free_r+0x150>
 80097f0:	68ce      	ldr	r6, [r1, #12]
 80097f2:	e7da      	b.n	80097aa <_free_r+0x11a>
 80097f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f8:	200005ac 	.word	0x200005ac
 80097fc:	200009b8 	.word	0x200009b8
 8009800:	20000d9c 	.word	0x20000d9c
 8009804:	200005b4 	.word	0x200005b4

08009808 <_fwalk_reent>:
 8009808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800980c:	4680      	mov	r8, r0
 800980e:	4689      	mov	r9, r1
 8009810:	2600      	movs	r6, #0
 8009812:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8009816:	b914      	cbnz	r4, 800981e <_fwalk_reent+0x16>
 8009818:	4630      	mov	r0, r6
 800981a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009822:	3f01      	subs	r7, #1
 8009824:	d501      	bpl.n	800982a <_fwalk_reent+0x22>
 8009826:	6824      	ldr	r4, [r4, #0]
 8009828:	e7f5      	b.n	8009816 <_fwalk_reent+0xe>
 800982a:	89ab      	ldrh	r3, [r5, #12]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d907      	bls.n	8009840 <_fwalk_reent+0x38>
 8009830:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009834:	3301      	adds	r3, #1
 8009836:	d003      	beq.n	8009840 <_fwalk_reent+0x38>
 8009838:	4629      	mov	r1, r5
 800983a:	4640      	mov	r0, r8
 800983c:	47c8      	blx	r9
 800983e:	4306      	orrs	r6, r0
 8009840:	3568      	adds	r5, #104	; 0x68
 8009842:	e7ee      	b.n	8009822 <_fwalk_reent+0x1a>

08009844 <_localeconv_r>:
 8009844:	4b04      	ldr	r3, [pc, #16]	; (8009858 <_localeconv_r+0x14>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800984a:	4b04      	ldr	r3, [pc, #16]	; (800985c <_localeconv_r+0x18>)
 800984c:	2800      	cmp	r0, #0
 800984e:	bf08      	it	eq
 8009850:	4618      	moveq	r0, r3
 8009852:	30f0      	adds	r0, #240	; 0xf0
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	2000017c 	.word	0x2000017c
 800985c:	200009bc 	.word	0x200009bc

08009860 <__retarget_lock_init_recursive>:
 8009860:	4770      	bx	lr

08009862 <__retarget_lock_close_recursive>:
 8009862:	4770      	bx	lr

08009864 <__retarget_lock_acquire_recursive>:
 8009864:	4770      	bx	lr

08009866 <__retarget_lock_release_recursive>:
 8009866:	4770      	bx	lr

08009868 <__swhatbuf_r>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	460e      	mov	r6, r1
 800986c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009870:	b096      	sub	sp, #88	; 0x58
 8009872:	2900      	cmp	r1, #0
 8009874:	4614      	mov	r4, r2
 8009876:	461d      	mov	r5, r3
 8009878:	da09      	bge.n	800988e <__swhatbuf_r+0x26>
 800987a:	2200      	movs	r2, #0
 800987c:	89b3      	ldrh	r3, [r6, #12]
 800987e:	602a      	str	r2, [r5, #0]
 8009880:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009884:	d116      	bne.n	80098b4 <__swhatbuf_r+0x4c>
 8009886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800988a:	6023      	str	r3, [r4, #0]
 800988c:	e015      	b.n	80098ba <__swhatbuf_r+0x52>
 800988e:	466a      	mov	r2, sp
 8009890:	f001 f822 	bl	800a8d8 <_fstat_r>
 8009894:	2800      	cmp	r0, #0
 8009896:	dbf0      	blt.n	800987a <__swhatbuf_r+0x12>
 8009898:	9a01      	ldr	r2, [sp, #4]
 800989a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800989e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098a6:	425a      	negs	r2, r3
 80098a8:	415a      	adcs	r2, r3
 80098aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ae:	602a      	str	r2, [r5, #0]
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	e002      	b.n	80098ba <__swhatbuf_r+0x52>
 80098b4:	2340      	movs	r3, #64	; 0x40
 80098b6:	4610      	mov	r0, r2
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	b016      	add	sp, #88	; 0x58
 80098bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080098c0 <__smakebuf_r>:
 80098c0:	898b      	ldrh	r3, [r1, #12]
 80098c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098c4:	079d      	lsls	r5, r3, #30
 80098c6:	4606      	mov	r6, r0
 80098c8:	460c      	mov	r4, r1
 80098ca:	d507      	bpl.n	80098dc <__smakebuf_r+0x1c>
 80098cc:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	6123      	str	r3, [r4, #16]
 80098d4:	2301      	movs	r3, #1
 80098d6:	6163      	str	r3, [r4, #20]
 80098d8:	b002      	add	sp, #8
 80098da:	bd70      	pop	{r4, r5, r6, pc}
 80098dc:	ab01      	add	r3, sp, #4
 80098de:	466a      	mov	r2, sp
 80098e0:	f7ff ffc2 	bl	8009868 <__swhatbuf_r>
 80098e4:	9900      	ldr	r1, [sp, #0]
 80098e6:	4605      	mov	r5, r0
 80098e8:	4630      	mov	r0, r6
 80098ea:	f000 f829 	bl	8009940 <_malloc_r>
 80098ee:	b948      	cbnz	r0, 8009904 <__smakebuf_r+0x44>
 80098f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f4:	059a      	lsls	r2, r3, #22
 80098f6:	d4ef      	bmi.n	80098d8 <__smakebuf_r+0x18>
 80098f8:	f023 0303 	bic.w	r3, r3, #3
 80098fc:	f043 0302 	orr.w	r3, r3, #2
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	e7e3      	b.n	80098cc <__smakebuf_r+0xc>
 8009904:	4b0d      	ldr	r3, [pc, #52]	; (800993c <__smakebuf_r+0x7c>)
 8009906:	63f3      	str	r3, [r6, #60]	; 0x3c
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	6020      	str	r0, [r4, #0]
 800990c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009910:	81a3      	strh	r3, [r4, #12]
 8009912:	9b00      	ldr	r3, [sp, #0]
 8009914:	6120      	str	r0, [r4, #16]
 8009916:	6163      	str	r3, [r4, #20]
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	b15b      	cbz	r3, 8009934 <__smakebuf_r+0x74>
 800991c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009920:	4630      	mov	r0, r6
 8009922:	f001 f939 	bl	800ab98 <_isatty_r>
 8009926:	b128      	cbz	r0, 8009934 <__smakebuf_r+0x74>
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	f023 0303 	bic.w	r3, r3, #3
 800992e:	f043 0301 	orr.w	r3, r3, #1
 8009932:	81a3      	strh	r3, [r4, #12]
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	431d      	orrs	r5, r3
 8009938:	81a5      	strh	r5, [r4, #12]
 800993a:	e7cd      	b.n	80098d8 <__smakebuf_r+0x18>
 800993c:	08009535 	.word	0x08009535

08009940 <_malloc_r>:
 8009940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	f101 050b 	add.w	r5, r1, #11
 8009948:	2d16      	cmp	r5, #22
 800994a:	4606      	mov	r6, r0
 800994c:	d906      	bls.n	800995c <_malloc_r+0x1c>
 800994e:	f035 0507 	bics.w	r5, r5, #7
 8009952:	d504      	bpl.n	800995e <_malloc_r+0x1e>
 8009954:	230c      	movs	r3, #12
 8009956:	6033      	str	r3, [r6, #0]
 8009958:	2400      	movs	r4, #0
 800995a:	e1a8      	b.n	8009cae <_malloc_r+0x36e>
 800995c:	2510      	movs	r5, #16
 800995e:	428d      	cmp	r5, r1
 8009960:	d3f8      	bcc.n	8009954 <_malloc_r+0x14>
 8009962:	4630      	mov	r0, r6
 8009964:	f000 fa3c 	bl	8009de0 <__malloc_lock>
 8009968:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800996c:	4fc0      	ldr	r7, [pc, #768]	; (8009c70 <_malloc_r+0x330>)
 800996e:	d238      	bcs.n	80099e2 <_malloc_r+0xa2>
 8009970:	f105 0208 	add.w	r2, r5, #8
 8009974:	443a      	add	r2, r7
 8009976:	6854      	ldr	r4, [r2, #4]
 8009978:	f1a2 0108 	sub.w	r1, r2, #8
 800997c:	428c      	cmp	r4, r1
 800997e:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8009982:	d102      	bne.n	800998a <_malloc_r+0x4a>
 8009984:	68d4      	ldr	r4, [r2, #12]
 8009986:	42a2      	cmp	r2, r4
 8009988:	d010      	beq.n	80099ac <_malloc_r+0x6c>
 800998a:	6863      	ldr	r3, [r4, #4]
 800998c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009990:	f023 0303 	bic.w	r3, r3, #3
 8009994:	60ca      	str	r2, [r1, #12]
 8009996:	4423      	add	r3, r4
 8009998:	6091      	str	r1, [r2, #8]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	f042 0201 	orr.w	r2, r2, #1
 80099a0:	605a      	str	r2, [r3, #4]
 80099a2:	4630      	mov	r0, r6
 80099a4:	f000 fa22 	bl	8009dec <__malloc_unlock>
 80099a8:	3408      	adds	r4, #8
 80099aa:	e180      	b.n	8009cae <_malloc_r+0x36e>
 80099ac:	3302      	adds	r3, #2
 80099ae:	4ab1      	ldr	r2, [pc, #708]	; (8009c74 <_malloc_r+0x334>)
 80099b0:	693c      	ldr	r4, [r7, #16]
 80099b2:	4611      	mov	r1, r2
 80099b4:	4294      	cmp	r4, r2
 80099b6:	d075      	beq.n	8009aa4 <_malloc_r+0x164>
 80099b8:	6860      	ldr	r0, [r4, #4]
 80099ba:	f020 0c03 	bic.w	ip, r0, #3
 80099be:	ebac 0005 	sub.w	r0, ip, r5
 80099c2:	280f      	cmp	r0, #15
 80099c4:	dd48      	ble.n	8009a58 <_malloc_r+0x118>
 80099c6:	1963      	adds	r3, r4, r5
 80099c8:	f045 0501 	orr.w	r5, r5, #1
 80099cc:	6065      	str	r5, [r4, #4]
 80099ce:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80099d2:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80099d6:	f040 0201 	orr.w	r2, r0, #1
 80099da:	605a      	str	r2, [r3, #4]
 80099dc:	f844 000c 	str.w	r0, [r4, ip]
 80099e0:	e7df      	b.n	80099a2 <_malloc_r+0x62>
 80099e2:	0a6b      	lsrs	r3, r5, #9
 80099e4:	d02a      	beq.n	8009a3c <_malloc_r+0xfc>
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d812      	bhi.n	8009a10 <_malloc_r+0xd0>
 80099ea:	09ab      	lsrs	r3, r5, #6
 80099ec:	3338      	adds	r3, #56	; 0x38
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80099f4:	6854      	ldr	r4, [r2, #4]
 80099f6:	f1a2 0c08 	sub.w	ip, r2, #8
 80099fa:	4564      	cmp	r4, ip
 80099fc:	d006      	beq.n	8009a0c <_malloc_r+0xcc>
 80099fe:	6862      	ldr	r2, [r4, #4]
 8009a00:	f022 0203 	bic.w	r2, r2, #3
 8009a04:	1b50      	subs	r0, r2, r5
 8009a06:	280f      	cmp	r0, #15
 8009a08:	dd1c      	ble.n	8009a44 <_malloc_r+0x104>
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	e7ce      	b.n	80099ae <_malloc_r+0x6e>
 8009a10:	2b14      	cmp	r3, #20
 8009a12:	d801      	bhi.n	8009a18 <_malloc_r+0xd8>
 8009a14:	335b      	adds	r3, #91	; 0x5b
 8009a16:	e7ea      	b.n	80099ee <_malloc_r+0xae>
 8009a18:	2b54      	cmp	r3, #84	; 0x54
 8009a1a:	d802      	bhi.n	8009a22 <_malloc_r+0xe2>
 8009a1c:	0b2b      	lsrs	r3, r5, #12
 8009a1e:	336e      	adds	r3, #110	; 0x6e
 8009a20:	e7e5      	b.n	80099ee <_malloc_r+0xae>
 8009a22:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009a26:	d802      	bhi.n	8009a2e <_malloc_r+0xee>
 8009a28:	0beb      	lsrs	r3, r5, #15
 8009a2a:	3377      	adds	r3, #119	; 0x77
 8009a2c:	e7df      	b.n	80099ee <_malloc_r+0xae>
 8009a2e:	f240 5254 	movw	r2, #1364	; 0x554
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d804      	bhi.n	8009a40 <_malloc_r+0x100>
 8009a36:	0cab      	lsrs	r3, r5, #18
 8009a38:	337c      	adds	r3, #124	; 0x7c
 8009a3a:	e7d8      	b.n	80099ee <_malloc_r+0xae>
 8009a3c:	233f      	movs	r3, #63	; 0x3f
 8009a3e:	e7d6      	b.n	80099ee <_malloc_r+0xae>
 8009a40:	237e      	movs	r3, #126	; 0x7e
 8009a42:	e7d4      	b.n	80099ee <_malloc_r+0xae>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	68e1      	ldr	r1, [r4, #12]
 8009a48:	db04      	blt.n	8009a54 <_malloc_r+0x114>
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	60d9      	str	r1, [r3, #12]
 8009a4e:	608b      	str	r3, [r1, #8]
 8009a50:	18a3      	adds	r3, r4, r2
 8009a52:	e7a2      	b.n	800999a <_malloc_r+0x5a>
 8009a54:	460c      	mov	r4, r1
 8009a56:	e7d0      	b.n	80099fa <_malloc_r+0xba>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8009a5e:	db07      	blt.n	8009a70 <_malloc_r+0x130>
 8009a60:	44a4      	add	ip, r4
 8009a62:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	f8cc 3004 	str.w	r3, [ip, #4]
 8009a6e:	e798      	b.n	80099a2 <_malloc_r+0x62>
 8009a70:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f080 8099 	bcs.w	8009bac <_malloc_r+0x26c>
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8009a80:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8009a84:	fa02 f20e 	lsl.w	r2, r2, lr
 8009a88:	4310      	orrs	r0, r2
 8009a8a:	f10c 0c01 	add.w	ip, ip, #1
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8009a94:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8009a98:	3a08      	subs	r2, #8
 8009a9a:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8009a9e:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8009aa2:	60c4      	str	r4, [r0, #12]
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	109a      	asrs	r2, r3, #2
 8009aa8:	fa00 f202 	lsl.w	r2, r0, r2
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	4290      	cmp	r0, r2
 8009ab0:	d326      	bcc.n	8009b00 <_malloc_r+0x1c0>
 8009ab2:	4210      	tst	r0, r2
 8009ab4:	d106      	bne.n	8009ac4 <_malloc_r+0x184>
 8009ab6:	f023 0303 	bic.w	r3, r3, #3
 8009aba:	0052      	lsls	r2, r2, #1
 8009abc:	4210      	tst	r0, r2
 8009abe:	f103 0304 	add.w	r3, r3, #4
 8009ac2:	d0fa      	beq.n	8009aba <_malloc_r+0x17a>
 8009ac4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8009ac8:	46e1      	mov	r9, ip
 8009aca:	4698      	mov	r8, r3
 8009acc:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009ad0:	454c      	cmp	r4, r9
 8009ad2:	f040 80af 	bne.w	8009c34 <_malloc_r+0x2f4>
 8009ad6:	f108 0801 	add.w	r8, r8, #1
 8009ada:	f018 0f03 	tst.w	r8, #3
 8009ade:	f109 0908 	add.w	r9, r9, #8
 8009ae2:	d1f3      	bne.n	8009acc <_malloc_r+0x18c>
 8009ae4:	0798      	lsls	r0, r3, #30
 8009ae6:	f040 80e8 	bne.w	8009cba <_malloc_r+0x37a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	ea23 0302 	bic.w	r3, r3, r2
 8009af0:	607b      	str	r3, [r7, #4]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	0052      	lsls	r2, r2, #1
 8009af6:	4290      	cmp	r0, r2
 8009af8:	d302      	bcc.n	8009b00 <_malloc_r+0x1c0>
 8009afa:	2a00      	cmp	r2, #0
 8009afc:	f040 80eb 	bne.w	8009cd6 <_malloc_r+0x396>
 8009b00:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8009b04:	f8da 4004 	ldr.w	r4, [sl, #4]
 8009b08:	f024 0203 	bic.w	r2, r4, #3
 8009b0c:	42aa      	cmp	r2, r5
 8009b0e:	d303      	bcc.n	8009b18 <_malloc_r+0x1d8>
 8009b10:	1b53      	subs	r3, r2, r5
 8009b12:	2b0f      	cmp	r3, #15
 8009b14:	f300 813f 	bgt.w	8009d96 <_malloc_r+0x456>
 8009b18:	4b57      	ldr	r3, [pc, #348]	; (8009c78 <_malloc_r+0x338>)
 8009b1a:	2008      	movs	r0, #8
 8009b1c:	681c      	ldr	r4, [r3, #0]
 8009b1e:	9200      	str	r2, [sp, #0]
 8009b20:	f000 fcea 	bl	800a4f8 <sysconf>
 8009b24:	4b55      	ldr	r3, [pc, #340]	; (8009c7c <_malloc_r+0x33c>)
 8009b26:	3410      	adds	r4, #16
 8009b28:	6819      	ldr	r1, [r3, #0]
 8009b2a:	442c      	add	r4, r5
 8009b2c:	3101      	adds	r1, #1
 8009b2e:	bf1f      	itttt	ne
 8009b30:	f104 34ff 	addne.w	r4, r4, #4294967295
 8009b34:	1824      	addne	r4, r4, r0
 8009b36:	4241      	negne	r1, r0
 8009b38:	400c      	andne	r4, r1
 8009b3a:	9a00      	ldr	r2, [sp, #0]
 8009b3c:	4680      	mov	r8, r0
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4630      	mov	r0, r6
 8009b42:	e9cd 2300 	strd	r2, r3, [sp]
 8009b46:	f000 fc6f 	bl	800a428 <_sbrk_r>
 8009b4a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009b4e:	4683      	mov	fp, r0
 8009b50:	f000 80fa 	beq.w	8009d48 <_malloc_r+0x408>
 8009b54:	9a00      	ldr	r2, [sp, #0]
 8009b56:	9b01      	ldr	r3, [sp, #4]
 8009b58:	eb0a 0102 	add.w	r1, sl, r2
 8009b5c:	4281      	cmp	r1, r0
 8009b5e:	d902      	bls.n	8009b66 <_malloc_r+0x226>
 8009b60:	45ba      	cmp	sl, r7
 8009b62:	f040 80f1 	bne.w	8009d48 <_malloc_r+0x408>
 8009b66:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8009c88 <_malloc_r+0x348>
 8009b6a:	4559      	cmp	r1, fp
 8009b6c:	f8d9 0000 	ldr.w	r0, [r9]
 8009b70:	f108 3cff 	add.w	ip, r8, #4294967295
 8009b74:	eb00 0e04 	add.w	lr, r0, r4
 8009b78:	f8c9 e000 	str.w	lr, [r9]
 8009b7c:	f040 80ad 	bne.w	8009cda <_malloc_r+0x39a>
 8009b80:	ea11 0f0c 	tst.w	r1, ip
 8009b84:	f040 80a9 	bne.w	8009cda <_malloc_r+0x39a>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4414      	add	r4, r2
 8009b8c:	f044 0401 	orr.w	r4, r4, #1
 8009b90:	605c      	str	r4, [r3, #4]
 8009b92:	4a3b      	ldr	r2, [pc, #236]	; (8009c80 <_malloc_r+0x340>)
 8009b94:	f8d9 3000 	ldr.w	r3, [r9]
 8009b98:	6811      	ldr	r1, [r2, #0]
 8009b9a:	428b      	cmp	r3, r1
 8009b9c:	bf88      	it	hi
 8009b9e:	6013      	strhi	r3, [r2, #0]
 8009ba0:	4a38      	ldr	r2, [pc, #224]	; (8009c84 <_malloc_r+0x344>)
 8009ba2:	6811      	ldr	r1, [r2, #0]
 8009ba4:	428b      	cmp	r3, r1
 8009ba6:	bf88      	it	hi
 8009ba8:	6013      	strhi	r3, [r2, #0]
 8009baa:	e0cd      	b.n	8009d48 <_malloc_r+0x408>
 8009bac:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009bb0:	2a04      	cmp	r2, #4
 8009bb2:	d818      	bhi.n	8009be6 <_malloc_r+0x2a6>
 8009bb4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009bb8:	3238      	adds	r2, #56	; 0x38
 8009bba:	f102 0e01 	add.w	lr, r2, #1
 8009bbe:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8009bc2:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8009bc6:	45f0      	cmp	r8, lr
 8009bc8:	d12b      	bne.n	8009c22 <_malloc_r+0x2e2>
 8009bca:	f04f 0c01 	mov.w	ip, #1
 8009bce:	1092      	asrs	r2, r2, #2
 8009bd0:	fa0c f202 	lsl.w	r2, ip, r2
 8009bd4:	4310      	orrs	r0, r2
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8009bdc:	f8c8 4008 	str.w	r4, [r8, #8]
 8009be0:	f8ce 400c 	str.w	r4, [lr, #12]
 8009be4:	e75e      	b.n	8009aa4 <_malloc_r+0x164>
 8009be6:	2a14      	cmp	r2, #20
 8009be8:	d801      	bhi.n	8009bee <_malloc_r+0x2ae>
 8009bea:	325b      	adds	r2, #91	; 0x5b
 8009bec:	e7e5      	b.n	8009bba <_malloc_r+0x27a>
 8009bee:	2a54      	cmp	r2, #84	; 0x54
 8009bf0:	d803      	bhi.n	8009bfa <_malloc_r+0x2ba>
 8009bf2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009bf6:	326e      	adds	r2, #110	; 0x6e
 8009bf8:	e7df      	b.n	8009bba <_malloc_r+0x27a>
 8009bfa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009bfe:	d803      	bhi.n	8009c08 <_malloc_r+0x2c8>
 8009c00:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009c04:	3277      	adds	r2, #119	; 0x77
 8009c06:	e7d8      	b.n	8009bba <_malloc_r+0x27a>
 8009c08:	f240 5e54 	movw	lr, #1364	; 0x554
 8009c0c:	4572      	cmp	r2, lr
 8009c0e:	bf9a      	itte	ls
 8009c10:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009c14:	327c      	addls	r2, #124	; 0x7c
 8009c16:	227e      	movhi	r2, #126	; 0x7e
 8009c18:	e7cf      	b.n	8009bba <_malloc_r+0x27a>
 8009c1a:	f8de e008 	ldr.w	lr, [lr, #8]
 8009c1e:	45f0      	cmp	r8, lr
 8009c20:	d005      	beq.n	8009c2e <_malloc_r+0x2ee>
 8009c22:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009c26:	f022 0203 	bic.w	r2, r2, #3
 8009c2a:	4562      	cmp	r2, ip
 8009c2c:	d8f5      	bhi.n	8009c1a <_malloc_r+0x2da>
 8009c2e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009c32:	e7d1      	b.n	8009bd8 <_malloc_r+0x298>
 8009c34:	6860      	ldr	r0, [r4, #4]
 8009c36:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8009c3a:	f020 0003 	bic.w	r0, r0, #3
 8009c3e:	eba0 0a05 	sub.w	sl, r0, r5
 8009c42:	f1ba 0f0f 	cmp.w	sl, #15
 8009c46:	dd21      	ble.n	8009c8c <_malloc_r+0x34c>
 8009c48:	68a2      	ldr	r2, [r4, #8]
 8009c4a:	1963      	adds	r3, r4, r5
 8009c4c:	f045 0501 	orr.w	r5, r5, #1
 8009c50:	6065      	str	r5, [r4, #4]
 8009c52:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009c56:	f8ce 2008 	str.w	r2, [lr, #8]
 8009c5a:	f04a 0201 	orr.w	r2, sl, #1
 8009c5e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8009c62:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009c66:	605a      	str	r2, [r3, #4]
 8009c68:	f844 a000 	str.w	sl, [r4, r0]
 8009c6c:	e699      	b.n	80099a2 <_malloc_r+0x62>
 8009c6e:	bf00      	nop
 8009c70:	200005ac 	.word	0x200005ac
 8009c74:	200005b4 	.word	0x200005b4
 8009c78:	20000d9c 	.word	0x20000d9c
 8009c7c:	200009b4 	.word	0x200009b4
 8009c80:	20000d94 	.word	0x20000d94
 8009c84:	20000d98 	.word	0x20000d98
 8009c88:	20000d6c 	.word	0x20000d6c
 8009c8c:	f1ba 0f00 	cmp.w	sl, #0
 8009c90:	db11      	blt.n	8009cb6 <_malloc_r+0x376>
 8009c92:	4420      	add	r0, r4
 8009c94:	6843      	ldr	r3, [r0, #4]
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	6043      	str	r3, [r0, #4]
 8009c9c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f8c3 e00c 	str.w	lr, [r3, #12]
 8009ca6:	f8ce 3008 	str.w	r3, [lr, #8]
 8009caa:	f000 f89f 	bl	8009dec <__malloc_unlock>
 8009cae:	4620      	mov	r0, r4
 8009cb0:	b003      	add	sp, #12
 8009cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb6:	4674      	mov	r4, lr
 8009cb8:	e70a      	b.n	8009ad0 <_malloc_r+0x190>
 8009cba:	f1ac 0008 	sub.w	r0, ip, #8
 8009cbe:	f8dc c000 	ldr.w	ip, [ip]
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	4584      	cmp	ip, r0
 8009cc6:	f43f af0d 	beq.w	8009ae4 <_malloc_r+0x1a4>
 8009cca:	e712      	b.n	8009af2 <_malloc_r+0x1b2>
 8009ccc:	3304      	adds	r3, #4
 8009cce:	0052      	lsls	r2, r2, #1
 8009cd0:	4210      	tst	r0, r2
 8009cd2:	d0fb      	beq.n	8009ccc <_malloc_r+0x38c>
 8009cd4:	e6f6      	b.n	8009ac4 <_malloc_r+0x184>
 8009cd6:	4643      	mov	r3, r8
 8009cd8:	e7fa      	b.n	8009cd0 <_malloc_r+0x390>
 8009cda:	6818      	ldr	r0, [r3, #0]
 8009cdc:	9200      	str	r2, [sp, #0]
 8009cde:	3001      	adds	r0, #1
 8009ce0:	bf1b      	ittet	ne
 8009ce2:	ebab 0101 	subne.w	r1, fp, r1
 8009ce6:	4471      	addne	r1, lr
 8009ce8:	f8c3 b000 	streq.w	fp, [r3]
 8009cec:	f8c9 1000 	strne.w	r1, [r9]
 8009cf0:	f01b 0307 	ands.w	r3, fp, #7
 8009cf4:	bf1c      	itt	ne
 8009cf6:	f1c3 0308 	rsbne	r3, r3, #8
 8009cfa:	449b      	addne	fp, r3
 8009cfc:	445c      	add	r4, fp
 8009cfe:	4498      	add	r8, r3
 8009d00:	ea04 030c 	and.w	r3, r4, ip
 8009d04:	eba8 0803 	sub.w	r8, r8, r3
 8009d08:	4641      	mov	r1, r8
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f000 fb8c 	bl	800a428 <_sbrk_r>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	bf04      	itt	eq
 8009d14:	4658      	moveq	r0, fp
 8009d16:	f04f 0800 	moveq.w	r8, #0
 8009d1a:	f8d9 3000 	ldr.w	r3, [r9]
 8009d1e:	eba0 000b 	sub.w	r0, r0, fp
 8009d22:	4440      	add	r0, r8
 8009d24:	4443      	add	r3, r8
 8009d26:	f040 0001 	orr.w	r0, r0, #1
 8009d2a:	45ba      	cmp	sl, r7
 8009d2c:	f8c7 b008 	str.w	fp, [r7, #8]
 8009d30:	9a00      	ldr	r2, [sp, #0]
 8009d32:	f8c9 3000 	str.w	r3, [r9]
 8009d36:	f8cb 0004 	str.w	r0, [fp, #4]
 8009d3a:	f43f af2a 	beq.w	8009b92 <_malloc_r+0x252>
 8009d3e:	2a0f      	cmp	r2, #15
 8009d40:	d810      	bhi.n	8009d64 <_malloc_r+0x424>
 8009d42:	2301      	movs	r3, #1
 8009d44:	f8cb 3004 	str.w	r3, [fp, #4]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	f022 0203 	bic.w	r2, r2, #3
 8009d50:	42aa      	cmp	r2, r5
 8009d52:	eba2 0305 	sub.w	r3, r2, r5
 8009d56:	d301      	bcc.n	8009d5c <_malloc_r+0x41c>
 8009d58:	2b0f      	cmp	r3, #15
 8009d5a:	dc1c      	bgt.n	8009d96 <_malloc_r+0x456>
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f000 f845 	bl	8009dec <__malloc_unlock>
 8009d62:	e5f9      	b.n	8009958 <_malloc_r+0x18>
 8009d64:	f1a2 040c 	sub.w	r4, r2, #12
 8009d68:	2205      	movs	r2, #5
 8009d6a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009d6e:	f024 0407 	bic.w	r4, r4, #7
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	4323      	orrs	r3, r4
 8009d78:	f8ca 3004 	str.w	r3, [sl, #4]
 8009d7c:	2c0f      	cmp	r4, #15
 8009d7e:	eb0a 0304 	add.w	r3, sl, r4
 8009d82:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8009d86:	f67f af04 	bls.w	8009b92 <_malloc_r+0x252>
 8009d8a:	f10a 0108 	add.w	r1, sl, #8
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f7ff fc7e 	bl	8009690 <_free_r>
 8009d94:	e6fd      	b.n	8009b92 <_malloc_r+0x252>
 8009d96:	68bc      	ldr	r4, [r7, #8]
 8009d98:	f045 0201 	orr.w	r2, r5, #1
 8009d9c:	f043 0301 	orr.w	r3, r3, #1
 8009da0:	4425      	add	r5, r4
 8009da2:	6062      	str	r2, [r4, #4]
 8009da4:	60bd      	str	r5, [r7, #8]
 8009da6:	606b      	str	r3, [r5, #4]
 8009da8:	e5fb      	b.n	80099a2 <_malloc_r+0x62>
 8009daa:	bf00      	nop

08009dac <memchr>:
 8009dac:	b510      	push	{r4, lr}
 8009dae:	b2c9      	uxtb	r1, r1
 8009db0:	4402      	add	r2, r0
 8009db2:	4290      	cmp	r0, r2
 8009db4:	4603      	mov	r3, r0
 8009db6:	d101      	bne.n	8009dbc <memchr+0x10>
 8009db8:	2300      	movs	r3, #0
 8009dba:	e003      	b.n	8009dc4 <memchr+0x18>
 8009dbc:	781c      	ldrb	r4, [r3, #0]
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	428c      	cmp	r4, r1
 8009dc2:	d1f6      	bne.n	8009db2 <memchr+0x6>
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	bd10      	pop	{r4, pc}

08009dc8 <memcpy>:
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	1e43      	subs	r3, r0, #1
 8009dcc:	440a      	add	r2, r1
 8009dce:	4291      	cmp	r1, r2
 8009dd0:	d100      	bne.n	8009dd4 <memcpy+0xc>
 8009dd2:	bd10      	pop	{r4, pc}
 8009dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ddc:	e7f7      	b.n	8009dce <memcpy+0x6>
	...

08009de0 <__malloc_lock>:
 8009de0:	4801      	ldr	r0, [pc, #4]	; (8009de8 <__malloc_lock+0x8>)
 8009de2:	f7ff bd3f 	b.w	8009864 <__retarget_lock_acquire_recursive>
 8009de6:	bf00      	nop
 8009de8:	20001dd4 	.word	0x20001dd4

08009dec <__malloc_unlock>:
 8009dec:	4801      	ldr	r0, [pc, #4]	; (8009df4 <__malloc_unlock+0x8>)
 8009dee:	f7ff bd3a 	b.w	8009866 <__retarget_lock_release_recursive>
 8009df2:	bf00      	nop
 8009df4:	20001dd4 	.word	0x20001dd4

08009df8 <_Balloc>:
 8009df8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009dfa:	b570      	push	{r4, r5, r6, lr}
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	b17b      	cbz	r3, 8009e22 <_Balloc+0x2a>
 8009e02:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009e04:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009e08:	b9a0      	cbnz	r0, 8009e34 <_Balloc+0x3c>
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	fa01 f604 	lsl.w	r6, r1, r4
 8009e10:	1d72      	adds	r2, r6, #5
 8009e12:	0092      	lsls	r2, r2, #2
 8009e14:	4628      	mov	r0, r5
 8009e16:	f000 fc5f 	bl	800a6d8 <_calloc_r>
 8009e1a:	b148      	cbz	r0, 8009e30 <_Balloc+0x38>
 8009e1c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8009e20:	e00b      	b.n	8009e3a <_Balloc+0x42>
 8009e22:	2221      	movs	r2, #33	; 0x21
 8009e24:	2104      	movs	r1, #4
 8009e26:	f000 fc57 	bl	800a6d8 <_calloc_r>
 8009e2a:	64e8      	str	r0, [r5, #76]	; 0x4c
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d1e8      	bne.n	8009e02 <_Balloc+0xa>
 8009e30:	2000      	movs	r0, #0
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	6802      	ldr	r2, [r0, #0]
 8009e36:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e40:	e7f7      	b.n	8009e32 <_Balloc+0x3a>

08009e42 <_Bfree>:
 8009e42:	b131      	cbz	r1, 8009e52 <_Bfree+0x10>
 8009e44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009e46:	684a      	ldr	r2, [r1, #4]
 8009e48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009e4c:	6008      	str	r0, [r1, #0]
 8009e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009e52:	4770      	bx	lr

08009e54 <__multadd>:
 8009e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e58:	461f      	mov	r7, r3
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	2300      	movs	r3, #0
 8009e60:	690d      	ldr	r5, [r1, #16]
 8009e62:	f101 0c14 	add.w	ip, r1, #20
 8009e66:	f8dc 0000 	ldr.w	r0, [ip]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	b281      	uxth	r1, r0
 8009e6e:	fb02 7101 	mla	r1, r2, r1, r7
 8009e72:	0c00      	lsrs	r0, r0, #16
 8009e74:	0c0f      	lsrs	r7, r1, #16
 8009e76:	fb02 7000 	mla	r0, r2, r0, r7
 8009e7a:	b289      	uxth	r1, r1
 8009e7c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009e80:	429d      	cmp	r5, r3
 8009e82:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009e86:	f84c 1b04 	str.w	r1, [ip], #4
 8009e8a:	dcec      	bgt.n	8009e66 <__multadd+0x12>
 8009e8c:	b1d7      	cbz	r7, 8009ec4 <__multadd+0x70>
 8009e8e:	68a3      	ldr	r3, [r4, #8]
 8009e90:	42ab      	cmp	r3, r5
 8009e92:	dc12      	bgt.n	8009eba <__multadd+0x66>
 8009e94:	6861      	ldr	r1, [r4, #4]
 8009e96:	4630      	mov	r0, r6
 8009e98:	3101      	adds	r1, #1
 8009e9a:	f7ff ffad 	bl	8009df8 <_Balloc>
 8009e9e:	4680      	mov	r8, r0
 8009ea0:	6922      	ldr	r2, [r4, #16]
 8009ea2:	f104 010c 	add.w	r1, r4, #12
 8009ea6:	3202      	adds	r2, #2
 8009ea8:	0092      	lsls	r2, r2, #2
 8009eaa:	300c      	adds	r0, #12
 8009eac:	f7ff ff8c 	bl	8009dc8 <memcpy>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7ff ffc5 	bl	8009e42 <_Bfree>
 8009eb8:	4644      	mov	r4, r8
 8009eba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ebe:	3501      	adds	r5, #1
 8009ec0:	615f      	str	r7, [r3, #20]
 8009ec2:	6125      	str	r5, [r4, #16]
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009eca <__hi0bits>:
 8009eca:	0c02      	lsrs	r2, r0, #16
 8009ecc:	0412      	lsls	r2, r2, #16
 8009ece:	4603      	mov	r3, r0
 8009ed0:	b9b2      	cbnz	r2, 8009f00 <__hi0bits+0x36>
 8009ed2:	0403      	lsls	r3, r0, #16
 8009ed4:	2010      	movs	r0, #16
 8009ed6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009eda:	bf04      	itt	eq
 8009edc:	021b      	lsleq	r3, r3, #8
 8009ede:	3008      	addeq	r0, #8
 8009ee0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009ee4:	bf04      	itt	eq
 8009ee6:	011b      	lsleq	r3, r3, #4
 8009ee8:	3004      	addeq	r0, #4
 8009eea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009eee:	bf04      	itt	eq
 8009ef0:	009b      	lsleq	r3, r3, #2
 8009ef2:	3002      	addeq	r0, #2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	db06      	blt.n	8009f06 <__hi0bits+0x3c>
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	d503      	bpl.n	8009f04 <__hi0bits+0x3a>
 8009efc:	3001      	adds	r0, #1
 8009efe:	4770      	bx	lr
 8009f00:	2000      	movs	r0, #0
 8009f02:	e7e8      	b.n	8009ed6 <__hi0bits+0xc>
 8009f04:	2020      	movs	r0, #32
 8009f06:	4770      	bx	lr

08009f08 <__lo0bits>:
 8009f08:	6803      	ldr	r3, [r0, #0]
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	f013 0207 	ands.w	r2, r3, #7
 8009f10:	d00b      	beq.n	8009f2a <__lo0bits+0x22>
 8009f12:	07da      	lsls	r2, r3, #31
 8009f14:	d423      	bmi.n	8009f5e <__lo0bits+0x56>
 8009f16:	0798      	lsls	r0, r3, #30
 8009f18:	bf49      	itett	mi
 8009f1a:	085b      	lsrmi	r3, r3, #1
 8009f1c:	089b      	lsrpl	r3, r3, #2
 8009f1e:	2001      	movmi	r0, #1
 8009f20:	600b      	strmi	r3, [r1, #0]
 8009f22:	bf5c      	itt	pl
 8009f24:	600b      	strpl	r3, [r1, #0]
 8009f26:	2002      	movpl	r0, #2
 8009f28:	4770      	bx	lr
 8009f2a:	b298      	uxth	r0, r3
 8009f2c:	b9a8      	cbnz	r0, 8009f5a <__lo0bits+0x52>
 8009f2e:	2010      	movs	r0, #16
 8009f30:	0c1b      	lsrs	r3, r3, #16
 8009f32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009f36:	bf04      	itt	eq
 8009f38:	0a1b      	lsreq	r3, r3, #8
 8009f3a:	3008      	addeq	r0, #8
 8009f3c:	071a      	lsls	r2, r3, #28
 8009f3e:	bf04      	itt	eq
 8009f40:	091b      	lsreq	r3, r3, #4
 8009f42:	3004      	addeq	r0, #4
 8009f44:	079a      	lsls	r2, r3, #30
 8009f46:	bf04      	itt	eq
 8009f48:	089b      	lsreq	r3, r3, #2
 8009f4a:	3002      	addeq	r0, #2
 8009f4c:	07da      	lsls	r2, r3, #31
 8009f4e:	d402      	bmi.n	8009f56 <__lo0bits+0x4e>
 8009f50:	085b      	lsrs	r3, r3, #1
 8009f52:	d006      	beq.n	8009f62 <__lo0bits+0x5a>
 8009f54:	3001      	adds	r0, #1
 8009f56:	600b      	str	r3, [r1, #0]
 8009f58:	4770      	bx	lr
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	e7e9      	b.n	8009f32 <__lo0bits+0x2a>
 8009f5e:	2000      	movs	r0, #0
 8009f60:	4770      	bx	lr
 8009f62:	2020      	movs	r0, #32
 8009f64:	4770      	bx	lr

08009f66 <__i2b>:
 8009f66:	b510      	push	{r4, lr}
 8009f68:	460c      	mov	r4, r1
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	f7ff ff44 	bl	8009df8 <_Balloc>
 8009f70:	2201      	movs	r2, #1
 8009f72:	6144      	str	r4, [r0, #20]
 8009f74:	6102      	str	r2, [r0, #16]
 8009f76:	bd10      	pop	{r4, pc}

08009f78 <__multiply>:
 8009f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	690a      	ldr	r2, [r1, #16]
 8009f80:	6923      	ldr	r3, [r4, #16]
 8009f82:	4688      	mov	r8, r1
 8009f84:	429a      	cmp	r2, r3
 8009f86:	bfbe      	ittt	lt
 8009f88:	460b      	movlt	r3, r1
 8009f8a:	46a0      	movlt	r8, r4
 8009f8c:	461c      	movlt	r4, r3
 8009f8e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f92:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009f96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f9a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f9e:	eb07 0609 	add.w	r6, r7, r9
 8009fa2:	42b3      	cmp	r3, r6
 8009fa4:	bfb8      	it	lt
 8009fa6:	3101      	addlt	r1, #1
 8009fa8:	f7ff ff26 	bl	8009df8 <_Balloc>
 8009fac:	f100 0514 	add.w	r5, r0, #20
 8009fb0:	462b      	mov	r3, r5
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009fb8:	4573      	cmp	r3, lr
 8009fba:	d316      	bcc.n	8009fea <__multiply+0x72>
 8009fbc:	f104 0214 	add.w	r2, r4, #20
 8009fc0:	f108 0114 	add.w	r1, r8, #20
 8009fc4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009fc8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	9b00      	ldr	r3, [sp, #0]
 8009fd0:	9201      	str	r2, [sp, #4]
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d80c      	bhi.n	8009ff0 <__multiply+0x78>
 8009fd6:	2e00      	cmp	r6, #0
 8009fd8:	dd03      	ble.n	8009fe2 <__multiply+0x6a>
 8009fda:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d05d      	beq.n	800a09e <__multiply+0x126>
 8009fe2:	6106      	str	r6, [r0, #16]
 8009fe4:	b003      	add	sp, #12
 8009fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fea:	f843 2b04 	str.w	r2, [r3], #4
 8009fee:	e7e3      	b.n	8009fb8 <__multiply+0x40>
 8009ff0:	f8b2 b000 	ldrh.w	fp, [r2]
 8009ff4:	f1bb 0f00 	cmp.w	fp, #0
 8009ff8:	d023      	beq.n	800a042 <__multiply+0xca>
 8009ffa:	4689      	mov	r9, r1
 8009ffc:	46ac      	mov	ip, r5
 8009ffe:	f04f 0800 	mov.w	r8, #0
 800a002:	f859 4b04 	ldr.w	r4, [r9], #4
 800a006:	f8dc a000 	ldr.w	sl, [ip]
 800a00a:	b2a3      	uxth	r3, r4
 800a00c:	fa1f fa8a 	uxth.w	sl, sl
 800a010:	fb0b a303 	mla	r3, fp, r3, sl
 800a014:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a018:	f8dc 4000 	ldr.w	r4, [ip]
 800a01c:	4443      	add	r3, r8
 800a01e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a022:	fb0b 840a 	mla	r4, fp, sl, r8
 800a026:	46e2      	mov	sl, ip
 800a028:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a032:	454f      	cmp	r7, r9
 800a034:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a038:	f84a 3b04 	str.w	r3, [sl], #4
 800a03c:	d82b      	bhi.n	800a096 <__multiply+0x11e>
 800a03e:	f8cc 8004 	str.w	r8, [ip, #4]
 800a042:	9b01      	ldr	r3, [sp, #4]
 800a044:	3204      	adds	r2, #4
 800a046:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a04a:	f1ba 0f00 	cmp.w	sl, #0
 800a04e:	d020      	beq.n	800a092 <__multiply+0x11a>
 800a050:	4689      	mov	r9, r1
 800a052:	46a8      	mov	r8, r5
 800a054:	f04f 0b00 	mov.w	fp, #0
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	f8b9 c000 	ldrh.w	ip, [r9]
 800a05e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a062:	b29b      	uxth	r3, r3
 800a064:	fb0a 440c 	mla	r4, sl, ip, r4
 800a068:	46c4      	mov	ip, r8
 800a06a:	445c      	add	r4, fp
 800a06c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a070:	f84c 3b04 	str.w	r3, [ip], #4
 800a074:	f859 3b04 	ldr.w	r3, [r9], #4
 800a078:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a07c:	0c1b      	lsrs	r3, r3, #16
 800a07e:	fb0a b303 	mla	r3, sl, r3, fp
 800a082:	454f      	cmp	r7, r9
 800a084:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a088:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a08c:	d805      	bhi.n	800a09a <__multiply+0x122>
 800a08e:	f8c8 3004 	str.w	r3, [r8, #4]
 800a092:	3504      	adds	r5, #4
 800a094:	e79b      	b.n	8009fce <__multiply+0x56>
 800a096:	46d4      	mov	ip, sl
 800a098:	e7b3      	b.n	800a002 <__multiply+0x8a>
 800a09a:	46e0      	mov	r8, ip
 800a09c:	e7dd      	b.n	800a05a <__multiply+0xe2>
 800a09e:	3e01      	subs	r6, #1
 800a0a0:	e799      	b.n	8009fd6 <__multiply+0x5e>
	...

0800a0a4 <__pow5mult>:
 800a0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a8:	4615      	mov	r5, r2
 800a0aa:	f012 0203 	ands.w	r2, r2, #3
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	460f      	mov	r7, r1
 800a0b2:	d007      	beq.n	800a0c4 <__pow5mult+0x20>
 800a0b4:	4c1a      	ldr	r4, [pc, #104]	; (800a120 <__pow5mult+0x7c>)
 800a0b6:	3a01      	subs	r2, #1
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0be:	f7ff fec9 	bl	8009e54 <__multadd>
 800a0c2:	4607      	mov	r7, r0
 800a0c4:	10ad      	asrs	r5, r5, #2
 800a0c6:	d027      	beq.n	800a118 <__pow5mult+0x74>
 800a0c8:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800a0ca:	b944      	cbnz	r4, 800a0de <__pow5mult+0x3a>
 800a0cc:	f240 2171 	movw	r1, #625	; 0x271
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f7ff ff48 	bl	8009f66 <__i2b>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4604      	mov	r4, r0
 800a0da:	64b0      	str	r0, [r6, #72]	; 0x48
 800a0dc:	6003      	str	r3, [r0, #0]
 800a0de:	f04f 0800 	mov.w	r8, #0
 800a0e2:	07eb      	lsls	r3, r5, #31
 800a0e4:	d50a      	bpl.n	800a0fc <__pow5mult+0x58>
 800a0e6:	4639      	mov	r1, r7
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7ff ff44 	bl	8009f78 <__multiply>
 800a0f0:	4681      	mov	r9, r0
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f7ff fea4 	bl	8009e42 <_Bfree>
 800a0fa:	464f      	mov	r7, r9
 800a0fc:	106d      	asrs	r5, r5, #1
 800a0fe:	d00b      	beq.n	800a118 <__pow5mult+0x74>
 800a100:	6820      	ldr	r0, [r4, #0]
 800a102:	b938      	cbnz	r0, 800a114 <__pow5mult+0x70>
 800a104:	4622      	mov	r2, r4
 800a106:	4621      	mov	r1, r4
 800a108:	4630      	mov	r0, r6
 800a10a:	f7ff ff35 	bl	8009f78 <__multiply>
 800a10e:	6020      	str	r0, [r4, #0]
 800a110:	f8c0 8000 	str.w	r8, [r0]
 800a114:	4604      	mov	r4, r0
 800a116:	e7e4      	b.n	800a0e2 <__pow5mult+0x3e>
 800a118:	4638      	mov	r0, r7
 800a11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a11e:	bf00      	nop
 800a120:	0800b2d8 	.word	0x0800b2d8

0800a124 <__lshift>:
 800a124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a128:	460c      	mov	r4, r1
 800a12a:	4607      	mov	r7, r0
 800a12c:	4616      	mov	r6, r2
 800a12e:	6923      	ldr	r3, [r4, #16]
 800a130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a134:	eb0a 0903 	add.w	r9, sl, r3
 800a138:	6849      	ldr	r1, [r1, #4]
 800a13a:	68a3      	ldr	r3, [r4, #8]
 800a13c:	f109 0501 	add.w	r5, r9, #1
 800a140:	42ab      	cmp	r3, r5
 800a142:	db32      	blt.n	800a1aa <__lshift+0x86>
 800a144:	4638      	mov	r0, r7
 800a146:	f7ff fe57 	bl	8009df8 <_Balloc>
 800a14a:	2300      	movs	r3, #0
 800a14c:	4680      	mov	r8, r0
 800a14e:	461a      	mov	r2, r3
 800a150:	f100 0114 	add.w	r1, r0, #20
 800a154:	4553      	cmp	r3, sl
 800a156:	db2b      	blt.n	800a1b0 <__lshift+0x8c>
 800a158:	6920      	ldr	r0, [r4, #16]
 800a15a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a15e:	f104 0314 	add.w	r3, r4, #20
 800a162:	f016 021f 	ands.w	r2, r6, #31
 800a166:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a16a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a16e:	d025      	beq.n	800a1bc <__lshift+0x98>
 800a170:	2000      	movs	r0, #0
 800a172:	f1c2 0e20 	rsb	lr, r2, #32
 800a176:	468a      	mov	sl, r1
 800a178:	681e      	ldr	r6, [r3, #0]
 800a17a:	4096      	lsls	r6, r2
 800a17c:	4330      	orrs	r0, r6
 800a17e:	f84a 0b04 	str.w	r0, [sl], #4
 800a182:	f853 0b04 	ldr.w	r0, [r3], #4
 800a186:	459c      	cmp	ip, r3
 800a188:	fa20 f00e 	lsr.w	r0, r0, lr
 800a18c:	d814      	bhi.n	800a1b8 <__lshift+0x94>
 800a18e:	6048      	str	r0, [r1, #4]
 800a190:	b108      	cbz	r0, 800a196 <__lshift+0x72>
 800a192:	f109 0502 	add.w	r5, r9, #2
 800a196:	3d01      	subs	r5, #1
 800a198:	4638      	mov	r0, r7
 800a19a:	f8c8 5010 	str.w	r5, [r8, #16]
 800a19e:	4621      	mov	r1, r4
 800a1a0:	f7ff fe4f 	bl	8009e42 <_Bfree>
 800a1a4:	4640      	mov	r0, r8
 800a1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1aa:	3101      	adds	r1, #1
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	e7c7      	b.n	800a140 <__lshift+0x1c>
 800a1b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	e7cd      	b.n	800a154 <__lshift+0x30>
 800a1b8:	4651      	mov	r1, sl
 800a1ba:	e7dc      	b.n	800a176 <__lshift+0x52>
 800a1bc:	3904      	subs	r1, #4
 800a1be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c2:	459c      	cmp	ip, r3
 800a1c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1c8:	d8f9      	bhi.n	800a1be <__lshift+0x9a>
 800a1ca:	e7e4      	b.n	800a196 <__lshift+0x72>

0800a1cc <__mcmp>:
 800a1cc:	6903      	ldr	r3, [r0, #16]
 800a1ce:	690a      	ldr	r2, [r1, #16]
 800a1d0:	b530      	push	{r4, r5, lr}
 800a1d2:	1a9b      	subs	r3, r3, r2
 800a1d4:	d10c      	bne.n	800a1f0 <__mcmp+0x24>
 800a1d6:	0092      	lsls	r2, r2, #2
 800a1d8:	3014      	adds	r0, #20
 800a1da:	3114      	adds	r1, #20
 800a1dc:	1884      	adds	r4, r0, r2
 800a1de:	4411      	add	r1, r2
 800a1e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a1e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a1e8:	4295      	cmp	r5, r2
 800a1ea:	d003      	beq.n	800a1f4 <__mcmp+0x28>
 800a1ec:	d305      	bcc.n	800a1fa <__mcmp+0x2e>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	bd30      	pop	{r4, r5, pc}
 800a1f4:	42a0      	cmp	r0, r4
 800a1f6:	d3f3      	bcc.n	800a1e0 <__mcmp+0x14>
 800a1f8:	e7fa      	b.n	800a1f0 <__mcmp+0x24>
 800a1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fe:	e7f7      	b.n	800a1f0 <__mcmp+0x24>

0800a200 <__mdiff>:
 800a200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a204:	460d      	mov	r5, r1
 800a206:	4607      	mov	r7, r0
 800a208:	4611      	mov	r1, r2
 800a20a:	4628      	mov	r0, r5
 800a20c:	4614      	mov	r4, r2
 800a20e:	f7ff ffdd 	bl	800a1cc <__mcmp>
 800a212:	1e06      	subs	r6, r0, #0
 800a214:	d108      	bne.n	800a228 <__mdiff+0x28>
 800a216:	4631      	mov	r1, r6
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff fded 	bl	8009df8 <_Balloc>
 800a21e:	2301      	movs	r3, #1
 800a220:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a228:	bfa4      	itt	ge
 800a22a:	4623      	movge	r3, r4
 800a22c:	462c      	movge	r4, r5
 800a22e:	4638      	mov	r0, r7
 800a230:	6861      	ldr	r1, [r4, #4]
 800a232:	bfa6      	itte	ge
 800a234:	461d      	movge	r5, r3
 800a236:	2600      	movge	r6, #0
 800a238:	2601      	movlt	r6, #1
 800a23a:	f7ff fddd 	bl	8009df8 <_Balloc>
 800a23e:	f04f 0e00 	mov.w	lr, #0
 800a242:	60c6      	str	r6, [r0, #12]
 800a244:	692b      	ldr	r3, [r5, #16]
 800a246:	6926      	ldr	r6, [r4, #16]
 800a248:	f104 0214 	add.w	r2, r4, #20
 800a24c:	f105 0914 	add.w	r9, r5, #20
 800a250:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a254:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a258:	f100 0114 	add.w	r1, r0, #20
 800a25c:	f852 ab04 	ldr.w	sl, [r2], #4
 800a260:	f859 5b04 	ldr.w	r5, [r9], #4
 800a264:	fa1f f38a 	uxth.w	r3, sl
 800a268:	4473      	add	r3, lr
 800a26a:	b2ac      	uxth	r4, r5
 800a26c:	1b1b      	subs	r3, r3, r4
 800a26e:	0c2c      	lsrs	r4, r5, #16
 800a270:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a274:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a278:	b29b      	uxth	r3, r3
 800a27a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a27e:	45c8      	cmp	r8, r9
 800a280:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a284:	4694      	mov	ip, r2
 800a286:	f841 4b04 	str.w	r4, [r1], #4
 800a28a:	d8e7      	bhi.n	800a25c <__mdiff+0x5c>
 800a28c:	45bc      	cmp	ip, r7
 800a28e:	d304      	bcc.n	800a29a <__mdiff+0x9a>
 800a290:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a294:	b183      	cbz	r3, 800a2b8 <__mdiff+0xb8>
 800a296:	6106      	str	r6, [r0, #16]
 800a298:	e7c4      	b.n	800a224 <__mdiff+0x24>
 800a29a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a29e:	b2a2      	uxth	r2, r4
 800a2a0:	4472      	add	r2, lr
 800a2a2:	1413      	asrs	r3, r2, #16
 800a2a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a2a8:	b292      	uxth	r2, r2
 800a2aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a2ae:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a2b2:	f841 2b04 	str.w	r2, [r1], #4
 800a2b6:	e7e9      	b.n	800a28c <__mdiff+0x8c>
 800a2b8:	3e01      	subs	r6, #1
 800a2ba:	e7e9      	b.n	800a290 <__mdiff+0x90>

0800a2bc <__d2b>:
 800a2bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a2c0:	461c      	mov	r4, r3
 800a2c2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	4690      	mov	r8, r2
 800a2ca:	f7ff fd95 	bl	8009df8 <_Balloc>
 800a2ce:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a2d2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	bb34      	cbnz	r4, 800a328 <__d2b+0x6c>
 800a2da:	9201      	str	r2, [sp, #4]
 800a2dc:	f1b8 0200 	subs.w	r2, r8, #0
 800a2e0:	d027      	beq.n	800a332 <__d2b+0x76>
 800a2e2:	a802      	add	r0, sp, #8
 800a2e4:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a2e8:	f7ff fe0e 	bl	8009f08 <__lo0bits>
 800a2ec:	9900      	ldr	r1, [sp, #0]
 800a2ee:	b1f0      	cbz	r0, 800a32e <__d2b+0x72>
 800a2f0:	9a01      	ldr	r2, [sp, #4]
 800a2f2:	f1c0 0320 	rsb	r3, r0, #32
 800a2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	40c2      	lsrs	r2, r0
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	9201      	str	r2, [sp, #4]
 800a302:	9b01      	ldr	r3, [sp, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	bf14      	ite	ne
 800a308:	2102      	movne	r1, #2
 800a30a:	2101      	moveq	r1, #1
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	6139      	str	r1, [r7, #16]
 800a310:	b1c4      	cbz	r4, 800a344 <__d2b+0x88>
 800a312:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a316:	4404      	add	r4, r0
 800a318:	6034      	str	r4, [r6, #0]
 800a31a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a31e:	6028      	str	r0, [r5, #0]
 800a320:	4638      	mov	r0, r7
 800a322:	b002      	add	sp, #8
 800a324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a328:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a32c:	e7d5      	b.n	800a2da <__d2b+0x1e>
 800a32e:	6179      	str	r1, [r7, #20]
 800a330:	e7e7      	b.n	800a302 <__d2b+0x46>
 800a332:	a801      	add	r0, sp, #4
 800a334:	f7ff fde8 	bl	8009f08 <__lo0bits>
 800a338:	2101      	movs	r1, #1
 800a33a:	9b01      	ldr	r3, [sp, #4]
 800a33c:	6139      	str	r1, [r7, #16]
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	3020      	adds	r0, #32
 800a342:	e7e5      	b.n	800a310 <__d2b+0x54>
 800a344:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a348:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a34c:	6030      	str	r0, [r6, #0]
 800a34e:	6918      	ldr	r0, [r3, #16]
 800a350:	f7ff fdbb 	bl	8009eca <__hi0bits>
 800a354:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a358:	e7e1      	b.n	800a31e <__d2b+0x62>

0800a35a <_putc_r>:
 800a35a:	b570      	push	{r4, r5, r6, lr}
 800a35c:	460d      	mov	r5, r1
 800a35e:	4614      	mov	r4, r2
 800a360:	4606      	mov	r6, r0
 800a362:	b118      	cbz	r0, 800a36c <_putc_r+0x12>
 800a364:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a366:	b90b      	cbnz	r3, 800a36c <_putc_r+0x12>
 800a368:	f7ff f902 	bl	8009570 <__sinit>
 800a36c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a36e:	07d8      	lsls	r0, r3, #31
 800a370:	d405      	bmi.n	800a37e <_putc_r+0x24>
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	0599      	lsls	r1, r3, #22
 800a376:	d402      	bmi.n	800a37e <_putc_r+0x24>
 800a378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a37a:	f7ff fa73 	bl	8009864 <__retarget_lock_acquire_recursive>
 800a37e:	68a3      	ldr	r3, [r4, #8]
 800a380:	3b01      	subs	r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	60a3      	str	r3, [r4, #8]
 800a386:	da05      	bge.n	800a394 <_putc_r+0x3a>
 800a388:	69a2      	ldr	r2, [r4, #24]
 800a38a:	4293      	cmp	r3, r2
 800a38c:	db12      	blt.n	800a3b4 <_putc_r+0x5a>
 800a38e:	b2eb      	uxtb	r3, r5
 800a390:	2b0a      	cmp	r3, #10
 800a392:	d00f      	beq.n	800a3b4 <_putc_r+0x5a>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	6022      	str	r2, [r4, #0]
 800a39a:	701d      	strb	r5, [r3, #0]
 800a39c:	b2ed      	uxtb	r5, r5
 800a39e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3a0:	07da      	lsls	r2, r3, #31
 800a3a2:	d405      	bmi.n	800a3b0 <_putc_r+0x56>
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	059b      	lsls	r3, r3, #22
 800a3a8:	d402      	bmi.n	800a3b0 <_putc_r+0x56>
 800a3aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ac:	f7ff fa5b 	bl	8009866 <__retarget_lock_release_recursive>
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f000 f8dc 	bl	800a576 <__swbuf_r>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	e7ed      	b.n	800a39e <_putc_r+0x44>
	...

0800a3c4 <frexp>:
 800a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c6:	4616      	mov	r6, r2
 800a3c8:	2700      	movs	r7, #0
 800a3ca:	6037      	str	r7, [r6, #0]
 800a3cc:	4f14      	ldr	r7, [pc, #80]	; (800a420 <frexp+0x5c>)
 800a3ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3d2:	42bb      	cmp	r3, r7
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	460a      	mov	r2, r1
 800a3da:	dc1e      	bgt.n	800a41a <frexp+0x56>
 800a3dc:	4607      	mov	r7, r0
 800a3de:	431f      	orrs	r7, r3
 800a3e0:	d01b      	beq.n	800a41a <frexp+0x56>
 800a3e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3e6:	da0a      	bge.n	800a3fe <frexp+0x3a>
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4b0e      	ldr	r3, [pc, #56]	; (800a424 <frexp+0x60>)
 800a3ec:	f7f6 f874 	bl	80004d8 <__aeabi_dmul>
 800a3f0:	460a      	mov	r2, r1
 800a3f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3f6:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	6031      	str	r1, [r6, #0]
 800a3fe:	6831      	ldr	r1, [r6, #0]
 800a400:	151b      	asrs	r3, r3, #20
 800a402:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a406:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a40a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800a40e:	440b      	add	r3, r1
 800a410:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a414:	6033      	str	r3, [r6, #0]
 800a416:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800a41a:	4620      	mov	r0, r4
 800a41c:	4629      	mov	r1, r5
 800a41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a420:	7fefffff 	.word	0x7fefffff
 800a424:	43500000 	.word	0x43500000

0800a428 <_sbrk_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	2300      	movs	r3, #0
 800a42c:	4c05      	ldr	r4, [pc, #20]	; (800a444 <_sbrk_r+0x1c>)
 800a42e:	4605      	mov	r5, r0
 800a430:	4608      	mov	r0, r1
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	f7f7 f85c 	bl	80014f0 <_sbrk>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_sbrk_r+0x1a>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_sbrk_r+0x1a>
 800a440:	602b      	str	r3, [r5, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20001ddc 	.word	0x20001ddc

0800a448 <__sread>:
 800a448:	b510      	push	{r4, lr}
 800a44a:	460c      	mov	r4, r1
 800a44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a450:	f000 fbfe 	bl	800ac50 <_read_r>
 800a454:	2800      	cmp	r0, #0
 800a456:	bfab      	itete	ge
 800a458:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800a45a:	89a3      	ldrhlt	r3, [r4, #12]
 800a45c:	181b      	addge	r3, r3, r0
 800a45e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a462:	bfac      	ite	ge
 800a464:	6523      	strge	r3, [r4, #80]	; 0x50
 800a466:	81a3      	strhlt	r3, [r4, #12]
 800a468:	bd10      	pop	{r4, pc}

0800a46a <__swrite>:
 800a46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a46e:	461f      	mov	r7, r3
 800a470:	898b      	ldrh	r3, [r1, #12]
 800a472:	4605      	mov	r5, r0
 800a474:	05db      	lsls	r3, r3, #23
 800a476:	460c      	mov	r4, r1
 800a478:	4616      	mov	r6, r2
 800a47a:	d505      	bpl.n	800a488 <__swrite+0x1e>
 800a47c:	2302      	movs	r3, #2
 800a47e:	2200      	movs	r2, #0
 800a480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a484:	f000 fba6 	bl	800abd4 <_lseek_r>
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	4632      	mov	r2, r6
 800a48c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a496:	463b      	mov	r3, r7
 800a498:	4628      	mov	r0, r5
 800a49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a49e:	f000 b8b3 	b.w	800a608 <_write_r>

0800a4a2 <__sseek>:
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4aa:	f000 fb93 	bl	800abd4 <_lseek_r>
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	bf15      	itete	ne
 800a4b4:	6520      	strne	r0, [r4, #80]	; 0x50
 800a4b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4be:	81a3      	strheq	r3, [r4, #12]
 800a4c0:	bf18      	it	ne
 800a4c2:	81a3      	strhne	r3, [r4, #12]
 800a4c4:	bd10      	pop	{r4, pc}

0800a4c6 <__sclose>:
 800a4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ca:	f000 b933 	b.w	800a734 <_close_r>

0800a4ce <strncpy>:
 800a4ce:	b570      	push	{r4, r5, r6, lr}
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	3901      	subs	r1, #1
 800a4d4:	b902      	cbnz	r2, 800a4d8 <strncpy+0xa>
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}
 800a4d8:	4623      	mov	r3, r4
 800a4da:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a4de:	1e56      	subs	r6, r2, #1
 800a4e0:	f803 5b01 	strb.w	r5, [r3], #1
 800a4e4:	b92d      	cbnz	r5, 800a4f2 <strncpy+0x24>
 800a4e6:	4414      	add	r4, r2
 800a4e8:	42a3      	cmp	r3, r4
 800a4ea:	d0f4      	beq.n	800a4d6 <strncpy+0x8>
 800a4ec:	f803 5b01 	strb.w	r5, [r3], #1
 800a4f0:	e7fa      	b.n	800a4e8 <strncpy+0x1a>
 800a4f2:	461c      	mov	r4, r3
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	e7ed      	b.n	800a4d4 <strncpy+0x6>

0800a4f8 <sysconf>:
 800a4f8:	2808      	cmp	r0, #8
 800a4fa:	b508      	push	{r3, lr}
 800a4fc:	d006      	beq.n	800a50c <sysconf+0x14>
 800a4fe:	f7fc fdb3 	bl	8007068 <__errno>
 800a502:	2316      	movs	r3, #22
 800a504:	6003      	str	r3, [r0, #0]
 800a506:	f04f 30ff 	mov.w	r0, #4294967295
 800a50a:	bd08      	pop	{r3, pc}
 800a50c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a510:	e7fb      	b.n	800a50a <sysconf+0x12>

0800a512 <__sprint_r>:
 800a512:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a516:	6893      	ldr	r3, [r2, #8]
 800a518:	4680      	mov	r8, r0
 800a51a:	460f      	mov	r7, r1
 800a51c:	4614      	mov	r4, r2
 800a51e:	b91b      	cbnz	r3, 800a528 <__sprint_r+0x16>
 800a520:	4618      	mov	r0, r3
 800a522:	6053      	str	r3, [r2, #4]
 800a524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a528:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a52a:	049d      	lsls	r5, r3, #18
 800a52c:	d520      	bpl.n	800a570 <__sprint_r+0x5e>
 800a52e:	6815      	ldr	r5, [r2, #0]
 800a530:	68a0      	ldr	r0, [r4, #8]
 800a532:	3508      	adds	r5, #8
 800a534:	b918      	cbnz	r0, 800a53e <__sprint_r+0x2c>
 800a536:	2300      	movs	r3, #0
 800a538:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800a53c:	e7f2      	b.n	800a524 <__sprint_r+0x12>
 800a53e:	f04f 0900 	mov.w	r9, #0
 800a542:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800a546:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800a54a:	45ca      	cmp	sl, r9
 800a54c:	dc05      	bgt.n	800a55a <__sprint_r+0x48>
 800a54e:	68a3      	ldr	r3, [r4, #8]
 800a550:	f026 0603 	bic.w	r6, r6, #3
 800a554:	1b9e      	subs	r6, r3, r6
 800a556:	60a6      	str	r6, [r4, #8]
 800a558:	e7ea      	b.n	800a530 <__sprint_r+0x1e>
 800a55a:	463a      	mov	r2, r7
 800a55c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800a560:	4640      	mov	r0, r8
 800a562:	f000 f98f 	bl	800a884 <_fputwc_r>
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	d0e5      	beq.n	800a536 <__sprint_r+0x24>
 800a56a:	f109 0901 	add.w	r9, r9, #1
 800a56e:	e7ec      	b.n	800a54a <__sprint_r+0x38>
 800a570:	f000 f9c4 	bl	800a8fc <__sfvwrite_r>
 800a574:	e7df      	b.n	800a536 <__sprint_r+0x24>

0800a576 <__swbuf_r>:
 800a576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a578:	460d      	mov	r5, r1
 800a57a:	4614      	mov	r4, r2
 800a57c:	4606      	mov	r6, r0
 800a57e:	b118      	cbz	r0, 800a588 <__swbuf_r+0x12>
 800a580:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a582:	b90b      	cbnz	r3, 800a588 <__swbuf_r+0x12>
 800a584:	f7fe fff4 	bl	8009570 <__sinit>
 800a588:	69a3      	ldr	r3, [r4, #24]
 800a58a:	60a3      	str	r3, [r4, #8]
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	0719      	lsls	r1, r3, #28
 800a590:	d528      	bpl.n	800a5e4 <__swbuf_r+0x6e>
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	b333      	cbz	r3, 800a5e4 <__swbuf_r+0x6e>
 800a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59a:	b2ed      	uxtb	r5, r5
 800a59c:	049a      	lsls	r2, r3, #18
 800a59e:	462f      	mov	r7, r5
 800a5a0:	d52a      	bpl.n	800a5f8 <__swbuf_r+0x82>
 800a5a2:	6923      	ldr	r3, [r4, #16]
 800a5a4:	6820      	ldr	r0, [r4, #0]
 800a5a6:	1ac0      	subs	r0, r0, r3
 800a5a8:	6963      	ldr	r3, [r4, #20]
 800a5aa:	4283      	cmp	r3, r0
 800a5ac:	dc04      	bgt.n	800a5b8 <__swbuf_r+0x42>
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7fe ff71 	bl	8009498 <_fflush_r>
 800a5b6:	b9d8      	cbnz	r0, 800a5f0 <__swbuf_r+0x7a>
 800a5b8:	68a3      	ldr	r3, [r4, #8]
 800a5ba:	3001      	adds	r0, #1
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	60a3      	str	r3, [r4, #8]
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	6022      	str	r2, [r4, #0]
 800a5c6:	701d      	strb	r5, [r3, #0]
 800a5c8:	6963      	ldr	r3, [r4, #20]
 800a5ca:	4283      	cmp	r3, r0
 800a5cc:	d004      	beq.n	800a5d8 <__swbuf_r+0x62>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	07db      	lsls	r3, r3, #31
 800a5d2:	d50f      	bpl.n	800a5f4 <__swbuf_r+0x7e>
 800a5d4:	2d0a      	cmp	r5, #10
 800a5d6:	d10d      	bne.n	800a5f4 <__swbuf_r+0x7e>
 800a5d8:	4621      	mov	r1, r4
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7fe ff5c 	bl	8009498 <_fflush_r>
 800a5e0:	b140      	cbz	r0, 800a5f4 <__swbuf_r+0x7e>
 800a5e2:	e005      	b.n	800a5f0 <__swbuf_r+0x7a>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f7fe f830 	bl	800864c <__swsetup_r>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d0d2      	beq.n	800a596 <__swbuf_r+0x20>
 800a5f0:	f04f 37ff 	mov.w	r7, #4294967295
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a5fc:	81a3      	strh	r3, [r4, #12]
 800a5fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a600:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a604:	6663      	str	r3, [r4, #100]	; 0x64
 800a606:	e7cc      	b.n	800a5a2 <__swbuf_r+0x2c>

0800a608 <_write_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4605      	mov	r5, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	4611      	mov	r1, r2
 800a610:	2200      	movs	r2, #0
 800a612:	4c05      	ldr	r4, [pc, #20]	; (800a628 <_write_r+0x20>)
 800a614:	6022      	str	r2, [r4, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	f7f6 ff1d 	bl	8001456 <_write>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_write_r+0x1e>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	b103      	cbz	r3, 800a626 <_write_r+0x1e>
 800a624:	602b      	str	r3, [r5, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	20001ddc 	.word	0x20001ddc

0800a62c <__register_exitproc>:
 800a62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a630:	4c26      	ldr	r4, [pc, #152]	; (800a6cc <__register_exitproc+0xa0>)
 800a632:	4606      	mov	r6, r0
 800a634:	6820      	ldr	r0, [r4, #0]
 800a636:	4698      	mov	r8, r3
 800a638:	460f      	mov	r7, r1
 800a63a:	4691      	mov	r9, r2
 800a63c:	f7ff f912 	bl	8009864 <__retarget_lock_acquire_recursive>
 800a640:	4b23      	ldr	r3, [pc, #140]	; (800a6d0 <__register_exitproc+0xa4>)
 800a642:	681d      	ldr	r5, [r3, #0]
 800a644:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800a648:	b918      	cbnz	r0, 800a652 <__register_exitproc+0x26>
 800a64a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800a64e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800a652:	6843      	ldr	r3, [r0, #4]
 800a654:	2b1f      	cmp	r3, #31
 800a656:	dd19      	ble.n	800a68c <__register_exitproc+0x60>
 800a658:	4b1e      	ldr	r3, [pc, #120]	; (800a6d4 <__register_exitproc+0xa8>)
 800a65a:	b933      	cbnz	r3, 800a66a <__register_exitproc+0x3e>
 800a65c:	6820      	ldr	r0, [r4, #0]
 800a65e:	f7ff f902 	bl	8009866 <__retarget_lock_release_recursive>
 800a662:	f04f 30ff 	mov.w	r0, #4294967295
 800a666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a66e:	f3af 8000 	nop.w
 800a672:	2800      	cmp	r0, #0
 800a674:	d0f2      	beq.n	800a65c <__register_exitproc+0x30>
 800a676:	2200      	movs	r2, #0
 800a678:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800a67c:	6042      	str	r2, [r0, #4]
 800a67e:	6003      	str	r3, [r0, #0]
 800a680:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800a684:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800a688:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800a68c:	6843      	ldr	r3, [r0, #4]
 800a68e:	b19e      	cbz	r6, 800a6b8 <__register_exitproc+0x8c>
 800a690:	2201      	movs	r2, #1
 800a692:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800a696:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800a69a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800a69e:	409a      	lsls	r2, r3
 800a6a0:	4311      	orrs	r1, r2
 800a6a2:	2e02      	cmp	r6, #2
 800a6a4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800a6a8:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800a6ac:	bf02      	ittt	eq
 800a6ae:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800a6b2:	430a      	orreq	r2, r1
 800a6b4:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	3302      	adds	r3, #2
 800a6bc:	6042      	str	r2, [r0, #4]
 800a6be:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800a6c2:	6820      	ldr	r0, [r4, #0]
 800a6c4:	f7ff f8cf 	bl	8009866 <__retarget_lock_release_recursive>
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	e7cc      	b.n	800a666 <__register_exitproc+0x3a>
 800a6cc:	200005a8 	.word	0x200005a8
 800a6d0:	0800b17c 	.word	0x0800b17c
 800a6d4:	00000000 	.word	0x00000000

0800a6d8 <_calloc_r>:
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	4351      	muls	r1, r2
 800a6dc:	f7ff f930 	bl	8009940 <_malloc_r>
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	b198      	cbz	r0, 800a70c <_calloc_r+0x34>
 800a6e4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a6e8:	f022 0203 	bic.w	r2, r2, #3
 800a6ec:	3a04      	subs	r2, #4
 800a6ee:	2a24      	cmp	r2, #36	; 0x24
 800a6f0:	d81b      	bhi.n	800a72a <_calloc_r+0x52>
 800a6f2:	2a13      	cmp	r2, #19
 800a6f4:	d917      	bls.n	800a726 <_calloc_r+0x4e>
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	2a1b      	cmp	r2, #27
 800a6fa:	e9c0 1100 	strd	r1, r1, [r0]
 800a6fe:	d807      	bhi.n	800a710 <_calloc_r+0x38>
 800a700:	f100 0308 	add.w	r3, r0, #8
 800a704:	2200      	movs	r2, #0
 800a706:	e9c3 2200 	strd	r2, r2, [r3]
 800a70a:	609a      	str	r2, [r3, #8]
 800a70c:	4620      	mov	r0, r4
 800a70e:	bd10      	pop	{r4, pc}
 800a710:	2a24      	cmp	r2, #36	; 0x24
 800a712:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800a716:	bf11      	iteee	ne
 800a718:	f100 0310 	addne.w	r3, r0, #16
 800a71c:	6101      	streq	r1, [r0, #16]
 800a71e:	f100 0318 	addeq.w	r3, r0, #24
 800a722:	6141      	streq	r1, [r0, #20]
 800a724:	e7ee      	b.n	800a704 <_calloc_r+0x2c>
 800a726:	4603      	mov	r3, r0
 800a728:	e7ec      	b.n	800a704 <_calloc_r+0x2c>
 800a72a:	2100      	movs	r1, #0
 800a72c:	f7fc fcc6 	bl	80070bc <memset>
 800a730:	e7ec      	b.n	800a70c <_calloc_r+0x34>
	...

0800a734 <_close_r>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	2300      	movs	r3, #0
 800a738:	4c05      	ldr	r4, [pc, #20]	; (800a750 <_close_r+0x1c>)
 800a73a:	4605      	mov	r5, r0
 800a73c:	4608      	mov	r0, r1
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	f7f6 fea5 	bl	800148e <_close>
 800a744:	1c43      	adds	r3, r0, #1
 800a746:	d102      	bne.n	800a74e <_close_r+0x1a>
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	b103      	cbz	r3, 800a74e <_close_r+0x1a>
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	bd38      	pop	{r3, r4, r5, pc}
 800a750:	20001ddc 	.word	0x20001ddc

0800a754 <_fclose_r>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	4606      	mov	r6, r0
 800a758:	460c      	mov	r4, r1
 800a75a:	b911      	cbnz	r1, 800a762 <_fclose_r+0xe>
 800a75c:	2500      	movs	r5, #0
 800a75e:	4628      	mov	r0, r5
 800a760:	bd70      	pop	{r4, r5, r6, pc}
 800a762:	b118      	cbz	r0, 800a76c <_fclose_r+0x18>
 800a764:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a766:	b90b      	cbnz	r3, 800a76c <_fclose_r+0x18>
 800a768:	f7fe ff02 	bl	8009570 <__sinit>
 800a76c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a76e:	07d8      	lsls	r0, r3, #31
 800a770:	d405      	bmi.n	800a77e <_fclose_r+0x2a>
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	0599      	lsls	r1, r3, #22
 800a776:	d402      	bmi.n	800a77e <_fclose_r+0x2a>
 800a778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a77a:	f7ff f873 	bl	8009864 <__retarget_lock_acquire_recursive>
 800a77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a782:	b93b      	cbnz	r3, 800a794 <_fclose_r+0x40>
 800a784:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a786:	f015 0501 	ands.w	r5, r5, #1
 800a78a:	d1e7      	bne.n	800a75c <_fclose_r+0x8>
 800a78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a78e:	f7ff f86a 	bl	8009866 <__retarget_lock_release_recursive>
 800a792:	e7e4      	b.n	800a75e <_fclose_r+0xa>
 800a794:	4621      	mov	r1, r4
 800a796:	4630      	mov	r0, r6
 800a798:	f7fe fdf0 	bl	800937c <__sflush_r>
 800a79c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a79e:	4605      	mov	r5, r0
 800a7a0:	b133      	cbz	r3, 800a7b0 <_fclose_r+0x5c>
 800a7a2:	69e1      	ldr	r1, [r4, #28]
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	4798      	blx	r3
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	bfb8      	it	lt
 800a7ac:	f04f 35ff 	movlt.w	r5, #4294967295
 800a7b0:	89a3      	ldrh	r3, [r4, #12]
 800a7b2:	061a      	lsls	r2, r3, #24
 800a7b4:	d503      	bpl.n	800a7be <_fclose_r+0x6a>
 800a7b6:	6921      	ldr	r1, [r4, #16]
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f7fe ff69 	bl	8009690 <_free_r>
 800a7be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a7c0:	b141      	cbz	r1, 800a7d4 <_fclose_r+0x80>
 800a7c2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a7c6:	4299      	cmp	r1, r3
 800a7c8:	d002      	beq.n	800a7d0 <_fclose_r+0x7c>
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f7fe ff60 	bl	8009690 <_free_r>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	6323      	str	r3, [r4, #48]	; 0x30
 800a7d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a7d6:	b121      	cbz	r1, 800a7e2 <_fclose_r+0x8e>
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7fe ff59 	bl	8009690 <_free_r>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	6463      	str	r3, [r4, #68]	; 0x44
 800a7e2:	f7fe fead 	bl	8009540 <__sfp_lock_acquire>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	81a3      	strh	r3, [r4, #12]
 800a7ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7ec:	07db      	lsls	r3, r3, #31
 800a7ee:	d402      	bmi.n	800a7f6 <_fclose_r+0xa2>
 800a7f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7f2:	f7ff f838 	bl	8009866 <__retarget_lock_release_recursive>
 800a7f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7f8:	f7ff f833 	bl	8009862 <__retarget_lock_close_recursive>
 800a7fc:	f7fe fea6 	bl	800954c <__sfp_lock_release>
 800a800:	e7ad      	b.n	800a75e <_fclose_r+0xa>

0800a802 <__fputwc>:
 800a802:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a806:	4680      	mov	r8, r0
 800a808:	460e      	mov	r6, r1
 800a80a:	4614      	mov	r4, r2
 800a80c:	f000 f9d4 	bl	800abb8 <__locale_mb_cur_max>
 800a810:	2801      	cmp	r0, #1
 800a812:	d11c      	bne.n	800a84e <__fputwc+0x4c>
 800a814:	1e73      	subs	r3, r6, #1
 800a816:	2bfe      	cmp	r3, #254	; 0xfe
 800a818:	d819      	bhi.n	800a84e <__fputwc+0x4c>
 800a81a:	4605      	mov	r5, r0
 800a81c:	f88d 6004 	strb.w	r6, [sp, #4]
 800a820:	2700      	movs	r7, #0
 800a822:	f10d 0904 	add.w	r9, sp, #4
 800a826:	42af      	cmp	r7, r5
 800a828:	d020      	beq.n	800a86c <__fputwc+0x6a>
 800a82a:	68a3      	ldr	r3, [r4, #8]
 800a82c:	f817 1009 	ldrb.w	r1, [r7, r9]
 800a830:	3b01      	subs	r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	60a3      	str	r3, [r4, #8]
 800a836:	da04      	bge.n	800a842 <__fputwc+0x40>
 800a838:	69a2      	ldr	r2, [r4, #24]
 800a83a:	4293      	cmp	r3, r2
 800a83c:	db1a      	blt.n	800a874 <__fputwc+0x72>
 800a83e:	290a      	cmp	r1, #10
 800a840:	d018      	beq.n	800a874 <__fputwc+0x72>
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	6022      	str	r2, [r4, #0]
 800a848:	7019      	strb	r1, [r3, #0]
 800a84a:	3701      	adds	r7, #1
 800a84c:	e7eb      	b.n	800a826 <__fputwc+0x24>
 800a84e:	4632      	mov	r2, r6
 800a850:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a854:	a901      	add	r1, sp, #4
 800a856:	4640      	mov	r0, r8
 800a858:	f000 fbb8 	bl	800afcc <_wcrtomb_r>
 800a85c:	1c42      	adds	r2, r0, #1
 800a85e:	4605      	mov	r5, r0
 800a860:	d1de      	bne.n	800a820 <__fputwc+0x1e>
 800a862:	4606      	mov	r6, r0
 800a864:	89a3      	ldrh	r3, [r4, #12]
 800a866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86a:	81a3      	strh	r3, [r4, #12]
 800a86c:	4630      	mov	r0, r6
 800a86e:	b003      	add	sp, #12
 800a870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a874:	4622      	mov	r2, r4
 800a876:	4640      	mov	r0, r8
 800a878:	f7ff fe7d 	bl	800a576 <__swbuf_r>
 800a87c:	1c43      	adds	r3, r0, #1
 800a87e:	d1e4      	bne.n	800a84a <__fputwc+0x48>
 800a880:	4606      	mov	r6, r0
 800a882:	e7f3      	b.n	800a86c <__fputwc+0x6a>

0800a884 <_fputwc_r>:
 800a884:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a886:	b570      	push	{r4, r5, r6, lr}
 800a888:	07db      	lsls	r3, r3, #31
 800a88a:	4605      	mov	r5, r0
 800a88c:	460e      	mov	r6, r1
 800a88e:	4614      	mov	r4, r2
 800a890:	d405      	bmi.n	800a89e <_fputwc_r+0x1a>
 800a892:	8993      	ldrh	r3, [r2, #12]
 800a894:	0598      	lsls	r0, r3, #22
 800a896:	d402      	bmi.n	800a89e <_fputwc_r+0x1a>
 800a898:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800a89a:	f7fe ffe3 	bl	8009864 <__retarget_lock_acquire_recursive>
 800a89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a2:	0499      	lsls	r1, r3, #18
 800a8a4:	d406      	bmi.n	800a8b4 <_fputwc_r+0x30>
 800a8a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a8aa:	81a3      	strh	r3, [r4, #12]
 800a8ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a8b2:	6663      	str	r3, [r4, #100]	; 0x64
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	f7ff ffa2 	bl	800a802 <__fputwc>
 800a8be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	07da      	lsls	r2, r3, #31
 800a8c4:	d405      	bmi.n	800a8d2 <_fputwc_r+0x4e>
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	059b      	lsls	r3, r3, #22
 800a8ca:	d402      	bmi.n	800a8d2 <_fputwc_r+0x4e>
 800a8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ce:	f7fe ffca 	bl	8009866 <__retarget_lock_release_recursive>
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a8d8 <_fstat_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	2300      	movs	r3, #0
 800a8dc:	4c06      	ldr	r4, [pc, #24]	; (800a8f8 <_fstat_r+0x20>)
 800a8de:	4605      	mov	r5, r0
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	f7f6 fddd 	bl	80014a4 <_fstat>
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	d102      	bne.n	800a8f4 <_fstat_r+0x1c>
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	b103      	cbz	r3, 800a8f4 <_fstat_r+0x1c>
 800a8f2:	602b      	str	r3, [r5, #0]
 800a8f4:	bd38      	pop	{r3, r4, r5, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20001ddc 	.word	0x20001ddc

0800a8fc <__sfvwrite_r>:
 800a8fc:	6893      	ldr	r3, [r2, #8]
 800a8fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a902:	4680      	mov	r8, r0
 800a904:	460c      	mov	r4, r1
 800a906:	4691      	mov	r9, r2
 800a908:	b91b      	cbnz	r3, 800a912 <__sfvwrite_r+0x16>
 800a90a:	2000      	movs	r0, #0
 800a90c:	b003      	add	sp, #12
 800a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a912:	898b      	ldrh	r3, [r1, #12]
 800a914:	0718      	lsls	r0, r3, #28
 800a916:	d54f      	bpl.n	800a9b8 <__sfvwrite_r+0xbc>
 800a918:	690b      	ldr	r3, [r1, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d04c      	beq.n	800a9b8 <__sfvwrite_r+0xbc>
 800a91e:	89a5      	ldrh	r5, [r4, #12]
 800a920:	f8d9 6000 	ldr.w	r6, [r9]
 800a924:	f015 0702 	ands.w	r7, r5, #2
 800a928:	d169      	bne.n	800a9fe <__sfvwrite_r+0x102>
 800a92a:	f015 0501 	ands.w	r5, r5, #1
 800a92e:	f000 809a 	beq.w	800aa66 <__sfvwrite_r+0x16a>
 800a932:	4638      	mov	r0, r7
 800a934:	46ba      	mov	sl, r7
 800a936:	46bb      	mov	fp, r7
 800a938:	f1bb 0f00 	cmp.w	fp, #0
 800a93c:	f000 8103 	beq.w	800ab46 <__sfvwrite_r+0x24a>
 800a940:	b950      	cbnz	r0, 800a958 <__sfvwrite_r+0x5c>
 800a942:	465a      	mov	r2, fp
 800a944:	210a      	movs	r1, #10
 800a946:	4650      	mov	r0, sl
 800a948:	f7ff fa30 	bl	8009dac <memchr>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	f000 80ff 	beq.w	800ab50 <__sfvwrite_r+0x254>
 800a952:	3001      	adds	r0, #1
 800a954:	eba0 070a 	sub.w	r7, r0, sl
 800a958:	6820      	ldr	r0, [r4, #0]
 800a95a:	6921      	ldr	r1, [r4, #16]
 800a95c:	455f      	cmp	r7, fp
 800a95e:	463b      	mov	r3, r7
 800a960:	bf28      	it	cs
 800a962:	465b      	movcs	r3, fp
 800a964:	4288      	cmp	r0, r1
 800a966:	6962      	ldr	r2, [r4, #20]
 800a968:	f240 80f5 	bls.w	800ab56 <__sfvwrite_r+0x25a>
 800a96c:	68a5      	ldr	r5, [r4, #8]
 800a96e:	4415      	add	r5, r2
 800a970:	42ab      	cmp	r3, r5
 800a972:	f340 80f0 	ble.w	800ab56 <__sfvwrite_r+0x25a>
 800a976:	4651      	mov	r1, sl
 800a978:	462a      	mov	r2, r5
 800a97a:	f000 f94f 	bl	800ac1c <memmove>
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	4621      	mov	r1, r4
 800a982:	442b      	add	r3, r5
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	4640      	mov	r0, r8
 800a988:	f7fe fd86 	bl	8009498 <_fflush_r>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d165      	bne.n	800aa5c <__sfvwrite_r+0x160>
 800a990:	1b7f      	subs	r7, r7, r5
 800a992:	f040 80fa 	bne.w	800ab8a <__sfvwrite_r+0x28e>
 800a996:	4621      	mov	r1, r4
 800a998:	4640      	mov	r0, r8
 800a99a:	f7fe fd7d 	bl	8009498 <_fflush_r>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d15c      	bne.n	800aa5c <__sfvwrite_r+0x160>
 800a9a2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a9a6:	44aa      	add	sl, r5
 800a9a8:	ebab 0b05 	sub.w	fp, fp, r5
 800a9ac:	1b5d      	subs	r5, r3, r5
 800a9ae:	f8c9 5008 	str.w	r5, [r9, #8]
 800a9b2:	2d00      	cmp	r5, #0
 800a9b4:	d1c0      	bne.n	800a938 <__sfvwrite_r+0x3c>
 800a9b6:	e7a8      	b.n	800a90a <__sfvwrite_r+0xe>
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	f7fd fe46 	bl	800864c <__swsetup_r>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d0ac      	beq.n	800a91e <__sfvwrite_r+0x22>
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	e7a0      	b.n	800a90c <__sfvwrite_r+0x10>
 800a9ca:	e9d6 a700 	ldrd	sl, r7, [r6]
 800a9ce:	3608      	adds	r6, #8
 800a9d0:	2f00      	cmp	r7, #0
 800a9d2:	d0fa      	beq.n	800a9ca <__sfvwrite_r+0xce>
 800a9d4:	455f      	cmp	r7, fp
 800a9d6:	463b      	mov	r3, r7
 800a9d8:	4652      	mov	r2, sl
 800a9da:	bf28      	it	cs
 800a9dc:	465b      	movcs	r3, fp
 800a9de:	69e1      	ldr	r1, [r4, #28]
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a9e4:	47a8      	blx	r5
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	dd38      	ble.n	800aa5c <__sfvwrite_r+0x160>
 800a9ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a9ee:	4482      	add	sl, r0
 800a9f0:	1a3f      	subs	r7, r7, r0
 800a9f2:	1a18      	subs	r0, r3, r0
 800a9f4:	f8c9 0008 	str.w	r0, [r9, #8]
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d1e9      	bne.n	800a9d0 <__sfvwrite_r+0xd4>
 800a9fc:	e785      	b.n	800a90a <__sfvwrite_r+0xe>
 800a9fe:	f04f 0a00 	mov.w	sl, #0
 800aa02:	f8df b190 	ldr.w	fp, [pc, #400]	; 800ab94 <__sfvwrite_r+0x298>
 800aa06:	4657      	mov	r7, sl
 800aa08:	e7e2      	b.n	800a9d0 <__sfvwrite_r+0xd4>
 800aa0a:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800aa0e:	3608      	adds	r6, #8
 800aa10:	f1ba 0f00 	cmp.w	sl, #0
 800aa14:	d0f9      	beq.n	800aa0a <__sfvwrite_r+0x10e>
 800aa16:	89a2      	ldrh	r2, [r4, #12]
 800aa18:	68a3      	ldr	r3, [r4, #8]
 800aa1a:	0591      	lsls	r1, r2, #22
 800aa1c:	6820      	ldr	r0, [r4, #0]
 800aa1e:	d564      	bpl.n	800aaea <__sfvwrite_r+0x1ee>
 800aa20:	4553      	cmp	r3, sl
 800aa22:	d836      	bhi.n	800aa92 <__sfvwrite_r+0x196>
 800aa24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa28:	d033      	beq.n	800aa92 <__sfvwrite_r+0x196>
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	6967      	ldr	r7, [r4, #20]
 800aa2e:	6921      	ldr	r1, [r4, #16]
 800aa30:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800aa34:	fb97 f7f3 	sdiv	r7, r7, r3
 800aa38:	eba0 0b01 	sub.w	fp, r0, r1
 800aa3c:	f10b 0301 	add.w	r3, fp, #1
 800aa40:	4453      	add	r3, sl
 800aa42:	429f      	cmp	r7, r3
 800aa44:	bf38      	it	cc
 800aa46:	461f      	movcc	r7, r3
 800aa48:	0553      	lsls	r3, r2, #21
 800aa4a:	d53e      	bpl.n	800aaca <__sfvwrite_r+0x1ce>
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	4640      	mov	r0, r8
 800aa50:	f7fe ff76 	bl	8009940 <_malloc_r>
 800aa54:	b948      	cbnz	r0, 800aa6a <__sfvwrite_r+0x16e>
 800aa56:	230c      	movs	r3, #12
 800aa58:	f8c8 3000 	str.w	r3, [r8]
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	e7ae      	b.n	800a9c4 <__sfvwrite_r+0xc8>
 800aa66:	46aa      	mov	sl, r5
 800aa68:	e7d2      	b.n	800aa10 <__sfvwrite_r+0x114>
 800aa6a:	465a      	mov	r2, fp
 800aa6c:	6921      	ldr	r1, [r4, #16]
 800aa6e:	9001      	str	r0, [sp, #4]
 800aa70:	f7ff f9aa 	bl	8009dc8 <memcpy>
 800aa74:	89a2      	ldrh	r2, [r4, #12]
 800aa76:	9b01      	ldr	r3, [sp, #4]
 800aa78:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800aa7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa80:	81a2      	strh	r2, [r4, #12]
 800aa82:	6123      	str	r3, [r4, #16]
 800aa84:	445b      	add	r3, fp
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	4653      	mov	r3, sl
 800aa8a:	6167      	str	r7, [r4, #20]
 800aa8c:	eba7 070b 	sub.w	r7, r7, fp
 800aa90:	60a7      	str	r7, [r4, #8]
 800aa92:	4553      	cmp	r3, sl
 800aa94:	bf28      	it	cs
 800aa96:	4653      	movcs	r3, sl
 800aa98:	4657      	mov	r7, sl
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	6820      	ldr	r0, [r4, #0]
 800aaa0:	9301      	str	r3, [sp, #4]
 800aaa2:	f000 f8bb 	bl	800ac1c <memmove>
 800aaa6:	68a2      	ldr	r2, [r4, #8]
 800aaa8:	9b01      	ldr	r3, [sp, #4]
 800aaaa:	1ad2      	subs	r2, r2, r3
 800aaac:	60a2      	str	r2, [r4, #8]
 800aaae:	6822      	ldr	r2, [r4, #0]
 800aab0:	4413      	add	r3, r2
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800aab8:	443d      	add	r5, r7
 800aaba:	ebaa 0a07 	sub.w	sl, sl, r7
 800aabe:	1bdf      	subs	r7, r3, r7
 800aac0:	f8c9 7008 	str.w	r7, [r9, #8]
 800aac4:	2f00      	cmp	r7, #0
 800aac6:	d1a3      	bne.n	800aa10 <__sfvwrite_r+0x114>
 800aac8:	e71f      	b.n	800a90a <__sfvwrite_r+0xe>
 800aaca:	463a      	mov	r2, r7
 800aacc:	4640      	mov	r0, r8
 800aace:	f000 f8d1 	bl	800ac74 <_realloc_r>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d1d4      	bne.n	800aa82 <__sfvwrite_r+0x186>
 800aad8:	6921      	ldr	r1, [r4, #16]
 800aada:	4640      	mov	r0, r8
 800aadc:	f7fe fdd8 	bl	8009690 <_free_r>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aae6:	81a3      	strh	r3, [r4, #12]
 800aae8:	e7b5      	b.n	800aa56 <__sfvwrite_r+0x15a>
 800aaea:	6922      	ldr	r2, [r4, #16]
 800aaec:	4282      	cmp	r2, r0
 800aaee:	d302      	bcc.n	800aaf6 <__sfvwrite_r+0x1fa>
 800aaf0:	6962      	ldr	r2, [r4, #20]
 800aaf2:	4552      	cmp	r2, sl
 800aaf4:	d916      	bls.n	800ab24 <__sfvwrite_r+0x228>
 800aaf6:	4553      	cmp	r3, sl
 800aaf8:	bf28      	it	cs
 800aafa:	4653      	movcs	r3, sl
 800aafc:	461f      	mov	r7, r3
 800aafe:	461a      	mov	r2, r3
 800ab00:	4629      	mov	r1, r5
 800ab02:	f000 f88b 	bl	800ac1c <memmove>
 800ab06:	68a3      	ldr	r3, [r4, #8]
 800ab08:	6822      	ldr	r2, [r4, #0]
 800ab0a:	1bdb      	subs	r3, r3, r7
 800ab0c:	443a      	add	r2, r7
 800ab0e:	60a3      	str	r3, [r4, #8]
 800ab10:	6022      	str	r2, [r4, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1ce      	bne.n	800aab4 <__sfvwrite_r+0x1b8>
 800ab16:	4621      	mov	r1, r4
 800ab18:	4640      	mov	r0, r8
 800ab1a:	f7fe fcbd 	bl	8009498 <_fflush_r>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d0c8      	beq.n	800aab4 <__sfvwrite_r+0x1b8>
 800ab22:	e79b      	b.n	800aa5c <__sfvwrite_r+0x160>
 800ab24:	4b1a      	ldr	r3, [pc, #104]	; (800ab90 <__sfvwrite_r+0x294>)
 800ab26:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800ab28:	459a      	cmp	sl, r3
 800ab2a:	bf94      	ite	ls
 800ab2c:	4653      	movls	r3, sl
 800ab2e:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800ab32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab36:	69e1      	ldr	r1, [r4, #28]
 800ab38:	4353      	muls	r3, r2
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	47b8      	blx	r7
 800ab40:	1e07      	subs	r7, r0, #0
 800ab42:	dcb7      	bgt.n	800aab4 <__sfvwrite_r+0x1b8>
 800ab44:	e78a      	b.n	800aa5c <__sfvwrite_r+0x160>
 800ab46:	e9d6 ab00 	ldrd	sl, fp, [r6]
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	3608      	adds	r6, #8
 800ab4e:	e6f3      	b.n	800a938 <__sfvwrite_r+0x3c>
 800ab50:	f10b 0701 	add.w	r7, fp, #1
 800ab54:	e700      	b.n	800a958 <__sfvwrite_r+0x5c>
 800ab56:	429a      	cmp	r2, r3
 800ab58:	dc09      	bgt.n	800ab6e <__sfvwrite_r+0x272>
 800ab5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	69e1      	ldr	r1, [r4, #28]
 800ab60:	4652      	mov	r2, sl
 800ab62:	4640      	mov	r0, r8
 800ab64:	47a8      	blx	r5
 800ab66:	1e05      	subs	r5, r0, #0
 800ab68:	f73f af12 	bgt.w	800a990 <__sfvwrite_r+0x94>
 800ab6c:	e776      	b.n	800aa5c <__sfvwrite_r+0x160>
 800ab6e:	461a      	mov	r2, r3
 800ab70:	4651      	mov	r1, sl
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	f000 f852 	bl	800ac1c <memmove>
 800ab78:	9b01      	ldr	r3, [sp, #4]
 800ab7a:	68a2      	ldr	r2, [r4, #8]
 800ab7c:	461d      	mov	r5, r3
 800ab7e:	1ad2      	subs	r2, r2, r3
 800ab80:	60a2      	str	r2, [r4, #8]
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	441a      	add	r2, r3
 800ab86:	6022      	str	r2, [r4, #0]
 800ab88:	e702      	b.n	800a990 <__sfvwrite_r+0x94>
 800ab8a:	2001      	movs	r0, #1
 800ab8c:	e709      	b.n	800a9a2 <__sfvwrite_r+0xa6>
 800ab8e:	bf00      	nop
 800ab90:	7ffffffe 	.word	0x7ffffffe
 800ab94:	7ffffc00 	.word	0x7ffffc00

0800ab98 <_isatty_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	4c05      	ldr	r4, [pc, #20]	; (800abb4 <_isatty_r+0x1c>)
 800ab9e:	4605      	mov	r5, r0
 800aba0:	4608      	mov	r0, r1
 800aba2:	6023      	str	r3, [r4, #0]
 800aba4:	f7f6 fc8d 	bl	80014c2 <_isatty>
 800aba8:	1c43      	adds	r3, r0, #1
 800abaa:	d102      	bne.n	800abb2 <_isatty_r+0x1a>
 800abac:	6823      	ldr	r3, [r4, #0]
 800abae:	b103      	cbz	r3, 800abb2 <_isatty_r+0x1a>
 800abb0:	602b      	str	r3, [r5, #0]
 800abb2:	bd38      	pop	{r3, r4, r5, pc}
 800abb4:	20001ddc 	.word	0x20001ddc

0800abb8 <__locale_mb_cur_max>:
 800abb8:	4b04      	ldr	r3, [pc, #16]	; (800abcc <__locale_mb_cur_max+0x14>)
 800abba:	4a05      	ldr	r2, [pc, #20]	; (800abd0 <__locale_mb_cur_max+0x18>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bf08      	it	eq
 800abc4:	4613      	moveq	r3, r2
 800abc6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800abca:	4770      	bx	lr
 800abcc:	2000017c 	.word	0x2000017c
 800abd0:	200009bc 	.word	0x200009bc

0800abd4 <_lseek_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4605      	mov	r5, r0
 800abd8:	4608      	mov	r0, r1
 800abda:	4611      	mov	r1, r2
 800abdc:	2200      	movs	r2, #0
 800abde:	4c05      	ldr	r4, [pc, #20]	; (800abf4 <_lseek_r+0x20>)
 800abe0:	6022      	str	r2, [r4, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	f7f6 fc77 	bl	80014d6 <_lseek>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_lseek_r+0x1e>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_lseek_r+0x1e>
 800abf0:	602b      	str	r3, [r5, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	20001ddc 	.word	0x20001ddc

0800abf8 <__ascii_mbtowc>:
 800abf8:	b082      	sub	sp, #8
 800abfa:	b901      	cbnz	r1, 800abfe <__ascii_mbtowc+0x6>
 800abfc:	a901      	add	r1, sp, #4
 800abfe:	b142      	cbz	r2, 800ac12 <__ascii_mbtowc+0x1a>
 800ac00:	b14b      	cbz	r3, 800ac16 <__ascii_mbtowc+0x1e>
 800ac02:	7813      	ldrb	r3, [r2, #0]
 800ac04:	600b      	str	r3, [r1, #0]
 800ac06:	7812      	ldrb	r2, [r2, #0]
 800ac08:	1c10      	adds	r0, r2, #0
 800ac0a:	bf18      	it	ne
 800ac0c:	2001      	movne	r0, #1
 800ac0e:	b002      	add	sp, #8
 800ac10:	4770      	bx	lr
 800ac12:	4610      	mov	r0, r2
 800ac14:	e7fb      	b.n	800ac0e <__ascii_mbtowc+0x16>
 800ac16:	f06f 0001 	mvn.w	r0, #1
 800ac1a:	e7f8      	b.n	800ac0e <__ascii_mbtowc+0x16>

0800ac1c <memmove>:
 800ac1c:	4288      	cmp	r0, r1
 800ac1e:	b510      	push	{r4, lr}
 800ac20:	eb01 0302 	add.w	r3, r1, r2
 800ac24:	d807      	bhi.n	800ac36 <memmove+0x1a>
 800ac26:	1e42      	subs	r2, r0, #1
 800ac28:	4299      	cmp	r1, r3
 800ac2a:	d00a      	beq.n	800ac42 <memmove+0x26>
 800ac2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac30:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ac34:	e7f8      	b.n	800ac28 <memmove+0xc>
 800ac36:	4283      	cmp	r3, r0
 800ac38:	d9f5      	bls.n	800ac26 <memmove+0xa>
 800ac3a:	1881      	adds	r1, r0, r2
 800ac3c:	1ad2      	subs	r2, r2, r3
 800ac3e:	42d3      	cmn	r3, r2
 800ac40:	d100      	bne.n	800ac44 <memmove+0x28>
 800ac42:	bd10      	pop	{r4, pc}
 800ac44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ac4c:	e7f7      	b.n	800ac3e <memmove+0x22>
	...

0800ac50 <_read_r>:
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	4605      	mov	r5, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	4611      	mov	r1, r2
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4c05      	ldr	r4, [pc, #20]	; (800ac70 <_read_r+0x20>)
 800ac5c:	6022      	str	r2, [r4, #0]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f7f6 fbdc 	bl	800141c <_read>
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	d102      	bne.n	800ac6e <_read_r+0x1e>
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	b103      	cbz	r3, 800ac6e <_read_r+0x1e>
 800ac6c:	602b      	str	r3, [r5, #0]
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}
 800ac70:	20001ddc 	.word	0x20001ddc

0800ac74 <_realloc_r>:
 800ac74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac78:	4682      	mov	sl, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	b929      	cbnz	r1, 800ac8a <_realloc_r+0x16>
 800ac7e:	4611      	mov	r1, r2
 800ac80:	b003      	add	sp, #12
 800ac82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac86:	f7fe be5b 	b.w	8009940 <_malloc_r>
 800ac8a:	9201      	str	r2, [sp, #4]
 800ac8c:	f7ff f8a8 	bl	8009de0 <__malloc_lock>
 800ac90:	9a01      	ldr	r2, [sp, #4]
 800ac92:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800ac96:	f102 080b 	add.w	r8, r2, #11
 800ac9a:	f1b8 0f16 	cmp.w	r8, #22
 800ac9e:	f1a4 0908 	sub.w	r9, r4, #8
 800aca2:	f025 0603 	bic.w	r6, r5, #3
 800aca6:	d90b      	bls.n	800acc0 <_realloc_r+0x4c>
 800aca8:	f038 0807 	bics.w	r8, r8, #7
 800acac:	d50a      	bpl.n	800acc4 <_realloc_r+0x50>
 800acae:	230c      	movs	r3, #12
 800acb0:	f04f 0b00 	mov.w	fp, #0
 800acb4:	f8ca 3000 	str.w	r3, [sl]
 800acb8:	4658      	mov	r0, fp
 800acba:	b003      	add	sp, #12
 800acbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc0:	f04f 0810 	mov.w	r8, #16
 800acc4:	4590      	cmp	r8, r2
 800acc6:	d3f2      	bcc.n	800acae <_realloc_r+0x3a>
 800acc8:	45b0      	cmp	r8, r6
 800acca:	f340 8175 	ble.w	800afb8 <_realloc_r+0x344>
 800acce:	49ab      	ldr	r1, [pc, #684]	; (800af7c <_realloc_r+0x308>)
 800acd0:	eb09 0306 	add.w	r3, r9, r6
 800acd4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800acd8:	6858      	ldr	r0, [r3, #4]
 800acda:	459c      	cmp	ip, r3
 800acdc:	9101      	str	r1, [sp, #4]
 800acde:	d005      	beq.n	800acec <_realloc_r+0x78>
 800ace0:	f020 0101 	bic.w	r1, r0, #1
 800ace4:	4419      	add	r1, r3
 800ace6:	6849      	ldr	r1, [r1, #4]
 800ace8:	07cf      	lsls	r7, r1, #31
 800acea:	d447      	bmi.n	800ad7c <_realloc_r+0x108>
 800acec:	f020 0003 	bic.w	r0, r0, #3
 800acf0:	459c      	cmp	ip, r3
 800acf2:	eb06 0700 	add.w	r7, r6, r0
 800acf6:	d119      	bne.n	800ad2c <_realloc_r+0xb8>
 800acf8:	f108 0110 	add.w	r1, r8, #16
 800acfc:	42b9      	cmp	r1, r7
 800acfe:	dc3f      	bgt.n	800ad80 <_realloc_r+0x10c>
 800ad00:	9a01      	ldr	r2, [sp, #4]
 800ad02:	eba7 0708 	sub.w	r7, r7, r8
 800ad06:	eb09 0308 	add.w	r3, r9, r8
 800ad0a:	f047 0701 	orr.w	r7, r7, #1
 800ad0e:	6093      	str	r3, [r2, #8]
 800ad10:	605f      	str	r7, [r3, #4]
 800ad12:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ad16:	4650      	mov	r0, sl
 800ad18:	f003 0301 	and.w	r3, r3, #1
 800ad1c:	ea43 0308 	orr.w	r3, r3, r8
 800ad20:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad24:	f7ff f862 	bl	8009dec <__malloc_unlock>
 800ad28:	46a3      	mov	fp, r4
 800ad2a:	e7c5      	b.n	800acb8 <_realloc_r+0x44>
 800ad2c:	45b8      	cmp	r8, r7
 800ad2e:	dc27      	bgt.n	800ad80 <_realloc_r+0x10c>
 800ad30:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ad34:	60da      	str	r2, [r3, #12]
 800ad36:	6093      	str	r3, [r2, #8]
 800ad38:	eba7 0008 	sub.w	r0, r7, r8
 800ad3c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ad40:	280f      	cmp	r0, #15
 800ad42:	f002 0201 	and.w	r2, r2, #1
 800ad46:	eb09 0307 	add.w	r3, r9, r7
 800ad4a:	f240 8137 	bls.w	800afbc <_realloc_r+0x348>
 800ad4e:	eb09 0108 	add.w	r1, r9, r8
 800ad52:	ea48 0202 	orr.w	r2, r8, r2
 800ad56:	f040 0001 	orr.w	r0, r0, #1
 800ad5a:	f8c9 2004 	str.w	r2, [r9, #4]
 800ad5e:	6048      	str	r0, [r1, #4]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	3108      	adds	r1, #8
 800ad64:	f042 0201 	orr.w	r2, r2, #1
 800ad68:	605a      	str	r2, [r3, #4]
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	f7fe fc90 	bl	8009690 <_free_r>
 800ad70:	4650      	mov	r0, sl
 800ad72:	f7ff f83b 	bl	8009dec <__malloc_unlock>
 800ad76:	f109 0b08 	add.w	fp, r9, #8
 800ad7a:	e79d      	b.n	800acb8 <_realloc_r+0x44>
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	07e9      	lsls	r1, r5, #31
 800ad82:	f100 80c9 	bmi.w	800af18 <_realloc_r+0x2a4>
 800ad86:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800ad8a:	eba9 0505 	sub.w	r5, r9, r5
 800ad8e:	6869      	ldr	r1, [r5, #4]
 800ad90:	f021 0103 	bic.w	r1, r1, #3
 800ad94:	eb01 0b06 	add.w	fp, r1, r6
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 8088 	beq.w	800aeae <_realloc_r+0x23a>
 800ad9e:	459c      	cmp	ip, r3
 800ada0:	eb00 070b 	add.w	r7, r0, fp
 800ada4:	d14a      	bne.n	800ae3c <_realloc_r+0x1c8>
 800ada6:	f108 0310 	add.w	r3, r8, #16
 800adaa:	42bb      	cmp	r3, r7
 800adac:	dc7f      	bgt.n	800aeae <_realloc_r+0x23a>
 800adae:	46ab      	mov	fp, r5
 800adb0:	68eb      	ldr	r3, [r5, #12]
 800adb2:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800adb6:	60d3      	str	r3, [r2, #12]
 800adb8:	609a      	str	r2, [r3, #8]
 800adba:	1f32      	subs	r2, r6, #4
 800adbc:	2a24      	cmp	r2, #36	; 0x24
 800adbe:	d838      	bhi.n	800ae32 <_realloc_r+0x1be>
 800adc0:	2a13      	cmp	r2, #19
 800adc2:	d934      	bls.n	800ae2e <_realloc_r+0x1ba>
 800adc4:	6823      	ldr	r3, [r4, #0]
 800adc6:	2a1b      	cmp	r2, #27
 800adc8:	60ab      	str	r3, [r5, #8]
 800adca:	6863      	ldr	r3, [r4, #4]
 800adcc:	60eb      	str	r3, [r5, #12]
 800adce:	d81b      	bhi.n	800ae08 <_realloc_r+0x194>
 800add0:	3408      	adds	r4, #8
 800add2:	f105 0310 	add.w	r3, r5, #16
 800add6:	6822      	ldr	r2, [r4, #0]
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	6862      	ldr	r2, [r4, #4]
 800addc:	605a      	str	r2, [r3, #4]
 800adde:	68a2      	ldr	r2, [r4, #8]
 800ade0:	609a      	str	r2, [r3, #8]
 800ade2:	9a01      	ldr	r2, [sp, #4]
 800ade4:	eba7 0708 	sub.w	r7, r7, r8
 800ade8:	eb05 0308 	add.w	r3, r5, r8
 800adec:	f047 0701 	orr.w	r7, r7, #1
 800adf0:	6093      	str	r3, [r2, #8]
 800adf2:	605f      	str	r7, [r3, #4]
 800adf4:	686b      	ldr	r3, [r5, #4]
 800adf6:	f003 0301 	and.w	r3, r3, #1
 800adfa:	ea43 0308 	orr.w	r3, r3, r8
 800adfe:	606b      	str	r3, [r5, #4]
 800ae00:	4650      	mov	r0, sl
 800ae02:	f7fe fff3 	bl	8009dec <__malloc_unlock>
 800ae06:	e757      	b.n	800acb8 <_realloc_r+0x44>
 800ae08:	68a3      	ldr	r3, [r4, #8]
 800ae0a:	2a24      	cmp	r2, #36	; 0x24
 800ae0c:	612b      	str	r3, [r5, #16]
 800ae0e:	68e3      	ldr	r3, [r4, #12]
 800ae10:	bf18      	it	ne
 800ae12:	3410      	addne	r4, #16
 800ae14:	616b      	str	r3, [r5, #20]
 800ae16:	bf09      	itett	eq
 800ae18:	6923      	ldreq	r3, [r4, #16]
 800ae1a:	f105 0318 	addne.w	r3, r5, #24
 800ae1e:	61ab      	streq	r3, [r5, #24]
 800ae20:	6962      	ldreq	r2, [r4, #20]
 800ae22:	bf02      	ittt	eq
 800ae24:	f105 0320 	addeq.w	r3, r5, #32
 800ae28:	61ea      	streq	r2, [r5, #28]
 800ae2a:	3418      	addeq	r4, #24
 800ae2c:	e7d3      	b.n	800add6 <_realloc_r+0x162>
 800ae2e:	465b      	mov	r3, fp
 800ae30:	e7d1      	b.n	800add6 <_realloc_r+0x162>
 800ae32:	4621      	mov	r1, r4
 800ae34:	4658      	mov	r0, fp
 800ae36:	f7ff fef1 	bl	800ac1c <memmove>
 800ae3a:	e7d2      	b.n	800ade2 <_realloc_r+0x16e>
 800ae3c:	45b8      	cmp	r8, r7
 800ae3e:	dc36      	bgt.n	800aeae <_realloc_r+0x23a>
 800ae40:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ae44:	4628      	mov	r0, r5
 800ae46:	60da      	str	r2, [r3, #12]
 800ae48:	6093      	str	r3, [r2, #8]
 800ae4a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ae4e:	68eb      	ldr	r3, [r5, #12]
 800ae50:	60d3      	str	r3, [r2, #12]
 800ae52:	609a      	str	r2, [r3, #8]
 800ae54:	1f32      	subs	r2, r6, #4
 800ae56:	2a24      	cmp	r2, #36	; 0x24
 800ae58:	d825      	bhi.n	800aea6 <_realloc_r+0x232>
 800ae5a:	2a13      	cmp	r2, #19
 800ae5c:	d908      	bls.n	800ae70 <_realloc_r+0x1fc>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	2a1b      	cmp	r2, #27
 800ae62:	60ab      	str	r3, [r5, #8]
 800ae64:	6863      	ldr	r3, [r4, #4]
 800ae66:	60eb      	str	r3, [r5, #12]
 800ae68:	d80a      	bhi.n	800ae80 <_realloc_r+0x20c>
 800ae6a:	3408      	adds	r4, #8
 800ae6c:	f105 0010 	add.w	r0, r5, #16
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	6003      	str	r3, [r0, #0]
 800ae74:	6863      	ldr	r3, [r4, #4]
 800ae76:	6043      	str	r3, [r0, #4]
 800ae78:	68a3      	ldr	r3, [r4, #8]
 800ae7a:	6083      	str	r3, [r0, #8]
 800ae7c:	46a9      	mov	r9, r5
 800ae7e:	e75b      	b.n	800ad38 <_realloc_r+0xc4>
 800ae80:	68a3      	ldr	r3, [r4, #8]
 800ae82:	2a24      	cmp	r2, #36	; 0x24
 800ae84:	612b      	str	r3, [r5, #16]
 800ae86:	68e3      	ldr	r3, [r4, #12]
 800ae88:	bf18      	it	ne
 800ae8a:	f105 0018 	addne.w	r0, r5, #24
 800ae8e:	616b      	str	r3, [r5, #20]
 800ae90:	bf09      	itett	eq
 800ae92:	6923      	ldreq	r3, [r4, #16]
 800ae94:	3410      	addne	r4, #16
 800ae96:	61ab      	streq	r3, [r5, #24]
 800ae98:	6963      	ldreq	r3, [r4, #20]
 800ae9a:	bf02      	ittt	eq
 800ae9c:	f105 0020 	addeq.w	r0, r5, #32
 800aea0:	61eb      	streq	r3, [r5, #28]
 800aea2:	3418      	addeq	r4, #24
 800aea4:	e7e4      	b.n	800ae70 <_realloc_r+0x1fc>
 800aea6:	4621      	mov	r1, r4
 800aea8:	f7ff feb8 	bl	800ac1c <memmove>
 800aeac:	e7e6      	b.n	800ae7c <_realloc_r+0x208>
 800aeae:	45d8      	cmp	r8, fp
 800aeb0:	dc32      	bgt.n	800af18 <_realloc_r+0x2a4>
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	68eb      	ldr	r3, [r5, #12]
 800aeb6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800aeba:	60d3      	str	r3, [r2, #12]
 800aebc:	609a      	str	r2, [r3, #8]
 800aebe:	1f32      	subs	r2, r6, #4
 800aec0:	2a24      	cmp	r2, #36	; 0x24
 800aec2:	d825      	bhi.n	800af10 <_realloc_r+0x29c>
 800aec4:	2a13      	cmp	r2, #19
 800aec6:	d908      	bls.n	800aeda <_realloc_r+0x266>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	2a1b      	cmp	r2, #27
 800aecc:	60ab      	str	r3, [r5, #8]
 800aece:	6863      	ldr	r3, [r4, #4]
 800aed0:	60eb      	str	r3, [r5, #12]
 800aed2:	d80a      	bhi.n	800aeea <_realloc_r+0x276>
 800aed4:	3408      	adds	r4, #8
 800aed6:	f105 0010 	add.w	r0, r5, #16
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	6003      	str	r3, [r0, #0]
 800aede:	6863      	ldr	r3, [r4, #4]
 800aee0:	6043      	str	r3, [r0, #4]
 800aee2:	68a3      	ldr	r3, [r4, #8]
 800aee4:	6083      	str	r3, [r0, #8]
 800aee6:	465f      	mov	r7, fp
 800aee8:	e7c8      	b.n	800ae7c <_realloc_r+0x208>
 800aeea:	68a3      	ldr	r3, [r4, #8]
 800aeec:	2a24      	cmp	r2, #36	; 0x24
 800aeee:	612b      	str	r3, [r5, #16]
 800aef0:	68e3      	ldr	r3, [r4, #12]
 800aef2:	bf18      	it	ne
 800aef4:	f105 0018 	addne.w	r0, r5, #24
 800aef8:	616b      	str	r3, [r5, #20]
 800aefa:	bf09      	itett	eq
 800aefc:	6923      	ldreq	r3, [r4, #16]
 800aefe:	3410      	addne	r4, #16
 800af00:	61ab      	streq	r3, [r5, #24]
 800af02:	6963      	ldreq	r3, [r4, #20]
 800af04:	bf02      	ittt	eq
 800af06:	f105 0020 	addeq.w	r0, r5, #32
 800af0a:	61eb      	streq	r3, [r5, #28]
 800af0c:	3418      	addeq	r4, #24
 800af0e:	e7e4      	b.n	800aeda <_realloc_r+0x266>
 800af10:	4621      	mov	r1, r4
 800af12:	f7ff fe83 	bl	800ac1c <memmove>
 800af16:	e7e6      	b.n	800aee6 <_realloc_r+0x272>
 800af18:	4611      	mov	r1, r2
 800af1a:	4650      	mov	r0, sl
 800af1c:	f7fe fd10 	bl	8009940 <_malloc_r>
 800af20:	4683      	mov	fp, r0
 800af22:	2800      	cmp	r0, #0
 800af24:	f43f af6c 	beq.w	800ae00 <_realloc_r+0x18c>
 800af28:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800af2c:	f1a0 0208 	sub.w	r2, r0, #8
 800af30:	f023 0301 	bic.w	r3, r3, #1
 800af34:	444b      	add	r3, r9
 800af36:	4293      	cmp	r3, r2
 800af38:	d105      	bne.n	800af46 <_realloc_r+0x2d2>
 800af3a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800af3e:	f027 0703 	bic.w	r7, r7, #3
 800af42:	4437      	add	r7, r6
 800af44:	e6f8      	b.n	800ad38 <_realloc_r+0xc4>
 800af46:	1f32      	subs	r2, r6, #4
 800af48:	2a24      	cmp	r2, #36	; 0x24
 800af4a:	d831      	bhi.n	800afb0 <_realloc_r+0x33c>
 800af4c:	2a13      	cmp	r2, #19
 800af4e:	d92c      	bls.n	800afaa <_realloc_r+0x336>
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	2a1b      	cmp	r2, #27
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	6863      	ldr	r3, [r4, #4]
 800af58:	6043      	str	r3, [r0, #4]
 800af5a:	d811      	bhi.n	800af80 <_realloc_r+0x30c>
 800af5c:	f104 0208 	add.w	r2, r4, #8
 800af60:	f100 0308 	add.w	r3, r0, #8
 800af64:	6811      	ldr	r1, [r2, #0]
 800af66:	6019      	str	r1, [r3, #0]
 800af68:	6851      	ldr	r1, [r2, #4]
 800af6a:	6059      	str	r1, [r3, #4]
 800af6c:	6892      	ldr	r2, [r2, #8]
 800af6e:	609a      	str	r2, [r3, #8]
 800af70:	4621      	mov	r1, r4
 800af72:	4650      	mov	r0, sl
 800af74:	f7fe fb8c 	bl	8009690 <_free_r>
 800af78:	e742      	b.n	800ae00 <_realloc_r+0x18c>
 800af7a:	bf00      	nop
 800af7c:	200005ac 	.word	0x200005ac
 800af80:	68a3      	ldr	r3, [r4, #8]
 800af82:	2a24      	cmp	r2, #36	; 0x24
 800af84:	6083      	str	r3, [r0, #8]
 800af86:	68e3      	ldr	r3, [r4, #12]
 800af88:	bf18      	it	ne
 800af8a:	f104 0210 	addne.w	r2, r4, #16
 800af8e:	60c3      	str	r3, [r0, #12]
 800af90:	bf09      	itett	eq
 800af92:	6923      	ldreq	r3, [r4, #16]
 800af94:	f100 0310 	addne.w	r3, r0, #16
 800af98:	6103      	streq	r3, [r0, #16]
 800af9a:	6961      	ldreq	r1, [r4, #20]
 800af9c:	bf02      	ittt	eq
 800af9e:	f104 0218 	addeq.w	r2, r4, #24
 800afa2:	f100 0318 	addeq.w	r3, r0, #24
 800afa6:	6141      	streq	r1, [r0, #20]
 800afa8:	e7dc      	b.n	800af64 <_realloc_r+0x2f0>
 800afaa:	4603      	mov	r3, r0
 800afac:	4622      	mov	r2, r4
 800afae:	e7d9      	b.n	800af64 <_realloc_r+0x2f0>
 800afb0:	4621      	mov	r1, r4
 800afb2:	f7ff fe33 	bl	800ac1c <memmove>
 800afb6:	e7db      	b.n	800af70 <_realloc_r+0x2fc>
 800afb8:	4637      	mov	r7, r6
 800afba:	e6bd      	b.n	800ad38 <_realloc_r+0xc4>
 800afbc:	4317      	orrs	r7, r2
 800afbe:	f8c9 7004 	str.w	r7, [r9, #4]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	f042 0201 	orr.w	r2, r2, #1
 800afc8:	605a      	str	r2, [r3, #4]
 800afca:	e6d1      	b.n	800ad70 <_realloc_r+0xfc>

0800afcc <_wcrtomb_r>:
 800afcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afce:	4c0f      	ldr	r4, [pc, #60]	; (800b00c <_wcrtomb_r+0x40>)
 800afd0:	b085      	sub	sp, #20
 800afd2:	6824      	ldr	r4, [r4, #0]
 800afd4:	4605      	mov	r5, r0
 800afd6:	461e      	mov	r6, r3
 800afd8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800afda:	b981      	cbnz	r1, 800affe <_wcrtomb_r+0x32>
 800afdc:	4a0c      	ldr	r2, [pc, #48]	; (800b010 <_wcrtomb_r+0x44>)
 800afde:	2c00      	cmp	r4, #0
 800afe0:	bf08      	it	eq
 800afe2:	4614      	moveq	r4, r2
 800afe4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800afe8:	460a      	mov	r2, r1
 800afea:	a901      	add	r1, sp, #4
 800afec:	47a0      	blx	r4
 800afee:	1c43      	adds	r3, r0, #1
 800aff0:	bf01      	itttt	eq
 800aff2:	2300      	moveq	r3, #0
 800aff4:	6033      	streq	r3, [r6, #0]
 800aff6:	238a      	moveq	r3, #138	; 0x8a
 800aff8:	602b      	streq	r3, [r5, #0]
 800affa:	b005      	add	sp, #20
 800affc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800affe:	4f04      	ldr	r7, [pc, #16]	; (800b010 <_wcrtomb_r+0x44>)
 800b000:	2c00      	cmp	r4, #0
 800b002:	bf08      	it	eq
 800b004:	463c      	moveq	r4, r7
 800b006:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800b00a:	e7ef      	b.n	800afec <_wcrtomb_r+0x20>
 800b00c:	2000017c 	.word	0x2000017c
 800b010:	200009bc 	.word	0x200009bc

0800b014 <__ascii_wctomb>:
 800b014:	b149      	cbz	r1, 800b02a <__ascii_wctomb+0x16>
 800b016:	2aff      	cmp	r2, #255	; 0xff
 800b018:	bf8b      	itete	hi
 800b01a:	238a      	movhi	r3, #138	; 0x8a
 800b01c:	700a      	strbls	r2, [r1, #0]
 800b01e:	6003      	strhi	r3, [r0, #0]
 800b020:	2001      	movls	r0, #1
 800b022:	bf88      	it	hi
 800b024:	f04f 30ff 	movhi.w	r0, #4294967295
 800b028:	4770      	bx	lr
 800b02a:	4608      	mov	r0, r1
 800b02c:	4770      	bx	lr
	...

0800b030 <_init>:
 800b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b032:	bf00      	nop
 800b034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b036:	bc08      	pop	{r3}
 800b038:	469e      	mov	lr, r3
 800b03a:	4770      	bx	lr

0800b03c <_fini>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	bf00      	nop
 800b040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b042:	bc08      	pop	{r3}
 800b044:	469e      	mov	lr, r3
 800b046:	4770      	bx	lr
